require.config({"config": {
        "jsbuild":{"PayPal_Braintree/js/view/payment/method-renderer/ach.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'ko',\r\n        'jquery',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreeAch',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/action/select-billing-address',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/model/quote',\r\n        'mage/translate'\r\n    ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        $,\r\n        braintree,\r\n        dataCollector,\r\n        ach,\r\n        formBuilder,\r\n        messageList,\r\n        selectBillingAddress,\r\n        fullScreenLoader,\r\n        quote,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                deviceData: null,\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/ach',\r\n                achInstance: null,\r\n                routingNumber: ko.observable(\"\"),\r\n                accountNumber: ko.observable(\"\"),\r\n                accountType: ko.observable(\"checking\"),\r\n                ownershipType: ko.observable(\"personal\"),\r\n                firstName: ko.observable(\"\"),\r\n                lastName: ko.observable(\"\"),\r\n                businessName: ko.observable(\"\"),\r\n                hasAuthorization: ko.observable(false),\r\n                business: ko.observable(false), // for ownership type\r\n                personal: ko.observable(true) // for ownership type\r\n            },\r\n\r\n            clickAchBtn: function () {\r\n                if (!this.validateForm('#' + this.getCode() + '-form')) {\r\n                    return;\r\n                }\r\n\r\n                fullScreenLoader.startLoader();\r\n\r\n                var self = this;\r\n\r\n                var billingAddress = quote.billingAddress();\r\n\r\n                let regionCode;\r\n\r\n                let bankDetails = {\r\n                    routingNumber: self.routingNumber(),\r\n                    accountNumber: self.accountNumber(),\r\n                    accountType: self.accountType(),\r\n                    ownershipType: self.ownershipType(),\r\n                    billingAddress: {\r\n                        streetAddress: billingAddress.street[0],\r\n                        extendedAddress: billingAddress.street[1],\r\n                        locality: billingAddress.city,\r\n                        region: billingAddress.regionCode,\r\n                        postalCode: billingAddress.postcode,\r\n                    }\r\n                };\r\n\r\n                if (bankDetails.ownershipType === 'personal') {\r\n                    bankDetails.firstName = self.firstName();\r\n                    bankDetails.lastName = self.lastName();\r\n                } else {\r\n                    bankDetails.businessName = self.businessName();\r\n                }\r\n\r\n                var mandateText = document.getElementById('braintree-ach-mandate').textContent;\r\n\r\n                // if no region code is available, lets find one!\r\n                if (typeof billingAddress.regionCode === 'undefined') {\r\n                    $.get('/rest/V1/directory/countries/' + billingAddress.countryId).done(function (data) {\r\n                        if (typeof data.available_regions !== 'undefined') {\r\n                            for (var i = 0; i < data.available_regions.length; ++i) {\r\n                                if (data.available_regions[i].id === billingAddress.regionId) {\r\n                                    regionCode = data.available_regions[i].code;\r\n                                    bankDetails.billingAddress.region = regionCode;\r\n                                    self.tokenizeAch(bankDetails, mandateText);\r\n                                }\r\n                            }\r\n                        }\r\n                    }).fail(function() {\r\n                        fullScreenLoader.stopLoader();\r\n                    });\r\n                } else {\r\n                    self.tokenizeAch(bankDetails, mandateText);\r\n                }\r\n            },\r\n\r\n            tokenizeAch: function (bankDetails, mandateText) {\r\n                var self = this;\r\n                this.achInstance.tokenize({\r\n                    bankDetails: bankDetails,\r\n                    mandateText: mandateText\r\n                }, function (tokenizeErr, tokenizedPayload) {\r\n                    if (tokenizeErr) {\r\n                        self.setErrorMsg($t('There was an error with the provided bank details. Please check and try again.'));\r\n                        self.hasAuthorization(false);\r\n                    } else {\r\n                        fullScreenLoader.stopLoader();\r\n                        self.handleAchSuccess(tokenizedPayload);\r\n                    }\r\n                });\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function () {\r\n                return 'braintree_ach_direct_debit';\r\n            },\r\n\r\n            getStoreName: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].storeName;\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            getTitle: function() {\r\n                return 'ACH Direct Debit';\r\n            },\r\n\r\n            handleAchSuccess: function (payload) {\r\n                this.setPaymentMethodNonce(payload.nonce);\r\n                this.placeOrder();\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                var self = this;\r\n\r\n                braintree.create({\r\n                    authorization: self.getClientToken()\r\n                }, function (clientError, clientInstance) {\r\n                    if (clientError) {\r\n                        this.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                        return;\r\n                    }\r\n\r\n                    ach.create({\r\n                        client: clientInstance\r\n                    }, function (achErr, achInstance) {\r\n                        if (achErr) {\r\n                            self.setErrorMsg($t('Error initializing ACH: %1').replace('%1', achErr));\r\n                            return;\r\n                        }\r\n\r\n                        self.setAchInstance(achInstance);\r\n                    });\r\n                });\r\n\r\n                return this;\r\n            },\r\n\r\n            isAllowed: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].isAllowed;\r\n            },\r\n\r\n            changeOwnershipType: function (data, event) {\r\n                var self = this;\r\n                if (event.currentTarget.value === 'business') {\r\n                    self.business(true);\r\n                    self.personal(false);\r\n                } else {\r\n                    self.business(false);\r\n                    self.personal(true);\r\n                }\r\n            },\r\n\r\n            isBusiness: function () {\r\n                return this.business;\r\n            },\r\n\r\n            isPersonal: function () {\r\n                return this.personal;\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            setAchInstance: function (instance) {\r\n                this.achInstance = instance;\r\n            },\r\n\r\n            validateForm: function (form) {\r\n                return $(form).validation() && $(form).validation('isValid');\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/cc-form.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine(\r\n    [\r\n        'underscore',\r\n        'jquery',\r\n        'Magento_Payment/js/view/payment/cc-form',\r\n        'Magento_Checkout/js/model/quote',\r\n        'PayPal_Braintree/js/view/payment/adapter',\r\n        'mage/translate',\r\n        'PayPal_Braintree/js/validator',\r\n        'PayPal_Braintree/js/view/payment/validator-handler',\r\n        'Magento_Checkout/js/model/full-screen-loader'\r\n    ],\r\n    function (\r\n        _,\r\n        $,\r\n        Component,\r\n        quote,\r\n        braintree,\r\n        $t,\r\n        validator,\r\n        validatorManager,\r\n        fullScreenLoader\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                active: false,\r\n                braintreeClient: null,\r\n                braintreeDeviceData: null,\r\n                paymentMethodNonce: null,\r\n                lastBillingAddress: null,\r\n                validatorManager: validatorManager,\r\n                code: 'braintree',\r\n                isProcessing: false,\r\n\r\n                /**\r\n                 * Additional payment data\r\n                 *\r\n                 * {Object}\r\n                 */\r\n                additionalData: {},\r\n\r\n                /**\r\n                 * Braintree client configuration\r\n                 *\r\n                 * {Object}\r\n                 */\r\n                clientConfig: {\r\n                    dataCollector: {\r\n                        kount: true\r\n                    },\r\n\r\n                    onReady: function (context) {\r\n                        context.setupHostedFields();\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers on payment nonce receive\r\n                     * @param {Object} response\r\n                     */\r\n                    onPaymentMethodReceived: function (response) {\r\n                        this.handleNonce(response);\r\n                        this.isProcessing = false;\r\n                    },\r\n\r\n                    /**\r\n                     * Allow a new nonce to be generated\r\n                     */\r\n                    onPaymentMethodError: function() {\r\n                        this.isProcessing = false;\r\n                    },\r\n\r\n                    /**\r\n                     * Device data initialization\r\n                     * @param {String} deviceData\r\n                     */\r\n                    onDeviceDataRecieved: function (deviceData) {\r\n                        this.additionalData['device_data'] = deviceData;\r\n                    },\r\n\r\n                    /**\r\n                     * After Braintree instance initialization\r\n                     */\r\n                    onInstanceReady: function () {},\r\n\r\n                    /**\r\n                     * Triggers on any Braintree error\r\n                     * @param {Object} response\r\n                     */\r\n                    onError: function (response) {\r\n                        this.isProcessing = false;\r\n                        braintree.showError($t('Payment ' + this.getTitle() + ' can\\'t be initialized'));\r\n                        throw response.message;\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers when customer click \"Cancel\"\r\n                     */\r\n                    onCancelled: function () {\r\n                        this.paymentMethodNonce = null;\r\n                        this.isProcessing = false;\r\n                    }\r\n                },\r\n                imports: {\r\n                    onActiveChange: 'active'\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Set list of observable attributes\r\n             *\r\n             * @returns {exports.initObservable}\r\n             */\r\n            initObservable: function () {\r\n                validator.setConfig(window.checkoutConfig.payment[this.getCode()]);\r\n                this._super()\r\n                    .observe(['active']);\r\n                this.validatorManager.initialize();\r\n                this.initClientConfig();\r\n\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Get payment name\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getCode: function () {\r\n                return this.code;\r\n            },\r\n\r\n            /**\r\n             * Check if payment is active\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isActive: function () {\r\n                var active = this.getCode() === this.isChecked();\r\n\r\n                this.active(active);\r\n\r\n                return active;\r\n            },\r\n\r\n            /**\r\n             * Triggers when payment method change\r\n             * @param {Boolean} isActive\r\n             */\r\n            onActiveChange: function (isActive) {\r\n                if (!isActive) {\r\n                    return;\r\n                }\r\n\r\n                this.initBraintree();\r\n            },\r\n\r\n            /**\r\n             * Init config\r\n             */\r\n            initClientConfig: function () {\r\n                // Advanced fraud tools settings\r\n                if (this.hasFraudProtection()) {\r\n                    this.clientConfig = _.extend(this.clientConfig, this.kountConfig());\r\n                }\r\n\r\n                _.each(this.clientConfig, function (fn, name) {\r\n                    if (typeof fn === 'function') {\r\n                        this.clientConfig[name] = fn.bind(this);\r\n                    }\r\n                }, this);\r\n            },\r\n\r\n            /**\r\n             * Init Braintree configuration\r\n             */\r\n            initBraintree: function () {\r\n                var intervalId = setInterval(function () {\r\n                    // stop loader when frame will be loaded\r\n                    if ($('#braintree-hosted-field-number').length) {\r\n                        clearInterval(intervalId);\r\n                        fullScreenLoader.stopLoader(true);\r\n                    }\r\n                }, 500);\r\n\r\n                if (braintree.checkout) {\r\n                    braintree.checkout.teardown(function () {\r\n                        braintree.checkout = null;\r\n                    });\r\n                }\r\n\r\n                fullScreenLoader.startLoader();\r\n                braintree.setConfig(this.clientConfig);\r\n                braintree.setup();\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            kountConfig: function () {\r\n                var config = {\r\n                    dataCollector: {\r\n                        kount: {\r\n                            environment: this.getEnvironment()\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Device data initialization\r\n                     *\r\n                     * @param {Object} checkout\r\n                     */\r\n                    onReady: function (context) {\r\n                        this.additionalData['device_data'] = context.deviceData;\r\n                        context.setupHostedFields();\r\n                    }\r\n                };\r\n\r\n                if (this.getKountMerchantId()) {\r\n                    config.dataCollector.kount.merchantId = this.getKountMerchantId();\r\n                }\r\n\r\n                return config;\r\n            },\r\n\r\n            /**\r\n             * Get full selector name\r\n             *\r\n             * @param {String} field\r\n             * @returns {String}\r\n             */\r\n            getSelector: function (field) {\r\n                return '#' + this.getCode() + '_' + field;\r\n            },\r\n\r\n            /**\r\n             * Get list of available CC types\r\n             *\r\n             * @returns {Object}\r\n             */\r\n            getCcAvailableTypes: function () {\r\n                var availableTypes = validator.getAvailableCardTypes(),\r\n                    billingAddress = quote.billingAddress(),\r\n                    billingCountryId;\r\n\r\n                this.lastBillingAddress = quote.shippingAddress();\r\n\r\n                if (!billingAddress) {\r\n                    billingAddress = this.lastBillingAddress;\r\n                }\r\n\r\n                billingCountryId = billingAddress.countryId;\r\n\r\n                if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\r\n                    return validator.collectTypes(\r\n                        availableTypes,\r\n                        validator.getCountrySpecificCardTypes(billingCountryId)\r\n                    );\r\n                }\r\n\r\n                return availableTypes;\r\n            },\r\n\r\n            /**\r\n             * @returns {Boolean}\r\n             */\r\n            hasFraudProtection: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].hasFraudProtection;\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getEnvironment: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].environment;\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getKountMerchantId: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].kountMerchantId;\r\n            },\r\n\r\n            /**\r\n             * Get data\r\n             *\r\n             * @returns {Object}\r\n             */\r\n            getData: function () {\r\n                var data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            /**\r\n             * Set payment nonce\r\n             * @param {String} paymentMethodNonce\r\n             */\r\n            setPaymentMethodNonce: function (paymentMethodNonce) {\r\n                this.paymentMethodNonce = paymentMethodNonce;\r\n            },\r\n\r\n            /**\r\n             * Prepare data to place order\r\n             * @param {Object} data\r\n             */\r\n            handleNonce: function (data) {\r\n                var self = this;\r\n\r\n                this.setPaymentMethodNonce(data.nonce);\r\n\r\n                // place order on success validation\r\n                self.validatorManager.validate(self, function () {\r\n                    return self.placeOrder('parent');\r\n                }, function() {\r\n                    self.isProcessing = false;\r\n                    self.paymentMethodNonce = null;\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Action to place order\r\n             * @param {String} key\r\n             */\r\n            placeOrder: function (key) {\r\n                if (key) {\r\n                    return this._super();\r\n                }\r\n\r\n                if (this.isProcessing) {\r\n                    return false;\r\n                } else {\r\n                    this.isProcessing = true;\r\n                }\r\n\r\n                braintree.tokenizeHostedFields();\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * Get payment icons\r\n             * @param {String} type\r\n             * @returns {Boolean}\r\n             */\r\n            getIcons: function (type) {\r\n                return window.checkoutConfig.payment.braintree.icons.hasOwnProperty(type) ?\r\n                    window.checkoutConfig.payment.braintree.icons[type]\r\n                    : false;\r\n            },\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/hosted-fields.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/cc-form',\r\n    'PayPal_Braintree/js/validator',\r\n    'Magento_Vault/js/view/payment/vault-enabler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'mage/translate'\r\n], function ($, Component, validator, VaultEnabler, additionalValidators, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/form',\r\n            clientConfig: {\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                id: 'co-transparent-form-braintree'\r\n            },\r\n            isValidCardNumber: false,\r\n            isValidExpirationDate: false,\r\n            isValidCvvNumber: false,\r\n\r\n            onInstanceReady: function (instance) {\r\n                instance.on('validityChange', this.onValidityChange.bind(this));\r\n                instance.on('cardTypeChange', this.onCardTypeChange.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.vaultEnabler = new VaultEnabler();\r\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            this._super();\r\n\r\n            this.clientConfig.hostedFields = this.getHostedFields();\r\n            this.clientConfig.onInstanceReady = this.onInstanceReady.bind(this);\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = this._super();\r\n\r\n            this.vaultEnabler.visitAdditionalData(data);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @returns {Bool}\r\n         */\r\n        isVaultEnabled: function () {\r\n            return this.vaultEnabler.isVaultEnabled();\r\n        },\r\n\r\n        /**\r\n         * Get Braintree Hosted Fields\r\n         * @returns {Object}\r\n         */\r\n        getHostedFields: function () {\r\n            var self = this,\r\n                fields = {\r\n                    number: {\r\n                        selector: self.getSelector('cc_number'),\r\n                        placeholder: $t('4111 1111 1111 1111')\r\n                    },\r\n                    expirationDate: {\r\n                        selector: self.getSelector('expirationDate'),\r\n                        placeholder: $t('MM/YYYY')\r\n                    }\r\n                };\r\n\r\n            if (self.hasVerification()) {\r\n                fields.cvv = {\r\n                    selector: self.getSelector('cc_cid'),\r\n                    placeholder: $t('123')\r\n                };\r\n            }\r\n\r\n            return fields;\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onValidityChange: function (event) {\r\n            // Handle a change in validation or card type\r\n            if (event.emittedBy === 'number') {\r\n                this.selectedCardType(null);\r\n\r\n                if (event.cards.length === 1) {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.selectedCardType(\r\n                        validator.getMageCardType(event.cards[0].type, this.getCcAvailableTypes())\r\n                    );\r\n                    this.validateCardType();\r\n                } else {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.validateCardType();\r\n                }\r\n            }\r\n\r\n            // Other field validations\r\n            if (event.emittedBy === 'expirationDate') {\r\n                this.isValidExpirationDate = event.fields.expirationDate.isValid;\r\n            }\r\n            if (event.emittedBy === 'cvv') {\r\n                this.isValidCvvNumber = event.fields.cvv.isValid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field card type changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onCardTypeChange: function (event) {\r\n            if (event.cards.length === 1) {\r\n                this.selectedCardType(\r\n                    validator.getMageCardType(event.cards[0].type, this.getCcAvailableTypes())\r\n                );\r\n            } else {\r\n                this.selectedCardType(null);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle invalid class on selector\r\n         * @param selector\r\n         * @param state\r\n         * @returns {boolean}\r\n         */\r\n        validateField: function (selector, state) {\r\n            var $selector = $(this.getSelector(selector)),\r\n                invalidClass = 'braintree-hosted-fields-invalid';\r\n\r\n            if (state === true) {\r\n                $selector.removeClass(invalidClass);\r\n                return true;\r\n            }\r\n\r\n            $selector.addClass(invalidClass);\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate current credit card type\r\n         * @returns {Boolean}\r\n         */\r\n        validateCardType: function () {\r\n            return this.validateField(\r\n                'cc_number',\r\n                (this.isValidCardNumber)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current expiry date\r\n         * @returns {boolean}\r\n         */\r\n        validateExpirationDate: function () {\r\n            return this.validateField(\r\n                'expirationDate',\r\n                (this.isValidExpirationDate === true)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current CVV field\r\n         * @returns {boolean}\r\n         */\r\n        validateCvvNumber: function () {\r\n            var self = this;\r\n            \r\n            if (self.hasVerification() === false) {\r\n                return true;\r\n            }\r\n            \r\n            return this.validateField(\r\n                'cc_cid',\r\n                (this.isValidCvvNumber === true)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate all fields\r\n         * @returns {boolean}\r\n         */\r\n        validateFormFields: function () {\r\n            return (this.validateCardType() && this.validateExpirationDate() && this.validateCvvNumber()) === true;\r\n        },\r\n\r\n        /**\r\n         * Trigger order placing\r\n         */\r\n        placeOrderClick: function () {\r\n            if (this.validateFormFields() && additionalValidators.validate()) {\r\n                this.placeOrder();\r\n            }\r\n        },\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getVaultCode: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].ccVaultCode;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/lpm.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'ko',\r\n        'jquery',\r\n        'braintree',\r\n        'braintreeLpm',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/action/select-billing-address',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/model/quote',\r\n        'Magento_Checkout/js/model/payment/additional-validators',\r\n        'mage/url',\r\n        'mage/translate'\r\n    ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        $,\r\n        braintree,\r\n        lpm,\r\n        formBuilder,\r\n        messageList,\r\n        selectBillingAddress,\r\n        fullScreenLoader,\r\n        quote,\r\n        additionalValidators,\r\n        url,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                code: 'braintree_local_payment',\r\n                paymentMethodsAvailable: ko.observable(false),\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/lpm'\r\n            },\r\n\r\n            clickPaymentBtn: function (method) {\r\n                var self = this;\r\n\r\n                if (additionalValidators.validate()) {\r\n                    fullScreenLoader.startLoader();\r\n\r\n                    braintree.create({\r\n                        authorization: self.getClientToken()\r\n                    }, function (clientError, clientInstance) {\r\n                        if (clientError) {\r\n                            self.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                            fullScreenLoader.stopLoader();\r\n                            return;\r\n                        }\r\n\r\n                        lpm.create({\r\n                            client: clientInstance\r\n                        }, function (lpmError, lpmInstance) {\r\n                            if (lpmError) {\r\n                                self.setErrorMsg(lpmError);\r\n                                fullScreenLoader.stopLoader();\r\n                                return;\r\n                            }\r\n\r\n                            lpmInstance.startPayment({\r\n                                amount: self.getAmount(),\r\n                                currencyCode: self.getCurrencyCode(),\r\n                                email: self.getCustomerDetails().email,\r\n                                phone: self.getCustomerDetails().phone,\r\n                                givenName: self.getCustomerDetails().firstName,\r\n                                surname: self.getCustomerDetails().lastName,\r\n                                shippingAddressRequired: !quote.isVirtual(),\r\n                                address: self.getAddress(),\r\n                                paymentType: method,\r\n                                onPaymentStart: function (data, start) {\r\n                                    start();\r\n                                },\r\n                                // This is a required option, however it will apparently never be used in the current payment flow.\r\n                                // Therefore, both values are set to allow the payment flow to continute, rather than erroring out.\r\n                                fallback: {\r\n                                    url: 'N/A',\r\n                                    buttonText: 'N/A'\r\n                                }\r\n                            }, function (startPaymentError, payload) {\r\n                                fullScreenLoader.stopLoader();\r\n                                if (startPaymentError) {\r\n                                    switch (startPaymentError.code) {\r\n                                        case 'LOCAL_PAYMENT_POPUP_CLOSED':\r\n                                            self.setErrorMsg($t('Local Payment popup was closed unexpectedly.'));\r\n                                            break;\r\n                                        case 'LOCAL_PAYMENT_WINDOW_OPEN_FAILED':\r\n                                            self.setErrorMsg($t('Local Payment popup failed to open.'));\r\n                                            break;\r\n                                        case 'LOCAL_PAYMENT_WINDOW_CLOSED':\r\n                                            self.setErrorMsg($t('Local Payment popup was closed. Payment cancelled.'));\r\n                                            break;\r\n                                        default:\r\n                                            self.setErrorMsg('Error! ' + startPaymentError);\r\n                                            break;\r\n                                    }\r\n                                } else {\r\n                                    // Send the nonce to your server to create a transaction\r\n                                    self.setPaymentMethodNonce(payload.nonce);\r\n                                    self.placeOrder();\r\n                                }\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n\r\n            getAddress: function () {\r\n                var shippingAddress = quote.shippingAddress();\r\n\r\n                if (quote.isVirtual()) {\r\n                    return {\r\n                        countryCode: shippingAddress.countryId\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    streetAddress: shippingAddress.street[0],\r\n                    extendedAddress: shippingAddress.street[1],\r\n                    locality: shippingAddress.city,\r\n                    postalCode: shippingAddress.postcode,\r\n                    region: shippingAddress.region,\r\n                    countryCode: shippingAddress.countryId\r\n                }\r\n            },\r\n\r\n            getAmount: function () {\r\n                return quote.totals()['base_grand_total'].toString();\r\n            },\r\n\r\n            getBillingAddress: function () {\r\n                return quote.billingAddress();\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function () {\r\n                return this.code;\r\n            },\r\n\r\n            getCurrencyCode: function () {\r\n                return quote.totals()['base_currency_code'];\r\n            },\r\n\r\n            getCustomerDetails: function() {\r\n                var billingAddress = quote.billingAddress();\r\n                return {\r\n                    firstName: billingAddress.firstname,\r\n                    lastName: billingAddress.lastname,\r\n                    phone: billingAddress.telephone,\r\n                    email: typeof quote.guestEmail === 'string' ? quote.guestEmail : billingAddress.email\r\n                }\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            getMerchantId: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].merchantId;\r\n            },\r\n\r\n            getPaymentMethod: function(method) {\r\n                var methods = this.getPaymentMethods();\r\n\r\n                for (var i = 0; i < methods.length; i++) {\r\n                    if (methods[i].method === method) {\r\n                        return methods[i]\r\n                    }\r\n                }\r\n            },\r\n\r\n            getPaymentMethods: function() {\r\n                return window.checkoutConfig.payment[this.getCode()].allowedMethods;\r\n            },\r\n\r\n            getPaymentMarkSrc: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].paymentIcons;\r\n            },\r\n\r\n            getTitle: function() {\r\n                return window.checkoutConfig.payment[this.getCode()].title;\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n                return this;\r\n            },\r\n\r\n            isActive: function() {\r\n                var address = quote.billingAddress() || quote.shippingAddress();\r\n                var methods = this.getPaymentMethods();\r\n\r\n                for (var i = 0; i < methods.length; i++) {\r\n                    if (methods[i].countries.includes(address.countryId)) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            isValidCountryAndCurrency: function (method) {\r\n                var address = quote.billingAddress();\r\n\r\n                if (!address) {\r\n                    this.paymentMethodsAvailable(false);\r\n                    return false;\r\n                }\r\n\r\n                var countryId = address.countryId;\r\n                var quoteCurrency = quote.totals()['base_currency_code'];\r\n                var paymentMethodDetails = this.getPaymentMethod(method);\r\n\r\n                if (paymentMethodDetails.countries.includes(countryId) && quoteCurrency === 'EUR') {\r\n                    this.paymentMethodsAvailable(true);\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            validateForm: function (form) {\r\n                return $(form).validation() && $(form).validation('isValid');\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/paypal-credit.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/paypal'\r\n], function (\r\n    $,\r\n    _,\r\n    Component\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal-credit',\r\n            code: 'braintree_paypal_credit',\r\n\r\n            /**\r\n             * PayPal client configuration\r\n             * {Object}\r\n             */\r\n            clientConfig: {\r\n                offerCredit: true,\r\n                buttonId: 'braintree_paypal_credit_placeholder'\r\n            }\r\n        }\r\n    });\r\n});","PayPal_Braintree/js/view/payment/method-renderer/paypal-vault.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function ($, _, VaultComponent, globalMessageList, fullScreenLoader) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal/vault',\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * Get PayPal payer email\r\n         * @returns {String}\r\n         */\r\n        getPayerEmail: function () {\r\n            return this.details.payerEmail;\r\n        },\r\n\r\n        /**\r\n         * Get type of payment\r\n         * @returns {String}\r\n         */\r\n        getPaymentIcon: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].paymentIcon;\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        beforePlaceOrder: function () {\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            var self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            })\r\n                .done(function (response) {\r\n                    fullScreenLoader.stopLoader();\r\n                    self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\r\n                    self.placeOrder();\r\n                })\r\n                .fail(function (response) {\r\n                    var error = JSON.parse(response.responseText);\r\n\r\n                    fullScreenLoader.stopLoader();\r\n                    globalMessageList.addErrorMessage({\r\n                        message: error.message\r\n                    });\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Get payment method data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/paypal.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'braintreeCheckoutPayPalAdapter',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/step-navigator',\r\n    'Magento_Vault/js/view/payment/vault-enabler',\r\n    'Magento_Checkout/js/action/create-billing-address',\r\n    'Magento_Checkout/js/action/select-billing-address',\r\n], function (\r\n    $,\r\n    _,\r\n    Component,\r\n    Braintree,\r\n    quote,\r\n    fullScreenLoader,\r\n    additionalValidators,\r\n    stepNavigator,\r\n    VaultEnabler,\r\n    createBillingAddress,\r\n    selectBillingAddress\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal',\r\n            code: 'braintree_paypal',\r\n            active: false,\r\n            paypalInstance: null,\r\n            paymentMethodNonce: null,\r\n            grandTotalAmount: null,\r\n            isReviewRequired: false,\r\n            customerEmail: null,\r\n\r\n            /**\r\n             * Additional payment data\r\n             *\r\n             * {Object}\r\n             */\r\n            additionalData: {},\r\n\r\n            /**\r\n             * PayPal client configuration\r\n             * {Object}\r\n             */\r\n            clientConfig: {\r\n                offerCredit: false,\r\n                offerCreditOnly: false,\r\n                dataCollector: {\r\n                    paypal: true\r\n                },\r\n\r\n                buttonId: 'braintree_paypal_placeholder',\r\n\r\n                onDeviceDataRecieved: function (deviceData) {\r\n                    this.additionalData['device_data'] = deviceData;\r\n                },\r\n\r\n                /**\r\n                 * Triggers when widget is loaded\r\n                 * @param {Object} context\r\n                 */\r\n                onReady: function (context) {\r\n                    context.setupPaypal();\r\n                },\r\n\r\n                /**\r\n                 * Triggers on payment nonce receive\r\n                 * @param {Object} response\r\n                 */\r\n                onPaymentMethodReceived: function (response) {\r\n                    this.beforePlaceOrder(response);\r\n                }\r\n            },\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            this._super()\r\n                .observe(['active', 'isReviewRequired', 'customerEmail']);\r\n\r\n            window.addEventListener('hashchange', function (e) {\r\n                var methodCode = quote.paymentMethod();\r\n\r\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                    if (e.newURL.indexOf('payment') > 0 && self.grandTotalAmount !== null) {\r\n                        self.reInitPayPal();\r\n                    }\r\n                }\r\n            });\r\n\r\n            quote.paymentMethod.subscribe(function (value) {\r\n                var methodCode = value;\r\n\r\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                    self.reInitPayPal();\r\n                }\r\n            });\r\n\r\n            this.vaultEnabler = new VaultEnabler();\r\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n            this.vaultEnabler.isActivePaymentTokenEnabler.subscribe(function () {\r\n                self.onVaultPaymentTokenEnablerChange();\r\n            });\r\n\r\n            this.grandTotalAmount = quote.totals()['base_grand_total'];\r\n\r\n            quote.totals.subscribe(function () {\r\n                if (self.grandTotalAmount !== quote.totals()['base_grand_total']) {\r\n                    self.grandTotalAmount = quote.totals()['base_grand_total'];\r\n                    var methodCode = quote.paymentMethod();\r\n\r\n                    if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                        self.reInitPayPal();\r\n                    }\r\n                }\r\n            });\r\n\r\n            // for each component initialization need update property\r\n            this.isReviewRequired(false);\r\n            this.initClientConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get payment name\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Get payment title\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTitle: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].title;\r\n        },\r\n\r\n        /**\r\n         * Check if payment is active\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function () {\r\n            var active = this.getCode() === this.isChecked();\r\n\r\n            this.active(active);\r\n\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Triggers when payment method change\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n                return;\r\n            }\r\n\r\n            // need always re-init Braintree with PayPal configuration\r\n            this.reInitPayPal();\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\r\n\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set payment nonce\r\n         * @param {String} paymentMethodNonce\r\n         */\r\n        setPaymentMethodNonce: function (paymentMethodNonce) {\r\n            this.paymentMethodNonce = paymentMethodNonce;\r\n        },\r\n\r\n        /**\r\n         * Update quote billing address\r\n         * @param {Object}customer\r\n         * @param {Object}address\r\n         */\r\n        setBillingAddress: function (customer, address) {\r\n            var billingAddress = {\r\n                street: [address.line1],\r\n                city: address.city,\r\n                postcode: address.postalCode,\r\n                countryId: address.countryCode,\r\n                email: customer.email,\r\n                firstname: customer.firstName,\r\n                lastname: customer.lastName,\r\n                telephone: typeof customer.phone !== 'undefined' ? customer.phone : '00000000000'\r\n            };\r\n\r\n            billingAddress['region_code'] = typeof address.state === 'string' ? address.state : '';\r\n            billingAddress = createBillingAddress(billingAddress);\r\n            quote.billingAddress(billingAddress);\r\n        },\r\n\r\n        /**\r\n         * Prepare data to place order\r\n         * @param {Object} data\r\n         */\r\n        beforePlaceOrder: function (data) {\r\n            this.setPaymentMethodNonce(data.nonce);\r\n\r\n            if (quote.shippingAddress() === quote.billingAddress()) {\r\n                selectBillingAddress(quote.shippingAddress());\r\n            } else {\r\n                selectBillingAddress(quote.billingAddress());\r\n            }\r\n\r\n            this.customerEmail(data.details.email);\r\n            this.placeOrder();\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth Flow\r\n         */\r\n        reInitPayPal: function () {\r\n            this.disableButton();\r\n            this.clientConfig.paypal.amount = parseFloat(this.grandTotalAmount).toFixed(2);\r\n\r\n            if (!quote.isVirtual()) {\r\n                this.clientConfig.paypal.enableShippingAddress = true;\r\n                this.clientConfig.paypal.shippingAddressEditable = false;\r\n                this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n\r\n            Braintree.setConfig(this.clientConfig);\r\n\r\n            if (Braintree.getPayPalInstance()) {\r\n                Braintree.getPayPalInstance().teardown(function () {\r\n                    Braintree.setup();\r\n                }.bind(this));\r\n                Braintree.setPayPalInstance(null);\r\n            } else {\r\n                Braintree.setup();\r\n                this.enableButton();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get locale\r\n         * @returns {String}\r\n         */\r\n        getLocale: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].locale;\r\n        },\r\n\r\n        /**\r\n         * Get configuration for PayPal\r\n         * @returns {Object}\r\n         */\r\n        getPayPalConfig: function () {\r\n            var totals = quote.totals(),\r\n                config = {},\r\n                isActiveVaultEnabler = this.isActiveVault();\r\n\r\n            config.paypal = {\r\n                flow: isActiveVaultEnabler ? 'vault' : 'checkout',\r\n                amount: parseFloat(this.grandTotalAmount).toFixed(2),\r\n                currency: totals['base_currency_code'],\r\n                locale: this.getLocale(),\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 */\r\n                onError: function () {\r\n                    this.paymentMethodNonce = null;\r\n                },\r\n\r\n                /**\r\n                 * Triggers if browser doesn't support PayPal Checkout\r\n                 */\r\n                onUnsupported: function () {\r\n                    this.paymentMethodNonce = null;\r\n                }\r\n            };\r\n\r\n            if (!quote.isVirtual()) {\r\n                config.paypal.enableShippingAddress = true;\r\n                config.paypal.shippingAddressEditable = false;\r\n                config.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n\r\n            if (this.getMerchantName()) {\r\n                config.paypal.displayName = this.getMerchantName();\r\n            }\r\n\r\n            return config;\r\n        },\r\n\r\n        /**\r\n         * Get shipping address\r\n         * @returns {Object}\r\n         */\r\n        getShippingAddress: function () {\r\n            var address = quote.shippingAddress();\r\n\r\n            return {\r\n                recipientName: address.firstname + ' ' + address.lastname,\r\n                line1: address.street[0],\r\n                line2: typeof address.street[2] === 'undefined' ? address.street[1] : address.street[1] + ' ' + address.street[2],\r\n                city: address.city,\r\n                countryCode: address.countryId,\r\n                postalCode: address.postcode,\r\n                state: address.region\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Get merchant name\r\n         * @returns {String}\r\n         */\r\n        getMerchantName: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].merchantName;\r\n        },\r\n\r\n        /**\r\n         * Get data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = {\r\n                'method': this.getCode(),\r\n                'additional_data': {\r\n                    'payment_method_nonce': this.paymentMethodNonce\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            this.vaultEnabler.visitAdditionalData(data);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Returns payment acceptance mark image path\r\n         * @returns {String}\r\n         */\r\n        getPaymentAcceptanceMarkSrc: function () {\r\n\r\n            return window.checkoutConfig.payment[this.getCode()].paymentAcceptanceMarkSrc;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getVaultCode: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].vaultCode;\r\n        },\r\n\r\n        /**\r\n         * Check if need to skip order review\r\n         * @returns {Boolean}\r\n         */\r\n        isSkipOrderReview: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].skipOrderReview;\r\n        },\r\n\r\n        /**\r\n         * Checks if vault is active\r\n         * @returns {Boolean}\r\n         */\r\n        isActiveVault: function () {\r\n            return this.vaultEnabler.isVaultEnabled() && this.vaultEnabler.isActivePaymentTokenEnabler();\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth flow to use Vault\r\n         */\r\n        onVaultPaymentTokenEnablerChange: function () {\r\n            this.clientConfig.paypal.singleUse = !this.isActiveVault();\r\n            this.reInitPayPal();\r\n        },\r\n\r\n        /**\r\n         * Disable submit button\r\n         */\r\n        disableButton: function () {\r\n            // stop any previous shown loaders\r\n            fullScreenLoader.stopLoader(true);\r\n            fullScreenLoader.startLoader();\r\n            $('[data-button=\"place\"]').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Enable submit button\r\n         */\r\n        enableButton: function () {\r\n            $('[data-button=\"place\"]').removeAttr('disabled');\r\n            fullScreenLoader.stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Triggers when customer click \"Continue to PayPal\" button\r\n         */\r\n        payWithPayPal: function () {\r\n            if (additionalValidators.validate()) {\r\n                Braintree.checkout.paypal.initAuthFlow();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get button id\r\n         * @returns {String}\r\n         */\r\n        getButtonId: function () {\r\n            return this.clientConfig.buttonId;\r\n        }\r\n    });\r\n});\r\n\r\n","PayPal_Braintree/js/view/payment/method-renderer/vault.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'PayPal_Braintree/js/view/payment/adapter',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/validator-handler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'braintree',\r\n    'braintreeHostedFields',\r\n    'mage/url'\r\n], function (\r\n    ko,\r\n    $,\r\n    VaultComponent,\r\n    Braintree,\r\n    globalMessageList,\r\n    validatorManager,\r\n    additionalValidators,\r\n    fullScreenLoader,\r\n    client,\r\n    hostedFields,\r\n    url\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            active: false,\r\n            hostedFieldsInstance: null,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            modules: {\r\n                hostedFields: '${ $.parentName }.braintree'\r\n            },\r\n            template: 'PayPal_Braintree/payment/cc/vault',\r\n            updatePaymentUrl: url.build('braintree/payment/updatepaymentmethod'),\r\n            vaultedCVV: ko.observable(\"\"),\r\n            validatorManager: validatorManager,\r\n            isValidCvv: false,\r\n            onInstanceReady: function (instance) {\r\n                instance.on('validityChange', this.onValidityChange.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Event fired by Braintree SDK whenever input value length matches the validation length.\r\n         * In the case of a CVV, this is 3, or 4 for AMEX.\r\n         * @param event\r\n         */\r\n        onValidityChange: function (event) {\r\n            if (event.emittedBy === 'cvv') {\r\n                this.isValidCvv = event.fields.cvv.isValid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['active']);\r\n            this.validatorManager.initialize();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is payment option active?\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function () {\r\n            var active = this.getId() === this.isChecked();\r\n            this.active(active);\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Fired whenever a payment option is changed.\r\n         * @param isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            var self = this;\r\n\r\n            if (!isActive) {\r\n                return;\r\n            }\r\n\r\n            if (self.showCvvVerify()) {\r\n                if (self.hostedFieldsInstance) {\r\n                    self.hostedFieldsInstance.teardown(function (teardownError) {\r\n                        if (teardownError) {\r\n                            globalMessageList.addErrorMessage({\r\n                                message: teardownError.message\r\n                            });\r\n                        }\r\n                        self.hostedFieldsInstance = null;\r\n                        self.initHostedCvvField();\r\n                    });\r\n                    return;\r\n                }\r\n                self.initHostedCvvField();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize the CVV input field with the Braintree Hosted Fields SDK.\r\n         */\r\n        initHostedCvvField: function () {\r\n            var self = this;\r\n            client.create({\r\n                authorization: Braintree.getClientToken()\r\n            }, function (clientError, clientInstance) {\r\n                if (clientError) {\r\n                    globalMessageList.addErrorMessage({\r\n                        message: clientError.message\r\n                    });\r\n                }\r\n                hostedFields.create({\r\n                    client: clientInstance,\r\n                    fields: {\r\n                        cvv: {\r\n                            selector: '#' + self.getId() + '_cid',\r\n                            placeholder: '123'\r\n                        }\r\n                    }\r\n                }, function (hostedError, hostedFieldsInstance) {\r\n                    if (hostedError) {\r\n                        globalMessageList.addErrorMessage({\r\n                            message: hostedError.message\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    self.hostedFieldsInstance = hostedFieldsInstance;\r\n                    self.onInstanceReady(self.hostedFieldsInstance);\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return the payment method code.\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return 'braintree_cc_vault';\r\n        },\r\n\r\n        /**\r\n         * Get last 4 digits of card\r\n         * @returns {String}\r\n         */\r\n        getMaskedCard: function () {\r\n            return this.details.maskedCC;\r\n        },\r\n\r\n        /**\r\n         * Get expiration date\r\n         * @returns {String}\r\n         */\r\n        getExpirationDate: function () {\r\n            return this.details.expirationDate;\r\n        },\r\n\r\n        /**\r\n         * Get card type\r\n         * @returns {String}\r\n         */\r\n        getCardType: function () {\r\n            return this.details.type;\r\n        },\r\n\r\n        /**\r\n         * Get show CVV Field\r\n         * @returns {Boolean}\r\n         */\r\n        showCvvVerify: function () {\r\n            return window.checkoutConfig.payment[this.code].cvvVerify;\r\n        },\r\n\r\n        /**\r\n         * Show or hide the error message.\r\n         * @param selector\r\n         * @param state\r\n         * @returns {boolean}\r\n         */\r\n        validateCvv: function (selector, state) {\r\n            var $selector = $(selector),\r\n                invalidClass = 'braintree-hosted-fields-invalid';\r\n\r\n            if (state === true) {\r\n                $selector.removeClass(invalidClass);\r\n                return true;\r\n            }\r\n\r\n            $selector.addClass(invalidClass);\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            var self = this;\r\n\r\n            if (self.showCvvVerify()) {\r\n                if (!self.validateCvv('#' + self.getId() + '_cid', self.isValidCvv) || !additionalValidators.validate()) {\r\n                    return;\r\n                }\r\n            } else {\r\n                if (!additionalValidators.validate()) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            fullScreenLoader.startLoader();\r\n\r\n            if (self.showCvvVerify() && typeof self.hostedFieldsInstance !== 'undefined') {\r\n                self.hostedFieldsInstance.tokenize({}, function (error, payload) {\r\n                    if (error) {\r\n                        fullScreenLoader.stopLoader();\r\n                        globalMessageList.addErrorMessage({\r\n                            message: error.message\r\n                        });\r\n                        return;\r\n                    }\r\n                    $.getJSON(\r\n                        self.updatePaymentUrl,\r\n                        {\r\n                            'nonce': payload.nonce,\r\n                            'public_hash': self.publicHash\r\n                        }\r\n                    ).done(function (response) {\r\n                        if (response.success === false) {\r\n                            fullScreenLoader.stopLoader();\r\n                            globalMessageList.addErrorMessage({\r\n                                message: 'CVV verification failed.'\r\n                            });\r\n                            return;\r\n                        }\r\n                        self.getPaymentMethodNonce();\r\n                    })\r\n                });\r\n            } else {\r\n                self.getPaymentMethodNonce();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            var self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash,\r\n                'cvv': self.vaultedCVV()\r\n            }).done(function (response) {\r\n                fullScreenLoader.stopLoader();\r\n                self.hostedFields(function (formComponent) {\r\n                    formComponent.setPaymentMethodNonce(response.paymentMethodNonce);\r\n                    formComponent.additionalData['public_hash'] = self.publicHash;\r\n                    formComponent.code = self.code;\r\n                    if (self.vaultedCVV()) {\r\n                        formComponent.additionalData['cvv'] = self.vaultedCVV();\r\n                    }\r\n\r\n                    self.validatorManager.validate(formComponent, function () {\r\n                        fullScreenLoader.stopLoader();\r\n                        return formComponent.placeOrder('parent');\r\n                    }, function() {\r\n                        // No teardown actions required.\r\n                        fullScreenLoader.stopLoader();\r\n                        formComponent.setPaymentMethodNonce(null);\r\n                    });\r\n\r\n                });\r\n            }).fail(function (response) {\r\n                var error = JSON.parse(response.responseText);\r\n\r\n                fullScreenLoader.stopLoader();\r\n                globalMessageList.addErrorMessage({\r\n                    message: error.message\r\n                });\r\n            });\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/venmo.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreeVenmo',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'mage/translate'\r\n    ],\r\n    function (\r\n        Component,\r\n        braintree,\r\n        dataCollector,\r\n        venmo,\r\n        formBuilder,\r\n        messageList,\r\n        fullScreenLoader,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                deviceData: null,\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/venmo',\r\n                venmoInstance: null\r\n            },\r\n\r\n            clickVenmoBtn: function () {\r\n                var self = this;\r\n\r\n                if (!this.venmoInstance) {\r\n                    this.setErrorMsg($t('Venmo not initialized, please try reloading.'));\r\n                    return;\r\n                }\r\n\r\n                this.venmoInstance.tokenize(function (tokenizeErr, payload) {\r\n                    if (tokenizeErr) {\r\n                        if (tokenizeErr.code === 'VENMO_CANCELED') {\r\n                            self.setErrorMsg($t('Venmo app is not available or the payment flow was cancelled.'));\r\n                        } else if (tokenizeErr.code === 'VENMO_APP_CANCELED') {\r\n                            self.setErrorMsg($t('Venmo payment flow cancelled.'));\r\n                        } else {\r\n                            self.setErrorMsg(tokenizeErr.message);\r\n                        }\r\n                    } else {\r\n                        self.handleVenmoSuccess(payload);\r\n                    }\r\n                });\r\n            },\r\n\r\n            collectDeviceData: function (clientInstance, callback) {\r\n                var self = this;\r\n                dataCollector.create({\r\n                    client: clientInstance,\r\n                    paypal: true\r\n                }, function (dataCollectorErr, dataCollectorInstance) {\r\n                    if (dataCollectorErr) {\r\n                        return;\r\n                    }\r\n                    self.deviceData = dataCollectorInstance.deviceData;\r\n                    callback();\r\n                });\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function() {\r\n                return 'braintree_venmo';\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                        'device_data': this.deviceData\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            getPaymentMarkSrc: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\r\n            },\r\n\r\n            getTitle: function() {\r\n                return 'Venmo';\r\n            },\r\n\r\n            handleVenmoSuccess: function (payload) {\r\n                this.setPaymentMethodNonce(payload.nonce);\r\n                this.placeOrder();\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                var self = this;\r\n\r\n                braintree.create({\r\n                    authorization: self.getClientToken()\r\n                }, function (clientError, clientInstance) {\r\n                    if (clientError) {\r\n                        this.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                        return;\r\n                    }\r\n\r\n                    // Collect device data\r\n                    self.collectDeviceData(clientInstance, function () {\r\n                        // callback from collectDeviceData\r\n                        venmo.create({\r\n                            client: clientInstance,\r\n                            allowNewBrowserTab: false\r\n                        }, function (venmoErr, venmoInstance) {\r\n                            if (!venmoInstance.isBrowserSupported()) {\r\n                                return;\r\n                            }\r\n\r\n                            if (venmoErr) {\r\n                                self.setErrorMsg($t('Error initializing Venmo: %1').replace('%1', venmoErr));\r\n                                return;\r\n                            }\r\n\r\n                            self.setVenmoInstance(venmoInstance);\r\n                        });\r\n                    });\r\n                });\r\n\r\n                return this;\r\n            },\r\n\r\n            isAllowed: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].isAllowed;\r\n            },\r\n\r\n            isBrowserSupported: function () {\r\n                return venmo.isBrowserSupported();\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            setVenmoInstance: function (instance) {\r\n                this.venmoInstance = instance;\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/hosted-fields.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/hosted-fields',\r\n    'PayPal_Braintree/js/validator',\r\n    'Magento_Ui/js/model/messageList',\r\n    'mage/translate',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/action/set-payment-information',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'PayPal_Braintree/js/view/payment/adapter'\r\n], function (\r\n    $,\r\n    Component,\r\n    validator,\r\n    messageList,\r\n    $t,\r\n    fullScreenLoader,\r\n    setPaymentInformationAction,\r\n    additionalValidators,\r\n    braintree\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/multishipping/form'\r\n        },\r\n\r\n        /**\r\n         * Get list of available CC types\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getCcAvailableTypes: function () {\r\n            var availableTypes = validator.getAvailableCardTypes(),\r\n                billingCountryId;\r\n\r\n            billingCountryId = $('#multishipping_billing_country_id').val();\r\n\r\n            if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\r\n                return validator.collectTypes(\r\n                    availableTypes, validator.getCountrySpecificCardTypes(billingCountryId)\r\n                );\r\n            }\r\n\r\n            return availableTypes;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        handleNonce: function (data) {\r\n            var self = this;\r\n            this.setPaymentMethodNonce(data.nonce);\r\n\r\n            // place order on success validation\r\n            self.validatorManager.validate(self, function () {\r\n                return self.setPaymentInformation();\r\n            }, function() {\r\n                self.isProcessing = false;\r\n                self.paymentMethodNonce = null;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        placeOrder: function () {\r\n            var self = this;\r\n\r\n            if (this.isProcessing) {\r\n                return false;\r\n            } else {\r\n                this.isProcessing = true;\r\n            }\r\n\r\n            braintree.tokenizeHostedFields();\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        setPaymentInformation: function () {\r\n            if (additionalValidators.validate()) {\r\n                fullScreenLoader.startLoader();\r\n                $.when(\r\n                    setPaymentInformationAction(\r\n                        this.messageContainer,\r\n                        this.getData()\r\n                    )\r\n                ).done(this.done.bind(this))\r\n                    .fail(this.fail.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        fail: function () {\r\n            fullScreenLoader.stopLoader();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        done: function () {\r\n            fullScreenLoader.stopLoader();\r\n            $('#multishipping-billing-form').submit();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/paypal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'braintreeCheckoutPayPalAdapter',\r\n    'Magento_Checkout/js/model/quote',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/paypal',\r\n    'Magento_Checkout/js/action/set-payment-information',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'mage/translate'\r\n], function (\r\n    $,\r\n    _,\r\n    Braintree,\r\n    quote,\r\n    Component,\r\n    setPaymentInformationAction,\r\n    additionalValidators,\r\n    fullScreenLoader,\r\n    $t\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/multishipping/paypal',\r\n            submitButtonSelector: '[id=\"parent-payment-continue\"]',\r\n            reviewButtonHtml: ''\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        initObservable: function () {\r\n            this.reviewButtonHtml = $(this.submitButtonSelector).html();\r\n            return this._super();\r\n        },\r\n\r\n        initClientConfig: function () {\r\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\r\n            this.clientConfig.paypal.enableShippingAddress = false;\r\n\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n            this.clientConfig.buttonId = 'payment-continue';\r\n\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            this.updateSubmitButtonHtml(isActive);\r\n            this._super(isActive);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        beforePlaceOrder: function (data) {\r\n            this._super(data);\r\n            this.updateSubmitButtonTitle(true);\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth Flow\r\n         */\r\n        reInitPayPal: function () {\r\n            this.disableButton();\r\n            this.clientConfig.paypal.amount = parseFloat(this.grandTotalAmount).toFixed(2);\r\n\r\n            if (!quote.isVirtual()) {\r\n                this.clientConfig.paypal.enableShippingAddress = false;\r\n                this.clientConfig.paypal.shippingAddressEditable = false;\r\n            }\r\n\r\n            Braintree.setConfig(this.clientConfig);\r\n\r\n            if (Braintree.getPayPalInstance()) {\r\n                Braintree.getPayPalInstance().teardown(function () {\r\n                    Braintree.setup();\r\n                }.bind(this));\r\n                Braintree.setPayPalInstance(null);\r\n            } else {\r\n                Braintree.setup();\r\n                this.enableButton();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get configuration for PayPal\r\n         * @returns {Object}\r\n         */\r\n        getPayPalConfig: function () {\r\n            var totals = quote.totals(),\r\n                config = {},\r\n                isActiveVaultEnabler = this.isActiveVault();\r\n\r\n            config.paypal = {\r\n                flow: isActiveVaultEnabler ? 'vault' : 'checkout',\r\n                amount: parseFloat(this.grandTotalAmount).toFixed(2),\r\n                currency: totals['base_currency_code'],\r\n                locale: this.getLocale(),\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 */\r\n                onError: function () {\r\n                    this.paymentMethodNonce = null;\r\n                },\r\n\r\n                /**\r\n                 * Triggers if browser doesn't support PayPal Checkout\r\n                 */\r\n                onUnsupported: function () {\r\n                    this.paymentMethodNonce = null;\r\n                }\r\n            };\r\n\r\n            if (!quote.isVirtual()) {\r\n                config.paypal.enableShippingAddress = false;\r\n                config.paypal.shippingAddressEditable = false;\r\n            }\r\n\r\n            if (this.getMerchantName()) {\r\n                config.paypal.displayName = this.getMerchantName();\r\n            }\r\n\r\n            return config;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        getData: function () {\r\n            var data = this._super();\r\n\r\n            data['additional_data']['is_active_payment_token_enabler'] = true;\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        isActiveVault: function () {\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Skipping order review step on checkout with multiple addresses is not allowed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isSkipOrderReview: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Checks if payment method nonce is already received.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isPaymentMethodNonceReceived: function () {\r\n            return this.paymentMethodNonce !== null;\r\n        },\r\n\r\n        /**\r\n         * Update submit button on multi-addresses checkout billing form.\r\n         *\r\n         * @param {Boolean} isActive\r\n         */\r\n        updateSubmitButtonHtml: function (isActive) {\r\n            if (this.isPaymentMethodNonceReceived() || !isActive) {\r\n                $(this.submitButtonSelector).html(this.reviewButtonHtml);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        placeOrder: function () {\r\n            if (!this.isPaymentMethodNonceReceived()) {\r\n                this.payWithPayPal();\r\n            } else {\r\n                fullScreenLoader.startLoader();\r\n\r\n                $.when(\r\n                    setPaymentInformationAction(\r\n                        this.messageContainer,\r\n                        this.getData()\r\n                    )\r\n                ).done(this.done.bind(this))\r\n                    .fail(this.fail.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        fail: function () {\r\n            fullScreenLoader.stopLoader();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        done: function () {\r\n            fullScreenLoader.stopLoader();\r\n            $('#multishipping-billing-form').submit();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","requirejs/domReady.js":"/**\r\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/domReady for details\r\n */\r\n/*jslint */\r\n/*global require: false, define: false, requirejs: false,\r\n  window: false, clearInterval: false, document: false,\r\n  self: false, setInterval: false */\r\n\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var isTop, testDiv, scrollIntervalId,\r\n        isBrowser = typeof window !== \"undefined\" && window.document,\r\n        isPageLoaded = !isBrowser,\r\n        doc = isBrowser ? document : null,\r\n        readyCalls = [];\r\n\r\n    function runCallbacks(callbacks) {\r\n        var i;\r\n        for (i = 0; i < callbacks.length; i += 1) {\r\n            callbacks[i](doc);\r\n        }\r\n    }\r\n\r\n    function callReady() {\r\n        var callbacks = readyCalls;\r\n\r\n        if (isPageLoaded) {\r\n            //Call the DOM ready callbacks\r\n            if (callbacks.length) {\r\n                readyCalls = [];\r\n                runCallbacks(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the page as loaded.\r\n     */\r\n    function pageLoaded() {\r\n        if (!isPageLoaded) {\r\n            isPageLoaded = true;\r\n            if (scrollIntervalId) {\r\n                clearInterval(scrollIntervalId);\r\n            }\r\n\r\n            callReady();\r\n        }\r\n    }\r\n\r\n    if (isBrowser) {\r\n        if (document.addEventListener) {\r\n            //Standards. Hooray! Assumption here that if standards based,\r\n            //it knows about DOMContentLoaded.\r\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\r\n            window.addEventListener(\"load\", pageLoaded, false);\r\n        } else if (window.attachEvent) {\r\n            window.attachEvent(\"onload\", pageLoaded);\r\n\r\n            testDiv = document.createElement('div');\r\n            try {\r\n                isTop = window.frameElement === null;\r\n            } catch (e) {}\r\n\r\n            //DOMContentLoaded approximation that uses a doScroll, as found by\r\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\r\n            //but modified by other contributors, including jdalton\r\n            if (testDiv.doScroll && isTop && window.external) {\r\n                scrollIntervalId = setInterval(function () {\r\n                    try {\r\n                        testDiv.doScroll();\r\n                        pageLoaded();\r\n                    } catch (e) {}\r\n                }, 30);\r\n            }\r\n        }\r\n\r\n        //Check if document is no longer loading, and if so, just trigger page load\r\n        //listeners. Latest webkit browsers also use \"interactive\", and\r\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\r\n        //entering \"interactive\" or \"complete\". More details:\r\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\r\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\r\n        //Hmm, this is more complicated on further use, see \"firing too early\"\r\n        //bug: https://github.com/requirejs/domReady/issues/1\r\n        //so removing the || document.readyState === \"interactive\" test.\r\n        //There is still a window.onload binding that should get fired if\r\n        //DOMContentLoaded is missed.\r\n        if (document.readyState !== \"loading\") {\r\n            // Handle it asynchronously to allow scripts the opportunity to delay ready\r\n            setTimeout(pageLoaded);\r\n        }\r\n    }\r\n\r\n    /** START OF PUBLIC API **/\r\n\r\n    /**\r\n     * Registers a callback for DOM ready. If DOM is already ready, the\r\n     * callback is called immediately.\r\n     * @param {Function} callback\r\n     */\r\n    function domReady(callback) {\r\n        if (isPageLoaded) {\r\n            callback(doc);\r\n        } else {\r\n            readyCalls.push(callback);\r\n        }\r\n        return domReady;\r\n    }\r\n\r\n    domReady.version = '2.0.1';\r\n\r\n    /**\r\n     * Loader Plugin API method\r\n     */\r\n    domReady.load = function (name, req, onLoad, config) {\r\n        if (config.isBuild) {\r\n            onLoad(null);\r\n        } else {\r\n            domReady(onLoad);\r\n        }\r\n    };\r\n\r\n    /** END OF PUBLIC API **/\r\n\r\n    return domReady;\r\n});\r\n","requirejs/text.js":"/**\r\n * @license RequireJS text 2.0.12 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/text for details\r\n */\r\n/*jslint regexp: true */\r\n/*global require, XMLHttpRequest, ActiveXObject,\r\n  define, window, process, Packages,\r\n  java, location, Components, FileUtils */\r\n\r\ndefine(['module'], function (module) {\r\n    'use strict';\r\n\r\n    var text, fs, Cc, Ci, xpcIsWindows,\r\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\r\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        hasLocation = typeof location !== 'undefined' && location.href,\r\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\r\n        defaultHostName = hasLocation && location.hostname,\r\n        defaultPort = hasLocation && (location.port || undefined),\r\n        buildMap = {},\r\n        masterConfig = (module.config && module.config()) || {};\r\n\r\n    text = {\r\n        version: '2.0.12',\r\n\r\n        strip: function (content) {\r\n            //Strips <?xml ...?> declarations so that external SVG and XML\r\n            //documents can be added to a document without worry. Also, if the string\r\n            //is an HTML document, only the part inside the body tag is returned.\r\n            if (content) {\r\n                content = content.replace(xmlRegExp, \"\");\r\n                var matches = content.match(bodyRegExp);\r\n                if (matches) {\r\n                    content = matches[1];\r\n                }\r\n            } else {\r\n                content = \"\";\r\n            }\r\n            return content;\r\n        },\r\n\r\n        jsEscape: function (content) {\r\n            return content.replace(/(['\\\\])/g, '\\\\$1')\r\n                .replace(/[\\f]/g, \"\\\\f\")\r\n                .replace(/[\\b]/g, \"\\\\b\")\r\n                .replace(/[\\n]/g, \"\\\\n\")\r\n                .replace(/[\\t]/g, \"\\\\t\")\r\n                .replace(/[\\r]/g, \"\\\\r\")\r\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\r\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\r\n        },\r\n\r\n        createXhr: masterConfig.createXhr || function () {\r\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\r\n            var xhr, i, progId;\r\n            if (typeof XMLHttpRequest !== \"undefined\") {\r\n                return new XMLHttpRequest();\r\n            } else if (typeof ActiveXObject !== \"undefined\") {\r\n                for (i = 0; i < 3; i += 1) {\r\n                    progId = progIds[i];\r\n                    try {\r\n                        xhr = new ActiveXObject(progId);\r\n                    } catch (e) {}\r\n\r\n                    if (xhr) {\r\n                        progIds = [progId];  // so faster next time\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return xhr;\r\n        },\r\n\r\n        /**\r\n         * Parses a resource name into its component parts. Resource names\r\n         * look like: module/name.ext!strip, where the !strip part is\r\n         * optional.\r\n         * @param {String} name the resource name\r\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\r\n         * where strip is a boolean.\r\n         */\r\n        parseName: function (name) {\r\n            var modName, ext, temp,\r\n                strip = false,\r\n                index = name.indexOf(\".\"),\r\n                isRelative = name.indexOf('./') === 0 ||\r\n                             name.indexOf('../') === 0;\r\n\r\n            if (index !== -1 && (!isRelative || index > 1)) {\r\n                modName = name.substring(0, index);\r\n                ext = name.substring(index + 1, name.length);\r\n            } else {\r\n                modName = name;\r\n            }\r\n\r\n            temp = ext || modName;\r\n            index = temp.indexOf(\"!\");\r\n            if (index !== -1) {\r\n                //Pull off the strip arg.\r\n                strip = temp.substring(index + 1) === \"strip\";\r\n                temp = temp.substring(0, index);\r\n                if (ext) {\r\n                    ext = temp;\r\n                } else {\r\n                    modName = temp;\r\n                }\r\n            }\r\n\r\n            return {\r\n                moduleName: modName,\r\n                ext: ext,\r\n                strip: strip\r\n            };\r\n        },\r\n\r\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\r\n\r\n        /**\r\n         * Is an URL on another domain. Only works for browser use, returns\r\n         * false in non-browser environments. Only used to know if an\r\n         * optimized .js version of a text resource should be loaded\r\n         * instead.\r\n         * @param {String} url\r\n         * @returns Boolean\r\n         */\r\n        useXhr: function (url, protocol, hostname, port) {\r\n            var uProtocol, uHostName, uPort,\r\n                match = text.xdRegExp.exec(url);\r\n            if (!match) {\r\n                return true;\r\n            }\r\n            uProtocol = match[2];\r\n            uHostName = match[3];\r\n\r\n            uHostName = uHostName.split(':');\r\n            uPort = uHostName[1];\r\n            uHostName = uHostName[0];\r\n\r\n            return (!uProtocol || uProtocol === protocol) &&\r\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\r\n                   ((!uPort && !uHostName) || uPort === port);\r\n        },\r\n\r\n        finishLoad: function (name, strip, content, onLoad) {\r\n            content = strip ? text.strip(content) : content;\r\n            if (masterConfig.isBuild) {\r\n                buildMap[name] = content;\r\n            }\r\n            onLoad(content);\r\n        },\r\n\r\n        load: function (name, req, onLoad, config) {\r\n            //Name has format: some.module.filext!strip\r\n            //The strip part is optional.\r\n            //if strip is present, then that means only get the string contents\r\n            //inside a body tag in an HTML string. For XML/SVG content it means\r\n            //removing the <?xml ...?> declarations so the content can be inserted\r\n            //into the current doc without problems.\r\n\r\n            // Do not bother with the work if a build and text will\r\n            // not be inlined.\r\n            if (config && config.isBuild && !config.inlineText) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            masterConfig.isBuild = config && config.isBuild;\r\n\r\n            var parsed = text.parseName(name),\r\n                nonStripName = parsed.moduleName +\r\n                    (parsed.ext ? '.' + parsed.ext : ''),\r\n                url = req.toUrl(nonStripName),\r\n                useXhr = (masterConfig.useXhr) ||\r\n                         text.useXhr;\r\n\r\n            // Do not load if it is an empty: url\r\n            if (url.indexOf('empty:') === 0) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            //Load the text. Use XHR if possible and in a browser.\r\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\r\n                text.get(url, function (content) {\r\n                    text.finishLoad(name, parsed.strip, content, onLoad);\r\n                }, function (err) {\r\n                    if (onLoad.error) {\r\n                        onLoad.error(err);\r\n                    }\r\n                });\r\n            } else {\r\n                //Need to fetch the resource across domains. Assume\r\n                //the resource has been optimized into a JS module. Fetch\r\n                //by the module name + extension, but do not include the\r\n                //!strip part to avoid file system issues.\r\n                req([nonStripName], function (content) {\r\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\r\n                                    parsed.strip, content, onLoad);\r\n                });\r\n            }\r\n        },\r\n\r\n        write: function (pluginName, moduleName, write, config) {\r\n            if (buildMap.hasOwnProperty(moduleName)) {\r\n                var content = text.jsEscape(buildMap[moduleName]);\r\n                write.asModule(pluginName + \"!\" + moduleName,\r\n                               \"define(function () { return '\" +\r\n                                   content +\r\n                               \"';});\\n\");\r\n            }\r\n        },\r\n\r\n        writeFile: function (pluginName, moduleName, req, write, config) {\r\n            var parsed = text.parseName(moduleName),\r\n                extPart = parsed.ext ? '.' + parsed.ext : '',\r\n                nonStripName = parsed.moduleName + extPart,\r\n                //Use a '.js' file name so that it indicates it is a\r\n                //script that can be loaded across domains.\r\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\r\n\r\n            //Leverage own load() method to load plugin value, but only\r\n            //write out values that do not have the strip argument,\r\n            //to avoid any potential issues with ! in file names.\r\n            text.load(nonStripName, req, function (value) {\r\n                //Use own write() method to construct full module value.\r\n                //But need to create shell that translates writeFile's\r\n                //write() to the right interface.\r\n                var textWrite = function (contents) {\r\n                    return write(fileName, contents);\r\n                };\r\n                textWrite.asModule = function (moduleName, contents) {\r\n                    return write.asModule(moduleName, fileName, contents);\r\n                };\r\n\r\n                text.write(pluginName, nonStripName, textWrite, config);\r\n            }, config);\r\n        }\r\n    };\r\n\r\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\r\n            typeof process !== \"undefined\" &&\r\n            process.versions &&\r\n            !!process.versions.node &&\r\n            !process.versions['node-webkit'])) {\r\n        //Using special require.nodeRequire, something added by r.js.\r\n        fs = require.nodeRequire('fs');\r\n\r\n        text.get = function (url, callback, errback) {\r\n            try {\r\n                var file = fs.readFileSync(url, 'utf8');\r\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\r\n                if (file.indexOf('\\uFEFF') === 0) {\r\n                    file = file.substring(1);\r\n                }\r\n                callback(file);\r\n            } catch (e) {\r\n                if (errback) {\r\n                    errback(e);\r\n                }\r\n            }\r\n        };\r\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\r\n            text.createXhr())) {\r\n        text.get = function (url, callback, errback, headers) {\r\n            var xhr = text.createXhr(), header;\r\n            xhr.open('GET', url, true);\r\n\r\n            //Allow plugins direct access to xhr headers\r\n            if (headers) {\r\n                for (header in headers) {\r\n                    if (headers.hasOwnProperty(header)) {\r\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Allow overrides specified in config\r\n            if (masterConfig.onXhr) {\r\n                masterConfig.onXhr(xhr, url);\r\n            }\r\n\r\n            xhr.onreadystatechange = function (evt) {\r\n                var status, err;\r\n                //Do not explicitly handle errors, those should be\r\n                //visible via console output in the browser.\r\n                if (xhr.readyState === 4) {\r\n                    status = xhr.status || 0;\r\n                    if (status > 399 && status < 600) {\r\n                        //An http 4xx or 5xx error. Signal an error.\r\n                        err = new Error(url + ' HTTP status: ' + status);\r\n                        err.xhr = xhr;\r\n                        if (errback) {\r\n                            errback(err);\r\n                        }\r\n                    } else {\r\n                        callback(xhr.responseText);\r\n                    }\r\n\r\n                    if (masterConfig.onXhrComplete) {\r\n                        masterConfig.onXhrComplete(xhr, url);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(null);\r\n        };\r\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\r\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\r\n        //Why Java, why is this so awkward?\r\n        text.get = function (url, callback) {\r\n            var stringBuffer, line,\r\n                encoding = \"utf-8\",\r\n                file = new java.io.File(url),\r\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\r\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\r\n                content = '';\r\n            try {\r\n                stringBuffer = new java.lang.StringBuffer();\r\n                line = input.readLine();\r\n\r\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\r\n                // http://www.unicode.org/faq/utf_bom.html\r\n\r\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\r\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\r\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\r\n                    // Eat the BOM, since we've already found the encoding on this file,\r\n                    // and we plan to concatenating this buffer with others; the BOM should\r\n                    // only appear at the top of a file.\r\n                    line = line.substring(1);\r\n                }\r\n\r\n                if (line !== null) {\r\n                    stringBuffer.append(line);\r\n                }\r\n\r\n                while ((line = input.readLine()) !== null) {\r\n                    stringBuffer.append(lineSeparator);\r\n                    stringBuffer.append(line);\r\n                }\r\n                //Make sure we return a JavaScript string and not a Java string.\r\n                content = String(stringBuffer.toString()); //String\r\n            } finally {\r\n                input.close();\r\n            }\r\n            callback(content);\r\n        };\r\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\r\n            typeof Components !== 'undefined' && Components.classes &&\r\n            Components.interfaces)) {\r\n        //Avert your gaze!\r\n        Cc = Components.classes;\r\n        Ci = Components.interfaces;\r\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\r\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\r\n\r\n        text.get = function (url, callback) {\r\n            var inStream, convertStream, fileObj,\r\n                readData = {};\r\n\r\n            if (xpcIsWindows) {\r\n                url = url.replace(/\\//g, '\\\\');\r\n            }\r\n\r\n            fileObj = new FileUtils.File(url);\r\n\r\n            //XPCOM, you so crazy\r\n            try {\r\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\r\n                           .createInstance(Ci.nsIFileInputStream);\r\n                inStream.init(fileObj, 1, 0, false);\r\n\r\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\r\n                                .createInstance(Ci.nsIConverterInputStream);\r\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\r\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\r\n\r\n                convertStream.readString(inStream.available(), readData);\r\n                convertStream.close();\r\n                inStream.close();\r\n                callback(readData.value);\r\n            } catch (e) {\r\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\r\n            }\r\n        };\r\n    }\r\n    return text;\r\n});","Solwin_Cpanel/js/home-slider.js":"require(['jquery', 'cpowlcarousel'], function ($) {\n    $(document).ready(function () {\n        $(\".hb-slider\").owlCarousel({\n            items: 1,\n            itemsDesktop: [1080, 1],\n            itemsDesktopSmall: [860, 1],\n            itemsTablet: [768, 1],\n            itemsTabletSmall: [639, 1],\n            itemsMobile: [360, 1],\n            pagination: true,\n            navigationText: [\"<i class='fa fa-angle-left'></i>\", \"<i class='fa fa-angle-right'>\"],\n            navigation: false,\n        });\n\n        $(\".hpb-slider\").owlCarousel({\n            items: 3,\n            itemsDesktop: [1080, 3],\n            itemsDesktopSmall: [860, 3],\n            itemsTablet: [768, 2],\n            itemsTabletSmall: [639, 2],\n            itemsMobile: [479, 1],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n        $(\".htb-slider\").owlCarousel({\n            items: 1,\n            itemsDesktop: [1080, 1],\n            itemsDesktopSmall: [860, 1],\n            itemsTablet: [768, 1],\n            itemsTabletSmall: [639, 1],\n            itemsMobile: [479, 1],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n        $(\".hbr-slider\").owlCarousel({\n            items: 5,\n            itemsDesktop: [1080, 4],\n            itemsDesktopSmall: [860, 3],\n            itemsTablet: [768, 3],\n            itemsTabletSmall: [639, 3],\n            itemsMobile: [479, 2],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n    });\n});","Solwin_Cpanel/js/owl.carousel.js":"/*\n *  jQuery OwlCarousel v1.3.3\n *\n *  Copyright (c) 2013 Bartosz Wojciechowski\n *  http://www.owlgraphic.com/owlcarousel/\n *\n *  Licensed under MIT\n *\n */\n\n/*JS Lint helpers: */\n/*global dragMove: false, dragEnd: false, $, jQuery, alert, window, document */\n/*jslint nomen: true, continue:true */\ndefine([\n    'jquery'\n], function () {\n    if (typeof Object.create !== \"function\") {\n        Object.create = function (obj) {\n            function F() {\n            }\n            F.prototype = obj;\n            return new F();\n        };\n    }\n    (function ($, window, document) {\n\n        var Carousel = {\n            init: function (options, el) {\n                var base = this;\n\n                base.$elem = $(el);\n                base.options = $.extend({}, $.fn.owlCarousel.options, base.$elem.data(), options);\n\n                base.userOptions = options;\n                base.loadContent();\n            },\n            loadContent: function () {\n                var base = this, url;\n\n                function getData(data) {\n                    var i, content = \"\";\n                    if (typeof base.options.jsonSuccess === \"function\") {\n                        base.options.jsonSuccess.apply(this, [data]);\n                    } else {\n                        for (i in data.owl) {\n                            if (data.owl.hasOwnProperty(i)) {\n                                content += data.owl[i].item;\n                            }\n                        }\n                        base.$elem.html(content);\n                    }\n                    base.logIn();\n                }\n\n                if (typeof base.options.beforeInit === \"function\") {\n                    base.options.beforeInit.apply(this, [base.$elem]);\n                }\n\n                if (typeof base.options.jsonPath === \"string\") {\n                    url = base.options.jsonPath;\n                    $.getJSON(url, getData);\n                } else {\n                    base.logIn();\n                }\n            },\n            logIn: function () {\n                var base = this;\n\n                base.$elem.data(\"owl-originalStyles\", base.$elem.attr(\"style\"));\n                base.$elem.data(\"owl-originalClasses\", base.$elem.attr(\"class\"));\n\n                base.$elem.css({opacity: 0});\n                base.orignalItems = base.options.items;\n                base.checkBrowser();\n                base.wrapperWidth = 0;\n                base.checkVisible = null;\n                base.setVars();\n            },\n            setVars: function () {\n                var base = this;\n                if (base.$elem.children().length === 0) {\n                    return false;\n                }\n                base.baseClass();\n                base.eventTypes();\n                base.$userItems = base.$elem.children();\n                base.itemsAmount = base.$userItems.length;\n                base.wrapItems();\n                base.$owlItems = base.$elem.find(\".owl-item\");\n                base.$owlWrapper = base.$elem.find(\".owl-wrapper\");\n                base.playDirection = \"next\";\n                base.prevItem = 0;\n                base.prevArr = [0];\n                base.currentItem = 0;\n                base.customEvents();\n                base.onStartup();\n            },\n            onStartup: function () {\n                var base = this;\n                base.updateItems();\n                base.calculateAll();\n                base.buildControls();\n                base.updateControls();\n                base.response();\n                base.moveEvents();\n                base.stopOnHover();\n                base.owlStatus();\n\n                if (base.options.transitionStyle !== false) {\n                    base.transitionTypes(base.options.transitionStyle);\n                }\n                if (base.options.autoPlay === true) {\n                    base.options.autoPlay = 5000;\n                }\n                base.play();\n\n                base.$elem.find(\".owl-wrapper\").css(\"display\", \"block\");\n\n                if (!base.$elem.is(\":visible\")) {\n                    base.watchVisibility();\n                } else {\n                    base.$elem.css(\"opacity\", 1);\n                }\n                base.onstartup = false;\n                base.eachMoveUpdate();\n                if (typeof base.options.afterInit === \"function\") {\n                    base.options.afterInit.apply(this, [base.$elem]);\n                }\n            },\n            eachMoveUpdate: function () {\n                var base = this;\n\n                if (base.options.lazyLoad === true) {\n                    base.lazyLoad();\n                }\n                if (base.options.autoHeight === true) {\n                    base.autoHeight();\n                }\n                base.onVisibleItems();\n\n                if (typeof base.options.afterAction === \"function\") {\n                    base.options.afterAction.apply(this, [base.$elem]);\n                }\n            },\n            updateVars: function () {\n                var base = this;\n                if (typeof base.options.beforeUpdate === \"function\") {\n                    base.options.beforeUpdate.apply(this, [base.$elem]);\n                }\n                base.watchVisibility();\n                base.updateItems();\n                base.calculateAll();\n                base.updatePosition();\n                base.updateControls();\n                base.eachMoveUpdate();\n                if (typeof base.options.afterUpdate === \"function\") {\n                    base.options.afterUpdate.apply(this, [base.$elem]);\n                }\n            },\n            reload: function () {\n                var base = this;\n                window.setTimeout(function () {\n                    base.updateVars();\n                }, 0);\n            },\n            watchVisibility: function () {\n                var base = this;\n\n                if (base.$elem.is(\":visible\") === false) {\n                    base.$elem.css({opacity: 0});\n                    window.clearInterval(base.autoPlayInterval);\n                    window.clearInterval(base.checkVisible);\n                } else {\n                    return false;\n                }\n                base.checkVisible = window.setInterval(function () {\n                    if (base.$elem.is(\":visible\")) {\n                        base.reload();\n                        base.$elem.animate({opacity: 1}, 200);\n                        window.clearInterval(base.checkVisible);\n                    }\n                }, 500);\n            },\n            wrapItems: function () {\n                var base = this;\n                base.$userItems.wrapAll(\"<div class=\\\"owl-wrapper\\\">\").wrap(\"<div class=\\\"owl-item\\\"></div>\");\n                base.$elem.find(\".owl-wrapper\").wrap(\"<div class=\\\"owl-wrapper-outer\\\">\");\n                base.wrapperOuter = base.$elem.find(\".owl-wrapper-outer\");\n                base.$elem.css(\"display\", \"block\");\n            },\n            baseClass: function () {\n                var base = this,\n                        hasBaseClass = base.$elem.hasClass(base.options.baseClass),\n                        hasThemeClass = base.$elem.hasClass(base.options.theme);\n\n                if (!hasBaseClass) {\n                    base.$elem.addClass(base.options.baseClass);\n                }\n\n                if (!hasThemeClass) {\n                    base.$elem.addClass(base.options.theme);\n                }\n            },\n            updateItems: function () {\n                var base = this, width, i;\n\n                if (base.options.responsive === false) {\n                    return false;\n                }\n                if (base.options.singleItem === true) {\n                    base.options.items = base.orignalItems = 1;\n                    base.options.itemsCustom = false;\n                    base.options.itemsDesktop = false;\n                    base.options.itemsDesktopSmall = false;\n                    base.options.itemsTablet = false;\n                    base.options.itemsTabletSmall = false;\n                    base.options.itemsMobile = false;\n                    return false;\n                }\n\n                width = $(base.options.responsiveBaseWidth).width();\n\n                if (width > (base.options.itemsDesktop[0] || base.orignalItems)) {\n                    base.options.items = base.orignalItems;\n                }\n                if (base.options.itemsCustom !== false) {\n                    //Reorder array by screen size\n                    base.options.itemsCustom.sort(function (a, b) {\n                        return a[0] - b[0];\n                    });\n\n                    for (i = 0; i < base.options.itemsCustom.length; i += 1) {\n                        if (base.options.itemsCustom[i][0] <= width) {\n                            base.options.items = base.options.itemsCustom[i][1];\n                        }\n                    }\n\n                } else {\n\n                    if (width <= base.options.itemsDesktop[0] && base.options.itemsDesktop !== false) {\n                        base.options.items = base.options.itemsDesktop[1];\n                    }\n\n                    if (width <= base.options.itemsDesktopSmall[0] && base.options.itemsDesktopSmall !== false) {\n                        base.options.items = base.options.itemsDesktopSmall[1];\n                    }\n\n                    if (width <= base.options.itemsTablet[0] && base.options.itemsTablet !== false) {\n                        base.options.items = base.options.itemsTablet[1];\n                    }\n\n                    if (width <= base.options.itemsTabletSmall[0] && base.options.itemsTabletSmall !== false) {\n                        base.options.items = base.options.itemsTabletSmall[1];\n                    }\n\n                    if (width <= base.options.itemsMobile[0] && base.options.itemsMobile !== false) {\n                        base.options.items = base.options.itemsMobile[1];\n                    }\n                }\n\n                //if number of items is less than declared\n                if (base.options.items > base.itemsAmount && base.options.itemsScaleUp === true) {\n                    base.options.items = base.itemsAmount;\n                }\n            },\n            response: function () {\n                var base = this,\n                        smallDelay,\n                        lastWindowWidth;\n\n                if (base.options.responsive !== true) {\n                    return false;\n                }\n                lastWindowWidth = $(window).width();\n\n                base.resizer = function () {\n                    if ($(window).width() !== lastWindowWidth) {\n                        if (base.options.autoPlay !== false) {\n                            window.clearInterval(base.autoPlayInterval);\n                        }\n                        window.clearTimeout(smallDelay);\n                        smallDelay = window.setTimeout(function () {\n                            lastWindowWidth = $(window).width();\n                            base.updateVars();\n                        }, base.options.responsiveRefreshRate);\n                    }\n                };\n                $(window).resize(base.resizer);\n            },\n            updatePosition: function () {\n                var base = this;\n                base.jumpTo(base.currentItem);\n                if (base.options.autoPlay !== false) {\n                    base.checkAp();\n                }\n            },\n            appendItemsSizes: function () {\n                var base = this,\n                        roundPages = 0,\n                        lastItem = base.itemsAmount - base.options.items;\n\n                base.$owlItems.each(function (index) {\n                    var $this = $(this);\n                    $this\n                            .css({\"width\": base.itemWidth})\n                            .data(\"owl-item\", Number(index));\n\n                    if (index % base.options.items === 0 || index === lastItem) {\n                        if (!(index > lastItem)) {\n                            roundPages += 1;\n                        }\n                    }\n                    $this.data(\"owl-roundPages\", roundPages);\n                });\n            },\n            appendWrapperSizes: function () {\n                var base = this,\n                        width = base.$owlItems.length * base.itemWidth;\n\n                base.$owlWrapper.css({\n                    \"width\": width * 2,\n                    \"left\": 0\n                });\n                base.appendItemsSizes();\n            },\n            calculateAll: function () {\n                var base = this;\n                base.calculateWidth();\n                base.appendWrapperSizes();\n                base.loops();\n                base.max();\n            },\n            calculateWidth: function () {\n                var base = this;\n                base.itemWidth = Math.round(base.$elem.width() / base.options.items);\n            },\n            max: function () {\n                var base = this,\n                        maximum = ((base.itemsAmount * base.itemWidth) - base.options.items * base.itemWidth) * -1;\n                if (base.options.items > base.itemsAmount) {\n                    base.maximumItem = 0;\n                    maximum = 0;\n                    base.maximumPixels = 0;\n                } else {\n                    base.maximumItem = base.itemsAmount - base.options.items;\n                    base.maximumPixels = maximum;\n                }\n                return maximum;\n            },\n            min: function () {\n                return 0;\n            },\n            loops: function () {\n                var base = this,\n                        prev = 0,\n                        elWidth = 0,\n                        i,\n                        item,\n                        roundPageNum;\n\n                base.positionsInArray = [0];\n                base.pagesInArray = [];\n\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    elWidth += base.itemWidth;\n                    base.positionsInArray.push(-elWidth);\n\n                    if (base.options.scrollPerPage === true) {\n                        item = $(base.$owlItems[i]);\n                        roundPageNum = item.data(\"owl-roundPages\");\n                        if (roundPageNum !== prev) {\n                            base.pagesInArray[prev] = base.positionsInArray[i];\n                            prev = roundPageNum;\n                        }\n                    }\n                }\n            },\n            buildControls: function () {\n                var base = this;\n                if (base.options.navigation === true || base.options.pagination === true) {\n                    base.owlControls = $(\"<div class=\\\"owl-controls\\\"/>\").toggleClass(\"clickable\", !base.browser.isTouch).appendTo(base.$elem);\n                }\n                if (base.options.pagination === true) {\n                    base.buildPagination();\n                }\n                if (base.options.navigation === true) {\n                    base.buildButtons();\n                }\n            },\n            buildButtons: function () {\n                var base = this,\n                        buttonsWrapper = $(\"<div class=\\\"owl-buttons\\\"/>\");\n                base.owlControls.append(buttonsWrapper);\n\n                base.buttonPrev = $(\"<div/>\", {\n                    \"class\": \"owl-prev\",\n                    \"html\": base.options.navigationText[0] || \"\"\n                });\n\n                base.buttonNext = $(\"<div/>\", {\n                    \"class\": \"owl-next\",\n                    \"html\": base.options.navigationText[1] || \"\"\n                });\n\n                buttonsWrapper\n                        .append(base.buttonPrev)\n                        .append(base.buttonNext);\n\n                buttonsWrapper.on(\"touchstart.owlControls mousedown.owlControls\", \"div[class^=\\\"owl\\\"]\", function (event) {\n                    event.preventDefault();\n                });\n\n                buttonsWrapper.on(\"touchend.owlControls mouseup.owlControls\", \"div[class^=\\\"owl\\\"]\", function (event) {\n                    event.preventDefault();\n                    if ($(this).hasClass(\"owl-next\")) {\n                        base.next();\n                    } else {\n                        base.prev();\n                    }\n                });\n            },\n            buildPagination: function () {\n                var base = this;\n\n                base.paginationWrapper = $(\"<div class=\\\"owl-pagination\\\"/>\");\n                base.owlControls.append(base.paginationWrapper);\n\n                base.paginationWrapper.on(\"touchend.owlControls mouseup.owlControls\", \".owl-page\", function (event) {\n                    event.preventDefault();\n                    if (Number($(this).data(\"owl-page\")) !== base.currentItem) {\n                        base.goTo(Number($(this).data(\"owl-page\")), true);\n                    }\n                });\n            },\n            updatePagination: function () {\n                var base = this,\n                        counter,\n                        lastPage,\n                        lastItem,\n                        i,\n                        paginationButton,\n                        paginationButtonInner;\n\n                if (base.options.pagination === false) {\n                    return false;\n                }\n\n                base.paginationWrapper.html(\"\");\n\n                counter = 0;\n                lastPage = base.itemsAmount - base.itemsAmount % base.options.items;\n\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    if (i % base.options.items === 0) {\n                        counter += 1;\n                        if (lastPage === i) {\n                            lastItem = base.itemsAmount - base.options.items;\n                        }\n                        paginationButton = $(\"<div/>\", {\n                            \"class\": \"owl-page\"\n                        });\n                        paginationButtonInner = $(\"<span></span>\", {\n                            \"text\": base.options.paginationNumbers === true ? counter : \"\",\n                            \"class\": base.options.paginationNumbers === true ? \"owl-numbers\" : \"\"\n                        });\n                        paginationButton.append(paginationButtonInner);\n\n                        paginationButton.data(\"owl-page\", lastPage === i ? lastItem : i);\n                        paginationButton.data(\"owl-roundPages\", counter);\n\n                        base.paginationWrapper.append(paginationButton);\n                    }\n                }\n                base.checkPagination();\n            },\n            checkPagination: function () {\n                var base = this;\n                if (base.options.pagination === false) {\n                    return false;\n                }\n                base.paginationWrapper.find(\".owl-page\").each(function () {\n                    if ($(this).data(\"owl-roundPages\") === $(base.$owlItems[base.currentItem]).data(\"owl-roundPages\")) {\n                        base.paginationWrapper\n                                .find(\".owl-page\")\n                                .removeClass(\"active\");\n                        $(this).addClass(\"active\");\n                    }\n                });\n            },\n            checkNavigation: function () {\n                var base = this;\n\n                if (base.options.navigation === false) {\n                    return false;\n                }\n                if (base.options.rewindNav === false) {\n                    if (base.currentItem === 0 && base.maximumItem === 0) {\n                        base.buttonPrev.addClass(\"disabled\");\n                        base.buttonNext.addClass(\"disabled\");\n                    } else if (base.currentItem === 0 && base.maximumItem !== 0) {\n                        base.buttonPrev.addClass(\"disabled\");\n                        base.buttonNext.removeClass(\"disabled\");\n                    } else if (base.currentItem === base.maximumItem) {\n                        base.buttonPrev.removeClass(\"disabled\");\n                        base.buttonNext.addClass(\"disabled\");\n                    } else if (base.currentItem !== 0 && base.currentItem !== base.maximumItem) {\n                        base.buttonPrev.removeClass(\"disabled\");\n                        base.buttonNext.removeClass(\"disabled\");\n                    }\n                }\n            },\n            updateControls: function () {\n                var base = this;\n                base.updatePagination();\n                base.checkNavigation();\n                if (base.owlControls) {\n                    if (base.options.items >= base.itemsAmount) {\n                        base.owlControls.hide();\n                    } else {\n                        base.owlControls.show();\n                    }\n                }\n            },\n            destroyControls: function () {\n                var base = this;\n                if (base.owlControls) {\n                    base.owlControls.remove();\n                }\n            },\n            next: function (speed) {\n                var base = this;\n\n                if (base.isTransition) {\n                    return false;\n                }\n\n                base.currentItem += base.options.scrollPerPage === true ? base.options.items : 1;\n                if (base.currentItem > base.maximumItem + (base.options.scrollPerPage === true ? (base.options.items - 1) : 0)) {\n                    if (base.options.rewindNav === true) {\n                        base.currentItem = 0;\n                        speed = \"rewind\";\n                    } else {\n                        base.currentItem = base.maximumItem;\n                        return false;\n                    }\n                }\n                base.goTo(base.currentItem, speed);\n            },\n            prev: function (speed) {\n                var base = this;\n\n                if (base.isTransition) {\n                    return false;\n                }\n\n                if (base.options.scrollPerPage === true && base.currentItem > 0 && base.currentItem < base.options.items) {\n                    base.currentItem = 0;\n                } else {\n                    base.currentItem -= base.options.scrollPerPage === true ? base.options.items : 1;\n                }\n                if (base.currentItem < 0) {\n                    if (base.options.rewindNav === true) {\n                        base.currentItem = base.maximumItem;\n                        speed = \"rewind\";\n                    } else {\n                        base.currentItem = 0;\n                        return false;\n                    }\n                }\n                base.goTo(base.currentItem, speed);\n            },\n            goTo: function (position, speed, drag) {\n                var base = this,\n                        goToPixel;\n\n                if (base.isTransition) {\n                    return false;\n                }\n                if (typeof base.options.beforeMove === \"function\") {\n                    base.options.beforeMove.apply(this, [base.$elem]);\n                }\n                if (position >= base.maximumItem) {\n                    position = base.maximumItem;\n                } else if (position <= 0) {\n                    position = 0;\n                }\n\n                base.currentItem = base.owl.currentItem = position;\n                if (base.options.transitionStyle !== false && drag !== \"drag\" && base.options.items === 1 && base.browser.support3d === true) {\n                    base.swapSpeed(0);\n                    if (base.browser.support3d === true) {\n                        base.transition3d(base.positionsInArray[position]);\n                    } else {\n                        base.css2slide(base.positionsInArray[position], 1);\n                    }\n                    base.afterGo();\n                    base.singleItemTransition();\n                    return false;\n                }\n                goToPixel = base.positionsInArray[position];\n\n                if (base.browser.support3d === true) {\n                    base.isCss3Finish = false;\n\n                    if (speed === true) {\n                        base.swapSpeed(\"paginationSpeed\");\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.paginationSpeed);\n\n                    } else if (speed === \"rewind\") {\n                        base.swapSpeed(base.options.rewindSpeed);\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.rewindSpeed);\n\n                    } else {\n                        base.swapSpeed(\"slideSpeed\");\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.slideSpeed);\n                    }\n                    base.transition3d(goToPixel);\n                } else {\n                    if (speed === true) {\n                        base.css2slide(goToPixel, base.options.paginationSpeed);\n                    } else if (speed === \"rewind\") {\n                        base.css2slide(goToPixel, base.options.rewindSpeed);\n                    } else {\n                        base.css2slide(goToPixel, base.options.slideSpeed);\n                    }\n                }\n                base.afterGo();\n            },\n            jumpTo: function (position) {\n                var base = this;\n                if (typeof base.options.beforeMove === \"function\") {\n                    base.options.beforeMove.apply(this, [base.$elem]);\n                }\n                if (position >= base.maximumItem || position === -1) {\n                    position = base.maximumItem;\n                } else if (position <= 0) {\n                    position = 0;\n                }\n                base.swapSpeed(0);\n                if (base.browser.support3d === true) {\n                    base.transition3d(base.positionsInArray[position]);\n                } else {\n                    base.css2slide(base.positionsInArray[position], 1);\n                }\n                base.currentItem = base.owl.currentItem = position;\n                base.afterGo();\n            },\n            afterGo: function () {\n                var base = this;\n\n                base.prevArr.push(base.currentItem);\n                base.prevItem = base.owl.prevItem = base.prevArr[base.prevArr.length - 2];\n                base.prevArr.shift(0);\n\n                if (base.prevItem !== base.currentItem) {\n                    base.checkPagination();\n                    base.checkNavigation();\n                    base.eachMoveUpdate();\n\n                    if (base.options.autoPlay !== false) {\n                        base.checkAp();\n                    }\n                }\n                if (typeof base.options.afterMove === \"function\" && base.prevItem !== base.currentItem) {\n                    base.options.afterMove.apply(this, [base.$elem]);\n                }\n            },\n            stop: function () {\n                var base = this;\n                base.apStatus = \"stop\";\n                window.clearInterval(base.autoPlayInterval);\n            },\n            checkAp: function () {\n                var base = this;\n                if (base.apStatus !== \"stop\") {\n                    base.play();\n                }\n            },\n            play: function () {\n                var base = this;\n                base.apStatus = \"play\";\n                if (base.options.autoPlay === false) {\n                    return false;\n                }\n                window.clearInterval(base.autoPlayInterval);\n                base.autoPlayInterval = window.setInterval(function () {\n                    base.next(true);\n                }, base.options.autoPlay);\n            },\n            swapSpeed: function (action) {\n                var base = this;\n                if (action === \"slideSpeed\") {\n                    base.$owlWrapper.css(base.addCssSpeed(base.options.slideSpeed));\n                } else if (action === \"paginationSpeed\") {\n                    base.$owlWrapper.css(base.addCssSpeed(base.options.paginationSpeed));\n                } else if (typeof action !== \"string\") {\n                    base.$owlWrapper.css(base.addCssSpeed(action));\n                }\n            },\n            addCssSpeed: function (speed) {\n                return {\n                    \"-webkit-transition\": \"all \" + speed + \"ms ease\",\n                    \"-moz-transition\": \"all \" + speed + \"ms ease\",\n                    \"-o-transition\": \"all \" + speed + \"ms ease\",\n                    \"transition\": \"all \" + speed + \"ms ease\"\n                };\n            },\n            removeTransition: function () {\n                return {\n                    \"-webkit-transition\": \"\",\n                    \"-moz-transition\": \"\",\n                    \"-o-transition\": \"\",\n                    \"transition\": \"\"\n                };\n            },\n            doTranslate: function (pixels) {\n                return {\n                    \"-webkit-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-moz-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-o-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-ms-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"transform\": \"translate3d(\" + pixels + \"px, 0px,0px)\"\n                };\n            },\n            transition3d: function (value) {\n                var base = this;\n                base.$owlWrapper.css(base.doTranslate(value));\n            },\n            css2move: function (value) {\n                var base = this;\n                base.$owlWrapper.css({\"left\": value});\n            },\n            css2slide: function (value, speed) {\n                var base = this;\n\n                base.isCssFinish = false;\n                base.$owlWrapper.stop(true, true).animate({\n                    \"left\": value\n                }, {\n                    duration: speed || base.options.slideSpeed,\n                    complete: function () {\n                        base.isCssFinish = true;\n                    }\n                });\n            },\n            checkBrowser: function () {\n                var base = this,\n                        translate3D = \"translate3d(0px, 0px, 0px)\",\n                        tempElem = document.createElement(\"div\"),\n                        regex,\n                        asSupport,\n                        support3d,\n                        isTouch;\n\n                tempElem.style.cssText = \"  -moz-transform:\" + translate3D +\n                        \"; -ms-transform:\" + translate3D +\n                        \"; -o-transform:\" + translate3D +\n                        \"; -webkit-transform:\" + translate3D +\n                        \"; transform:\" + translate3D;\n                regex = /translate3d\\(0px, 0px, 0px\\)/g;\n                asSupport = tempElem.style.cssText.match(regex);\n                support3d = (asSupport !== null && asSupport.length === 1);\n\n                isTouch = \"ontouchstart\" in window || window.navigator.msMaxTouchPoints;\n\n                base.browser = {\n                    \"support3d\": support3d,\n                    \"isTouch\": isTouch\n                };\n            },\n            moveEvents: function () {\n                var base = this;\n                if (base.options.mouseDrag !== false || base.options.touchDrag !== false) {\n                    base.gestures();\n                    base.disabledEvents();\n                }\n            },\n            eventTypes: function () {\n                var base = this,\n                        types = [\"s\", \"e\", \"x\"];\n\n                base.ev_types = {};\n\n                if (base.options.mouseDrag === true && base.options.touchDrag === true) {\n                    types = [\n                        \"touchstart.owl mousedown.owl\",\n                        \"touchmove.owl mousemove.owl\",\n                        \"touchend.owl touchcancel.owl mouseup.owl\"\n                    ];\n                } else if (base.options.mouseDrag === false && base.options.touchDrag === true) {\n                    types = [\n                        \"touchstart.owl\",\n                        \"touchmove.owl\",\n                        \"touchend.owl touchcancel.owl\"\n                    ];\n                } else if (base.options.mouseDrag === true && base.options.touchDrag === false) {\n                    types = [\n                        \"mousedown.owl\",\n                        \"mousemove.owl\",\n                        \"mouseup.owl\"\n                    ];\n                }\n\n                base.ev_types.start = types[0];\n                base.ev_types.move = types[1];\n                base.ev_types.end = types[2];\n            },\n            disabledEvents: function () {\n                var base = this;\n                base.$elem.on(\"dragstart.owl\", function (event) {\n                    event.preventDefault();\n                });\n                base.$elem.on(\"mousedown.disableTextSelect\", function (e) {\n                    return $(e.target).is('input, textarea, select, option');\n                });\n            },\n            gestures: function () {\n                /*jslint unparam: true*/\n                var base = this,\n                        locals = {\n                            offsetX: 0,\n                            offsetY: 0,\n                            baseElWidth: 0,\n                            relativePos: 0,\n                            position: null,\n                            minSwipe: null,\n                            maxSwipe: null,\n                            sliding: null,\n                            dargging: null,\n                            targetElement: null\n                        };\n\n                base.isCssFinish = true;\n\n                function getTouches(event) {\n                    if (event.touches !== undefined) {\n                        return {\n                            x: event.touches[0].pageX,\n                            y: event.touches[0].pageY\n                        };\n                    }\n\n                    if (event.touches === undefined) {\n                        if (event.pageX !== undefined) {\n                            return {\n                                x: event.pageX,\n                                y: event.pageY\n                            };\n                        }\n                        if (event.pageX === undefined) {\n                            return {\n                                x: event.clientX,\n                                y: event.clientY\n                            };\n                        }\n                    }\n                }\n\n                function swapEvents(type) {\n                    if (type === \"on\") {\n                        $(document).on(base.ev_types.move, dragMove);\n                        $(document).on(base.ev_types.end, dragEnd);\n                    } else if (type === \"off\") {\n                        $(document).off(base.ev_types.move);\n                        $(document).off(base.ev_types.end);\n                    }\n                }\n\n                function dragStart(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            position;\n\n                    if (ev.which === 3) {\n                        return false;\n                    }\n                    if (base.itemsAmount <= base.options.items) {\n                        return;\n                    }\n                    if (base.isCssFinish === false && !base.options.dragBeforeAnimFinish) {\n                        return false;\n                    }\n                    if (base.isCss3Finish === false && !base.options.dragBeforeAnimFinish) {\n                        return false;\n                    }\n\n                    if (base.options.autoPlay !== false) {\n                        window.clearInterval(base.autoPlayInterval);\n                    }\n\n                    if (base.browser.isTouch !== true && !base.$owlWrapper.hasClass(\"grabbing\")) {\n                        base.$owlWrapper.addClass(\"grabbing\");\n                    }\n\n                    base.newPosX = 0;\n                    base.newRelativeX = 0;\n\n                    $(this).css(base.removeTransition());\n\n                    position = $(this).position();\n                    locals.relativePos = position.left;\n\n                    locals.offsetX = getTouches(ev).x - position.left;\n                    locals.offsetY = getTouches(ev).y - position.top;\n\n                    swapEvents(\"on\");\n\n                    locals.sliding = false;\n                    locals.targetElement = ev.target || ev.srcElement;\n                }\n\n                function dragMove(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            minSwipe,\n                            maxSwipe;\n\n                    base.newPosX = getTouches(ev).x - locals.offsetX;\n                    base.newPosY = getTouches(ev).y - locals.offsetY;\n                    base.newRelativeX = base.newPosX - locals.relativePos;\n\n                    if (typeof base.options.startDragging === \"function\" && locals.dragging !== true && base.newRelativeX !== 0) {\n                        locals.dragging = true;\n                        base.options.startDragging.apply(base, [base.$elem]);\n                    }\n\n                    if ((base.newRelativeX > 8 || base.newRelativeX < -8) && (base.browser.isTouch === true)) {\n                        if (ev.preventDefault !== undefined) {\n                            ev.preventDefault();\n                        } else {\n                            ev.returnValue = false;\n                        }\n                        locals.sliding = true;\n                    }\n\n                    if ((base.newPosY > 10 || base.newPosY < -10) && locals.sliding === false) {\n                        $(document).off(\"touchmove.owl\");\n                    }\n\n                    minSwipe = function () {\n                        return base.newRelativeX / 5;\n                    };\n\n                    maxSwipe = function () {\n                        return base.maximumPixels + base.newRelativeX / 5;\n                    };\n\n                    base.newPosX = Math.max(Math.min(base.newPosX, minSwipe()), maxSwipe());\n                    if (base.browser.support3d === true) {\n                        base.transition3d(base.newPosX);\n                    } else {\n                        base.css2move(base.newPosX);\n                    }\n                }\n\n                function dragEnd(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            newPosition,\n                            handlers,\n                            owlStopEvent;\n\n                    ev.target = ev.target || ev.srcElement;\n\n                    locals.dragging = false;\n\n                    if (base.browser.isTouch !== true) {\n                        base.$owlWrapper.removeClass(\"grabbing\");\n                    }\n\n                    if (base.newRelativeX < 0) {\n                        base.dragDirection = base.owl.dragDirection = \"left\";\n                    } else {\n                        base.dragDirection = base.owl.dragDirection = \"right\";\n                    }\n\n                    if (base.newRelativeX !== 0) {\n                        newPosition = base.getNewPosition();\n                        base.goTo(newPosition, false, \"drag\");\n                        if (locals.targetElement === ev.target && base.browser.isTouch !== true) {\n                            $(ev.target).on(\"click.disable\", function (ev) {\n                                ev.stopImmediatePropagation();\n                                ev.stopPropagation();\n                                ev.preventDefault();\n                                $(ev.target).off(\"click.disable\");\n                            });\n                            handlers = $._data(ev.target, \"events\").click;\n                            owlStopEvent = handlers.pop();\n                            handlers.splice(0, 0, owlStopEvent);\n                        }\n                    }\n                    swapEvents(\"off\");\n                }\n                base.$elem.on(base.ev_types.start, \".owl-wrapper\", dragStart);\n            },\n            getNewPosition: function () {\n                var base = this,\n                        newPosition = base.closestItem();\n\n                if (newPosition > base.maximumItem) {\n                    base.currentItem = base.maximumItem;\n                    newPosition = base.maximumItem;\n                } else if (base.newPosX >= 0) {\n                    newPosition = 0;\n                    base.currentItem = 0;\n                }\n                return newPosition;\n            },\n            closestItem: function () {\n                var base = this,\n                        array = base.options.scrollPerPage === true ? base.pagesInArray : base.positionsInArray,\n                        goal = base.newPosX,\n                        closest = null;\n\n                $.each(array, function (i, v) {\n                    if (goal - (base.itemWidth / 20) > array[i + 1] && goal - (base.itemWidth / 20) < v && base.moveDirection() === \"left\") {\n                        closest = v;\n                        if (base.options.scrollPerPage === true) {\n                            base.currentItem = $.inArray(closest, base.positionsInArray);\n                        } else {\n                            base.currentItem = i;\n                        }\n                    } else if (goal + (base.itemWidth / 20) < v && goal + (base.itemWidth / 20) > (array[i + 1] || array[i] - base.itemWidth) && base.moveDirection() === \"right\") {\n                        if (base.options.scrollPerPage === true) {\n                            closest = array[i + 1] || array[array.length - 1];\n                            base.currentItem = $.inArray(closest, base.positionsInArray);\n                        } else {\n                            closest = array[i + 1];\n                            base.currentItem = i + 1;\n                        }\n                    }\n                });\n                return base.currentItem;\n            },\n            moveDirection: function () {\n                var base = this,\n                        direction;\n                if (base.newRelativeX < 0) {\n                    direction = \"right\";\n                    base.playDirection = \"next\";\n                } else {\n                    direction = \"left\";\n                    base.playDirection = \"prev\";\n                }\n                return direction;\n            },\n            customEvents: function () {\n                /*jslint unparam: true*/\n                var base = this;\n                base.$elem.on(\"owl.next\", function () {\n                    base.next();\n                });\n                base.$elem.on(\"owl.prev\", function () {\n                    base.prev();\n                });\n                base.$elem.on(\"owl.play\", function (event, speed) {\n                    base.options.autoPlay = speed;\n                    base.play();\n                    base.hoverStatus = \"play\";\n                });\n                base.$elem.on(\"owl.stop\", function () {\n                    base.stop();\n                    base.hoverStatus = \"stop\";\n                });\n                base.$elem.on(\"owl.goTo\", function (event, item) {\n                    base.goTo(item);\n                });\n                base.$elem.on(\"owl.jumpTo\", function (event, item) {\n                    base.jumpTo(item);\n                });\n            },\n            stopOnHover: function () {\n                var base = this;\n                if (base.options.stopOnHover === true && base.browser.isTouch !== true && base.options.autoPlay !== false) {\n                    base.$elem.on(\"mouseover\", function () {\n                        base.stop();\n                    });\n                    base.$elem.on(\"mouseout\", function () {\n                        if (base.hoverStatus !== \"stop\") {\n                            base.play();\n                        }\n                    });\n                }\n            },\n            lazyLoad: function () {\n                var base = this,\n                        i,\n                        $item,\n                        itemNumber,\n                        $lazyImg,\n                        follow;\n\n                if (base.options.lazyLoad === false) {\n                    return false;\n                }\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    $item = $(base.$owlItems[i]);\n\n                    if ($item.data(\"owl-loaded\") === \"loaded\") {\n                        continue;\n                    }\n\n                    itemNumber = $item.data(\"owl-item\");\n                    $lazyImg = $item.find(\".lazyOwl\");\n\n                    if (typeof $lazyImg.data(\"src\") !== \"string\") {\n                        $item.data(\"owl-loaded\", \"loaded\");\n                        continue;\n                    }\n                    if ($item.data(\"owl-loaded\") === undefined) {\n                        $lazyImg.hide();\n                        $item.addClass(\"loading\").data(\"owl-loaded\", \"checked\");\n                    }\n                    if (base.options.lazyFollow === true) {\n                        follow = itemNumber >= base.currentItem;\n                    } else {\n                        follow = true;\n                    }\n                    if (follow && itemNumber < base.currentItem + base.options.items && $lazyImg.length) {\n                        base.lazyPreload($item, $lazyImg);\n                    }\n                }\n            },\n            lazyPreload: function ($item, $lazyImg) {\n                var base = this,\n                        iterations = 0,\n                        isBackgroundImg;\n\n                if ($lazyImg.prop(\"tagName\") === \"DIV\") {\n                    $lazyImg.css(\"background-image\", \"url(\" + $lazyImg.data(\"src\") + \")\");\n                    isBackgroundImg = true;\n                } else {\n                    $lazyImg[0].src = $lazyImg.data(\"src\");\n                }\n\n                function showImage() {\n                    $item.data(\"owl-loaded\", \"loaded\").removeClass(\"loading\");\n                    $lazyImg.removeAttr(\"data-src\");\n                    if (base.options.lazyEffect === \"fade\") {\n                        $lazyImg.fadeIn(400);\n                    } else {\n                        $lazyImg.show();\n                    }\n                    if (typeof base.options.afterLazyLoad === \"function\") {\n                        base.options.afterLazyLoad.apply(this, [base.$elem]);\n                    }\n                }\n\n                function checkLazyImage() {\n                    iterations += 1;\n                    if (base.completeImg($lazyImg.get(0)) || isBackgroundImg === true) {\n                        showImage();\n                    } else if (iterations <= 100) {//if image loads in less than 10 seconds \n                        window.setTimeout(checkLazyImage, 100);\n                    } else {\n                        showImage();\n                    }\n                }\n\n                checkLazyImage();\n            },\n            autoHeight: function () {\n                var base = this,\n                        $currentimg = $(base.$owlItems[base.currentItem]).find(\"img\"),\n                        iterations;\n\n                function addHeight() {\n                    var $currentItem = $(base.$owlItems[base.currentItem]).height();\n                    base.wrapperOuter.css(\"height\", $currentItem + \"px\");\n                    if (!base.wrapperOuter.hasClass(\"autoHeight\")) {\n                        window.setTimeout(function () {\n                            base.wrapperOuter.addClass(\"autoHeight\");\n                        }, 0);\n                    }\n                }\n\n                function checkImage() {\n                    iterations += 1;\n                    if (base.completeImg($currentimg.get(0))) {\n                        addHeight();\n                    } else if (iterations <= 100) { //if image loads in less than 10 seconds \n                        window.setTimeout(checkImage, 100);\n                    } else {\n                        base.wrapperOuter.css(\"height\", \"\"); //Else remove height attribute\n                    }\n                }\n\n                if ($currentimg.get(0) !== undefined) {\n                    iterations = 0;\n                    checkImage();\n                } else {\n                    addHeight();\n                }\n            },\n            completeImg: function (img) {\n                var naturalWidthType;\n\n                if (!img.complete) {\n                    return false;\n                }\n                naturalWidthType = typeof img.naturalWidth;\n                if (naturalWidthType !== \"undefined\" && img.naturalWidth === 0) {\n                    return false;\n                }\n                return true;\n            },\n            onVisibleItems: function () {\n                var base = this,\n                        i;\n\n                if (base.options.addClassActive === true) {\n                    base.$owlItems.removeClass(\"active\");\n                }\n                base.visibleItems = [];\n                for (i = base.currentItem; i < base.currentItem + base.options.items; i += 1) {\n                    base.visibleItems.push(i);\n\n                    if (base.options.addClassActive === true) {\n                        $(base.$owlItems[i]).addClass(\"active\");\n                    }\n                }\n                base.owl.visibleItems = base.visibleItems;\n            },\n            transitionTypes: function (className) {\n                var base = this;\n                //Currently available: \"fade\", \"backSlide\", \"goDown\", \"fadeUp\"\n                base.outClass = \"owl-\" + className + \"-out\";\n                base.inClass = \"owl-\" + className + \"-in\";\n            },\n            singleItemTransition: function () {\n                var base = this,\n                        outClass = base.outClass,\n                        inClass = base.inClass,\n                        $currentItem = base.$owlItems.eq(base.currentItem),\n                        $prevItem = base.$owlItems.eq(base.prevItem),\n                        prevPos = Math.abs(base.positionsInArray[base.currentItem]) + base.positionsInArray[base.prevItem],\n                        origin = Math.abs(base.positionsInArray[base.currentItem]) + base.itemWidth / 2,\n                        animEnd = 'webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend';\n\n                base.isTransition = true;\n\n                base.$owlWrapper\n                        .addClass('owl-origin')\n                        .css({\n                            \"-webkit-transform-origin\": origin + \"px\",\n                            \"-moz-perspective-origin\": origin + \"px\",\n                            \"perspective-origin\": origin + \"px\"\n                        });\n                function transStyles(prevPos) {\n                    return {\n                        \"position\": \"relative\",\n                        \"left\": prevPos + \"px\"\n                    };\n                }\n\n                $prevItem\n                        .css(transStyles(prevPos, 10))\n                        .addClass(outClass)\n                        .on(animEnd, function () {\n                            base.endPrev = true;\n                            $prevItem.off(animEnd);\n                            base.clearTransStyle($prevItem, outClass);\n                        });\n\n                $currentItem\n                        .addClass(inClass)\n                        .on(animEnd, function () {\n                            base.endCurrent = true;\n                            $currentItem.off(animEnd);\n                            base.clearTransStyle($currentItem, inClass);\n                        });\n            },\n            clearTransStyle: function (item, classToRemove) {\n                var base = this;\n                item.css({\n                    \"position\": \"\",\n                    \"left\": \"\"\n                }).removeClass(classToRemove);\n\n                if (base.endPrev && base.endCurrent) {\n                    base.$owlWrapper.removeClass('owl-origin');\n                    base.endPrev = false;\n                    base.endCurrent = false;\n                    base.isTransition = false;\n                }\n            },\n            owlStatus: function () {\n                var base = this;\n                base.owl = {\n                    \"userOptions\": base.userOptions,\n                    \"baseElement\": base.$elem,\n                    \"userItems\": base.$userItems,\n                    \"owlItems\": base.$owlItems,\n                    \"currentItem\": base.currentItem,\n                    \"prevItem\": base.prevItem,\n                    \"visibleItems\": base.visibleItems,\n                    \"isTouch\": base.browser.isTouch,\n                    \"browser\": base.browser,\n                    \"dragDirection\": base.dragDirection\n                };\n            },\n            clearEvents: function () {\n                var base = this;\n                base.$elem.off(\".owl owl mousedown.disableTextSelect\");\n                $(document).off(\".owl owl\");\n                $(window).off(\"resize\", base.resizer);\n            },\n            unWrap: function () {\n                var base = this;\n                if (base.$elem.children().length !== 0) {\n                    base.$owlWrapper.unwrap();\n                    base.$userItems.unwrap().unwrap();\n                    if (base.owlControls) {\n                        base.owlControls.remove();\n                    }\n                }\n                base.clearEvents();\n                base.$elem\n                        .attr(\"style\", base.$elem.data(\"owl-originalStyles\") || \"\")\n                        .attr(\"class\", base.$elem.data(\"owl-originalClasses\"));\n            },\n            destroy: function () {\n                var base = this;\n                base.stop();\n                window.clearInterval(base.checkVisible);\n                base.unWrap();\n                base.$elem.removeData();\n            },\n            reinit: function (newOptions) {\n                var base = this,\n                        options = $.extend({}, base.userOptions, newOptions);\n                base.unWrap();\n                base.init(options, base.$elem);\n            },\n            addItem: function (htmlString, targetPosition) {\n                var base = this,\n                        position;\n\n                if (!htmlString) {\n                    return false;\n                }\n\n                if (base.$elem.children().length === 0) {\n                    base.$elem.append(htmlString);\n                    base.setVars();\n                    return false;\n                }\n                base.unWrap();\n                if (targetPosition === undefined || targetPosition === -1) {\n                    position = -1;\n                } else {\n                    position = targetPosition;\n                }\n                if (position >= base.$userItems.length || position === -1) {\n                    base.$userItems.eq(-1).after(htmlString);\n                } else {\n                    base.$userItems.eq(position).before(htmlString);\n                }\n\n                base.setVars();\n            },\n            removeItem: function (targetPosition) {\n                var base = this,\n                        position;\n\n                if (base.$elem.children().length === 0) {\n                    return false;\n                }\n                if (targetPosition === undefined || targetPosition === -1) {\n                    position = -1;\n                } else {\n                    position = targetPosition;\n                }\n\n                base.unWrap();\n                base.$userItems.eq(position).remove();\n                base.setVars();\n            }\n\n        };\n\n        $.fn.owlCarousel = function (options) {\n            return this.each(function () {\n                if ($(this).data(\"owl-init\") === true) {\n                    return false;\n                }\n                $(this).data(\"owl-init\", true);\n                var carousel = Object.create(Carousel);\n                carousel.init(options, this);\n                $.data(this, \"owlCarousel\", carousel);\n            });\n        };\n\n        $.fn.owlCarousel.options = {\n            items: 5,\n            itemsCustom: false,\n            itemsDesktop: [1199, 4],\n            itemsDesktopSmall: [979, 3],\n            itemsTablet: [768, 2],\n            itemsTabletSmall: false,\n            itemsMobile: [479, 1],\n            singleItem: false,\n            itemsScaleUp: false,\n            slideSpeed: 200,\n            paginationSpeed: 800,\n            rewindSpeed: 1000,\n            autoPlay: false,\n            stopOnHover: false,\n            navigation: false,\n            navigationText: [\"prev\", \"next\"],\n            rewindNav: true,\n            scrollPerPage: false,\n            pagination: true,\n            paginationNumbers: false,\n            responsive: true,\n            responsiveRefreshRate: 200,\n            responsiveBaseWidth: window,\n            baseClass: \"owl-carousel\",\n            theme: \"owl-theme\",\n            lazyLoad: false,\n            lazyFollow: true,\n            lazyEffect: \"fade\",\n            autoHeight: false,\n            jsonPath: false,\n            jsonSuccess: false,\n            dragBeforeAnimFinish: true,\n            mouseDrag: true,\n            touchDrag: true,\n            addClassActive: false,\n            transitionStyle: false,\n            beforeUpdate: false,\n            afterUpdate: false,\n            beforeInit: false,\n            afterInit: false,\n            beforeMove: false,\n            afterMove: false,\n            afterAction: false,\n            startDragging: false,\n            afterLazyLoad: false\n        };\n    }(jQuery, window, document));\n});","Solwin_ScrolltoTop/js/scroll.js":"/**\n * Solwin Infotech\n * Solwin ScrolltoTop Extension\n *\n * @category   Solwin\n * @package    Solwin_ScrolltoTop\n * @copyright  Copyright \u00a9 2006-2016 Solwin (https://www.solwininfotech.com)\n * @license    https://www.solwininfotech.com/magento-extension-license/ \n */\n\nrequire(['jquery'], function () {\n    jQuery(document).ready(function () {\n    if (jQuery(\".scrollup\").length > 0) {\n        // scroll-to-top button show and hide\n        jQuery(document).ready(function () {\n            jQuery(window).scroll(function () {\n                if (jQuery(this).scrollTop() > 100) {\n                    jQuery('.scrollup').fadeIn();\n                } else {\n                    jQuery('.scrollup').fadeOut();\n                }\n            });\n            // scroll-to-top animate\n            jQuery('.scrollup').click(function () {\n                jQuery(\"html, body\").animate({scrollTop: 0}, 600);\n                return false;\n            });\n        });\n    }\n});\n});","Vertex_AddressValidation/js/billing-validation-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Magento_Checkout/js/checkout-data'\r\n], function ($, registry, checkoutData) {\r\n    'use strict';\r\n\r\n    return function (Component) {\r\n        return Component.extend({\r\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\r\n            addressValidator: null,\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                registry.get(\r\n                    'checkout.steps.billing-step.payment.payments-list' +\r\n                    '.before-place-order.billingAdditional' +\r\n                    '.address-validation-message.validator',\r\n                    function (validator) {\r\n                        this.addressValidator = validator;\r\n                    }.bind(this)\r\n                );\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * @returns {self}\r\n             */\r\n            updateAddress: function () {\r\n                this.registerAddressInvalidationTrigger();\r\n\r\n                var billingData = checkoutData.getBillingAddressFromData();\r\n\r\n                if (!this.validationConfig.isAddressValidationEnabled ||\r\n                    this.addressValidator.isAddressValid ||\r\n                    billingData === null ||\r\n                    this.selectedAddress() && !this.isAddressFormVisible() ||\r\n                    this.validationConfig.countryValidation.indexOf(billingData.country_id) === -1\r\n                ) {\r\n                    return this._super();\r\n                }\r\n\r\n                this.addressValidator.addressValidation().done(function () {\r\n                    if (!this.validationConfig.showValidationSuccessMessage) {\r\n                        return this.updateAddress();\r\n                    }\r\n                }.bind(this));\r\n            },\r\n\r\n            /**\r\n             * When called, register a single (mind the \"one\") address invalidation trigger,\r\n             * that sets the \"this.addressValidator.isAddressValid = false\" for any further billing address field change.\r\n             */\r\n            registerAddressInvalidationTrigger: function () {\r\n                let that = this;\r\n                $('fieldset')\r\n                    .find('[data-form=\"billing-new-address\"]')\r\n                    .one(\r\n                        'keyup change paste',\r\n                        'input[name^=\"street\"]' +\r\n                        ', input[name=\"postcode\"]' +\r\n                        ', input[name=\"city\"]' +\r\n                        ', input[name=\"country_id\"]' +\r\n                        ', select[name=\"region_id\"]',\r\n                        function () {\r\n                            that.addressValidator.isAddressValid = false;\r\n                        });\r\n            }\r\n        });\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/customer-validation-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Vertex_AddressValidation/js/view/customer/address-form',\r\n    'Vertex_AddressValidation/js/view/customer/address-validation'\r\n], function ($, registry, addressForm, addressValidator) {\r\n    'use strict';\r\n\r\n    var config = window.vertexAddressValidationConfig || {};\r\n\r\n    return function (addressValidation) {\r\n        if (!config.enabled) {\r\n            return addressValidation;\r\n        }\r\n\r\n        $.widget('mage.addressValidation', addressValidation, {\r\n            /**\r\n             * Initialize widget\r\n             *\r\n             * @returns {*}\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                var result = this._super(),\r\n                    button = $(this.options.selectors.button, this.element),\r\n                    validator = addressValidator();\r\n\r\n                addressForm.initialize(this.element, button);\r\n                addressForm.renameSubmitButton(config.validateButtonText);\r\n\r\n                this.element.data('validator').settings.submitHandler = function (form) {\r\n                    if (addressForm.isSaveAsIs) {\r\n                        addressForm.isSaveAsIs = false;\r\n                        return this.submitForm(form);\r\n                    }\r\n\r\n                    validator.addressValidation(addressForm.getAddress()).done(this.submitForm.bind(this, form));\r\n                }.bind(this);\r\n\r\n                return result;\r\n            },\r\n\r\n            /**\r\n             * Submit form\r\n             *\r\n             * @param {Object} form\r\n             */\r\n            submitForm: function (form) {\r\n                addressForm.disableSubmitButtons();\r\n                form.submit();\r\n            }\r\n        });\r\n        return $.mage.addressValidation;\r\n    }\r\n});\r\n","Vertex_AddressValidation/js/definitions.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\n/**\r\n * @typedef UncleanAddress\r\n * @api\r\n * @property {string[]} streetAddress\r\n * @property {string} city\r\n * @property {string} mainDivision - Region, State, or Province\r\n * @property {string} postalCode - ZIP or postal code\r\n * @property {string} country - 2 or 3 letter country code\r\n */\r\n\r\n/**\r\n * @typedef CleanAddress\r\n * @api\r\n * @property {string[]} streetAddress - street address lines\r\n * @property {?string} city - name of the city\r\n * @property {?string} subDivision - name of the sub-division (county, parish)\r\n * @property {?string} regionName - name of the region (state/province)\r\n * @property {?int} regionId - numeric (state/province) region identifier in the Magento database\r\n * @property {?string} postalCode - ZIP+4 or postal code\r\n * @property {?string} countryCode - 2 letter country code\r\n * @property {?string} countryName - name of the country\r\n */\r\n","Vertex_AddressValidation/js/shipping-invalidate-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'mage/utils/wrapper'\r\n], function (registry, wrapper) {\r\n    'use strict';\r\n\r\n    var config = window.checkoutConfig.vertexAddressValidationConfig || {};\r\n\r\n    return function (target) {\r\n        if (!config.isAddressValidationEnabled) {\r\n            return target;\r\n        }\r\n\r\n        var validationMessage = registry.get(\r\n            'checkout.steps.shipping-step.shippingAddress' +\r\n            '.before-shipping-method-form.shippingAdditional'\r\n        );\r\n\r\n        target.setSelectedShippingAddress = wrapper.wrap(target.setSelectedShippingAddress, function (original, args) {\r\n            var addressValidator = registry.get(\r\n                'checkout.steps.shipping-step.shippingAddress' +\r\n                '.before-shipping-method-form.shippingAdditional' +\r\n                '.address-validation-message.validator'\r\n            );\r\n\r\n            addressValidator.isAddressValid = false;\r\n            validationMessage.clear();\r\n\r\n            return original(args);\r\n        });\r\n\r\n        return target;\r\n    }\r\n});\r\n","Vertex_AddressValidation/js/shipping-validation-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'Magento_Checkout/js/model/quote'\r\n], function (registry, quote) {\r\n    'use strict';\r\n\r\n    return function (Component) {\r\n        return Component.extend({\r\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\r\n            shippingData: null,\r\n            addressValidator: null,\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                registry.get(\r\n                    'checkout.steps.shipping-step.shippingAddress' +\r\n                    '.before-shipping-method-form.shippingAdditional' +\r\n                    '.address-validation-message.validator',\r\n                    function (validator) {\r\n                        this.addressValidator = validator;\r\n                    }.bind(this)\r\n                );\r\n\r\n                this.shippingData = quote.shippingAddress();\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * @return {Boolean}\r\n             */\r\n            validateShippingInformation: function () {\r\n                var superResult = this._super();\r\n\r\n                // Proceed with saving the address\r\n                if (!this.validationConfig.isAddressValidationEnabled ||\r\n                    !superResult ||\r\n                    this.addressValidator.isAddressValid ||\r\n                    !quote.shippingAddress().isEditable() ||\r\n                    this.validationConfig.countryValidation.indexOf(this.shippingData.countryId) === -1\r\n                ) {\r\n                    this.addressValidator.message.clear();\r\n                    return superResult;\r\n                }\r\n\r\n                // Run address validation\r\n                if (superResult) {\r\n                    this.addressValidator.addressValidation().done(function () {\r\n                        if (!this.validationConfig.showValidationSuccessMessage) {\r\n                            this.setShippingInformation();\r\n                        }\r\n                    }.bind(this));\r\n\r\n                    return false;\r\n                }\r\n                return superResult;\r\n            }\r\n        });\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/validation-messages.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\ndefine(['mage/translate'], function ($t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Messages here may not be the final version.  Please check the module's\r\n     * i18n.csv file for final english versions.\r\n     *\r\n     * Messages are kept here as-is for backwards compatibility with translations\r\n     */\r\n    return {\r\n        noChangesNecessary: $t('The address is valid'),\r\n        noAddressFound: $t('We did not find a valid address'),\r\n        changesFound: $t('The address is not valid'),\r\n        adminChangesFound: $t('The intended address could be:'),\r\n        addressUpdated: $t('The address was updated'),\r\n        streetAddressUpdateWarning: $t('Warning: Updating the address will replace all street address fields.')\r\n    };\r\n})\r\n","Vertex_AddressValidation/js/action/address-validation-request.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'mage/storage',\r\n    'Vertex_AddressValidation/js/model/url-builder'\r\n], function (\r\n    storage,\r\n    urlBuilder\r\n) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Cleanse an Address\r\n     *\r\n     * @param {UncleanAddress} address\r\n     */\r\n    return function (address) {\r\n        let url = '/address/cleanse';\r\n        const params = {address: address};\r\n\r\n        if (window.checkoutConfig && window.checkoutConfig.isCustomerLoggedIn === false) {\r\n            url = '/guest-address/cleanse';\r\n            params.cartId = window.checkoutConfig.quoteId;\r\n        }\r\n\r\n        return storage.post(\r\n            urlBuilder.createUrl(url, {}),\r\n            JSON.stringify(params)\r\n        );\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/action/build-quote-address.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Convert a Cleansed Address to a Magento Quote Address object\r\n     *\r\n     * @param {CleanAddress} address\r\n     * @returns {Object} quoteAddress\r\n     */\r\n    return function (address) {\r\n        return {\r\n            street: address.street_address,\r\n            city: address.city,\r\n            region: address.region_name,\r\n            region_id: address.region_id,\r\n            postcode: address.postal_code,\r\n            country_id: address.country_code\r\n        }\r\n    }\r\n})\r\n","Vertex_AddressValidation/js/action/convert-quote-address.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['uiRegistry'], function (registry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Convert a Magento Quote or Customer Address to an unclean address\r\n     *\r\n     * In most instances, the caller will need to set the region property on the address object.\r\n     *\r\n     * @param {Object} address\r\n     * @returns {UncleanAddress}\r\n     */\r\n    return function (address) {\r\n        const streetAddress = [];\r\n\r\n        for (let i in address.street) {\r\n            if (!address.street.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            if (address.street[i].length > 0) {\r\n                streetAddress.push(address.street[i]);\r\n            }\r\n        }\r\n\r\n        let countryId;\r\n        if (typeof address.countryId !== 'undefined') {\r\n            countryId = address.countryId;\r\n        } else if (typeof address.country_id !== 'undefined') {\r\n            countryId = address.country_id;\r\n        }\r\n\r\n        return {\r\n            street_address: streetAddress,\r\n            city: address.city,\r\n            main_division: address.region,\r\n            postal_code: address.postcode,\r\n            country: countryId\r\n        };\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/model/address-difference-template-renderer.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['underscore', 'uiClass'], function (_, Component) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @typedef {Object} vertexDifferenceRendererObject\r\n     * @property {vertexDifferenceObject_Message} message\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} vertexDifferenceObject_Message\r\n     * @property {string} text - Informative message to end user\r\n     * @property {vertexDifferenceObject_Difference[]} differences - Array of differences\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} vertexDifferenceObject_Difference\r\n     * @property {string} name - Human readable name of field that has a difference\r\n     * @property {string} value - New value for the field\r\n     */\r\n\r\n    /**\r\n     * @api\r\n     */\r\n    return Component.extend({\r\n        /**\r\n         * @var {string} template - Location of file to render\r\n         */\r\n        template: 'Vertex_AddressValidation/template/validation-result.html',\r\n\r\n        /**\r\n         * @var {*} renderer - Underscore.js template object\r\n         */\r\n        renderer: null,\r\n\r\n        /**\r\n         * @constructor\r\n         * @param {string} template - File to render\r\n         * @returns {*}\r\n         */\r\n        initialize: function (template) {\r\n            if (typeof this.template !== 'undefined') {\r\n                this.template = template;\r\n            }\r\n\r\n            require(['text!' + this.template], function (templateContents) {\r\n                this.renderer = _.template(templateContents);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {vertexDifferenceRendererObject} message\r\n         * @returns {string} HTML\r\n         */\r\n        render: function (message) {\r\n            return this.renderer(message);\r\n        }\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/model/difference-determiner.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['mage/translate'], function ($t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @typedef VertexAddressReadableDifference\r\n     * @property {string} type - Type of difference (used for code)\r\n     * @property {string} name - Human readable name of the item that has changed\r\n     * @property {(string|string[])} value - Human readable value of the item that has changed\r\n     * @property {(string|string[])} rawValue - Script usable value of the item that has changed\r\n     */\r\n\r\n    /**\r\n     * @param {UncleanAddress} uncleanAddress\r\n     * @param {CleanAddress} cleanAddress\r\n     * @returns {boolean}\r\n     */\r\n    function streetAddressesAreDifferent(uncleanAddress, cleanAddress) {\r\n        uncleanAddress.street_address.filter(function (val) {\r\n            // Filter out empty strings\r\n            return val.length > 0;\r\n        });\r\n\r\n        if (uncleanAddress.street_address.length !== cleanAddress.street_address.length) {\r\n            return true;\r\n        }\r\n        for(let index = 0,length = uncleanAddress.street_address.length;index < length;++index) {\r\n            if (uncleanAddress.street_address[index] !== cleanAddress.street_address[index]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param {UncleanAddress} uncleanAddress\r\n     * @param {CleanAddress} cleanAddress\r\n     * @returns {VertexAddressReadableDifference[]}\r\n     */\r\n    return function (uncleanAddress, cleanAddress) {\r\n        const listedDifferences = [];\r\n        if (streetAddressesAreDifferent(uncleanAddress, cleanAddress)) {\r\n            listedDifferences.push({type: 'street', name: $t('Street Address'), value: cleanAddress.street_address, rawValue: cleanAddress.street_address});\r\n        }\r\n        if (uncleanAddress.city !== cleanAddress.city) {\r\n            listedDifferences.push({type: 'city', name: $t('City'), value: cleanAddress.city, rawValue: cleanAddress.city});\r\n        }\r\n        if (uncleanAddress.main_division !== cleanAddress.region_name) {\r\n            listedDifferences.push({type: 'region', name: $t('State/Province'), value: cleanAddress.region_name, rawValue: cleanAddress.region_id});\r\n        }\r\n        if (uncleanAddress.postal_code !== cleanAddress.postal_code) {\r\n            listedDifferences.push({type: 'postcode', name: $t('Zip/Postal Code'), value: cleanAddress.postal_code, rawValue: cleanAddress.postal_code});\r\n        }\r\n        if (uncleanAddress.country !== cleanAddress.country_code) {\r\n            listedDifferences.push({type: 'country', name: $t('Country'), value: cleanAddress.country_name, rawValue: cleanAddress.country_code});\r\n        }\r\n        return listedDifferences;\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/model/url-builder.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var config = window.checkoutConfig || window.vertexAddressValidationConfig || {};\r\n\r\n    return {\r\n        method: 'rest',\r\n        storeCode: config.storeCode,\r\n        version: 'V1',\r\n        serviceUrl: ':method/:storeCode/:version',\r\n\r\n        /**\r\n         * @param {String} url\r\n         * @param {Object} params\r\n         * @return {*}\r\n         */\r\n        createUrl: function (url, params) {\r\n            var completeUrl = this.serviceUrl + url;\r\n            return this.bindParams(completeUrl, params);\r\n        },\r\n\r\n        /**\r\n         * @param {String} url\r\n         * @param {Object} params\r\n         * @return {*}\r\n         */\r\n        bindParams: function (url, params) {\r\n            var urlParts;\r\n\r\n            params.method = this.method;\r\n            params.storeCode = this.storeCode;\r\n            params.version = this.version;\r\n\r\n            urlParts = url.split('/');\r\n            urlParts = urlParts.filter(Boolean);\r\n\r\n            $.each(urlParts, function (key, part) {\r\n                part = part.replace(':', '');\r\n\r\n                if (params[part] !== undefined) {\r\n                    urlParts[key] = params[part];\r\n                }\r\n            });\r\n\r\n            return urlParts.join('/');\r\n        }\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/model/checkout/billing/address-resolver.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Magento_Customer/js/model/address-list',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\r\n], function ($, registry, addressList, addressResolver) {\r\n    'use strict';\r\n\r\n    addressResolver = $.extend({}, addressResolver, {\r\n        updateFields: function (element, value) {\r\n            if (element.name === 'street') {\r\n                const streetInputs = $('.payment-method input[name^=\"street[\"]');\r\n                streetInputs.val('');\r\n                if (typeof value === 'string') {\r\n                    $(streetInputs[0]).val(value);\r\n                } else {\r\n                    for (let index = 0, length = value.length;index < length;++index) {\r\n                        $(streetInputs[index])\r\n                            .val(value[index]);\r\n                    }\r\n                }\r\n                streetInputs.trigger('change').trigger('blur');\r\n            } else {\r\n                $('.payment-method input[name=\"' + element.name + '\"]')\r\n                    .val(value)\r\n                    .trigger('change')\r\n                    .trigger('blur');\r\n            }\r\n        }\r\n    });\r\n    return addressResolver;\r\n});\r\n","Vertex_AddressValidation/js/model/checkout/shipping/address-resolver.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Magento_Customer/js/model/address-list',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\r\n    'Magento_Checkout/js/action/create-shipping-address',\r\n    'Magento_Checkout/js/checkout-data'\r\n], function ($, registry, addressList, addressResolver, createShippingAddress, checkoutData) {\r\n    'use strict';\r\n\r\n    addressResolver = $.extend({}, addressResolver, {\r\n        checkoutProvider: registry.get('checkoutProvider'),\r\n\r\n        updateFields: function (element, value) {\r\n            var addressData = $.extend({}, this.checkoutProvider.get('shippingAddress'));\r\n\r\n            if (element.name === 'street') {\r\n                // Just updating the addressData element doesn't seem to work on street inputs\r\n                const streetInputs = $('.form-shipping-address input[name^=\"street[\"]');\r\n                streetInputs.val('');\r\n                for(let index = 0, length = addressData[element.name].length;index < length;++index) {\r\n                    addressData[element.name][index] = typeof value[index] !== 'undefined' ? value[index] : '';\r\n                    $(streetInputs[index])\r\n                        .val(addressData[element.name][index]);\r\n                }\r\n            } else {\r\n                addressData[element.name] = value;\r\n            }\r\n\r\n            this.checkoutProvider.set('shippingAddress', addressData);\r\n            this.checkoutProvider.trigger('shippingAddress', addressData);\r\n\r\n            // Update address list containers\r\n            createShippingAddress(addressData);\r\n            checkoutData.setNewCustomerShippingAddress($.extend(true, {}, addressData));\r\n        }\r\n    });\r\n    return addressResolver;\r\n});\r\n","Vertex_AddressValidation/js/model/customer/address-resolver.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    return {\r\n        addressFieldsForValidation: ['city', 'postcode', 'street'],\r\n        responseAddressData: {},\r\n        formAddressData: {},\r\n\r\n        /**\r\n         * Will check if the response is different, same or invalid\r\n         *\r\n         * @param {Object} responseAddressData\r\n         * @param {Object} formAddressData\r\n         * @returns {Boolean|Array}\r\n         */\r\n        resolveAddressDifference: function (responseAddressData, formAddressData) {\r\n            var differences = [],\r\n                valid = [];\r\n\r\n            this.responseAddressData = responseAddressData;\r\n            this.formAddressData = formAddressData;\r\n\r\n            if (this.invalidErrorResponse(responseAddressData)) {\r\n                return [];\r\n            }\r\n\r\n            _.each(this.addressFieldsForValidation, function (v, i) {\r\n                var responseValue, value, name, isComplex,\r\n                    complexValues = [],\r\n                    isDifferent = false;\r\n\r\n                isComplex = _.isObject(formAddressData[v]) || _.isArray(formAddressData[v]);\r\n\r\n                if (responseAddressData[v] !== formAddressData[v]) {\r\n                    if (isComplex) {\r\n                        _.each(formAddressData[v], function (val, index) {\r\n                            if (val && responseAddressData[v][index] && val !== responseAddressData[v][index]) {\r\n                                complexValues[index] = responseAddressData[v][index];\r\n                                isDifferent = true;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (!isDifferent && isComplex) {\r\n                        valid.push(v);\r\n                    }\r\n\r\n                    responseValue = responseAddressData[v];\r\n                    if (complexValues.length) {\r\n                        responseValue = complexValues.join(', ');\r\n                    }\r\n\r\n                    if (!complexValues.length && _.isArray(responseValue) || responseValue === null) {\r\n                        return;\r\n                    }\r\n\r\n                    value = responseValue.substr(0, 1).toUpperCase() + responseValue.substr(1);\r\n                    name = v.substr(0, 1).toUpperCase() + v.substr(1);\r\n                    differences.push({\r\n                        value: value,\r\n                        name: name\r\n                    });\r\n\r\n                    return;\r\n                }\r\n                valid[i] = v;\r\n            });\r\n\r\n            if (valid.length === this.addressFieldsForValidation.length && _.isEmpty(differences)) {\r\n                return true;\r\n            }\r\n            return differences;\r\n        },\r\n\r\n        /**\r\n         * Updates form inputs with the values from the API response\r\n         *\r\n         * @returns {*}\r\n         */\r\n        resolveAddressUpdate: function () {\r\n            var responseAddressData = this.responseAddressData,\r\n                formAddressData = this.formAddressData,\r\n                self = this;\r\n\r\n            _.each(this.addressFieldsForValidation, function (v) {\r\n                var fieldValue = responseAddressData[v],\r\n                    linesObj = {};\r\n\r\n                if (_.isObject(formAddressData[v])) {\r\n                    _.each(formAddressData[v], function (val, i) {\r\n                        if (fieldValue[i]) {\r\n                            linesObj[i] = fieldValue[i];\r\n                            self.updateFields({name: v, key: i}, fieldValue[i]);\r\n\r\n                            return;\r\n                        }\r\n                        linesObj[i] = val;\r\n                    });\r\n                    formAddressData[v] = linesObj;\r\n                    return;\r\n                }\r\n\r\n                formAddressData[v] = fieldValue;\r\n                self.updateFields({name: v}, fieldValue);\r\n            });\r\n\r\n            return formAddressData;\r\n        },\r\n\r\n        /**\r\n         * Update validated fields\r\n         *\r\n         * @param {Object} element\r\n         * @param {String} value\r\n         */\r\n        updateFields: function (element, value) {\r\n            if (element.key !== undefined) {\r\n                $('input[name=\"' + element.name + '[]\"]').eq(element.key).val(value).trigger('change');\r\n            } else {\r\n                $('input[name=\"' + element.name + '\"]').val(value).trigger('change');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Will check if the api response found a address\r\n         *\r\n         * @param {Object} responseData\r\n         * @returns {Boolean}\r\n         */\r\n        invalidErrorResponse: function (responseData) {\r\n            _.each(this.addressFieldsForValidation, function (v) {\r\n                if (_.isArray(responseData[v]) && responseData[v][0] === '') {\r\n                    return true;\r\n                }\r\n\r\n                if (responseData[v] === null) {\r\n                    return true;\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/view/validation-message.js":"define([\r\n    'ko',\r\n    'uiComponent',\r\n    'Vertex_AddressValidation/js/model/address-difference-template-renderer',\r\n    'Vertex_AddressValidation/js/validation-messages'\r\n], function (ko, Component, differenceRenderer, validationMessages) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Vertex_AddressValidation/validation-message',\r\n            cleanseAddressTemplate: 'Vertex_AddressValidation/template/validation-result.html',\r\n            showSuccessMessage: false,\r\n            message: {},\r\n            address: null,\r\n            hasMessage: false,\r\n            tracks: {\r\n                showSuccessMessage: true,\r\n                message: true\r\n            }\r\n        },\r\n\r\n        templateRenderer: null,\r\n\r\n        initialize: function () {\r\n            this._super();\r\n            this.templateRenderer = new differenceRenderer(this.cleanseAddressTemplate);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Model} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this.address = ko.observable();\r\n\r\n            this.hasMessage = ko.pureComputed(function() {\r\n                return this._objectHasEntries(this.message);\r\n            }.bind(this));\r\n\r\n            this.renderedTemplate = ko.pureComputed(function () {\r\n                const templateVariables = {\r\n                    message: {\r\n                        text: this.message.text,\r\n                        differences: this.message.differences\r\n                    },\r\n                    address: this.address()\r\n                };\r\n\r\n                for (let index = 0,length = this.message.differences.length;index < length;++index) {\r\n                    if (this.message.differences[index].type === 'street') {\r\n                        templateVariables.warning = validationMessages.streetAddressUpdateWarning;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                return this.templateRenderer.render(templateVariables);\r\n            }.bind(this));\r\n\r\n            return this._super();\r\n        },\r\n\r\n\r\n        /**\r\n         * Sets a success message\r\n         *\r\n         * @param {String} text\r\n         * @param {Object} differences\r\n         */\r\n        setSuccessMessage: function (text, differences) {\r\n            this.setMessage(0, 'message success', text, differences || []);\r\n        },\r\n\r\n        /**\r\n         * Sets a warning message\r\n         *\r\n         * @param {String} text\r\n         * @param {Object} differences\r\n         * @param {CleanAddress} address\r\n         */\r\n        setWarningMessage: function (text, differences, address) {\r\n            this.address(address || {});\r\n            this.setMessage(1, 'message warning', text, differences || []);\r\n        },\r\n\r\n        /**\r\n         * Sets a message\r\n         *\r\n         * @param {Integer} type\r\n         * @param {String} cssClass\r\n         * @param {String} text\r\n         * @param {Object} differences\r\n         */\r\n        setMessage: function (type, cssClass, text, differences) {\r\n            this.message = {\r\n                type: type,\r\n                text: text,\r\n                class: cssClass || '',\r\n                differences: differences || []\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Returns if message exists\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasMessage: function () {\r\n            return ko.computed(function () {\r\n                return this._objectHasEntries(this.message);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Returns message\r\n         *\r\n         * {Object}\r\n         */\r\n        clear: function () {\r\n            this.message = {};\r\n        },\r\n\r\n        /**\r\n         * Return whether or not the object has any entries\r\n         *\r\n         * Object.entries is not supported by IE11 or Opera Mini.\r\n         * Writing a quick method to serve the same purpose was easier than\r\n         * importing a shim.\r\n         *\r\n         * @param {Object} object\r\n         * @returns {boolean}\r\n         * @private\r\n         */\r\n        _objectHasEntries: function(object) {\r\n            if (typeof Object.entries !== 'undefined') {\r\n                return Object.entries(object).length !== 0;\r\n            }\r\n            for (let key in object) {\r\n                if (object.hasOwnProperty(key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        },\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/view/checkout/billing/address-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'Vertex_AddressValidation/js/view/checkout/shipping/address-validation',\r\n    'Vertex_AddressValidation/js/model/checkout/billing/address-resolver',\r\n    'Magento_Checkout/js/checkout-data',\r\n    'uiRegistry'\r\n], function (\r\n    Component,\r\n    addressResolver,\r\n    checkoutData,\r\n    registry\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        resolver: addressResolver,\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getFormData: function () {\r\n            const formData = checkoutData.getBillingAddressFromData(),\r\n                checkoutProvider = registry.get('checkoutProvider');\r\n\r\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\r\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\r\n                    return obj.value === formData.region_id;\r\n                });\r\n                if (region && region.label) {\r\n                    formData.region = region.label;\r\n                }\r\n            }\r\n\r\n            return formData;\r\n        }\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/view/checkout/shipping/address-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'Vertex_AddressValidation/js/action/address-validation-request',\r\n    'Vertex_AddressValidation/js/model/checkout/shipping/address-resolver',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/checkout-data',\r\n    'Magento_Checkout/js/model/error-processor',\r\n    'Magento_Ui/js/model/messageList',\r\n    'Vertex_AddressValidation/js/validation-messages',\r\n    'Vertex_AddressValidation/js/action/convert-quote-address',\r\n    'Vertex_AddressValidation/js/action/build-quote-address',\r\n    'Vertex_AddressValidation/js/model/difference-determiner'\r\n], function (\r\n    $,\r\n    registry,\r\n    Component,\r\n    addressValidationRequest,\r\n    addressResolver,\r\n    fullScreenLoader,\r\n    checkoutData,\r\n    errorProcessor,\r\n    messageContainer,\r\n    validationMessages,\r\n    convertQuoteAddress,\r\n    buildQuoteAddress,\r\n    differenceDeterminer\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        validationConfig: window.checkoutConfig.vertexAddressValidationConfig || {},\r\n        resolver: addressResolver,\r\n        isAddressValid: false,\r\n        message: null,\r\n        defaults: {\r\n            listens: {\r\n                addressData: 'addressUpdated'\r\n            },\r\n            imports: {\r\n                addressData: '${ $.provider }:shippingAddress'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reset validation after address update\r\n         */\r\n        addressUpdated: function () {\r\n            this.isAddressValid = false;\r\n            this.updateAddress = false;\r\n\r\n            if (this.message) {\r\n                this.message.clear();\r\n                this.message.showSuccessMessage = false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.message = registry.get(this.parentName);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getFormData: function () {\r\n            const formData = checkoutData.getShippingAddressFromData(),\r\n                checkoutProvider = registry.get('checkoutProvider');\r\n\r\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\r\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\r\n                    return obj.value === formData.region_id;\r\n                });\r\n                if (region && region.label) {\r\n                    formData.region = region.label;\r\n                }\r\n            }\r\n\r\n            return formData;\r\n        },\r\n\r\n        /**\r\n         * Triggers a request to the address validation builder and adds the response\r\n         */\r\n        addressValidation: function () {\r\n            var deferred = $.Deferred();\r\n            this.isAddressValid = false;\r\n            fullScreenLoader.startLoader();\r\n\r\n            addressValidationRequest(convertQuoteAddress(this.getFormData()))\r\n                .done(function (response) {\r\n                    this.isAddressValid = true;\r\n                    if (this.handleAddressDifferenceResponse(response) === true) {\r\n                        deferred.resolve();\r\n                    }\r\n                }.bind(this)).fail(function (response) {\r\n                errorProcessor.process(response, messageContainer);\r\n            }).always(function () {\r\n                fullScreenLoader.stopLoader();\r\n            });\r\n\r\n            return deferred;\r\n        },\r\n\r\n        /**\r\n         * Get the message with the differences\r\n         *\r\n         * @param {?CleanAddress} response\r\n         */\r\n        handleAddressDifferenceResponse: function (response) {\r\n            if (response === null || !Object.keys(response).length) {\r\n                this.message.setWarningMessage(validationMessages.noAddressFound);\r\n                return;\r\n            }\r\n\r\n            this.resolver.responseAddressData = buildQuoteAddress(response);\r\n\r\n            const differences = differenceDeterminer(convertQuoteAddress(this.getFormData()), response),\r\n                showSuccessMessage = this.validationConfig.showValidationSuccessMessage || false;\r\n\r\n            if (differences.length === 0 && showSuccessMessage) {\r\n                this.message.setSuccessMessage(validationMessages.noChangesNecessary);\r\n            } else if (differences.length > 0) {\r\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the update message\r\n         */\r\n        updateVertexAddress: function () {\r\n            this.resolver.resolveAddressUpdate();\r\n\r\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\r\n            this.isAddressValid = true;\r\n        }\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/view/customer/address-form.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\r\n], function ($, ko, _, addressResolver) {\r\n    'use strict';\r\n\r\n    const config = window.vertexAddressValidationConfig || {};\r\n\r\n    return {\r\n        form: {},\r\n        button: {},\r\n        saveAsIsButton: {},\r\n        formUpdated: ko.observable(false),\r\n        isSaveAsIs: false,\r\n\r\n        /**\r\n         * Initialize address form object\r\n         *\r\n         * @param {Object} form\r\n         * @param {Object} button\r\n         */\r\n        initialize: function (form, button) {\r\n            var self = this,\r\n                fieldsToValidate = _.clone(addressResolver.addressFieldsForValidation);\r\n\r\n            this.form = form || {};\r\n            this.button = button || {};\r\n\r\n            fieldsToValidate.push('country_id');\r\n            fieldsToValidate.forEach(function (name) {\r\n                self.getFieldByName(name).on('input', function () {\r\n                    self.formUpdated(true);\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return jQuery object by name\r\n         *\r\n         * @param {String} name\r\n         */\r\n        getFieldByName: function (name) {\r\n            return this.form.find('[name=%s]'.replace('%s', name));\r\n        },\r\n\r\n        /**\r\n         * Rename form button value\r\n         *\r\n         * @param {String} value\r\n         */\r\n        renameSubmitButton: function (value, button) {\r\n            var button = button || this.button;\r\n            var buttonValue = $(button.html()).html(value);\r\n            button.html(buttonValue).attr('title', value);\r\n        },\r\n\r\n        /**\r\n         * Show 'Save As Is' button\r\n         */\r\n        showSaveAsIsButton: function () {\r\n            if (!_.isEmpty(this.saveAsIsButton)) {\r\n                this.saveAsIsButton.show();\r\n                return;\r\n            }\r\n\r\n            this.saveAsIsButton = $('<button/>', {\r\n                text: config.saveAsIsButtonText || '',\r\n                class: 'action save vertex-secondary',\r\n                'data-action': 'save-as-is-address',\r\n                click: function () {\r\n                    this.isSaveAsIs = true;\r\n                }.bind(this)\r\n            });\r\n\r\n            this.saveAsIsButton.insertAfter(this.button);\r\n        },\r\n\r\n        /**\r\n         * Hide 'Save As Is' button\r\n         */\r\n        hideSaveAsIsButton: function () {\r\n            if (!_.isEmpty(this.saveAsIsButton)) {\r\n                this.saveAsIsButton.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable form submit buttons\r\n         */\r\n        disableSubmitButtons: function () {\r\n            this.button.attr('disabled', true);\r\n\r\n            if (!_.isEmpty(this.saveAsIsButton)) {\r\n                this.saveAsIsButton.attr('disabled', true);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieves form address and converts it to customer address\r\n         *\r\n         * @returns {UncleanAddress}\r\n         */\r\n        getAddress: function () {\r\n            const address = {},\r\n                city = this.form.find('input[name=\"city\"]').val(),\r\n                streetAddress = this.form.find('input[name=\"street[]\"]')\r\n                    .map(function (index, element) {\r\n                        return $(element).val();\r\n                    })\r\n                    .toArray()\r\n                    .filter(function (value) {\r\n                        return value.length > 0;\r\n                    }),\r\n                mainDivisionValue = this.form.find('select[name=\"region_id\"]').val(),\r\n                mainDivision = this.form.find('select[name=\"region_id\"] option[value=\"' + mainDivisionValue + '\"]').text(),\r\n                postalCode = this.form.find('input[name=\"postcode\"]').val(),\r\n                country = this.form.find('select[name=\"country_id\"]').val();\r\n\r\n            address.street_address = streetAddress;\r\n            if (city.length > 0) {\r\n                address.city = city;\r\n            }\r\n            if (mainDivisionValue.length > 0) {\r\n                address.main_division = mainDivision;\r\n            }\r\n            if (postalCode.length > 0) {\r\n                address.postal_code = postalCode;\r\n            }\r\n            address.country = country;\r\n\r\n            return address;\r\n        },\r\n\r\n        updateAddress: function (differences) {\r\n            for (let index = 0, length = differences.length;index < length;++index) {\r\n                let difference = differences[index];\r\n                switch (difference.type) {\r\n                    case 'street':\r\n                        this.form.find('input[name=\"street[]\"]').val('');\r\n                        for (\r\n                            let streetIndex = 0, streetLength = difference.rawValue.length;\r\n                            streetIndex < streetLength;\r\n                            ++streetIndex\r\n                        ) {\r\n                            $(this.form.find('input[name=\"street[]\"]')[streetIndex])\r\n                                .val(difference.rawValue[streetIndex])\r\n                                .trigger('change')\r\n                                .trigger('blur');\r\n                        }\r\n                        break;\r\n                    case 'city':\r\n                        this.form.find('input[name=\"city\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                    case 'region':\r\n                        this.form.find('select[name=\"region_id\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                    case 'postcode':\r\n                        this.form.find('input[name=\"postcode\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                    case 'country':\r\n                        this.form.find('select[name=\"country_id\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Start loader\r\n         */\r\n        startLoader: function () {\r\n            $('body').trigger('processStart');\r\n        },\r\n\r\n        /**\r\n         * Stop loader\r\n         */\r\n        stopLoader: function () {\r\n            $('body').trigger('processStop');\r\n        }\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/view/customer/address-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'Vertex_AddressValidation/js/validation-messages',\r\n    'Vertex_AddressValidation/js/action/address-validation-request',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\r\n    'Vertex_AddressValidation/js/view/validation-message',\r\n    'Vertex_AddressValidation/js/view/customer/address-form',\r\n    'Vertex_AddressValidation/js/model/difference-determiner'\r\n], function (\r\n    $,\r\n    ko,\r\n    registry,\r\n    Component,\r\n    validationMessages,\r\n    addressValidationRequest,\r\n    addressResolver,\r\n    message,\r\n    addressForm,\r\n    differenceDeterminer\r\n) {\r\n    'use strict';\r\n\r\n    var config = window.vertexAddressValidationConfig || {};\r\n\r\n    return Component.extend({\r\n        message: null,\r\n        formAddressData: null,\r\n        isAddressValid: false,\r\n        updateAddress: false,\r\n        addressResolver: addressResolver,\r\n        correctAddress: null,\r\n\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.message = registry.get('addressValidationMessage');\r\n            addressForm.formUpdated.extend({notify: 'always'}).subscribe(this.addressUpdated.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset validation after address update\r\n         */\r\n        addressUpdated: function () {\r\n            addressForm.renameSubmitButton(config.validateButtonText);\r\n            addressForm.hideSaveAsIsButton();\r\n            this.isAddressValid = false;\r\n            this.updateAddress = false;\r\n            this.message.clear();\r\n            this.message.showSuccessMessage = false;\r\n        },\r\n\r\n        /**\r\n         * Triggers a request to the address validation builder and adds the response\r\n         *\r\n         * @param {Object} formAddressData\r\n         * @returns {Object}\r\n         */\r\n        addressValidation: function (formAddressData) {\r\n            var deferred = $.Deferred();\r\n\r\n            if (this.isAddressValid || !this.validateCountry()) {\r\n                if (this.updateAddress) {\r\n                    this.updateVertexAddress();\r\n                }\r\n                return deferred.resolve();\r\n            }\r\n\r\n            this.formAddressData = formAddressData;\r\n            addressForm.startLoader();\r\n\r\n            addressValidationRequest(formAddressData)\r\n                .done(function (response) {\r\n                    this.isAddressValid = true;\r\n                    this.correctAddress = response;\r\n                    if (this.handleAddressDifferenceResponse(response) === true) {\r\n                        deferred.resolve();\r\n                    } else {\r\n                        addressForm.stopLoader();\r\n                    }\r\n                }.bind(this)).fail(function () {\r\n                deferred.reject();\r\n            }).fail(function () {\r\n                addressForm.stopLoader();\r\n            });\r\n\r\n            return deferred;\r\n        },\r\n\r\n        /**\r\n         * Check if country is used in validation\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        validateCountry: function () {\r\n            var countryCode = addressForm.getFieldByName('country_id').val();\r\n\r\n            return countryCode !== undefined\r\n                ? config.countryValidation.includes(countryCode)\r\n                : true;\r\n        },\r\n\r\n        /**\r\n         * Get the message with the differences\r\n         *\r\n         * @param {?CleanAddress} response\r\n         */\r\n        handleAddressDifferenceResponse: function (response) {\r\n            if (response === null || !Object.keys(response).length) {\r\n                addressForm.renameSubmitButton(config.saveAsIsButtonText);\r\n                this.message.setWarningMessage(validationMessages.noAddressFound);\r\n                return;\r\n            }\r\n\r\n            const differences = differenceDeterminer(this.formAddressData, response);\r\n\r\n            if (differences.length === 0 && config.showSuccessMessage) {\r\n                this.message.showSuccessMessage = true;\r\n                return true;\r\n            } else if (differences.length > 0) {\r\n                this.updateAddress = true;\r\n                addressForm.renameSubmitButton(config.updateButtonText);\r\n                addressForm.showSaveAsIsButton();\r\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the update message\r\n         */\r\n        updateVertexAddress: function () {\r\n            addressForm.updateAddress(differenceDeterminer(this.formAddressData, this.correctAddress));\r\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\r\n\r\n            if (config.showSuccessMessage) {\r\n                this.message.showSuccessMessage = true;\r\n            }\r\n        }\r\n    });\r\n});\r\n","Vertex_Tax/js/form/depend-field-checker.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Makes sure a value is set if its depending field is also set.\r\n         *\r\n         * @param dependField\r\n         * @param valueCheck\r\n         * @returns {boolean}\r\n         */\r\n        validateValues : function (dependField, valueCheck) {\r\n            if ($(dependField).length) {\r\n                let dependValue = $(dependField).val();\r\n\r\n                return !(dependValue && !valueCheck);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    };\r\n});\r\n","Vertex_Tax/js/form/element/custom-option-flex-field-select.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['underscore', 'Magento_Ui/js/form/element/select'], function (_, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        /**\r\n         * Overwrites the parent's filter to allow for checking if a value is\r\n         * in an array and for allowing the value of \"unmapped\" through all\r\n         * filters\r\n         *\r\n         * @param {String} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var source = this.initialOptions,\r\n                result;\r\n\r\n            field = field || this.filterBy.field;\r\n\r\n            result = _.filter(source, function (item) {\r\n                return Array.isArray(item[field]) && item[field].includes(value) ||\r\n                    item[field] === value ||\r\n                    item.value === '' ||\r\n                    item.value === 'unmapped';\r\n            });\r\n\r\n            this.setOptions(result);\r\n        }\r\n    });\r\n});\r\n","Vertex_Tax/js/model/customer-country-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Vertex_Tax/js/form/depend-field-checker',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($, dependFieldChecker) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Validates if customer added a VAT number, then selecting a Country is required.\r\n     */\r\n    return function (config) {\r\n        $.validator.addMethod(\r\n            \"vertex-customer-country\",\r\n            function (value, element, dependField) {\r\n                return dependFieldChecker.validateValues(dependField, value);\r\n            },\r\n            $.mage.__(\"Please select a Country.\")\r\n        );\r\n    }\r\n});\r\n","Vertex_Tax/js/model/set-checkout-messages.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(\r\n    [\r\n        'underscore',\r\n        'Magento_Customer/js/customer-data',\r\n        'Magento_Ui/js/model/messageList'\r\n    ],\r\n    function (_, customerData, messageContainer) {\r\n        'use strict';\r\n\r\n        /**\r\n         * A utility for observing message updates in session storage. It is designed to subscribe to\r\n         * customer data updates and forward messages to the appropriate messageList model.\r\n         */\r\n        return function () {\r\n            var typeMap = {\r\n                    'success': 'addSuccessMessage',\r\n                    'warning': 'addErrorMessage',\r\n                    'error': 'addErrorMessage'\r\n                },\r\n\r\n                /**\r\n                 * Observe message section data changes and forward to the error processor.\r\n                 * @param {Object} data - The observable payload.\r\n                 * @return void\r\n                 */\r\n                messageSubscriptionCallback = function (data) {\r\n                    if ('messages' in data) {\r\n                        _.each(data.messages, function (message) {\r\n                            if (message.type in typeMap) {\r\n                                messageContainer[typeMap[message.type]]({\r\n                                    'message': message.text\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n            customerData.get('messages').subscribe(messageSubscriptionCallback);\r\n        };\r\n    }\r\n);\r\n","Vertex_Tax/js/view/checkout/summary/tax-messages.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/totals'\r\n], function (_, ko, Component, totals) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            messages: []\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.subscribeTotals();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe('messages');\r\n            this.getMessages();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieve messages\r\n         */\r\n        getMessages: function () {\r\n            var taxSegment = totals.getSegment('tax');\r\n\r\n            this.messages([]);\r\n\r\n            if (taxSegment && taxSegment['extension_attributes']) {\r\n                this.messages(taxSegment['extension_attributes']['vertex_tax_calculation_messages']);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Subscribe totals observer\r\n         */\r\n        subscribeTotals: function () {\r\n            var self = this;\r\n\r\n            totals.totals.subscribe(\r\n                function () {\r\n                    self.getMessages();\r\n                },\r\n                null,\r\n                'change'\r\n            );\r\n        }\r\n    });\r\n});\r\n"}
}});
