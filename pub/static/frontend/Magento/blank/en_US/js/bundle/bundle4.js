require.config({"config": {
        "jsbuild":{"Magento_Tax/js/view/checkout/summary/tax.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'Magento_Checkout/js/view/summary/abstract-total',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/totals',\r\n    'mage/translate',\r\n    'underscore'\r\n], function (ko, Component, quote, totals, $t, _) {\r\n    'use strict';\r\n\r\n    var isTaxDisplayedInGrandTotal = window.checkoutConfig.includeTaxInGrandTotal,\r\n        isFullTaxSummaryDisplayed = window.checkoutConfig.isFullTaxSummaryDisplayed,\r\n        isZeroTaxDisplayed = window.checkoutConfig.isZeroTaxDisplayed,\r\n        taxAmount = 0,\r\n        rates = 0;\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            isTaxDisplayedInGrandTotal: isTaxDisplayedInGrandTotal,\r\n            notCalculatedMessage: $t('Not yet calculated'),\r\n            template: 'Magento_Tax/checkout/summary/tax'\r\n        },\r\n        totals: quote.getTotals(),\r\n        isFullTaxSummaryDisplayed: isFullTaxSummaryDisplayed,\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        ifShowValue: function () {\r\n            if (this.isFullMode() && this.getPureValue() == 0) { //eslint-disable-line eqeqeq\r\n                return isZeroTaxDisplayed;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        ifShowDetails: function () {\r\n            if (!this.isFullMode()) {\r\n                return false;\r\n            }\r\n\r\n            return this.getPureValue() > 0 && isFullTaxSummaryDisplayed;\r\n        },\r\n\r\n        /**\r\n         * @return {Number}\r\n         */\r\n        getPureValue: function () {\r\n            var amount = 0,\r\n                taxTotal;\r\n\r\n            if (this.totals()) {\r\n                taxTotal = totals.getSegment('tax');\r\n\r\n                if (taxTotal) {\r\n                    amount = taxTotal.value;\r\n                }\r\n            }\r\n\r\n            return amount;\r\n        },\r\n\r\n        /**\r\n         * @return {*|Boolean}\r\n         */\r\n        isCalculated: function () {\r\n            return this.totals() && this.isFullMode() && totals.getSegment('tax') != null;\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        getValue: function () {\r\n            var amount;\r\n\r\n            if (!this.isCalculated()) {\r\n                return this.notCalculatedMessage;\r\n            }\r\n            amount = totals.getSegment('tax').value;\r\n\r\n            return this.getFormattedPrice(amount);\r\n        },\r\n\r\n        /**\r\n         * @param {*} amount\r\n         * @return {*|String}\r\n         */\r\n        formatPrice: function (amount) {\r\n            return this.getFormattedPrice(amount);\r\n        },\r\n\r\n        /**\r\n         * @param {*} parent\r\n         * @param {*} percentage\r\n         * @return {*|String}\r\n         */\r\n        getTaxAmount: function (parent, percentage) {\r\n            var totalPercentage = 0;\r\n\r\n            taxAmount = parent.amount;\r\n            rates = parent.rates;\r\n            _.each(rates, function (rate) {\r\n                totalPercentage += parseFloat(rate.percent);\r\n            });\r\n\r\n            return this.getFormattedPrice(this.getPercentAmount(taxAmount, totalPercentage, percentage));\r\n        },\r\n\r\n        /**\r\n         * @param {*} amount\r\n         * @param {*} totalPercentage\r\n         * @param {*} percentage\r\n         * @return {*|String}\r\n         */\r\n        getPercentAmount: function (amount, totalPercentage, percentage) {\r\n            return parseFloat(amount * percentage / totalPercentage);\r\n        },\r\n\r\n        /**\r\n         * @return {Array}\r\n         */\r\n        getDetails: function () {\r\n            var taxSegment = totals.getSegment('tax');\r\n\r\n            if (taxSegment && taxSegment['extension_attributes']) {\r\n                return taxSegment['extension_attributes']['tax_grandtotal_details'];\r\n            }\r\n\r\n            return [];\r\n        }\r\n    });\r\n});\r\n","Magento_Tax/js/view/checkout/summary/item/details/subtotal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'Magento_Checkout/js/view/summary/item/details/subtotal'\r\n], function (subtotal) {\r\n    'use strict';\r\n\r\n    var displayPriceMode = window.checkoutConfig.reviewItemPriceDisplayMode || 'including';\r\n\r\n    return subtotal.extend({\r\n        defaults: {\r\n            displayPriceMode: displayPriceMode,\r\n            template: 'Magento_Tax/checkout/summary/item/details/subtotal'\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        isPriceInclTaxDisplayed: function () {\r\n            return displayPriceMode == 'both' || displayPriceMode == 'including'; //eslint-disable-line eqeqeq\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        isPriceExclTaxDisplayed: function () {\r\n            return displayPriceMode == 'both' || displayPriceMode == 'excluding'; //eslint-disable-line eqeqeq\r\n        },\r\n\r\n        /**\r\n         * @param {Object} quoteItem\r\n         * @return {*|String}\r\n         */\r\n        getValueInclTax: function (quoteItem) {\r\n            return this.getFormattedPrice(quoteItem['row_total_incl_tax']);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} quoteItem\r\n         * @return {*|String}\r\n         */\r\n        getValueExclTax: function (quoteItem) {\r\n            return this.getFormattedPrice(quoteItem['row_total']);\r\n        }\r\n\r\n    });\r\n});\r\n","Magento_Theme/menu.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * Simple Navigation with replacing old handlers.\r\n *\r\n * @param {String} id - id of ul element with navigation lists\r\n * @param {Object} settings - object with settings\r\n */\r\n/**\r\n * global mainNav\r\n *\r\n * @deprecated\r\n * @see lib/web/mage/menu.js\r\n */\r\ndefine([\r\n    'prototype'\r\n], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Main nav.\r\n     */\r\n    window.mainNav = function () {\r\n        var main = {\r\n            'obj_nav':   $(arguments[0]) || $('nav'),\r\n            settings:  {\r\n                'show_delay': 0,\r\n                'hide_delay': 0,\r\n                _ie6: /MSIE 6.+Win/.test(navigator.userAgent),\r\n                _ie7: /MSIE 7.+Win/.test(navigator.userAgent)\r\n            },\r\n\r\n            /**\r\n             * @param {Object} obj\r\n             * @param {*} level\r\n             */\r\n            init: function (obj, level) {\r\n                obj.lists = obj.childElements();\r\n                obj.lists.each(function (el, ind) {\r\n                    main.handlNavElement(el);\r\n\r\n                    if ((main.settings._ie6 || main.settings._ie7) && level) {\r\n                        main.ieFixZIndex(el, ind, obj.lists.size());\r\n                    }\r\n                });\r\n\r\n                if (main.settings._ie6 && !level) {\r\n                    document.execCommand('BackgroundImageCache', false, true);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @param {Object} list\r\n             */\r\n            handlNavElement: function (list) {\r\n                if (list !== undefined) {\r\n\r\n                    /**\r\n                     * On mouse over.\r\n                     */\r\n                    list.onmouseover = function () {\r\n                        main.fireNavEvent(this, true);\r\n                    };\r\n\r\n                    /**\r\n                     * On mouse out.\r\n                     */\r\n                    list.onmouseout = function () {\r\n                        main.fireNavEvent(this, false);\r\n                    };\r\n\r\n                    if (list.down('ul')) {\r\n                        main.init(list.down('ul'), true);\r\n                    }\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @param {HTMLElement} el\r\n             * @param {*} i\r\n             * @param {*} l\r\n             */\r\n            ieFixZIndex: function (el, i, l) {\r\n                if (el.tagName.toString().toLowerCase().indexOf('iframe') == -1) { //eslint-disable-line eqeqeq\r\n                    el.style.zIndex = l - i;\r\n                } else {\r\n                    el.onmouseover = 'null';\r\n                    el.onmouseout = 'null';\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @param {Object} elm\r\n             * @param {*} ev\r\n             */\r\n            fireNavEvent: function (elm, ev) {\r\n                if (ev) {\r\n                    elm.addClassName('over');\r\n                    elm.down('a').addClassName('over');\r\n\r\n                    if (elm.childElements()[1]) {\r\n                        main.show(elm.childElements()[1]);\r\n                    }\r\n                } else {\r\n                    elm.removeClassName('over');\r\n                    elm.down('a').removeClassName('over');\r\n\r\n                    if (elm.childElements()[1]) {\r\n                        main.hide(elm.childElements()[1]);\r\n                    }\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @param {Object} subElm\r\n             */\r\n            show: function (subElm) {\r\n                if (subElm['hide_time_id']) {\r\n                    clearTimeout(subElm['hide_time_id']);\r\n                }\r\n                subElm['show_time_id'] = setTimeout(function () {\r\n                    if (!subElm.hasClassName('shown-sub')) {\r\n                        subElm.addClassName('shown-sub');\r\n                    }\r\n                }, main.settings['show_delay']);\r\n            },\r\n\r\n            /**\r\n             * @param {Object} subElm\r\n             */\r\n            hide: function (subElm) {\r\n                if (subElm['show_time_id']) {\r\n                    clearTimeout(subElm['show_time_id']);\r\n                }\r\n                subElm['hide_time_id'] = setTimeout(function () {\r\n                    if (subElm.hasClassName('shown-sub')) {\r\n                        subElm.removeClassName('shown-sub');\r\n                    }\r\n                }, main.settings['hide_delay']);\r\n            }\r\n\r\n        };\r\n\r\n        if (arguments[1]) {\r\n            main.settings = Object.extend(main.settings, arguments[1]);\r\n        }\r\n\r\n        if (main['obj_nav']) {\r\n            main.init(main['obj_nav'], false);\r\n        }\r\n    };\r\n\r\n    document.observe('dom:loaded', function () {\r\n        //run navigation without delays and with default id=\"#nav\"\r\n        //mainNav();\r\n\r\n        //run navigation with delays\r\n        window.mainNav('nav', {\r\n            'show_delay': '100',\r\n            'hide_delay': '100'\r\n        });\r\n    });\r\n});\r\n","Magento_Theme/js/cookie-status.js":"define([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($, modal) {\r\n    'use strict';\r\n\r\n    $.widget('mage.cookieStatus', {\r\n        options: {\r\n            type: 'popup',\r\n            responsive: true,\r\n            innerScroll: true,\r\n            autoOpen: true,\r\n            buttons: [{\r\n                text: $.mage.__('Close'),\r\n                class: 'cookie-status',\r\n\r\n                /**\r\n                 * Callback for click event\r\n                 */\r\n                click: function () {\r\n                    this.closeModal();\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Init object\r\n         * @private\r\n         */\r\n        _init: function () {\r\n\r\n            if (!navigator.cookieEnabled) {\r\n                modal(this.options, $('#cookie-status'));\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.cookieStatus;\r\n});\r\n","Magento_Theme/js/row-builder.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * JQuery UI Widget declaration: 'mage.rowBuilder'\r\n *\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.rowBuilder', {\r\n\r\n        /**\r\n         * options with default values for setting up the template\r\n         */\r\n        options: {\r\n            //Default template options\r\n            rowTemplate: '#template-registrant',\r\n            rowContainer: '#registrant-container',\r\n            //Row index used by the template rows.\r\n            rowIndex: 0,\r\n            //Row count: Should not be set externally\r\n            rowCount: 0,\r\n            rowParentElem: '<li></li>',\r\n            rowContainerClass: 'fields',\r\n            addRowBtn: '#add-registrant-button',\r\n            btnRemoveIdPrefix: 'btn-remove',\r\n            btnRemoveSelector: '.btn-remove',\r\n            rowIdPrefix: 'row',\r\n            //This class is added to rows added after the first one. Adds the dotted separator\r\n            additionalRowClass: 'add-row',\r\n\r\n            /*\r\n             This is provided during widget instantiation. eg :\r\n             formDataPost : {\"formData\":formData,\"templateFields\":['field1-name','field2-name'] }\r\n             -\"formData\" is the multi-dimensional array of form field values : [['a','b'],['c','b']]\r\n             received from the server and encoded\r\n             -\"templateFields\" are the input fields in the template with index suffixed after the field name\r\n             eg field1-name{index}\r\n             */\r\n            formDataPost: null,\r\n            //Default selectors for add element of a template\r\n            addEventSelector: 'button',\r\n            //Default selectors for remove markup elements of a template\r\n            remEventSelector: 'a',\r\n            //This option allows adding first row delete option and a row separator\r\n            hideFirstRowAddSeparator: true,\r\n            //Max rows - This option should be set when instantiating the widget\r\n            maxRows: 1000,\r\n            maxRowsMsg: '#max-registrant-message'\r\n        },\r\n\r\n        /**\r\n         * Initialize create\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.rowTemplate = mageTemplate(this.options.rowTemplate);\r\n\r\n            this.options.rowCount = this.options.rowIndex = 0;\r\n\r\n            //On document ready related tasks\r\n            $($.proxy(this.ready, this));\r\n\r\n            //Binding template-wide events handlers for adding and removing rows\r\n            this.element.on(\r\n                'click',\r\n                this.options.addEventSelector + this.options.addRowBtn,\r\n                $.proxy(this.handleAdd, this)\r\n            );\r\n            this.element.on(\r\n                'click',\r\n                this.options.remEventSelector + this.options.btnRemoveSelector,\r\n                $.proxy(this.handleRemove, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Initialize template\r\n         * @public\r\n         */\r\n        ready: function () {\r\n            if (this.options.formDataPost &&\r\n                this.options.formDataPost.formData &&\r\n                this.options.formDataPost.formData.length\r\n            ) {\r\n                this.processFormDataArr(this.options.formDataPost);\r\n            } else if (this.options.rowIndex === 0 && this.options.maxRows !== 0) {\r\n                //If no form data , then add default row\r\n                this.addRow(0);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Process and loop through all row data to create preselected values. This is used for any error on submit.\r\n         * For complex implementations the inheriting widget can override this behavior\r\n         * @public\r\n         * @param {Object} formDataArr\r\n         */\r\n        processFormDataArr: function (formDataArr) {\r\n            var formData = formDataArr.formData,\r\n                templateFields = formDataArr.templateFields,\r\n                formRow,\r\n                i, j;\r\n\r\n            for (i = this.options.rowIndex = 0; i < formData.length; this.options.rowIndex = i++) {\r\n                this.addRow(i);\r\n\r\n                formRow = formData[i];\r\n\r\n                for (j = 0; j < formRow.length; j++) {\r\n                    this.setFieldById(templateFields[j] + i, formRow[j]);\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Initialize and create markup for template row. Add it to the parent container.\r\n         * The template processing will substitute row index at all places marked with _index_ in the template\r\n         * using the template\r\n         * @public\r\n         * @param {Number} index - current index/count of the created template. This will be used as the id\r\n         * @return {*}\r\n         */\r\n        addRow: function (index) {\r\n            var row = $(this.options.rowParentElem),\r\n                tmpl;\r\n\r\n            row.addClass(this.options.rowContainerClass).attr('id', this.options.rowIdPrefix + index);\r\n\r\n            tmpl = this.rowTemplate({\r\n                data: {\r\n                    _index_: index\r\n                }\r\n            });\r\n\r\n            $(tmpl).appendTo(row);\r\n\r\n            $(this.options.rowContainer).append(row).trigger('contentUpdated');\r\n\r\n            row.addClass(this.options.additionalRowClass);\r\n\r\n            //Remove 'delete' link and additionalRowClass for first row\r\n            if (this.options.rowIndex === 0 && this.options.hideFirstRowAddSeparator) {\r\n                $('#' + this._esc(this.options.btnRemoveIdPrefix) + '0').remove();\r\n                $('#' + this._esc(this.options.rowIdPrefix) + '0').removeClass(this.options.additionalRowClass);\r\n            }\r\n\r\n            this.maxRowCheck(++this.options.rowCount);\r\n\r\n            return row;\r\n        },\r\n\r\n        /**\r\n         * Remove return item information row\r\n         * @public\r\n         * @param {*} rowIndex - return item information row index\r\n         * @return {Boolean}\r\n         */\r\n        removeRow: function (rowIndex) {\r\n            $('#' + this._esc(this.options.rowIdPrefix) + rowIndex).remove();\r\n            this.maxRowCheck(--this.options.rowCount);\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Function to check if maximum rows are exceeded and render/hide maxMsg and Add btn\r\n         * @public\r\n         * @param {Number} rowIndex\r\n         */\r\n        maxRowCheck: function (rowIndex) {\r\n            var addRowBtn = $(this.options.addRowBtn),\r\n                maxRowMsg = $(this.options.maxRowsMsg);\r\n\r\n            //liIndex starts from 0\r\n            if (rowIndex >= this.options.maxRows) {\r\n                addRowBtn.hide();\r\n                maxRowMsg.show();\r\n            } else if (addRowBtn.is(':hidden')) {\r\n                addRowBtn.show();\r\n                maxRowMsg.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set the value on given element\r\n         * @public\r\n         * @param {String} domId\r\n         * @param {String} value\r\n         */\r\n        setFieldById: function (domId, value) {\r\n            var x = $('#' + this._esc(domId));\r\n\r\n            if (x.length) {\r\n\r\n                if (x.is(':checkbox')) {\r\n                    x.attr('checked', true);\r\n                } else if (x.is('option')) {\r\n                    x.attr('selected', 'selected');\r\n                } else {\r\n                    x.val(value);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delegated handler for adding a row\r\n         * @public\r\n         * @return {Boolean}\r\n         */\r\n        handleAdd: function () {\r\n            this.addRow(++this.options.rowIndex);\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Delegated handler for removing a selected row\r\n         * @public\r\n         * @param {Object} e - Native event object\r\n         * @return {Boolean}\r\n         */\r\n        handleRemove: function (e) {\r\n            this.removeRow($(e.currentTarget).closest('[id^=\"' + this.options.btnRemoveIdPrefix + '\"]')\r\n                .attr('id').replace(this.options.btnRemoveIdPrefix, ''));\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Utility function to add escape chars for jquery selector strings\r\n         * @private\r\n         * @param {String} str - String to be processed\r\n         * @return {String}\r\n         */\r\n        _esc: function (str) {\r\n            return str ? str.replace(/([ ;&,.+*~\\':\"!\\^$\\[\\]()=>|\\/@])/g, '\\\\$1') : str;\r\n        }\r\n    });\r\n\r\n    return $.mage.rowBuilder;\r\n});\r\n","Magento_Theme/js/theme.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/smart-keyboard-handler',\r\n    'mage/mage',\r\n    'mage/ie-class-fixer',\r\n    'domReady!'\r\n], function ($, keyboardHandler) {\r\n    'use strict';\r\n\r\n    $('.cart-summary').mage('sticky', {\r\n        container: '#maincontent'\r\n    });\r\n\r\n    $('.panel.header > .header.links').clone().appendTo('#store\\\\.links');\r\n\r\n    keyboardHandler.apply();\r\n});\r\n","Magento_Theme/js/truncate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * JQuery UI Widget declaration: 'mage.truncateOptions'\r\n *\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.truncateOptions', {\r\n        options: {\r\n            detailsLink: 'a.details',\r\n            mouseEvents: 'mouseover mouseout',\r\n            truncatedFullValue: 'div.truncated.full.value'\r\n        },\r\n\r\n        /**\r\n         * Establish the event handler for mouse events on the appropriate elements.\r\n         *\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.element.on(this.options.mouseEvents, $.proxy(this._toggleShow, this))\r\n                .find(this.options.detailsLink).on(this.options.mouseEvents, $.proxy(this._toggleShow, this));\r\n        },\r\n\r\n        /**\r\n         * Toggle the \"show\" class on the associated element.\r\n         *\r\n         * @private\r\n         * @param {jQuery.Event} event - Mouse over/out event.\r\n         */\r\n        _toggleShow: function (event) {\r\n            $(event.currentTarget).find(this.options.truncatedFullValue).toggleClass('show');\r\n        }\r\n    });\r\n});\r\n","Magento_Theme/js/model/breadcrumb-list.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return [];\r\n});\r\n","Magento_Theme/js/view/add-home-breadcrumb.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/* eslint-disable max-nested-callbacks, no-undef */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Theme/js/model/breadcrumb-list',\r\n    'mage/translate'\r\n], function ($, breadcrumbList) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @return {Object}\r\n     */\r\n    var homeCrumb = function () {\r\n        return {\r\n            name: 'home',\r\n            label: $.mage.__('Home'),\r\n            title: $.mage.__('Go to Home Page'),\r\n            link: BASE_URL || ''\r\n        };\r\n    };\r\n\r\n    return function (breadcrumb) {\r\n\r\n        breadcrumbList.unshift(homeCrumb());\r\n\r\n        return breadcrumb;\r\n    };\r\n});\r\n","Magento_Theme/js/view/breadcrumbs.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Theme/js/model/breadcrumb-list',\r\n    'text!Magento_Theme/templates/breadcrumbs.html',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate, breadcrumbList, tpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Breadcrumb Widget.\r\n     */\r\n    $.widget('mage.breadcrumbs', {\r\n\r\n        /** @inheritdoc */\r\n        _init: function () {\r\n            this._super();\r\n            this._render();\r\n        },\r\n\r\n        /**\r\n         * Render breadcrumb.\r\n         *\r\n         * @private\r\n         */\r\n        _render: function () {\r\n            var html,\r\n                crumbs = breadcrumbList,\r\n                template = mageTemplate(tpl);\r\n\r\n            this._decorate(crumbs);\r\n\r\n            html = template({\r\n                'breadcrumbs': crumbs\r\n            });\r\n\r\n            if (html.length) {\r\n                $(this.element).html(html);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Decorate list.\r\n         *\r\n         * @param {Array} list\r\n         * @private\r\n         */\r\n        _decorate: function (list) {\r\n\r\n            if (list.length) {\r\n                list[0].first = true;\r\n            }\r\n\r\n            if (list.length > 1) {\r\n                list[list.length - 1].last = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.breadcrumbs;\r\n});\r\n","Magento_Theme/js/view/messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Customer/js/customer-data',\r\n    'underscore',\r\n    'escaper',\r\n    'jquery/jquery-storageapi'\r\n], function ($, Component, customerData, _, escaper) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            cookieMessages: [],\r\n            messages: [],\r\n            allowedTags: ['div', 'span', 'b', 'strong', 'i', 'em', 'u', 'a']\r\n        },\r\n\r\n        /**\r\n         * Extends Component object by storage observable messages.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.cookieMessages = _.unique($.cookieStorage.get('mage-messages'), 'text');\r\n            this.messages = customerData.get('messages').extend({\r\n                disposableCustomerData: 'messages'\r\n            });\r\n\r\n            // Force to clean obsolete messages\r\n            if (!_.isEmpty(this.messages().messages)) {\r\n                customerData.set('messages', {});\r\n            }\r\n\r\n            $.cookieStorage.set('mage-messages', '');\r\n        },\r\n\r\n        /**\r\n         * Prepare the given message to be rendered as HTML\r\n         *\r\n         * @param {String} message\r\n         * @return {String}\r\n         */\r\n        prepareMessageForHtml: function (message) {\r\n            return escaper.escapeHtml(message, this.allowedTags);\r\n        }\r\n    });\r\n});\r\n","Magento_Tinymce3/tinymce3Adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated use lib/web/mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter.js instead\r\n */\r\n/* global varienGlobalEvents, tinyMceEditors, MediabrowserUtility, closeEditorPopup, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'tinymceDeprecated',\r\n    'mage/adminhtml/wysiwyg/tiny_mce/html5-schema',\r\n    'mage/translate',\r\n    'prototype',\r\n    'mage/adminhtml/events'\r\n], function (jQuery, _, tinyMCE3, html5Schema) {\r\n\r\n    var tinyMce3Wysiwyg = Class.create();\r\n\r\n    tinyMce3Wysiwyg.prototype = {\r\n        mediaBrowserOpener: null,\r\n        mediaBrowserTargetElementId: null,\r\n\r\n        /**\r\n         * @param {*} htmlId\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (htmlId, config) {\r\n            if (config.baseStaticUrl && config.baseStaticDefaultUrl) {\r\n                tinyMCE3.baseURL = tinyMCE3.baseURL.replace(config.baseStaticUrl, config.baseStaticDefaultUrl);\r\n            }\r\n\r\n            this.id = htmlId;\r\n            this.config = config;\r\n            this.schema = config.schema || html5Schema;\r\n\r\n            _.bindAll(\r\n                this,\r\n                'beforeSetContent',\r\n                'saveContent',\r\n                'onChangeContent',\r\n                'openFileBrowser',\r\n                'updateTextArea',\r\n                'removeEvents'\r\n            );\r\n\r\n            varienGlobalEvents.attachEventHandler('tinymceChange', this.onChangeContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceBeforeSetContent', this.beforeSetContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceSetContent', this.updateTextArea);\r\n            varienGlobalEvents.attachEventHandler('tinymceSaveContent', this.saveContent);\r\n\r\n            if (typeof tinyMceEditors == 'undefined') {\r\n                window.tinyMceEditors = $H({});\r\n            }\r\n\r\n            tinyMceEditors.set(this.id, this);\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         */\r\n        setup: function (mode) {\r\n            if (this.config['widget_plugin_src']) {\r\n                tinyMCE3.PluginManager.load('magentowidget', 'plugins/magentowidget/editor_plugin.js');\r\n            }\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function (plugin) {\r\n                    tinyMCE3.PluginManager.load(plugin.name, plugin.src);\r\n                });\r\n            }\r\n\r\n            if (jQuery.isReady) {\r\n                tinyMCE3.dom.Event.domLoaded = true;\r\n            }\r\n\r\n            tinyMCE3.init(this.getSettings(mode));\r\n            varienGlobalEvents.clearEventHandlers('open_browser_callback');\r\n            varienGlobalEvents.attachEventHandler('open_browser_callback', tinyMceEditors.get(this.id).openFileBrowser);\r\n        },\r\n\r\n        /**\r\n         * Remove events from instance.\r\n         *\r\n         * @param {String} wysiwygId\r\n         */\r\n        removeEvents: function (wysiwygId) {\r\n            var editor = tinyMceEditors.get(wysiwygId);\r\n\r\n            varienGlobalEvents.removeEventHandler('tinymceChange', editor.onChangeContent);\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         * @return {Object}\r\n         */\r\n        getSettings: function (mode) {\r\n            var plugins = 'inlinepopups,safari,pagebreak,style,layer,table,advhr,advimage,emotions,iespell,media,searchreplace,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,noneditable', //eslint-disable-line\r\n                self = this,\r\n                magentoPluginsOptions, magentoPlugins, settings;\r\n\r\n            if (this.config['widget_plugin_src']) {\r\n                plugins = 'magentowidget,' + plugins;\r\n            }\r\n\r\n            magentoPluginsOptions = $H({});\r\n            magentoPlugins = '';\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function (plugin) {\r\n                    magentoPlugins = plugin.name + ',' + magentoPlugins;\r\n                    magentoPluginsOptions.set(plugin.name, plugin.options);\r\n                });\r\n\r\n                if (magentoPlugins) {\r\n                    plugins = '-' + magentoPlugins + plugins;\r\n                }\r\n            }\r\n\r\n            settings = {\r\n                'entity_encoding': 'raw',\r\n                mode: mode != undefined ? mode : 'none', //eslint-disable-line eqeqeq\r\n                elements: this.id,\r\n                theme: 'advanced',\r\n                plugins: plugins,\r\n                'theme_advanced_buttons1': magentoPlugins + 'magentowidget,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect', //eslint-disable-line max-len\r\n                'theme_advanced_buttons2': 'cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,forecolor,backcolor', //eslint-disable-line max-len\r\n                'theme_advanced_buttons3': 'tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,iespell,media,advhr,|,ltr,rtl,|,fullscreen', //eslint-disable-line max-len\r\n                'theme_advanced_buttons4': 'insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,pagebreak', //eslint-disable-line max-len\r\n                'theme_advanced_toolbar_location': 'top',\r\n                'theme_advanced_toolbar_align': 'left',\r\n                'theme_advanced_statusbar_location': 'bottom',\r\n                'valid_elements': this.schema.validElements.join(','),\r\n                'valid_children': this.schema.validChildren.join(','),\r\n                'theme_advanced_resizing': true,\r\n                'theme_advanced_resize_horizontal': false,\r\n                'convert_urls': false,\r\n                'relative_urls': false,\r\n                'content_css': this.config['content_css'],\r\n                'custom_popup_css': this.config['popup_css'],\r\n                'magentowidget_url': this.config['widget_window_url'],\r\n                'noneditable_leave_contenteditable': true,\r\n                magentoPluginsOptions: magentoPluginsOptions,\r\n                doctype: '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">', //eslint-disable-line max-len\r\n\r\n                /**\r\n                 * @param {Object} ed\r\n                 */\r\n                setup: function (ed) {\r\n                    var onChange;\r\n\r\n                    ed.onPreInit.add(self.onEditorPreInit.bind(self));\r\n\r\n                    ed.onInit.add(self.onEditorInit.bind(self));\r\n\r\n                    ed.onInit.add(function (editor) {\r\n                        varienGlobalEvents.fireEvent('wysiwygEditorInitialized', editor);\r\n                    });\r\n\r\n                    ed.onSubmit.add(function (edi, e) {\r\n                        varienGlobalEvents.fireEvent('tinymceSubmit', e);\r\n                    });\r\n\r\n                    ed.onPaste.add(function (edi, e, o) {\r\n                        varienGlobalEvents.fireEvent('tinymcePaste', o);\r\n                    });\r\n\r\n                    ed.onBeforeSetContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceBeforeSetContent', o);\r\n                    });\r\n\r\n                    ed.onSetContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSetContent', o);\r\n                    });\r\n\r\n                    ed.onSaveContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSaveContent', o);\r\n                    });\r\n\r\n                    /**\r\n                     * @param {*} edi\r\n                     * @param {*} l\r\n                     */\r\n                    onChange = function (edi, l) {\r\n                        varienGlobalEvents.fireEvent('tinymceChange', l);\r\n                    };\r\n\r\n                    ed.onChange.add(onChange);\r\n                    ed.onKeyUp.add(onChange);\r\n\r\n                    ed.onExecCommand.add(function (edi, cmd) {\r\n                        varienGlobalEvents.fireEvent('tinymceExecCommand', cmd);\r\n                    });\r\n                }\r\n            };\r\n\r\n            // jscs:disable requireDotNotation\r\n            if (!settings['style_formats']) {\r\n                settings['theme_advanced_buttons1'] = settings['theme_advanced_buttons1'].replace(',styleselect', '');\r\n            }\r\n\r\n            // Set the document base URL\r\n            if (this.config['document_base_url']) {\r\n                settings['document_base_url'] = this.config['document_base_url'];\r\n            }\r\n\r\n            if (this.config['files_browser_window_url']) {\r\n\r\n                /**\r\n                 * @param {*} fieldName\r\n                 * @param {*} url\r\n                 * @param {*} objectType\r\n                 * @param {*} w\r\n                 */\r\n                settings['file_browser_callback'] = function (fieldName, url, objectType, w) {\r\n                    varienGlobalEvents.fireEvent('open_browser_callback', {\r\n                        win: w,\r\n                        type: objectType,\r\n                        field: fieldName\r\n                    });\r\n                };\r\n            }\r\n            // jscs:enable requireDotNotation\r\n\r\n            if (this.config.width) {\r\n                settings.width = this.config.width;\r\n            }\r\n\r\n            if (this.config.height) {\r\n                settings.height = this.config.height;\r\n            }\r\n\r\n            if (this.config.settings) {\r\n                Object.extend(settings, this.config.settings);\r\n            }\r\n\r\n            return settings;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} editor\r\n         */\r\n        applySchema: function (editor) {\r\n            var schema      = editor.schema,\r\n                schemaData  = this.schema,\r\n                makeMap     = tinyMCE3.makeMap;\r\n\r\n            jQuery.extend(true, {\r\n                nonEmpty: schema.getNonEmptyElements(),\r\n                boolAttrs: schema.getBoolAttrs(),\r\n                whiteSpace: schema.getWhiteSpaceElements(),\r\n                shortEnded: schema.getShortEndedElements(),\r\n                selfClosing: schema.getSelfClosingElements(),\r\n                blockElements: schema.getBlockElements()\r\n            }, {\r\n                nonEmpty: makeMap(schemaData.nonEmpty),\r\n                boolAttrs: makeMap(schemaData.boolAttrs),\r\n                whiteSpace: makeMap(schemaData.whiteSpace),\r\n                shortEnded: makeMap(schemaData.shortEnded),\r\n                selfClosing: makeMap(schemaData.selfClosing),\r\n                blockElements: makeMap(schemaData.blockElements)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         */\r\n        get: function (id) {\r\n            return tinyMCE3.get(id);\r\n        },\r\n\r\n        /**\r\n         * @return {String|null}\r\n         */\r\n        getId: function () {\r\n            return this.id || (this.activeEditor() ? this.activeEditor().id : null) || tinyMceEditors.values()[0].id;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        activeEditor: function () {\r\n            return tinyMCE3.activeEditor;\r\n        },\r\n\r\n        /**\r\n         * Insert content to active editor.\r\n         *\r\n         * @param {String} content\r\n         * @param {Boolean} ui\r\n         */\r\n        insertContent: function (content, ui) {\r\n            this.activeEditor().execCommand('mceInsertContent', typeof ui !== 'undefined' ? ui : false, content);\r\n        },\r\n\r\n        /**\r\n         * Set the status of the toolbar to disabled or enabled (true for enabled, false for disabled)\r\n         * @param {Boolean} enabled\r\n         */\r\n        setToolbarStatus: function (enabled) {\r\n            _.each(this.activeEditor().controlManager.controls, function (property, index, controls) {\r\n                controls[property.id].setDisabled(!enabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set the status of the editor and toolbar\r\n         *\r\n         * @param {Boolean} enabled\r\n         */\r\n        setEnabledStatus: function (enabled) {\r\n            if (this.activeEditor()) {\r\n                this.activeEditor().getBody().setAttribute('contenteditable', enabled);\r\n                this.activeEditor().readonly = !enabled;\r\n                this.setToolbarStatus(enabled);\r\n            }\r\n\r\n            if (enabled) {\r\n                this.getTextArea().removeProp('disabled');\r\n            } else {\r\n                this.getTextArea().prop('disabled', 'disabled');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set caret location in WYSIWYG editor.\r\n         *\r\n         * @param {Object} targetElement\r\n         */\r\n        setCaretOnElement: function (targetElement) {\r\n            this.activeEditor().selection.select(targetElement);\r\n            this.activeEditor().selection.collapse();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        openFileBrowser: function (o) {\r\n            var typeTitle = this.translate('Select Images'),\r\n                storeId = this.config['store_id'] !== null ? this.config['store_id'] : 0,\r\n                frameDialog = jQuery(o.win.frameElement).parents('[role=\"dialog\"]'),\r\n                wUrl = this.config['files_browser_window_url'] +\r\n                    'target_element_id/' + this.getId() + '/' +\r\n                    'store/' + storeId + '/';\r\n\r\n            this.mediaBrowserOpener = o.win;\r\n            this.mediaBrowserTargetElementId = o.field;\r\n\r\n            if (typeof o.type != 'undefined' && o.type != '') { //eslint-disable-line eqeqeq\r\n                wUrl = wUrl + 'type/' + o.type + '/';\r\n            }\r\n\r\n            frameDialog.hide();\r\n            jQuery('#mceModalBlocker').hide();\r\n\r\n            require(['mage/adminhtml/browser'], function () {\r\n                MediabrowserUtility.openDialog(wUrl, false, false, typeTitle, {\r\n                    /**\r\n                     * Closed.\r\n                     */\r\n                    closed: function () {\r\n                        frameDialog.show();\r\n                        jQuery('#mceModalBlocker').show();\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} string\r\n         * @return {String}\r\n         */\r\n        translate: function (string) {\r\n            return jQuery.mage.__ ? jQuery.mage.__(string) : string;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserOpener: function () {\r\n            return this.mediaBrowserOpener;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserTargetElementId: function () {\r\n            return this.mediaBrowserTargetElementId;\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        getToggleButton: function () {\r\n            return $('toggle' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * Get plugins button.\r\n         */\r\n        getPluginButtons: function () {\r\n            return jQuery('#buttons' + this.getId() + ' > button.plugin');\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOn: function (mode) {\r\n            this.closePopups();\r\n\r\n            this.setup(mode);\r\n\r\n            tinyMCE3.execCommand('mceAddControl', false, this.getId());\r\n\r\n            this.getPluginButtons().hide();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOff: function () {\r\n            this.closePopups();\r\n\r\n            tinyMCE3.execCommand('mceRemoveControl', false, this.getId());\r\n\r\n            this.getPluginButtons().show();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close popups.\r\n         */\r\n        closePopups: function () {\r\n            if (typeof closeEditorPopup == 'function') {\r\n                // close all popups to avoid problems with updating parent content area\r\n                closeEditorPopup('widget_window' + this.getId());\r\n                closeEditorPopup('browser_window' + this.getId());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        toggle: function () {\r\n            if (!tinyMCE3.get(this.getId())) {\r\n                this.turnOn();\r\n\r\n                return true;\r\n            }\r\n            this.turnOff();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Editor pre-initialise event handler.\r\n         */\r\n        onEditorPreInit: function (editor) {\r\n            this.applySchema(editor);\r\n        },\r\n\r\n        /**\r\n         * @deprecated\r\n         */\r\n        onEditorInit: function () {},\r\n\r\n        /**\r\n         * On form validation.\r\n         */\r\n        onFormValidation: function () {\r\n            if (tinyMCE3.get(this.getId())) {\r\n                $(this.getId()).value = tinyMCE3.get(this.getId()).getContent();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * On change content.\r\n         */\r\n        onChangeContent: function () {\r\n            // Add \"changed\" to tab class if it exists\r\n            var tab;\r\n\r\n            this.updateTextArea();\r\n\r\n            if (this.config['tab_id']) {\r\n                tab = $$('a[id$=' + this.config['tab_id'] + ']')[0];\r\n\r\n                if ($(tab) != undefined && $(tab).hasClassName('tab-item-link')) { //eslint-disable-line eqeqeq\r\n                    $(tab).addClassName('changed');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieve directives URL with substituted directive value.\r\n         *\r\n         * @param {String} directive\r\n         */\r\n        makeDirectiveUrl: function (directive) {\r\n            return this.config['directives_url']\r\n                .replace(/directive/, 'directive/___directive/' + directive)\r\n                .replace(/\\/$/, '');\r\n        },\r\n\r\n        /**\r\n         * Convert {{directive}} style attributes syntax to absolute URLs\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeDirectives: function (content) {\r\n            // collect all HTML tags with attributes that contain directives\r\n            return content.gsub(/<([a-z0-9\\-\\_]+[^>]+?)([a-z0-9\\-\\_]+=\"[^\"]*?\\{\\{.+?\\}\\}.*?\".*?)>/i, function (match) {\r\n                var attributesString = match[2],\r\n                    decodedDirectiveString;\r\n\r\n                // process tag attributes string\r\n                attributesString = attributesString.gsub(/([a-z0-9\\-\\_]+)=\"(.*?)(\\{\\{.+?\\}\\})(.*?)\"/i, function (m) {\r\n                    decodedDirectiveString = encodeURIComponent(Base64.mageEncode(m[3].replace(/&quot;/g, '\"')));\r\n\r\n                    return m[1] + '=\"' + m[2] + this.makeDirectiveUrl(decodedDirectiveString) + m[4] + '\"';\r\n                }.bind(this));\r\n\r\n                return '<' + match[1] + attributesString + '>';\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeWidgets: function (content) {\r\n            return content.gsub(/\\{\\{widget(.*?)\\}\\}/i, function (match) {\r\n                var attributes = this.parseAttributesString(match[1]),\r\n                    imageSrc,\r\n                    imageHtml;\r\n\r\n                if (attributes.type) {\r\n                    attributes.type = attributes.type.replace(/\\\\\\\\/g, '\\\\');\r\n                    imageSrc = this.config['widget_placeholders'][attributes.type];\r\n\r\n                    imageHtml = '<img';\r\n                    imageHtml += ' id=\"' + Base64.idEncode(match[0]) + '\"';\r\n                    imageHtml += ' src=\"' + imageSrc + '\"';\r\n                    imageHtml += ' title=\"' +\r\n                        match[0].replace(/\\{\\{/g, '{').replace(/\\}\\}/g, '}').replace(/\\\"/g, '&quot;') + '\"';\r\n                    imageHtml += '>';\r\n\r\n                    return imageHtml;\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Convert absolute URLs to {{directive}} style attributes syntax\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeDirectives: function (content) {\r\n            var directiveUrl = this.makeDirectiveUrl('%directive%').split('?')[0], // remove query string from directive\r\n                // escape special chars in directives url to use in regular expression\r\n                regexEscapedDirectiveUrl = directiveUrl.replace(/([$^.?*!+:=()\\[\\]{}|\\\\])/g, '\\\\$1'),\r\n                regexDirectiveUrl = regexEscapedDirectiveUrl\r\n                    .replace(\r\n                        '%directive%',\r\n                        '([a-zA-Z0-9,_-]+(?:%2[A-Z]|)+\\/?)(?:(?!\").)*'\r\n                    ) + '/?(\\\\\\\\?[^\"]*)?', // allow optional query string\r\n                reg = new RegExp(regexDirectiveUrl);\r\n\r\n            return content.gsub(reg, function (match) {\r\n                return Base64.mageDecode(decodeURIComponent(match[1]).replace(/\\/$/, '')).replace(/\"/g, '&quot;');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeWidgets: function (content) {\r\n            return content.gsub(/<img([^>]+id=\\\"[^>]+)>/i, function (match) {\r\n                var attributes = this.parseAttributesString(match[1]),\r\n                    widgetCode;\r\n\r\n                if (attributes.id) {\r\n                    widgetCode = Base64.idDecode(attributes.id);\r\n\r\n                    if (widgetCode.indexOf('{{widget') !== -1) {\r\n                        return widgetCode;\r\n                    }\r\n                }\r\n\r\n                return match[0];\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attributes\r\n         * @return {Object}\r\n         */\r\n        parseAttributesString: function (attributes) {\r\n            var result = {};\r\n\r\n            attributes.gsub(\r\n                /(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/,\r\n                function (match) {\r\n                    result[match[1]] = match[2];\r\n                }\r\n            );\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Update text area.\r\n         */\r\n        updateTextArea: function () {\r\n            var editor = tinyMCE3.get(this.getId()),\r\n                content;\r\n\r\n            if (!editor) {\r\n                return;\r\n            }\r\n\r\n            content = editor.getContent();\r\n            content = this.decodeContent(content);\r\n\r\n            this.getTextArea().val(content).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @return {Object} jQuery textarea element\r\n         */\r\n        getTextArea: function () {\r\n            return jQuery('#' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config['add_widgets']) {\r\n                result = this.decodeWidgets(result);\r\n                result = this.decodeDirectives(result);\r\n            } else if (this.config['add_directives']) {\r\n                result = this.decodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config['add_widgets']) {\r\n                result = this.encodeWidgets(this.decodeWidgets(result));\r\n                result = this.encodeDirectives(result);\r\n            } else if (this.config['add_directives']) {\r\n                result = this.encodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        beforeSetContent: function (o) {\r\n            o.content = this.encodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        saveContent: function (o) {\r\n            o.content = this.decodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getAdapterPrototype: function () {\r\n            return tinyMce3Wysiwyg;\r\n        }\r\n    };\r\n\r\n    return tinyMce3Wysiwyg.prototype;\r\n});\r\n","Magento_Translation/js/add-class.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['jquery'], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        $(element).addClass(config.class);\r\n    };\r\n});\r\n","Magento_Translation/js/i18n-config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    require.config({\r\n        config: {\r\n            'Magento_Ui/js/lib/knockout/bindings/i18n': {\r\n                inlineTranslation: true\r\n            }\r\n        }\r\n    });\r\n})();\r\n","Magento_Translation/js/mage-translation-dictionary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'text!js-translation.json'\r\n], function (dict) {\r\n    'use strict';\r\n\r\n    return JSON.parse(dict);\r\n});\r\n","Magento_Ui/js/block-loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/knockout/template/loader',\r\n    'mage/template'\r\n], function (ko, $, templateLoader, template) {\r\n    'use strict';\r\n\r\n    var blockLoaderTemplatePath = 'ui/block-loader',\r\n        blockContentLoadingClass = '_block-content-loading',\r\n        blockLoader,\r\n        blockLoaderClass,\r\n        blockLoaderElement = $.Deferred(),\r\n        loaderImageHref = $.Deferred();\r\n\r\n    templateLoader.loadTemplate(blockLoaderTemplatePath).done(function (blockLoaderTemplate) {\r\n        loaderImageHref.done(function (loaderHref) {\r\n            blockLoader = template($.trim(blockLoaderTemplate), {\r\n                loaderImageHref: loaderHref\r\n            });\r\n            blockLoader = $(blockLoader);\r\n            blockLoaderClass = '.' + blockLoader.attr('class');\r\n            blockLoaderElement.resolve();\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Helper function to check if blockContentLoading class should be applied.\r\n     * @param {Object} element\r\n     * @returns {Boolean}\r\n     */\r\n    function isLoadingClassRequired(element) {\r\n        var position = element.css('position');\r\n\r\n        if (position === 'absolute' || position === 'fixed') {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add loader to block.\r\n     * @param {Object} element\r\n     */\r\n    function addBlockLoader(element) {\r\n        element.find(':focus').blur();\r\n        element.find('input:disabled, select:disabled').addClass('_disabled');\r\n        element.find('input, select').prop('disabled', true);\r\n\r\n        if (isLoadingClassRequired(element)) {\r\n            element.addClass(blockContentLoadingClass);\r\n        }\r\n        element.append(blockLoader.clone());\r\n    }\r\n\r\n    /**\r\n     * Remove loader from block.\r\n     * @param {Object} element\r\n     */\r\n    function removeBlockLoader(element) {\r\n        if (!element.has(blockLoaderClass).length) {\r\n            return;\r\n        }\r\n        element.find(blockLoaderClass).remove();\r\n        element.find('input:not(\"._disabled\"), select:not(\"._disabled\")').prop('disabled', false);\r\n        element.find('input:disabled, select:disabled').removeClass('_disabled');\r\n        element.removeClass(blockContentLoadingClass);\r\n    }\r\n\r\n    return function (loaderHref) {\r\n        loaderImageHref.resolve(loaderHref);\r\n        ko.bindingHandlers.blockLoader = {\r\n            /**\r\n             * Process loader for block\r\n             * @param {String} element\r\n             * @param {Boolean} displayBlockLoader\r\n             */\r\n            update: function (element, displayBlockLoader) {\r\n                element = $(element);\r\n\r\n                if (ko.unwrap(displayBlockLoader())) {\r\n                    blockLoaderElement.done(addBlockLoader(element));\r\n                } else {\r\n                    blockLoaderElement.done(removeBlockLoader(element));\r\n                }\r\n            }\r\n        };\r\n    };\r\n});\r\n","Magento_Ui/js/core/app.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    './renderer/types',\r\n    './renderer/layout',\r\n    '../lib/knockout/bootstrap'\r\n], function (types, layout) {\r\n    'use strict';\r\n\r\n    return function (data, merge) {\r\n        types.set(data.types);\r\n        layout(data.components, undefined, true, merge);\r\n    };\r\n});\r\n","Magento_Ui/js/core/renderer/layout.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './types',\r\n    '../../lib/logger/console-logger'\r\n], function (_, $, utils, registry, types, consoleLogger) {\r\n    'use strict';\r\n\r\n    var templates = registry.create(),\r\n        layout = {},\r\n        cachedConfig = {};\r\n\r\n    /**\r\n     * Build name from parent name and node name\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @param {String} [name]\r\n     * @returns {String}\r\n     */\r\n    function getNodeName(parent, node, name) {\r\n        var parentName = parent && parent.name;\r\n\r\n        if (typeof name !== 'string') {\r\n            name = node.name || name;\r\n        }\r\n\r\n        return utils.fullPath(parentName, name);\r\n    }\r\n\r\n    /**\r\n     * Get node type from node or parent.\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @returns {String}\r\n     */\r\n    function getNodeType(parent, node) {\r\n        return node.type || parent && parent.childType;\r\n    }\r\n\r\n    /**\r\n     * Get data scope based on parent data scope and node data scope.\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @returns {String}\r\n     */\r\n    function getDataScope(parent, node) {\r\n        var dataScope = node.dataScope,\r\n            parentScope = parent && parent.dataScope;\r\n\r\n        return !utils.isEmpty(parentScope) ?\r\n            !utils.isEmpty(dataScope) ?\r\n                parentScope + '.' + dataScope :\r\n                parentScope :\r\n            dataScope || '';\r\n    }\r\n\r\n    /**\r\n     * Load node dependencies on other instances.\r\n     *\r\n     * @param {Object} node\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function loadDeps(node) {\r\n        var loaded = $.Deferred(),\r\n            loggerUtils = consoleLogger.utils;\r\n\r\n        if (node.deps) {\r\n            consoleLogger.utils.asyncLog(\r\n                loaded,\r\n                {\r\n                    data: {\r\n                        component: node.name,\r\n                        deps: node.deps\r\n                    },\r\n                    messages: loggerUtils.createMessages(\r\n                        'depsStartRequesting',\r\n                        'depsFinishRequesting',\r\n                        'depsLoadingFail'\r\n                    )\r\n                }\r\n            );\r\n        }\r\n\r\n        registry.get(node.deps, function (deps) {\r\n            node.provider = node.extendProvider ? deps && deps.name : node.provider;\r\n            loaded.resolve(node);\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    /**\r\n     * Load node component file via requirejs.\r\n     *\r\n     * @param {Object} node\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function loadSource(node) {\r\n        var loaded = $.Deferred(),\r\n            source = node.component;\r\n\r\n        consoleLogger.info('componentStartLoading', {\r\n            component: node.component\r\n        });\r\n\r\n        require([source], function (constr) {\r\n            consoleLogger.info('componentFinishLoading', {\r\n                component: node.component\r\n            });\r\n            loaded.resolve(node, constr);\r\n        }, function () {\r\n            consoleLogger.error('componentLoadingFail', {\r\n                component: node.component\r\n            });\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    /**\r\n     * Create a new component instance and set it to the registry.\r\n     *\r\n     * @param {Object} node\r\n     * @param {Function} Constr\r\n     */\r\n    function initComponent(node, Constr) {\r\n        var component = new Constr(_.omit(node, 'children'));\r\n\r\n        consoleLogger.info('componentStartInitialization', {\r\n            component: node.component,\r\n            componentName: node.name\r\n        });\r\n\r\n        registry.set(node.name, component);\r\n    }\r\n\r\n    /**\r\n     * Application entry point.\r\n     *\r\n     * @param {Object} nodes\r\n     * @param {Object} parent\r\n     * @param {Boolean} cached\r\n     * @param {Boolean} merge\r\n     * @returns {Boolean|undefined}\r\n     */\r\n    function run(nodes, parent, cached, merge) {\r\n        if (_.isBoolean(merge) && merge) {\r\n            layout.merge(nodes);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (cached) {\r\n            cachedConfig[_.keys(nodes)[0]] = JSON.parse(JSON.stringify(nodes));\r\n        }\r\n\r\n        _.each(nodes || [], layout.iterator.bind(layout, parent));\r\n    }\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Determines if node ready to be added or process it.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object|String} node\r\n         */\r\n        iterator: function (parent, node) {\r\n            var action = _.isString(node) ?\r\n                this.addChild :\r\n                this.process;\r\n\r\n            action.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Prepare component.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Object}\r\n         */\r\n        process: function (parent, node, name) {\r\n            if (!parent && node.parent) {\r\n                return this.waitParent(node, name);\r\n            }\r\n\r\n            if (node.nodeTemplate) {\r\n                return this.waitTemplate.apply(this, arguments);\r\n            }\r\n\r\n            node = this.build.apply(this, arguments);\r\n\r\n            if (!registry.has(node.name)) {\r\n                this.addChild(parent, node)\r\n                    .manipulate(node)\r\n                    .initComponent(node);\r\n            }\r\n\r\n            if (node) {\r\n                run(node.children, node);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Detailed processing of component config.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Boolean|Object}\r\n         */\r\n        build: function (parent, node, name) {\r\n            var defaults    = parent && parent.childDefaults || {},\r\n                children    = this.filterDisabledChildren(node.children),\r\n                type        = getNodeType(parent, node),\r\n                dataScope   = getDataScope(parent, node),\r\n                component,\r\n                extendDeps  = true,\r\n                nodeName;\r\n\r\n            node.children = false;\r\n            node.extendProvider = true;\r\n\r\n            if (node.config && node.config.provider || node.provider) {\r\n                node.extendProvider = false;\r\n            }\r\n\r\n            if (node.config && node.config.deps || node.deps) {\r\n                extendDeps = false;\r\n            }\r\n\r\n            node = utils.extend({\r\n            }, types.get(type), defaults, node);\r\n\r\n            nodeName = getNodeName(parent, node, name);\r\n\r\n            if (registry.has(nodeName)) {\r\n                component = registry.get(nodeName);\r\n                component.children = children;\r\n\r\n                return component;\r\n            }\r\n\r\n            if (extendDeps && parent && parent.deps && type) {\r\n                node.deps = parent.deps;\r\n            }\r\n\r\n            _.extend(node, node.config || {}, {\r\n                index: node.name || name,\r\n                name: nodeName,\r\n                dataScope: dataScope,\r\n                parentName: utils.getPart(nodeName, -2),\r\n                parentScope: utils.getPart(dataScope, -2)\r\n            });\r\n\r\n            node.children = children;\r\n            node.componentType = node.type;\r\n\r\n            delete node.type;\r\n            delete node.config;\r\n\r\n            if (children) {\r\n                node.initChildCount = _.size(children);\r\n            }\r\n\r\n            if (node.isTemplate) {\r\n                node.isTemplate = false;\r\n\r\n                templates.set(node.name, node);\r\n                registry.get(node.parentName, function (parentComp) {\r\n                    parentComp.childTemplate = node;\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            if (node.componentDisabled === true) {\r\n                return false;\r\n            }\r\n\r\n            return node;\r\n        },\r\n\r\n        /**\r\n         * Filter out all disabled components.\r\n         *\r\n         * @param {Object} children\r\n         * @returns {*}\r\n         */\r\n        filterDisabledChildren: function (children) {\r\n            var cIds;\r\n\r\n            //cleanup children config.componentDisabled = true\r\n            if (children && typeof children === 'object') {\r\n                cIds = Object.keys(children);\r\n\r\n                if (cIds) {\r\n                    _.each(cIds, function (cId) {\r\n                        if (typeof children[cId] === 'object' &&\r\n                            children[cId].hasOwnProperty('config') &&\r\n                            typeof children[cId].config === 'object' &&\r\n                            children[cId].config.hasOwnProperty('componentDisabled') &&\r\n                            children[cId].config.componentDisabled === true) {\r\n                            delete children[cId];\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return children;\r\n        },\r\n\r\n        /**\r\n         * Init component.\r\n         *\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        initComponent: function (node) {\r\n            if (!node.component) {\r\n                return this;\r\n            }\r\n\r\n            loadDeps(node)\r\n                .then(loadSource)\r\n                .done(initComponent);\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Loading component marked as isTemplate.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        waitTemplate: function (parent, node) {\r\n            var args = _.toArray(arguments);\r\n\r\n            templates.get(node.nodeTemplate, function () {\r\n                this.applyTemplate.apply(this, args);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Waiting for parent component and process provided component.\r\n         *\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Object}\r\n         */\r\n        waitParent: function (node, name) {\r\n            var process = this.process.bind(this);\r\n\r\n            registry.get(node.parent, function (parent) {\r\n                process(parent, node, name);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processing component marked as isTemplate.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         */\r\n        applyTemplate: function (parent, node, name) {\r\n            var template = templates.get(node.nodeTemplate);\r\n\r\n            node = utils.extend({}, template, node);\r\n\r\n            delete node.nodeTemplate;\r\n\r\n            this.process(parent, node, name);\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Determines inserting strategy.\r\n         *\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        manipulate: function (node) {\r\n            var name = node.name;\r\n\r\n            if (node.appendTo) {\r\n                this.insert(name, node.appendTo, -1);\r\n            }\r\n\r\n            if (node.prependTo) {\r\n                this.insert(name, node.prependTo, 0);\r\n            }\r\n\r\n            if (node.insertTo) {\r\n                this.insertTo(name, node.insertTo);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Insert component to provide target and position.\r\n         *\r\n         * @param {Object|String} item\r\n         * @param {Object} target\r\n         * @param {Number} position\r\n         * @returns {Object}\r\n         */\r\n        insert: function (item, target, position) {\r\n            registry.get(target, function (container) {\r\n                container.insertChild(item, position);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Insert component into multiple targets.\r\n         *\r\n         * @param {Object} item\r\n         * @param {Array} targets\r\n         * @returns {Object}\r\n         */\r\n        insertTo: function (item, targets) {\r\n            _.each(targets, function (info, target) {\r\n                this.insert(item, target, info.position);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add provided child to parent.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object|String} child\r\n         * @returns {Object}\r\n         */\r\n        addChild: function (parent, child) {\r\n            var name;\r\n\r\n            if (parent && parent.component) {\r\n                name = child.name || child;\r\n\r\n                this.insert(name, parent.name, child.sortOrder);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Merge components configuration with cached configuration.\r\n         *\r\n         * @param {Array} components\r\n         */\r\n        merge: function (components) {\r\n            var cachedKey = _.keys(components)[0],\r\n                compared = utils.compare(cachedConfig[cachedKey], components),\r\n                remove = this.filterComponents(this.getByProperty(compared.changes, 'type', 'remove'), true),\r\n                update = this.getByProperty(compared.changes, 'type', 'update'),\r\n                dataSources = this.getDataSources(components),\r\n                names, index, name, component;\r\n\r\n            _.each(dataSources, function (val, key) {\r\n                name = key.replace(/\\.children|\\.config/g, '');\r\n                component = registry.get(name);\r\n\r\n                component.cacheData();\r\n                component.updateConfig(\r\n                    true,\r\n                    this.getFullConfig(key, components),\r\n                    this.getFullConfig(key, cachedConfig[cachedKey])\r\n                );\r\n            }, this);\r\n\r\n            _.each(remove, function (val) {\r\n                component = registry.get(val.path);\r\n\r\n                if (component) {\r\n                    component.destroy();\r\n                }\r\n            });\r\n\r\n            update = _.compact(_.filter(update, function (val) {\r\n                return !_.isEqual(val.oldValue, val.value);\r\n            }));\r\n\r\n            _.each(update, function (val) {\r\n                names = val.path.split('.');\r\n                index = Math.max(_.lastIndexOf(names, 'config'), _.lastIndexOf(names, 'children') + 2);\r\n                name = _.without(names.splice(0, index), 'children', 'config').join('.');\r\n                component = registry.get(name);\r\n\r\n                if (val.name === 'sortOrder' && component) {\r\n                    registry.get(component.parentName).insertChild(component, val.value);\r\n                } else if (component) {\r\n                    component.updateConfig(\r\n                        val.oldValue,\r\n                        val.value,\r\n                        val.path\r\n                    );\r\n                }\r\n            }, this);\r\n\r\n            run(components, undefined, true);\r\n        },\r\n\r\n        /**\r\n         * Recursive dataSource assignment.\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} parentPath\r\n         * @returns {Object}\r\n         */\r\n        getDataSources: function (config, parentPath) {\r\n            var dataSources = {},\r\n                key, obj;\r\n\r\n            /* eslint-disable no-loop-func, max-depth */\r\n            for (key in config) {\r\n                if (config.hasOwnProperty(key)) {\r\n                    if (\r\n                        key === 'type' &&\r\n                        config[key] === 'dataSource' &&\r\n                        config.hasOwnProperty('config')\r\n                    ) {\r\n                        dataSources[parentPath + '.config'] = config.config;\r\n                    } else if (_.isObject(config[key])) {\r\n                        obj = this.getDataSources(config[key], utils.fullPath(parentPath, key));\r\n\r\n                        _.each(obj, function (value, path) {\r\n                            dataSources[path] = value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* eslint-enable no-loop-func, max-depth */\r\n\r\n            return dataSources;\r\n        },\r\n\r\n        /**\r\n         * Configuration getter.\r\n         *\r\n         * @param {String} path\r\n         * @param {Object} config\r\n         * @returns {Boolean|Object}\r\n         */\r\n        getFullConfig: function (path, config) {\r\n            var index;\r\n\r\n            path = path.split('.');\r\n            index = _.lastIndexOf(path, 'config');\r\n\r\n            if (!~index) {\r\n                return false;\r\n            }\r\n            path = path.splice(0, index);\r\n\r\n            _.each(path, function (val) {\r\n                config = config[val];\r\n            });\r\n\r\n            return config.config;\r\n        },\r\n\r\n        /**\r\n         * Filter data by property and value.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} prop\r\n         * @param {*} propValue\r\n         */\r\n        getByProperty: function (data, prop, propValue) {\r\n            return _.filter(data, function (value) {\r\n                return value[prop] === propValue;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Filter components.\r\n         *\r\n         * @param {Array} data\r\n         * @param {Boolean} splitPath\r\n         * @param {Number} index\r\n         * @param {String} separator\r\n         * @param {String} keyName\r\n         * @returns {Array}\r\n         */\r\n        filterComponents: function (data, splitPath, index, separator, keyName) {\r\n            var result = [],\r\n                names, length;\r\n\r\n            index = -2;\r\n            separator = '.' || separator;\r\n            keyName = 'children' || keyName;\r\n\r\n            _.each(data, function (val) {\r\n                names = val.path.split(separator);\r\n                length  = names.length;\r\n\r\n                if (names[length + index] === keyName) {\r\n                    val.path = splitPath ? _.without(names, keyName).join(separator) : val.path;\r\n                    result.push(val);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return run;\r\n});\r\n","Magento_Ui/js/core/renderer/types.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var store = {};\r\n\r\n    /**\r\n     * Flatten a nested data.\r\n     *\r\n     * @param {Object} data\r\n     * @returns {Object}\r\n     */\r\n    function flatten(data) {\r\n        var extender = data.extends || [],\r\n            result = {};\r\n\r\n        extender = utils.stringToArray(extender);\r\n\r\n        extender.push(data);\r\n\r\n        extender.forEach(function (item) {\r\n            if (_.isString(item)) {\r\n                item = store[item] || {};\r\n            }\r\n\r\n            utils.extend(result, item);\r\n        });\r\n\r\n        delete result.extends;\r\n\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Set types to store object.\r\n         *\r\n         * @param {Object} types\r\n         */\r\n        set: function (types) {\r\n            types = types || {};\r\n\r\n            utils.extend(store, types);\r\n\r\n            _.each(types, function (data, type) {\r\n                store[type] = flatten(data);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get type from store object.\r\n         *\r\n         * @param {String} type\r\n         * @returns {*|{}}\r\n         */\r\n        get: function (type) {\r\n            return store[type] || {};\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/form/adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/form/adapter/buttons'\r\n], function ($, _, buttons) {\r\n    'use strict';\r\n\r\n    var selectorPrefix = '',\r\n        eventPrefix;\r\n\r\n    /**\r\n     * Initialize listener.\r\n     *\r\n     * @param {Function} callback\r\n     * @param {String} action\r\n     */\r\n    function initListener(callback, action) {\r\n        var selector    = selectorPrefix ? selectorPrefix + ' ' + buttons[action] : buttons[action],\r\n            elem        = $(selector)[0];\r\n\r\n        if (!elem) {\r\n            return;\r\n        }\r\n\r\n        if (elem.onclick) {\r\n            elem.onclick = null;\r\n        }\r\n\r\n        $(elem).on('click' + eventPrefix, callback);\r\n    }\r\n\r\n    /**\r\n     * Destroy listener.\r\n     *\r\n     * @param {String} action\r\n     */\r\n    function destroyListener(action) {\r\n        var selector    = selectorPrefix ? selectorPrefix + ' ' + buttons[action] : buttons[action],\r\n            elem        = $(selector)[0];\r\n\r\n        if (!elem) {\r\n            return;\r\n        }\r\n\r\n        if (elem.onclick) {\r\n            elem.onclick = null;\r\n        }\r\n\r\n        $(elem).off('click' + eventPrefix);\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attaches events handlers.\r\n         *\r\n         * @param {Object} handlers\r\n         * @param {String} selectorPref\r\n         * @param {String} eventPref\r\n         */\r\n        on: function (handlers, selectorPref, eventPref) {\r\n            selectorPrefix = selectorPrefix || selectorPref;\r\n            eventPrefix = eventPref;\r\n            _.each(handlers, initListener);\r\n            selectorPrefix = '';\r\n        },\r\n\r\n        /**\r\n         * Removes events handlers.\r\n         *\r\n         * @param {Object} handlers\r\n         * @param {String} eventPref\r\n         */\r\n        off: function (handlers, eventPref) {\r\n            eventPrefix = eventPref;\r\n            _.each(handlers, destroyListener);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/form/button-adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiClass',\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry'\r\n], function (Class, $, _, registry) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Initialize actions and adapter.\r\n         *\r\n         * @param {Object} config\r\n         * @param {Element} elem\r\n         * @returns {Object}\r\n         */\r\n        initialize: function (config, elem) {\r\n            return this._super()\r\n                .initActions()\r\n                .initAdapter(elem);\r\n        },\r\n\r\n        /**\r\n         * Creates callback from declared actions.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initActions: function () {\r\n            var callbacks = [];\r\n\r\n            _.each(this.actions, function (action) {\r\n                callbacks.push({\r\n                    action: registry.async(action.targetName),\r\n                    args: _.union([action.actionName], action.params)\r\n                });\r\n            });\r\n\r\n            /**\r\n             * Callback function.\r\n             */\r\n            this.callback = function () {\r\n                _.each(callbacks, function (callback) {\r\n                    callback.action.apply(callback.action, callback.args);\r\n                });\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback handler on button.\r\n         *\r\n         * @param {Element} elem\r\n         */\r\n        initAdapter: function (elem) {\r\n            $(elem).on('click', this.callback);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/client.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Before save validate request.\r\n     *\r\n     * @param {Object} data\r\n     * @param {String} url\r\n     * @param {String} selectorPrefix\r\n     * @param {String} messagesClass\r\n     * @returns {*}\r\n     */\r\n    function beforeSave(data, url, selectorPrefix, messagesClass) {\r\n        var save = $.Deferred();\r\n\r\n        data = utils.serialize(utils.filterFormData(data));\r\n        data['form_key'] = window.FORM_KEY;\r\n\r\n        if (!url || url === 'undefined') {\r\n            return save.resolve();\r\n        }\r\n\r\n        $('body').trigger('processStart');\r\n\r\n        $.ajax({\r\n            url: url,\r\n            data: data,\r\n\r\n            /**\r\n             * Success callback.\r\n             * @param {Object} resp\r\n             * @returns {Boolean}\r\n             */\r\n            success: function (resp) {\r\n                if (!resp.error) {\r\n                    save.resolve();\r\n\r\n                    return true;\r\n                }\r\n\r\n                $('body').notification('clear');\r\n                $.each(resp.messages || [resp.message] || [], function (key, message) {\r\n                    $('body').notification('add', {\r\n                        error: resp.error,\r\n                        message: message,\r\n\r\n                        /**\r\n                         * Insert method.\r\n                         *\r\n                         * @param {String} msg\r\n                         */\r\n                        insertMethod: function (msg) {\r\n                            var $wrapper = $('<div/>').addClass(messagesClass).html(msg);\r\n\r\n                            $('.page-main-actions', selectorPrefix).after($wrapper);\r\n                            $('html, body').animate({\r\n                                scrollTop: $('.page-main-actions', selectorPrefix).offset().top\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Complete callback.\r\n             */\r\n            complete: function () {\r\n                $('body').trigger('processStop');\r\n            }\r\n        });\r\n\r\n        return save.promise();\r\n    }\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Assembles data and submits it using 'utils.submit' method\r\n         */\r\n        save: function (data, options) {\r\n            var url = this.urls.beforeSave,\r\n                save = this._save.bind(this, data, options);\r\n\r\n            beforeSave(data, url, this.selectorPrefix, this.messagesClass).then(save);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Save data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {Object} options\r\n         * @returns {Object}\r\n         * @private\r\n         */\r\n        _save: function (data, options) {\r\n            var url = this.urls.save;\r\n\r\n            $('body').trigger('processStart');\r\n            options = options || {};\r\n\r\n            if (!options.redirect) {\r\n                url += 'back/edit';\r\n            }\r\n\r\n            if (options.ajaxSave) {\r\n                utils.ajaxSubmit({\r\n                    url: url,\r\n                    data: data\r\n                }, options);\r\n\r\n                $('body').trigger('processStop');\r\n\r\n                return this;\r\n            }\r\n\r\n            utils.submit({\r\n                url: url,\r\n                data: data\r\n            }, options.attributes);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'rjsResolver',\r\n    './adapter',\r\n    'uiCollection',\r\n    'mageUtils',\r\n    'jquery',\r\n    'Magento_Ui/js/core/app',\r\n    'mage/validation'\r\n], function (_, loader, resolver, adapter, Collection, utils, $, app) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Format params\r\n     *\r\n     * @param {Object} params\r\n     * @returns {Array}\r\n     */\r\n    function prepareParams(params) {\r\n        var result = '?';\r\n\r\n        _.each(params, function (value, key) {\r\n            result += key + '=' + value + '&';\r\n        });\r\n\r\n        return result.slice(0, -1);\r\n    }\r\n\r\n    /**\r\n     * Collect form data.\r\n     *\r\n     * @param {Array} items\r\n     * @returns {Object}\r\n     */\r\n    function collectData(items) {\r\n        var result = {},\r\n            name;\r\n\r\n        items = Array.prototype.slice.call(items);\r\n\r\n        items.forEach(function (item) {\r\n            switch (item.type) {\r\n                case 'checkbox':\r\n                    result[item.name] = +!!item.checked;\r\n                    break;\r\n\r\n                case 'radio':\r\n                    if (item.checked) {\r\n                        result[item.name] = item.value;\r\n                    }\r\n                    break;\r\n\r\n                case 'select-multiple':\r\n                    name = item.name.substring(0, item.name.length - 2); //remove [] from the name ending\r\n                    result[name] = _.pluck(item.selectedOptions, 'value');\r\n                    break;\r\n\r\n                default:\r\n                    result[item.name] = item.value;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Makes ajax request\r\n     *\r\n     * @param {Object} params\r\n     * @param {Object} data\r\n     * @param {String} url\r\n     * @returns {*}\r\n     */\r\n    function makeRequest(params, data, url) {\r\n        var save = $.Deferred();\r\n\r\n        data = utils.serialize(data);\r\n        data['form_key'] = window.FORM_KEY;\r\n\r\n        if (!url) {\r\n            save.resolve();\r\n        }\r\n\r\n        $('body').trigger('processStart');\r\n\r\n        $.ajax({\r\n            url: url + prepareParams(params),\r\n            data: data,\r\n            dataType: 'json',\r\n\r\n            /**\r\n             * Success callback.\r\n             * @param {Object} resp\r\n             * @returns {Boolean}\r\n             */\r\n            success: function (resp) {\r\n                if (resp.ajaxExpired) {\r\n                    window.location.href = resp.ajaxRedirect;\r\n                }\r\n\r\n                if (!resp.error) {\r\n                    save.resolve(resp);\r\n\r\n                    return true;\r\n                }\r\n\r\n                $('body').notification('clear');\r\n                $.each(resp.messages, function (key, message) {\r\n                    $('body').notification('add', {\r\n                        error: resp.error,\r\n                        message: message,\r\n\r\n                        /**\r\n                         * Inserts message on page\r\n                         * @param {String} msg\r\n                         */\r\n                        insertMethod: function (msg) {\r\n                            $('.page-main-actions').after(msg);\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Complete callback.\r\n             */\r\n            complete: function () {\r\n                $('body').trigger('processStop');\r\n            }\r\n        });\r\n\r\n        return save.promise();\r\n    }\r\n\r\n    /**\r\n     * Check if fields is valid.\r\n     *\r\n     * @param {Array}items\r\n     * @returns {Boolean}\r\n     */\r\n    function isValidFields(items) {\r\n        var result = true;\r\n\r\n        _.each(items, function (item) {\r\n            if (!$.validator.validateSingleElement(item)) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            additionalFields: [],\r\n            additionalInvalid: false,\r\n            selectorPrefix: '.page-content',\r\n            messagesClass: 'messages',\r\n            errorClass: '.admin__field._error',\r\n            eventPrefix: '.${ $.index }',\r\n            ajaxSave: false,\r\n            ajaxSaveType: 'default',\r\n            imports: {\r\n                reloadUrl: '${ $.provider}:reloadUrl'\r\n            },\r\n            listens: {\r\n                selectorPrefix: 'destroyAdapter initAdapter',\r\n                '${ $.name }.${ $.reloadItem }': 'params.set reload'\r\n            },\r\n            exports: {\r\n                selectorPrefix: '${ $.provider }:client.selectorPrefix',\r\n                messagesClass: '${ $.provider }:client.messagesClass'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super()\r\n                .initAdapter();\r\n\r\n            resolver(this.hideLoader, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'responseData',\r\n                    'responseStatus'\r\n                ]);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.selector = '[data-form-part=' + this.namespace + ']';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize adapter handlers.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initAdapter: function () {\r\n            adapter.on({\r\n                'reset': this.reset.bind(this),\r\n                'save': this.save.bind(this, true, {}),\r\n                'saveAndContinue': this.save.bind(this, false, {})\r\n            }, this.selectorPrefix, this.eventPrefix);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroy adapter handlers.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        destroyAdapter: function () {\r\n            adapter.off([\r\n                'reset',\r\n                'save',\r\n                'saveAndContinue'\r\n            ], this.eventPrefix);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hide loader.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        hideLoader: function () {\r\n            loader.get(this.name).hide();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate and save form.\r\n         *\r\n         * @param {String} redirect\r\n         * @param {Object} data\r\n         */\r\n        save: function (redirect, data) {\r\n            this.validate();\r\n\r\n            if (!this.additionalInvalid && !this.source.get('params.invalid')) {\r\n                this.setAdditionalData(data)\r\n                    .submit(redirect);\r\n            } else {\r\n                this.focusInvalid();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to set focus on first invalid form field.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        focusInvalid: function () {\r\n            var invalidField = _.find(this.delegate('checkInvalid'));\r\n\r\n            if (!_.isUndefined(invalidField) && _.isFunction(invalidField.focused)) {\r\n                invalidField.focused(true);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set additional data to source before form submit and after validation.\r\n         *\r\n         * @param {Object} data\r\n         * @returns {Object}\r\n         */\r\n        setAdditionalData: function (data) {\r\n            _.each(data, function (value, name) {\r\n                this.source.set('data.' + name, value);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Submits form\r\n         *\r\n         * @param {String} redirect\r\n         */\r\n        submit: function (redirect) {\r\n            var additional = collectData(this.additionalFields),\r\n                source = this.source;\r\n\r\n            _.each(additional, function (value, name) {\r\n                source.set('data.' + name, value);\r\n            });\r\n\r\n            source.save({\r\n                redirect: redirect,\r\n                ajaxSave: this.ajaxSave,\r\n                ajaxSaveType: this.ajaxSaveType,\r\n                response: {\r\n                    data: this.responseData,\r\n                    status: this.responseStatus\r\n                },\r\n                attributes: {\r\n                    id: this.namespace\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Validates each element and returns true, if all elements are valid.\r\n         */\r\n        validate: function () {\r\n            this.additionalFields = document.querySelectorAll(this.selector);\r\n            this.source.set('params.invalid', false);\r\n            this.source.trigger('data.validate');\r\n            this.set('additionalInvalid', !isValidFields(this.additionalFields));\r\n        },\r\n\r\n        /**\r\n         * Trigger reset form data.\r\n         */\r\n        reset: function () {\r\n            this.source.trigger('data.reset');\r\n            $('[data-bind*=datepicker]').val('');\r\n        },\r\n\r\n        /**\r\n         * Trigger overload form data.\r\n         */\r\n        overload: function () {\r\n            this.source.trigger('data.overload');\r\n        },\r\n\r\n        /**\r\n         * Updates data from server.\r\n         */\r\n        reload: function () {\r\n            makeRequest(this.params, this.data, this.reloadUrl).then(function (data) {\r\n                app(data, true);\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiElement',\r\n    './client',\r\n    'mageUtils'\r\n], function (_, Element, Client, utils) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            clientConfig: {\r\n                urls: {\r\n                    save: '${ $.submit_url }',\r\n                    beforeSave: '${ $.validate_url }'\r\n                }\r\n            },\r\n            ignoreTmpls: {\r\n                data: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes provider component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initClient();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes client component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initClient: function () {\r\n            this.client = new Client(this.clientConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves currently available data.\r\n         *\r\n         * @param {Object} [options] - Addtitional request options.\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        save: function (options) {\r\n            var data = this.get('data');\r\n\r\n            this.client.save(data, options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update data that stored in provider.\r\n         *\r\n         * @param {Boolean} isProvider\r\n         * @param {Object} newData\r\n         * @param {Object} oldData\r\n         *\r\n         * @returns {Provider}\r\n         */\r\n        updateConfig: function (isProvider, newData, oldData) {\r\n            if (isProvider === true) {\r\n                this.setData(oldData, newData, this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *  Set data to provider based on current data.\r\n         *\r\n         * @param {Object} oldData\r\n         * @param {Object} newData\r\n         * @param {Provider} current\r\n         * @param {String} parentPath\r\n         */\r\n        setData: function (oldData, newData, current, parentPath) {\r\n            _.each(newData, function (val, key) {\r\n                if (_.isObject(val) || _.isArray(val)) {\r\n                    this.setData(oldData[key], val, current[key], utils.fullPath(parentPath, key));\r\n                } else if (val != oldData[key] && oldData[key] == current[key]) {//eslint-disable-line eqeqeq\r\n                    this.set(utils.fullPath(parentPath, key), val);\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/switcher.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (_, registry, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rules: []\r\n        },\r\n\r\n        /**\r\n         * Initializes instance of a DataSwitcher.\r\n         *\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initRules();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initRules: function () {\r\n            this.rules.forEach(this.initRule, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule definition.\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initRule: function (rule) {\r\n            var handler = this.onValueChange.bind(this, rule);\r\n\r\n            if (!rule.target) {\r\n                rule.target = this.target;\r\n            }\r\n\r\n            if (!rule.property) {\r\n                rule.property = this.property;\r\n            }\r\n\r\n            registry.get(rule.target, function (target) {\r\n                this.applyRule(rule, target.get(rule.property));\r\n                target.on(rule.property, handler);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule definition.\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        addRule: function (rule) {\r\n            this.rules.push(rule);\r\n            this.initRule(rule);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule object.\r\n         * @param {*} value - Current value associated with a rule.\r\n         */\r\n        applyRule: function (rule, value) {\r\n            var actions = rule.actions;\r\n\r\n            //TODO Refactor this logic in scope of MAGETWO-48585\r\n            /* eslint-disable eqeqeq */\r\n            if (rule.value != value) {\r\n                return;\r\n            } else if (rule.strict) {\r\n                return;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n            actions.forEach(this.applyAction, this);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} action - Action object.\r\n         */\r\n        applyAction: function (action) {\r\n            registry.get(action.target, function (target) {\r\n                var callback = target[action.callback];\r\n\r\n                callback.apply(target, action.params || []);\r\n            });\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rules object.\r\n         * @param {*} value - Current value associated with a rule.\r\n         */\r\n        onValueChange: function (rule, value) {\r\n            this.applyRule(rule, value);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/adapter/buttons.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        'reset': '#reset',\r\n        'save': '#save',\r\n        'saveAndContinue': '#save_and_continue'\r\n    };\r\n});\r\n","Magento_Ui/js/form/components/area.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './tab'\r\n], function (_, Tab) {\r\n    'use strict';\r\n\r\n    return Tab.extend({\r\n        defaults: {\r\n            uniqueNs:   'params.activeArea',\r\n            template:   'ui/area',\r\n            changed:    false,\r\n            loading:    false\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onChildrenUpdate', 'onContentLoading');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('changed loading');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls parent's initElement method.\r\n         * Assigns callbacks on various events of incoming element.\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.on({\r\n                'update':   this.onChildrenUpdate,\r\n                'loading':  this.onContentLoading\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children update.\r\n         * Sets changed property to one incoming.\r\n         * Invokes setActive method if settings\r\n         * contain makeVisible property set to true.\r\n         *\r\n         * @param  {Boolean} hasChanged\r\n         */\r\n        onChildrenUpdate: function (hasChanged) {\r\n            if (!hasChanged) {\r\n                hasChanged = _.some(this.delegate('hasChanged'));\r\n            }\r\n\r\n            this.changed(hasChanged);\r\n        },\r\n\r\n        /**\r\n         * Callback that sets loading property to true.\r\n         */\r\n        onContentLoading: function (isLoading) {\r\n            this.loading(isLoading);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiElement',\r\n    'uiRegistry',\r\n    'uiLayout',\r\n    'mageUtils',\r\n    'underscore'\r\n], function (Element, registry, layout, utils, _) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            buttonClasses: {},\r\n            additionalClasses: {},\r\n            displayArea: 'outsideGroup',\r\n            displayAsLink: false,\r\n            elementTmpl: 'ui/form/element/button',\r\n            template: 'ui/form/components/button/simple',\r\n            visible: true,\r\n            disabled: false,\r\n            title: ''\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            return this._super()\r\n                ._setClasses()\r\n                ._setButtonClasses();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'visible',\r\n                    'disabled',\r\n                    'title',\r\n                    'childError'\r\n                ]);\r\n        },\r\n\r\n        /**\r\n         * Performs configured actions\r\n         */\r\n        action: function () {\r\n            this.actions.forEach(this.applyAction, this);\r\n        },\r\n\r\n        /**\r\n         * Apply action on target component,\r\n         * but previously create this component from template if it is not existed\r\n         *\r\n         * @param {Object} action - action configuration\r\n         */\r\n        applyAction: function (action) {\r\n            var targetName = action.targetName,\r\n                params = utils.copy(action.params) || [],\r\n                actionName = action.actionName,\r\n                target;\r\n\r\n            if (!registry.has(targetName)) {\r\n                this.getFromTemplate(targetName);\r\n            }\r\n            target = registry.async(targetName);\r\n\r\n            if (target && typeof target === 'function' && actionName) {\r\n                params.unshift(actionName);\r\n                target.apply(target, params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create target component from template\r\n         *\r\n         * @param {Object} targetName - name of component,\r\n         * that supposed to be a template and need to be initialized\r\n         */\r\n        getFromTemplate: function (targetName) {\r\n            var parentName = targetName.split('.'),\r\n                index = parentName.pop(),\r\n                child;\r\n\r\n            parentName = parentName.join('.');\r\n            child = utils.template({\r\n                parent: parentName,\r\n                name: index,\r\n                nodeTemplate: targetName\r\n            });\r\n            layout([child]);\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            if (typeof this.additionalClasses === 'string') {\r\n                if (this.additionalClasses === '') {\r\n                    this.additionalClasses = {};\r\n\r\n                    return this;\r\n                }\r\n\r\n                this.additionalClasses = this.additionalClasses\r\n                    .trim()\r\n                    .split(' ')\r\n                    .reduce(function (classes, name) {\r\n                        classes[name] = true;\r\n\r\n                        return classes;\r\n                    }, {}\r\n                );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'buttonClasses' object.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        _setButtonClasses: function () {\r\n            var additional = this.buttonClasses;\r\n\r\n            if (_.isString(additional)) {\r\n                this.buttonClasses = {};\r\n\r\n                if (additional.trim().length) {\r\n                    additional = additional.trim().split(' ');\r\n\r\n                    additional.forEach(function (name) {\r\n                        if (name.length) {\r\n                            this.buttonClasses[name] = true;\r\n                        }\r\n                    }, this);\r\n                }\r\n            }\r\n\r\n            _.extend(this.buttonClasses, {\r\n                'action-basic': !this.displayAsLink,\r\n                'action-additional': this.displayAsLink\r\n            });\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/collection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'uiLayout',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function (_, utils, registry, Component, layout, confirm) {\r\n    'use strict';\r\n\r\n    var childTemplate = {\r\n        parent: '${ $.$data.name }',\r\n        name: '${ $.$data.childIndex }',\r\n        dataScope: '${ $.name }',\r\n        nodeTemplate: '${ $.$data.name }.${ $.$data.itemTemplate }'\r\n    };\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            lastIndex: 0,\r\n            template: 'ui/form/components/collection'\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initialize of parent\r\n         * class, calls initChildren method.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Activates the incoming child and triggers the update event.\r\n         *\r\n         * @param {Object} elem - Incoming child.\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.activate();\r\n\r\n            this.bubble('update');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Loops over corresponding data in data storage,\r\n         * creates child for each and pushes it's identifier to initialItems array.\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var children = this.source.get(this.dataScope),\r\n                initial = this.initialItems = [];\r\n\r\n            _.each(children, function (item, index) {\r\n                initial.push(index);\r\n                this.addChild(index);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates new item of collection, based on incoming 'index'.\r\n         * If not passed creates one with 'new_' prefix.\r\n         *\r\n         * @param {String|Object} [index] - Index of a child.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        addChild: function (index) {\r\n            this.childIndex = !_.isString(index) ?\r\n                'new_' + this.lastIndex++ :\r\n                index;\r\n\r\n            layout([utils.template(childTemplate, this)]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns true if current set of items differ from initial one,\r\n         * or if some child has been changed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var initial = this.initialItems,\r\n                current = this.elems.pluck('index'),\r\n                changed = !utils.equalArrays(initial, current);\r\n\r\n            return changed || this.elems.some(function (elem) {\r\n                return _.some(elem.delegate('hasChanged'));\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initiates validation of its' children components.\r\n         *\r\n         * @returns {Array} An array of validation results.\r\n         */\r\n        validate: function () {\r\n            var elems;\r\n\r\n            this.allValid = true;\r\n\r\n            elems = this.elems.sortBy(function (elem) {\r\n                return !elem.active();\r\n            });\r\n\r\n            elems = elems.map(this._validate, this);\r\n\r\n            return _.flatten(elems);\r\n        },\r\n\r\n        /**\r\n         * Iterator function for components validation.\r\n         * Activates first invalid child component.\r\n         *\r\n         * @param {Object} elem - Element to run validation on.\r\n         * @returns {Array} An array of validation results.\r\n         */\r\n        _validate: function (elem) {\r\n            var result = elem.delegate('validate'),\r\n                invalid;\r\n\r\n            invalid = _.some(result, function (item) {\r\n                return !item.valid;\r\n            });\r\n\r\n            if (this.allValid && invalid) {\r\n                this.allValid = false;\r\n\r\n                elem.activate();\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Creates function that removes element\r\n         * from collection using '_removeChild' method.\r\n         * @param  {Object} elem - Element that should be removed.\r\n         * @deprecated Not used anymore\r\n         */\r\n        removeAddress: function (elem) {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: this.removeMessage,\r\n                actions: {\r\n                    /** @inheritdoc */\r\n                    confirm: function () {\r\n                        self._removeAddress(elem);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Removes element from both collection and data storage,\r\n         * activates first element if removed one was active,\r\n         * triggers 'update' event.\r\n         *\r\n         * @param {Object} elem - Element to remove.\r\n         */\r\n        _removeAddress: function (elem) {\r\n            var isActive = elem.active(),\r\n                first;\r\n\r\n            elem.destroy();\r\n\r\n            first = this.elems.first();\r\n\r\n            if (first && isActive) {\r\n                first.activate();\r\n            }\r\n\r\n            this.bubble('update');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/fieldset.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'underscore'\r\n], function (Collapsible, _) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            template: 'ui/form/fieldset',\r\n            collapsible: false,\r\n            changed: false,\r\n            loading: false,\r\n            error: false,\r\n            opened: false,\r\n            level: 0,\r\n            visible: true,\r\n            initializeFieldsetDataByDefault: false, /* Data in some fieldsets should be initialized before open */\r\n            disabled: false,\r\n            listens: {\r\n                'opened': 'onVisibilityChange'\r\n            },\r\n            additionalClasses: {}\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onChildrenUpdate', 'onChildrenError', 'onContentLoading');\r\n\r\n            return this._super()\r\n                ._setClasses();\r\n        },\r\n\r\n        /**\r\n         * Initializes components' configuration.\r\n         *\r\n         * @returns {Fieldset} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this._wasOpened = this.opened || !this.collapsible;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         *\r\n         * @returns {Object} Reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('changed loading error visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls parent's initElement method.\r\n         * Assigns callbacks on various events of incoming element.\r\n         *\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            elem.initContainer(this);\r\n\r\n            elem.on({\r\n                'update': this.onChildrenUpdate,\r\n                'loading': this.onContentLoading,\r\n                'error': this.onChildrenError\r\n            });\r\n\r\n            if (this.disabled) {\r\n                try {\r\n                    elem.disabled(true);\r\n                }\r\n                catch (e) {\r\n\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children update.\r\n         * Sets changed property to one incoming.\r\n         *\r\n         * @param  {Boolean} hasChanged\r\n         */\r\n        onChildrenUpdate: function (hasChanged) {\r\n            if (!hasChanged) {\r\n                hasChanged = _.some(this.delegate('hasChanged'));\r\n            }\r\n\r\n            this.bubble('update', hasChanged);\r\n            this.changed(hasChanged);\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__collapsible-block-wrapper': this.collapsible,\r\n                _show: this.opened,\r\n                _hide: !this.opened,\r\n                _disabled: this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler of the \"opened\" property changes.\r\n         *\r\n         * @param {Boolean} isOpened\r\n         */\r\n        onVisibilityChange: function (isOpened) {\r\n            if (!this._wasOpened) {\r\n                this._wasOpened = isOpened;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children validation error.\r\n         * Sets error property to one incoming.\r\n         *\r\n         * @param {String} message - error message.\r\n         */\r\n        onChildrenError: function (message) {\r\n            var hasErrors = false;\r\n\r\n            if (!message) {\r\n                hasErrors = this._isChildrenHasErrors(hasErrors, this);\r\n            }\r\n\r\n            this.error(hasErrors || message);\r\n\r\n            if (hasErrors || message) {\r\n                this.open();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns errors of children if exist\r\n         *\r\n         * @param {Boolean} hasErrors\r\n         * @param {*} container\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isChildrenHasErrors: function (hasErrors, container) {\r\n            var self = this;\r\n\r\n            if (hasErrors === false && container.hasOwnProperty('elems')) {\r\n                hasErrors = container.elems.some('error');\r\n\r\n                if (hasErrors === false && container.hasOwnProperty('_elems')) {\r\n                    container._elems.forEach(function (child) {\r\n\r\n                        if (hasErrors === false) {\r\n                            hasErrors = self._isChildrenHasErrors(hasErrors, child);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return hasErrors;\r\n        },\r\n\r\n        /**\r\n         * Callback that sets loading property to true.\r\n         */\r\n        onContentLoading: function (isLoading) {\r\n            this.loading(isLoading);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/group.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiCollection'\r\n], function (_, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            visible: true,\r\n            label: '',\r\n            showLabel: true,\r\n            required: false,\r\n            template: 'ui/group/group',\r\n            fieldTemplate: 'ui/form/field',\r\n            breakLine: true,\r\n            validateWholeGroup: false,\r\n            additionalClasses: {}\r\n        },\r\n\r\n        /**\r\n         * Extends this with defaults and config.\r\n         * Then calls initObservable, iniListenes and extractData methods.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                ._setClasses();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('visible')\r\n                .observe({\r\n                    required: !!+this.required\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__control-grouped': !this.breakLine,\r\n                'admin__control-fields': this.breakLine,\r\n                required:   this.required,\r\n                _error:     this.error,\r\n                _disabled:  this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines if group has only one element.\r\n         * @return {Boolean}\r\n         */\r\n        isSingle: function () {\r\n            return this.elems.getLength() === 1;\r\n        },\r\n\r\n        /**\r\n         * Defines if group has multiple elements.\r\n         * @return {Boolean}\r\n         */\r\n        isMultiple: function () {\r\n            return this.elems.getLength() > 1;\r\n        },\r\n\r\n        /**\r\n         * Returns an array of child components previews.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPreview: function () {\r\n            return this.elems.map('getPreview');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/html.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent'\r\n], function ($, _, Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            content:        '',\r\n            showSpinner:    false,\r\n            loading:        false,\r\n            visible:        true,\r\n            template:       'ui/content/content',\r\n            additionalClasses: {},\r\n            ignoreTmpls: {\r\n                content: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls 'initialize' method of\r\n         *     parent, calls 'initAjaxConfig'\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onContainerToggle', 'onDataLoaded');\r\n\r\n            this._super()\r\n                ._setClasses()\r\n                .initAjaxConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' method of parent, initializes observable\r\n         * properties of instance\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('content loading visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__scope-old': !!additional\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initContainer: function (parent) {\r\n            this._super();\r\n\r\n            parent.on('active', this.onContainerToggle);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes default ajax config on instance\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initAjaxConfig: function () {\r\n            this.ajaxConfig = {\r\n                url: this.url,\r\n                data: {\r\n                    FORM_KEY: window.FORM_KEY\r\n                },\r\n                success:    this.onDataLoaded\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'loadData' if both 'active' variable and 'shouldLoad'\r\n         * property are truthy\r\n         *\r\n         * @param  {Boolean} active\r\n         */\r\n        onContainerToggle: function (active) {\r\n            if (active && this.shouldLoad()) {\r\n                this.loadData();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Defines if instance has 'content' property defined.\r\n         *\r\n         * @return {Boolean} [description]\r\n         */\r\n        hasData: function () {\r\n            return !!this.content();\r\n        },\r\n\r\n        /**\r\n         * Defines if instance should load external data\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        shouldLoad: function () {\r\n            return this.url && !this.hasData() && !this.loading();\r\n        },\r\n\r\n        /**\r\n         * Sets loading property to true, makes ajax call\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        loadData: function () {\r\n            this.loading(true);\r\n\r\n            $.ajax(this.ajaxConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Ajax's request success handler. Calls 'updateContent' passing 'data'\r\n         * to it, then sets 'loading' property to false.\r\n         *\r\n         * @param  {String} data\r\n         */\r\n        onDataLoaded: function (data) {\r\n            this.updateContent(data)\r\n                .loading(false);\r\n        },\r\n\r\n        /**\r\n         * Sets incoming data 'content' property's value\r\n         *\r\n         * @param  {String} content\r\n         * @return {Object} - reference to instance\r\n         */\r\n        updateContent: function (content) {\r\n            this.content(content);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './insert',\r\n    'mageUtils',\r\n    'jquery'\r\n], function (Insert, utils, $) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Get page actions element.\r\n     *\r\n     * @param {String} elem\r\n     * @param {String} actionsClass\r\n     * @returns {String}\r\n     */\r\n    function getPageActions(elem, actionsClass) {\r\n        var el = document.createElement('div');\r\n\r\n        el.innerHTML = elem;\r\n\r\n        return el.getElementsByClassName(actionsClass)[0];\r\n    }\r\n\r\n    /**\r\n     * Return element without page actions toolbar\r\n     *\r\n     * @param {String} elem\r\n     * @param {String} actionsClass\r\n     * @returns {String}\r\n     */\r\n    function removePageActions(elem, actionsClass) {\r\n        var el = document.createElement('div'),\r\n            actions;\r\n\r\n        el.innerHTML = elem;\r\n        actions = el.getElementsByClassName(actionsClass)[0];\r\n\r\n        if (actions) {\r\n            el.removeChild(actions);\r\n        }\r\n\r\n        return el.innerHTML;\r\n    }\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            externalFormName: '${ $.ns }.${ $.ns }',\r\n            pageActionsClass: 'page-actions',\r\n            actionsContainerClass: 'page-main-actions',\r\n            exports: {\r\n                prefix: '${ $.externalFormName }:selectorPrefix'\r\n            },\r\n            imports: {\r\n                toolbarSection: '${ $.toolbarContainer }:toolbarSection',\r\n                prefix: '${ $.toolbarContainer }:rootSelector',\r\n                messagesClass: '${ $.externalFormName }:messagesClass'\r\n            },\r\n            settings: {\r\n                ajax: {\r\n                    ajaxSave: true,\r\n                    exports: {\r\n                        ajaxSave: '${ $.externalFormName }:ajaxSave'\r\n                    },\r\n                    imports: {\r\n                        responseStatus: '${ $.externalFormName }:responseStatus',\r\n                        responseData: '${ $.externalFormName }:responseData'\r\n                    }\r\n                }\r\n            },\r\n            modules: {\r\n                externalForm: '${ $.externalFormName }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe('responseStatus');\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var defaults = this.constructor.defaults;\r\n\r\n            utils.extend(defaults, defaults.settings[config.formSubmitType] || {});\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc*/\r\n        destroyInserted: function () {\r\n            if (this.isRendered && this.externalForm()) {\r\n                this.externalForm().delegate('destroy');\r\n                this.removeActions();\r\n                this.responseStatus(undefined);\r\n                this.responseData = {};\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        onRender: function (data) {\r\n            var actions = getPageActions(data, this.pageActionsClass);\r\n\r\n            if (!data.length) {\r\n                return this;\r\n            }\r\n            data = removePageActions(data, this.pageActionsClass);\r\n            this.renderActions(actions);\r\n            this._super(data);\r\n        },\r\n\r\n        /**\r\n         * Insert actions in toolbar.\r\n         *\r\n         * @param {String} actions\r\n         */\r\n        renderActions: function (actions) {\r\n            var $container = $('<div/>');\r\n\r\n            $container\r\n                .addClass(this.actionsContainerClass)\r\n                .append(actions);\r\n\r\n            this.formHeader = $container;\r\n\r\n            $(this.toolbarSection).append(this.formHeader);\r\n        },\r\n\r\n        /**\r\n         * Remove actions toolbar.\r\n         */\r\n        removeActions: function () {\r\n            $(this.formHeader).siblings('.' + this.messagesClass).remove();\r\n            $(this.formHeader).remove();\r\n            this.formHeader = $();\r\n        },\r\n\r\n        /**\r\n         * Reset external form data.\r\n         */\r\n        resetForm: function () {\r\n            if (this.externalSource()) {\r\n                this.externalSource().trigger('data.reset');\r\n                this.responseStatus(undefined);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/tab.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiCollection'\r\n], function (Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            uniqueProp:     'active',\r\n            active:         false,\r\n            wasActivated:   false\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .setUnique();\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('active wasActivated');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets active property to true, then invokes pushParams method.\r\n         */\r\n        activate: function () {\r\n            this.active(true);\r\n            this.wasActivated(true);\r\n\r\n            this.setUnique();\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/tab_group.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/collapsible'\r\n], function (_, Collapsible) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:data.validate': 'onValidate'\r\n            },\r\n            collapsible: false,\r\n            opened: true\r\n        },\r\n\r\n        /**\r\n         * Invokes initElement method of parent class, calls 'initActivation' method\r\n         * passing element to it.\r\n         * @param {Object} elem\r\n         * @returns {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            this._super()\r\n                .initActivation(elem);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Activates element if one is first or if one has 'active' propert\r\n         * set to true.\r\n         *\r\n         * @param  {Object} elem\r\n         * @returns {Object} - reference to instance\r\n         */\r\n        initActivation: function (elem) {\r\n            var elems   = this.elems(),\r\n                isFirst = !elems.indexOf(elem);\r\n\r\n            if (isFirst || elem.active()) {\r\n                elem.activate();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delegates 'validate' method on element, then reads 'invalid' property\r\n         * of params storage, and if defined, activates element, sets\r\n         * 'allValid' property of instance to false and sets invalid's\r\n         * 'focused' property to true.\r\n         *\r\n         * @param {Object} elem\r\n         */\r\n        validate: function (elem) {\r\n            var result  = elem.delegate('validate'),\r\n                invalid;\r\n\r\n            invalid = _.find(result, function (item) {\r\n                return typeof item !== 'undefined' && !item.valid;\r\n            });\r\n\r\n            if (invalid) {\r\n                elem.activate();\r\n                invalid.target.focused(true);\r\n            }\r\n\r\n            return invalid;\r\n        },\r\n\r\n        /**\r\n         * Sets 'allValid' property of instance to true, then calls 'validate' method\r\n         * of instance for each element.\r\n         */\r\n        onValidate: function () {\r\n            this.elems.sortBy(function (elem) {\r\n                return !elem.active();\r\n            }).some(this.validate, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/collection/item.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    '../tab'\r\n], function (_, utils, Tab) {\r\n    'use strict';\r\n\r\n    var previewConfig = {\r\n        separator: ' ',\r\n        prefix: ''\r\n    };\r\n\r\n    /**\r\n     * Parses incoming data and returns result merged with default preview config\r\n     *\r\n     * @param  {Object|String} data\r\n     * @return {Object}\r\n     */\r\n    function parsePreview(data) {\r\n        if (typeof data == 'string') {\r\n            data = {\r\n                items: data\r\n            };\r\n        }\r\n\r\n        data.items = utils.stringToArray(data.items);\r\n\r\n        return _.defaults(data, previewConfig);\r\n    }\r\n\r\n    return Tab.extend({\r\n        defaults: {\r\n            label: '',\r\n            uniqueNs: 'activeCollectionItem',\r\n            previewTpl: 'ui/form/components/collection/preview'\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initializes of parent class\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'buildPreview', 'hasPreview');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls initProperties of parent class, initializes properties\r\n         * of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.displayed = [];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class, initializes observable\r\n         * properties of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe({\r\n                    noPreview: true,\r\n                    indexed: {}\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being called when child element has been initialized,\r\n         *     calls initElement of parent class, binds to element's update event,\r\n         *     calls insertToArea and insertToIndexed methods passing element to it\r\n         *\r\n         * @param  {Object} elem\r\n         */\r\n        initElement: function (elem) {\r\n            this._super()\r\n                .insertToIndexed(elem);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds element to observable indexed object of instance\r\n         *\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        insertToIndexed: function (elem) {\r\n            var indexed = this.indexed();\r\n\r\n            indexed[elem.index] = elem;\r\n\r\n            this.indexed(indexed);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys current instance along with all of its' children.\r\n         * Overrides base method to clear data when this method is called.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            this._clearData();\r\n        },\r\n\r\n        /**\r\n         * Clears all data associated with component.\r\n         * @private\r\n         *\r\n         * @returns {Item} Chainable.\r\n         */\r\n        _clearData: function () {\r\n            this.source.remove(this.dataScope);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming previews array via parsePreview function.\r\n         *\r\n         * @param  {Array} previews\r\n         * @return {Array} - formatted previews\r\n         */\r\n        formatPreviews: function (previews) {\r\n            return previews.map(parsePreview);\r\n        },\r\n\r\n        /**\r\n         * Creates string view of previews\r\n         *\r\n         * @param  {Object} data\r\n         * @return {Strict} - formatted preview string\r\n         */\r\n        buildPreview: function (data) {\r\n            var preview = this.getPreview(data.items),\r\n                prefix = data.prefix;\r\n\r\n            return prefix + preview.join(data.separator);\r\n        },\r\n\r\n        /**\r\n         * Defines if instance has preview for incoming data\r\n         *\r\n         * @param  {Object}  data\r\n         * @return {Boolean}\r\n         */\r\n        hasPreview: function (data) {\r\n            return !!this.getPreview(data.items).length;\r\n        },\r\n\r\n        /**\r\n         * Creates an array of previews for elements specified in incoming\r\n         * items array, calls updatePreview afterwards.\r\n         *\r\n         * @param  {Array} items - An array of element's indexes.\r\n         * @returns {Array} An array of previews.\r\n         */\r\n        getPreview: function (items) {\r\n            var elems = this.indexed(),\r\n                displayed = this.displayed,\r\n                preview;\r\n\r\n            items = items.map(function (index) {\r\n                var elem = elems[index];\r\n\r\n                preview = elem && elem.visible() ? elem.getPreview() : '';\r\n\r\n                preview = Array.isArray(preview) ?\r\n                    _.compact(preview).join(', ') :\r\n                    preview;\r\n\r\n                utils.toggle(displayed, index, !!preview);\r\n\r\n                return preview;\r\n            });\r\n\r\n            this.noPreview(!displayed.length);\r\n\r\n            return _.compact(items);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/abstract.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiElement',\r\n    'Magento_Ui/js/lib/validation/validator'\r\n], function (_, utils, layout, Element, validator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            visible: true,\r\n            preview: '',\r\n            focused: false,\r\n            required: false,\r\n            disabled: false,\r\n            valueChangedByUser: false,\r\n            elementTmpl: 'ui/form/element/input',\r\n            tooltipTpl: 'ui/form/element/helper/tooltip',\r\n            fallbackResetTpl: 'ui/form/element/helper/fallback-reset',\r\n            'input_type': 'input',\r\n            placeholder: false,\r\n            description: '',\r\n            labelVisible: true,\r\n            label: '',\r\n            error: '',\r\n            warn: '',\r\n            notice: '',\r\n            customScope: '',\r\n            default: '',\r\n            isDifferedFromDefault: false,\r\n            showFallbackReset: false,\r\n            additionalClasses: {},\r\n            isUseDefault: '',\r\n            serviceDisabled: false,\r\n            valueUpdate: false, // ko binding valueUpdate\r\n\r\n            switcherConfig: {\r\n                component: 'Magento_Ui/js/form/switcher',\r\n                name: '${ $.name }_switcher',\r\n                target: '${ $.name }',\r\n                property: 'value'\r\n            },\r\n            listens: {\r\n                visible: 'setPreview',\r\n                value: 'setDifferedFromDefault',\r\n                '${ $.provider }:data.reset': 'reset',\r\n                '${ $.provider }:data.overload': 'overload',\r\n                '${ $.provider }:${ $.customScope ? $.customScope + \".\" : \"\"}data.validate': 'validate',\r\n                'isUseDefault': 'toggleUseDefault'\r\n            },\r\n            ignoreTmpls: {\r\n                value: true\r\n            },\r\n\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'reset');\r\n\r\n            this._super()\r\n                .setInitialValue()\r\n                ._setClasses()\r\n                .initSwitcher();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if component has error.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        checkInvalid: function () {\r\n            return this.error() && this.error().length ? this : null;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            var rules = this.validation = this.validation || {};\r\n\r\n            this._super();\r\n\r\n            this.observe('error disabled focused preview visible value warn notice isDifferedFromDefault')\r\n                .observe('isUseDefault serviceDisabled')\r\n                .observe({\r\n                    'required': !!rules['required-entry']\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            var uid = utils.uniqueid(),\r\n                name,\r\n                valueUpdate,\r\n                scope;\r\n\r\n            this._super();\r\n\r\n            scope = this.dataScope.split('.');\r\n            name = scope.length > 1 ? scope.slice(1) : scope;\r\n\r\n            valueUpdate = this.showFallbackReset ? 'afterkeydown' : this.valueUpdate;\r\n\r\n            _.extend(this, {\r\n                uid: uid,\r\n                noticeId: 'notice-' + uid,\r\n                errorId: 'error-' + uid,\r\n                inputName: utils.serializeName(name.join('.')),\r\n                valueUpdate: valueUpdate\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes switcher element instance.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initSwitcher: function () {\r\n            if (this.switcherConfig.enabled) {\r\n                layout([this.switcherConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets initial value of the element and subscribes to it's changes.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            this.initialValue = this.getInitialValue();\r\n\r\n            if (this.value.peek() !== this.initialValue) {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.on('value', this.onUpdate.bind(this));\r\n            this.isUseDefault(this.disabled());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses;\r\n\r\n            if (_.isString(additional)) {\r\n                this.additionalClasses = {};\r\n\r\n                if (additional.trim().length) {\r\n                    additional = additional.trim().split(' ');\r\n\r\n                    additional.forEach(function (name) {\r\n                        if (name.length) {\r\n                            this.additionalClasses[name] = true;\r\n                        }\r\n                    }, this);\r\n                }\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                _required: this.required,\r\n                _error: this.error,\r\n                _warn: this.warn,\r\n                _disabled: this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets initial value of element\r\n         *\r\n         * @returns {*} Elements' value.\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.value(), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                if (v !== null && v !== undefined) {\r\n                    value = v;\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        },\r\n\r\n        /**\r\n         * Sets 'value' as 'hidden' property's value, triggers 'toggle' event,\r\n         * sets instance's hidden identifier in params storage based on\r\n         * 'value'.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setVisible: function (isVisible) {\r\n            this.visible(isVisible);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Show element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        show: function () {\r\n            this.visible(true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hide element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.visible(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        disable: function () {\r\n            this.disabled(true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        enable: function () {\r\n            this.disabled(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {(String|Object)} rule\r\n         * @param {(Object|Boolean)} [options]\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setValidation: function (rule, options) {\r\n            var rules = utils.copy(this.validation),\r\n                changed;\r\n\r\n            if (_.isObject(rule)) {\r\n                _.extend(this.validation, rule);\r\n            } else {\r\n                this.validation[rule] = options;\r\n            }\r\n\r\n            changed = !utils.compare(rules, this.validation).equal;\r\n\r\n            if (changed) {\r\n                this.required(!!rules['required-entry']);\r\n                this.validate();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns unwrapped preview observable.\r\n         *\r\n         * @returns {String} Value of the preview observable.\r\n         */\r\n        getPreview: function () {\r\n            return this.value();\r\n        },\r\n\r\n        /**\r\n         * Checks if element has addons\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasAddons: function () {\r\n            return this.addbefore || this.addafter;\r\n        },\r\n\r\n        /**\r\n         * Checks if element has service setting\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasService: function () {\r\n            return this.service && this.service.template;\r\n        },\r\n\r\n        /**\r\n         * Defines if value has changed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var notEqual = this.value() !== this.initialValue;\r\n\r\n            return !this.visible() ? false : notEqual;\r\n        },\r\n\r\n        /**\r\n         * Checks if 'value' is not empty.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !utils.isEmpty(this.value());\r\n        },\r\n\r\n        /**\r\n         * Sets value observable to initialValue property.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.value(this.initialValue);\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets current state as initial.\r\n         */\r\n        overload: function () {\r\n            this.setInitialValue();\r\n            this.bubble('update', this.hasChanged());\r\n        },\r\n\r\n        /**\r\n         * Clears 'value' property.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value('');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts values like 'null' or 'undefined' to an empty string.\r\n         *\r\n         * @param {*} value - Value to be processed.\r\n         * @returns {*}\r\n         */\r\n        normalizeData: function (value) {\r\n            return utils.isEmpty(value) ? '' : value;\r\n        },\r\n\r\n        /**\r\n         * Validates itself by it's validation rules using validator object.\r\n         * If validation of a rule did not pass, writes it's message to\r\n         * 'error' observable property.\r\n         *\r\n         * @returns {Object} Validate information.\r\n         */\r\n        validate: function () {\r\n            var value = this.value(),\r\n                result = validator(this.validation, value, this.validationParams),\r\n                message = !this.disabled() && this.visible() ? result.message : '',\r\n                isValid = this.disabled() || !this.visible() || result.passed;\r\n\r\n            this.error(message);\r\n            this.error.valueHasMutated();\r\n            this.bubble('error', message);\r\n\r\n            //TODO: Implement proper result propagation for form\r\n            if (this.source && !isValid) {\r\n                this.source.set('params.invalid', true);\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                target: this\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         */\r\n        onUpdate: function () {\r\n            this.bubble('update', this.hasChanged());\r\n\r\n            this.validate();\r\n        },\r\n\r\n        /**\r\n         * Restore value to default\r\n         */\r\n        restoreToDefault: function () {\r\n            this.value(this.default);\r\n            this.focused(true);\r\n        },\r\n\r\n        /**\r\n         * Update whether value differs from default value\r\n         */\r\n        setDifferedFromDefault: function () {\r\n            var value = typeof this.value() != 'undefined' && this.value() !== null ? this.value() : '',\r\n                defaultValue = typeof this.default != 'undefined' && this.default !== null ? this.default : '';\r\n\r\n            this.isDifferedFromDefault(value !== defaultValue);\r\n        },\r\n\r\n        /**\r\n         * @param {Boolean} state\r\n         */\r\n        toggleUseDefault: function (state) {\r\n            this.disabled(state);\r\n\r\n            if (this.source && this.hasService()) {\r\n                this.source.set('data.use_default.' + this.index, Number(state));\r\n            }\r\n        },\r\n\r\n        /**\r\n         *  Callback when value is changed by user\r\n         */\r\n        userChanges: function () {\r\n            this.valueChangedByUser = true;\r\n        },\r\n\r\n        /**\r\n         * Returns correct id for 'aria-describedby' accessibility attribute\r\n         *\r\n         * @returns {Boolean|String}\r\n         */\r\n        getDescriptionId: function () {\r\n            var id = false;\r\n\r\n            if (this.error()) {\r\n                id = this.errorId;\r\n            } else if (this.notice()) {\r\n                id = this.noticeId;\r\n            }\r\n\r\n            return id;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/boolean.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            checked: false,\r\n            links: {\r\n                checked: 'value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {*|void|Element}\r\n         */\r\n        initObservable: function () {\r\n            return this._super()\r\n                    .observe('checked');\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to boolean.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        normalizeData: function () {\r\n            return !!+this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls 'onUpdate' method of parent, if value is defined and instance's\r\n         *     'unique' property set to true, calls 'setUnique' method\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        onUpdate: function () {\r\n            if (this.hasUnique) {\r\n                this.setUnique();\r\n            }\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/checkbox-set.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './abstract'\r\n], function (_, utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            template: 'ui/form/element/checkbox-set',\r\n            multiple: false,\r\n            multipleScopeValue: null\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.value = this.normalizeData(this.value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initLinks: function () {\r\n            var scope = this.source.get(this.dataScope);\r\n\r\n            this.multipleScopeValue = this.multiple && _.isArray(scope) ? utils.copy(scope) : undefined;\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            this.value(utils.copy(this.initialValue));\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            var value = this.multiple ? [] : '';\r\n\r\n            this.value(value);\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        normalizeData: function (value) {\r\n            if (!this.multiple) {\r\n                return this._super();\r\n            }\r\n\r\n            return _.isArray(value) ? utils.copy(value) : [];\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.initialValue = utils.copy(this.initialValue);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.multipleScopeValue, this.default, this.value.peek(), []],\r\n                value;\r\n\r\n            if (!this.multiple) {\r\n                return this._super();\r\n            }\r\n\r\n            values.some(function (v) {\r\n                return _.isArray(v) && (value = utils.copy(v));\r\n            });\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * Returns labels which matches current value.\r\n         *\r\n         * @returns {String|Array}\r\n         */\r\n        getPreview: function () {\r\n            var option;\r\n\r\n            if (!this.multiple) {\r\n                option = this.getOption(this.value());\r\n\r\n                return option ? option.label : '';\r\n            }\r\n\r\n            return this.value.map(function (value) {\r\n                return this.getOption(value).label;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Returns option object associated with provided value.\r\n         *\r\n         * @param {String} value\r\n         * @returns {Object}\r\n         */\r\n        getOption: function (value) {\r\n            return _.findWhere(this.options, {\r\n                value: value\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return this.multiple ?\r\n                !utils.equalArrays(value, initial) :\r\n                this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/color-picker-palette.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * @api\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return [\r\n        [\r\n            'rgb(0,0,0)', 'rgb(52,52,52)', 'rgb(83,83,83)', 'rgb(135,135,135)', 'rgb(193,193,193)',\r\n            'rgb(234,234,234)', 'rgb(240,240,240)', 'rgb(255,255,255)'\r\n        ],\r\n        [\r\n            'rgb(252,0,9)', 'rgb(253,135,10)', 'rgb(255,255,13)', 'rgb(35,255,9)', 'rgb(33,255,255)',\r\n            'rgb(0,0,254)', 'rgb(132,0,254)', 'rgb(251,0,255)'\r\n        ],\r\n        [\r\n            'rgb(240,192,194)', 'rgb(251,223,194)', 'rgb(255,241,193)', 'rgb(210,230,201)',\r\n            'rgb(199,217,220)', 'rgb(197,219,240)', 'rgb(208,200,227)', 'rgb(229,199,212)'\r\n        ],\r\n        [\r\n            'rgb(228,133,135)', 'rgb(246,193,139)', 'rgb(254,225,136)', 'rgb(168,208,152)',\r\n            'rgb(146,184,190)', 'rgb(143,184,227)', 'rgb(165,148,204)', 'rgb(202,147,175)'\r\n        ],\r\n        [\r\n            'rgb(214,78,83)', 'rgb(243,163,88)', 'rgb(254,211,83)', 'rgb(130,187,106)',\r\n            'rgb(99,149,159)', 'rgb(93,150,211)', 'rgb(123,100,182)', 'rgb(180,100,142)'\r\n        ],\r\n        [\r\n            'rgb(190,0,5)', 'rgb(222,126,44)', 'rgb(236,183,39)', 'rgb(89,155,61)', 'rgb(55,110,123)',\r\n            'rgb(49,112,185)', 'rgb(83,55,150)', 'rgb(147,55,101)'\r\n        ],\r\n        [\r\n            'rgb(133,0,3)', 'rgb(163,74,10)', 'rgb(177,127,7)', 'rgb(45,101,23)', 'rgb(18,62,74)',\r\n            'rgb(14,62,129)', 'rgb(40,15,97)', 'rgb(95,16,55)'\r\n        ],\r\n        [\r\n            'rgb(81,0,1)', 'rgb(100,48,7)', 'rgb(107,78,3)', 'rgb(31,63,16)',\r\n            'rgb(13,39,46)', 'rgb(10,40,79)', 'rgb(24,12,59)', 'rgb(59,10,36)'\r\n        ]\r\n    ];\r\n});\r\n","Magento_Ui/js/form/element/color-picker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Ui/js/form/element/color-picker-palette'\r\n], function ($t, Abstract, palette) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        defaults: {\r\n            colorPickerConfig: {\r\n                chooseText: $t('Apply'),\r\n                cancelText: $t('Cancel'),\r\n                maxSelectionSize: 8,\r\n                clickoutFiresChange: true,\r\n                allowEmpty: true,\r\n                localStorageKey: 'magento.spectrum',\r\n                palette: palette\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.colorPickerConfig.value = this.value;\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/country.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select'\r\n], function (_, registry, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            imports: {\r\n                update: '${ $.parentName }.website_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters 'initialOptions' property by 'field' and 'value' passed,\r\n         * calls 'setOptions' passing the result to it\r\n         *\r\n         * @param {*} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var result, defaultCountry, defaultValue;\r\n\r\n            if (!field) { //validate field, if we are on update\r\n                field = this.filterBy.field;\r\n            }\r\n\r\n            this._super(value, field);\r\n            result = _.filter(this.initialOptions, function (item) {\r\n\r\n                if (item[field]) {\r\n                    return ~item[field].indexOf(value);\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            this.setOptions(result);\r\n            this.reset();\r\n\r\n            if (!this.value()) {\r\n                defaultCountry = _.filter(result, function (item) {\r\n                    return item['is_default'] && _.contains(item['is_default'], value);\r\n                });\r\n\r\n                if (defaultCountry.length) {\r\n                    defaultValue = defaultCountry.shift();\r\n                    this.value(defaultValue.value);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n","Magento_Ui/js/form/element/date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'moment',\r\n    'mageUtils',\r\n    './abstract',\r\n    'moment-timezone-with-data'\r\n], function (moment, utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            options: {},\r\n\r\n            storeTimeZone: 'UTC',\r\n\r\n            validationParams: {\r\n                dateFormat: '${ $.outputDateFormat }'\r\n            },\r\n\r\n            /**\r\n             * Format of date that comes from the\r\n             * server (ICU Date Format).\r\n             *\r\n             * Used only in date picker mode\r\n             * (this.options.showsTime == false).\r\n             *\r\n             * @type {String}\r\n             */\r\n            inputDateFormat: 'y-MM-dd',\r\n\r\n            /**\r\n             * Format of date that should be sent to the\r\n             * server (ICU Date Format).\r\n             *\r\n             * Used only in date picker mode\r\n             * (this.options.showsTime == false).\r\n             *\r\n             * @type {String}\r\n             */\r\n            outputDateFormat: 'MM/dd/y',\r\n\r\n            /**\r\n             * Date/time format that is used to display date in\r\n             * the input field.\r\n             *\r\n             * @type {String}\r\n             */\r\n            pickerDateTimeFormat: '',\r\n\r\n            pickerDefaultDateFormat: 'MM/dd/y', // ICU Date Format\r\n            pickerDefaultTimeFormat: 'h:mm a', // ICU Time Format\r\n\r\n            elementTmpl: 'ui/form/element/date',\r\n\r\n            /**\r\n             * Format needed by moment timezone for conversion\r\n             */\r\n            timezoneFormat: 'YYYY-MM-DD HH:mm',\r\n\r\n            listens: {\r\n                'value': 'onValueChange',\r\n                'shiftedValue': 'onShiftedValueChange'\r\n            },\r\n\r\n            /**\r\n             * Date/time value shifted to corresponding timezone\r\n             * according to this.storeTimeZone property. This value\r\n             * will be sent to the server.\r\n             *\r\n             * @type {String}\r\n             */\r\n            shiftedValue: ''\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            if (!this.options.dateFormat) {\r\n                this.options.dateFormat = this.pickerDefaultDateFormat;\r\n            }\r\n\r\n            if (!this.options.timeFormat) {\r\n                this.options.timeFormat = this.pickerDefaultTimeFormat;\r\n            }\r\n\r\n            this.prepareDateTimeFormats();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this._super().observe(['shiftedValue']);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getPreview: function () {\r\n            return this.shiftedValue();\r\n        },\r\n\r\n        /**\r\n         * Prepares and sets date/time value that will be displayed\r\n         * in the input field.\r\n         *\r\n         * @param {String} value\r\n         */\r\n        onValueChange: function (value) {\r\n            var shiftedValue;\r\n\r\n            if (value) {\r\n                if (this.options.showsTime) {\r\n                    shiftedValue = moment.tz(value, 'UTC').tz(this.storeTimeZone);\r\n                } else {\r\n                    shiftedValue = moment(value, this.outputDateFormat);\r\n                }\r\n\r\n                if (!shiftedValue.isValid()) {\r\n                    shiftedValue = moment(value, this.inputDateFormat);\r\n                }\r\n                shiftedValue = shiftedValue.format(this.pickerDateTimeFormat);\r\n            } else {\r\n                shiftedValue = '';\r\n            }\r\n\r\n            if (shiftedValue !== this.shiftedValue()) {\r\n                this.shiftedValue(shiftedValue);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepares and sets date/time value that will be sent\r\n         * to the server.\r\n         *\r\n         * @param {String} shiftedValue\r\n         */\r\n        onShiftedValueChange: function (shiftedValue) {\r\n            var value,\r\n                formattedValue,\r\n                momentValue;\r\n\r\n            if (shiftedValue) {\r\n                momentValue = moment(shiftedValue, this.pickerDateTimeFormat);\r\n\r\n                if (this.options.showsTime) {\r\n                    formattedValue = moment(momentValue).format(this.timezoneFormat);\r\n                    value = moment.tz(formattedValue, this.storeTimeZone).tz('UTC').toISOString();\r\n                } else {\r\n                    value = momentValue.format(this.outputDateFormat);\r\n                }\r\n            } else {\r\n                value = '';\r\n            }\r\n\r\n            if (value !== this.value()) {\r\n                this.value(value);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepares and converts all date/time formats to be compatible\r\n         * with moment.js library.\r\n         */\r\n        prepareDateTimeFormats: function () {\r\n            this.pickerDateTimeFormat = this.options.dateFormat;\r\n\r\n            if (this.options.showsTime) {\r\n                this.pickerDateTimeFormat += ' ' + this.options.timeFormat;\r\n            }\r\n\r\n            this.pickerDateTimeFormat = utils.convertToMomentFormat(this.pickerDateTimeFormat);\r\n\r\n            if (this.options.dateFormat) {\r\n                this.outputDateFormat = this.options.dateFormat;\r\n            }\r\n\r\n            this.inputDateFormat = utils.convertToMomentFormat(this.inputDateFormat);\r\n            this.outputDateFormat = utils.convertToMomentFormat(this.outputDateFormat);\r\n\r\n            this.validationParams.dateFormat = this.outputDateFormat;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/image-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Base64 */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'Magento_Ui/js/form/element/file-uploader',\r\n    'mage/adminhtml/browser'\r\n], function ($, _, utils, uiAlert, validator, Element, browser) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        /**\r\n         * {@inheritDoc}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            // Listen for file deletions from the media browser\r\n            $(window).on('fileDeleted.mediabrowser', this.onDeleteFile.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Assign uid for media gallery\r\n         *\r\n         * @return {ImageUploader} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            var mediaGalleryUid = utils.uniqueid();\r\n\r\n            this._super();\r\n\r\n            _.extend(this, {\r\n                mediaGalleryUid: mediaGalleryUid\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add file event callback triggered from media gallery\r\n         *\r\n         * @param {ImageUploader} imageUploader - UI Class\r\n         * @param {Event} e\r\n         */\r\n        addFileFromMediaGallery: function (imageUploader, e) {\r\n            var $buttonEl = $(e.target),\r\n                fileSize = $buttonEl.data('size'),\r\n                fileMimeType = $buttonEl.data('mime-type'),\r\n                filePathname = $buttonEl.val(),\r\n                fileBasename = filePathname.split('/').pop();\r\n\r\n            this.addFile({\r\n                type: fileMimeType,\r\n                name: fileBasename,\r\n                size: fileSize,\r\n                url: filePathname\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Open the media browser dialog\r\n         *\r\n         * @param {ImageUploader} imageUploader - UI Class\r\n         * @param {Event} e\r\n         */\r\n        openMediaBrowserDialog: function (imageUploader, e) {\r\n            var $buttonEl = $(e.target),\r\n                openDialogUrl = this.mediaGallery.openDialogUrl +\r\n                'target_element_id/' + $buttonEl.attr('id') +\r\n                '/store/' + this.mediaGallery.storeId +\r\n                '/type/image/?isAjax=true';\r\n\r\n            if (this.mediaGallery.initialOpenSubpath) {\r\n                openDialogUrl += '&current_tree_path=' + Base64.idEncode(this.mediaGallery.initialOpenSubpath);\r\n            }\r\n\r\n            browser.openDialog(\r\n                openDialogUrl,\r\n                null,\r\n                null,\r\n                this.mediaGallery.openDialogTitle,\r\n                {\r\n                    targetElementId: $buttonEl.attr('id')\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.event} e\r\n         * @param {Object} data\r\n         * @returns {Object} Chainables\r\n         */\r\n        onDeleteFile: function (e, data) {\r\n            var fileId = this.getFileId(),\r\n                deletedFileIds = data.ids;\r\n\r\n            if (fileId && $.inArray(fileId, deletedFileIds) > -1) {\r\n                this.clear();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritDoc}\r\n         */\r\n        clear: function () {\r\n            this.value([]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets the ID of the file used if set\r\n         *\r\n         * @return {String|Null} ID\r\n         */\r\n        getFileId: function () {\r\n            return this.hasData() ? this.value()[0].id : null;\r\n        },\r\n\r\n        /**\r\n         * Trigger native browser file upload UI via clicking on 'Upload' button\r\n         *\r\n         * @param {ImageUploader} imageUploader - UI Class\r\n         * @param {Event} e\r\n         */\r\n        triggerImageUpload: function (imageUploader, e) {\r\n            $(e.target).closest('.file-uploader').find('input[type=\"file\"]').click();\r\n        },\r\n\r\n        /**\r\n         * Get list of file extensions allowed in comma delimited format\r\n         *\r\n         * @return {String}\r\n         */\r\n        getAllowedFileExtensionsInCommaDelimitedFormat: function () {\r\n            var allowedExtensions = this.allowedExtensions.toUpperCase().split(' ');\r\n\r\n            // if jpg and jpeg in allowed extensions, remove jpeg from list\r\n            if (allowedExtensions.indexOf('JPG') !== -1 && allowedExtensions.indexOf('JPEG') !== -1) {\r\n                allowedExtensions.splice(allowedExtensions.indexOf('JPEG'), 1);\r\n            }\r\n\r\n            return allowedExtensions.join(', ');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/media.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mageUtils',\r\n    './abstract'\r\n], function (utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            links: {\r\n                value: ''\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes file component.\r\n         *\r\n         * @returns {Media} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initFormId();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines form ID with which file input will be associated.\r\n         *\r\n         * @returns {Media} Chainable.\r\n         */\r\n        initFormId: function () {\r\n            var namespace;\r\n\r\n            if (this.formId) {\r\n                return this;\r\n            }\r\n\r\n            namespace   = this.name.split('.');\r\n            this.formId = namespace[0];\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/multiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './select'\r\n], function (_, utils, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            size: 5,\r\n            elementTmpl: 'ui/form/element/multiselect',\r\n            listens: {\r\n                value: 'setDifferedFromDefault setPrepareToSendData'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.initialValue = utils.copy(this.initialValue);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        normalizeData: function (value) {\r\n            if (utils.isEmpty(value)) {\r\n                value = [];\r\n            }\r\n\r\n            return _.isString(value) ? value.split(',') : value;\r\n        },\r\n\r\n        /**\r\n         * Sets the prepared data to dataSource\r\n         * by path, where key is component link to dataSource with\r\n         * suffix \"-prepared-for-send\"\r\n         *\r\n         * @param {Array} data - current component value\r\n         */\r\n        setPrepareToSendData: function (data) {\r\n            if (_.isUndefined(data) || !data.length) {\r\n                data = '';\r\n            }\r\n\r\n            this.source.set(this.dataScope + '-prepared-for-send', data);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [\r\n                    this.normalizeData(this.source.get(this.dataScope)),\r\n                    this.normalizeData(this.default)\r\n                ],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                return _.isArray(v) && (value = utils.copy(v)) && !_.isEmpty(v);\r\n            });\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return !utils.equalArrays(value, initial);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            this.value(utils.copy(this.initialValue));\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            this.value([]);\r\n            this.error(false);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/post-code.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            imports: {\r\n                countryOptions: '${ $.parentName }.country_id:indexedOptions',\r\n                update: '${ $.parentName }.country_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            /**\r\n             * equalityComparer function\r\n             *\r\n             * @returns boolean.\r\n             */\r\n            this.value.equalityComparer = function (oldValue, newValue) {\r\n                return !oldValue && !newValue || oldValue === newValue;\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Method called every time country selector's value gets changed.\r\n         * Updates all validations and requirements for certain country.\r\n         * @param {String} value - Selected country ID.\r\n         */\r\n        update: function (value) {\r\n            var isZipCodeOptional,\r\n                option;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            option = _.isObject(this.countryOptions) && this.countryOptions[value];\r\n\r\n            if (!option) {\r\n                return;\r\n            }\r\n\r\n            isZipCodeOptional = !!option['is_zipcode_optional'];\r\n\r\n            if (isZipCodeOptional) {\r\n                this.error(false);\r\n            }\r\n\r\n            this.validation['required-entry'] = !isZipCodeOptional;\r\n            this.required(!isZipCodeOptional);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/region.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select',\r\n    'Magento_Checkout/js/model/default-post-code-resolver'\r\n], function (_, registry, Select, defaultPostCodeResolver) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            skipValidation: false,\r\n            imports: {\r\n                countryOptions: '${ $.parentName }.country_id:indexedOptions',\r\n                update: '${ $.parentName }.country_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method called every time country selector's value gets changed.\r\n         * Updates all validations and requirements for certain country.\r\n         * @param {String} value - Selected country ID.\r\n         */\r\n        update: function (value) {\r\n            var isRegionRequired,\r\n                option;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            option = _.isObject(this.countryOptions) && this.countryOptions[value];\r\n\r\n            if (!option) {\r\n                return;\r\n            }\r\n\r\n            defaultPostCodeResolver.setUseDefaultPostCode(!option['is_zipcode_optional']);\r\n\r\n            if (option['is_region_visible'] === false) {\r\n                // Hide select and corresponding text input field if region must not be shown for selected country.\r\n                this.setVisible(false);\r\n\r\n                if (this.customEntry) { // eslint-disable-line max-depth\r\n                    this.toggleInput(false);\r\n                }\r\n            }\r\n\r\n            isRegionRequired = !this.skipValidation && !!option['is_region_required'];\r\n\r\n            if (!isRegionRequired) {\r\n                this.error(false);\r\n            }\r\n\r\n            this.required(isRegionRequired);\r\n            this.validation['required-entry'] = isRegionRequired;\r\n\r\n            registry.get(this.customName, function (input) {\r\n                input.required(isRegionRequired);\r\n                input.validation['required-entry'] = isRegionRequired;\r\n                input.validation['validate-not-number-first'] = !this.options().length;\r\n            }.bind(this));\r\n        }\r\n    });\r\n});\r\n\r\n","Magento_Ui/js/form/element/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './abstract',\r\n    'uiLayout'\r\n], function (_, utils, registry, Abstract, layout) {\r\n    'use strict';\r\n\r\n    var inputNode = {\r\n        parent: '${ $.$data.parentName }',\r\n        component: 'Magento_Ui/js/form/element/abstract',\r\n        template: '${ $.$data.template }',\r\n        provider: '${ $.$data.provider }',\r\n        name: '${ $.$data.index }_input',\r\n        dataScope: '${ $.$data.customEntry }',\r\n        customScope: '${ $.$data.customScope }',\r\n        sortOrder: {\r\n            after: '${ $.$data.name }'\r\n        },\r\n        displayArea: 'body',\r\n        label: '${ $.$data.label }'\r\n    };\r\n\r\n    /**\r\n     * Parses incoming options, considers options with undefined value property\r\n     *     as caption\r\n     *\r\n     * @param  {Array} nodes\r\n     * @return {Object}\r\n     */\r\n    function parseOptions(nodes, captionValue) {\r\n        var caption,\r\n            value;\r\n\r\n        nodes = _.map(nodes, function (node) {\r\n            value = node.value;\r\n\r\n            if (value === null || value === captionValue) {\r\n                if (_.isUndefined(caption)) {\r\n                    caption = node.label;\r\n                }\r\n            } else {\r\n                return node;\r\n            }\r\n        });\r\n\r\n        return {\r\n            options: _.compact(nodes),\r\n            caption: _.isString(caption) ? caption : false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Recursively loops over data to find non-undefined, non-array value\r\n     *\r\n     * @param  {Array} data\r\n     * @return {*} - first non-undefined value in array\r\n     */\r\n    function findFirst(data) {\r\n        var value;\r\n\r\n        data.some(function (node) {\r\n            value = node.value;\r\n\r\n            if (Array.isArray(value)) {\r\n                value = findFirst(value);\r\n            }\r\n\r\n            return !_.isUndefined(value);\r\n        });\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Recursively set to object item like value and item.value like key.\r\n     *\r\n     * @param {Array} data\r\n     * @param {Object} result\r\n     * @returns {Object}\r\n     */\r\n    function indexOptions(data, result) {\r\n        var value;\r\n\r\n        result = result || {};\r\n\r\n        data.forEach(function (item) {\r\n            value = item.value;\r\n\r\n            if (Array.isArray(value)) {\r\n                indexOptions(value, result);\r\n            } else {\r\n                result[value] = item;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            customName: '${ $.parentName }.${ $.index }_input',\r\n            elementTmpl: 'ui/form/element/select',\r\n            caption: '',\r\n            options: []\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults, extends config with formatted values\r\n         *     and options, and invokes initialize method of AbstractElement class.\r\n         *     If instance's 'customEntry' property is set to true, calls 'initInput'\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.customEntry) {\r\n                registry.get(this.name, this.initInput.bind(this));\r\n            }\r\n\r\n            if (this.filterBy) {\r\n                this.initFilter();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            this.initialOptions = this.options;\r\n\r\n            this.observe('options caption')\r\n                .setOptions(this.options());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set link for filter.\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        initFilter: function () {\r\n            var filter = this.filterBy;\r\n\r\n            this.filter(this.default, filter.field);\r\n            this.setLinks({\r\n                filter: filter.target\r\n            }, 'imports');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates input from template, renders it via renderer.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initInput: function () {\r\n            layout([utils.template(inputNode, this)]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Matches specified value with existing options\r\n         * or, if value is not specified, returns value of the first option.\r\n         *\r\n         * @returns {*}\r\n         */\r\n        normalizeData: function () {\r\n            var value = this._super(),\r\n                option;\r\n\r\n            if (value !== '') {\r\n                option = this.getOption(value);\r\n\r\n                return option && option.value;\r\n            }\r\n\r\n            if (!this.caption()) {\r\n                return findFirst(this.options);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters 'initialOptions' property by 'field' and 'value' passed,\r\n         * calls 'setOptions' passing the result to it\r\n         *\r\n         * @param {*} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var source = this.initialOptions,\r\n                result;\r\n\r\n            field = field || this.filterBy.field;\r\n\r\n            result = _.filter(source, function (item) {\r\n                return item[field] === value || item.value === '';\r\n            });\r\n\r\n            this.setOptions(result);\r\n        },\r\n\r\n        /**\r\n         * Change visibility for input.\r\n         *\r\n         * @param {Boolean} isVisible\r\n         */\r\n        toggleInput: function (isVisible) {\r\n            registry.get(this.customName, function (input) {\r\n                input.setVisible(isVisible);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Sets 'data' to 'options' observable array, if instance has\r\n         * 'customEntry' property set to true, calls 'setHidden' method\r\n         *  passing !options.length as a parameter\r\n         *\r\n         * @param {Array} data\r\n         * @returns {Object} Chainable\r\n         */\r\n        setOptions: function (data) {\r\n            var captionValue = this.captionValue || '',\r\n                result = parseOptions(data, captionValue),\r\n                isVisible;\r\n\r\n            this.indexedOptions = indexOptions(result.options);\r\n\r\n            this.options(result.options);\r\n\r\n            if (!this.caption()) {\r\n                this.caption(result.caption);\r\n            }\r\n\r\n            if (this.customEntry) {\r\n                isVisible = !!result.options.length;\r\n\r\n                this.setVisible(isVisible);\r\n                this.toggleInput(!isVisible);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes preview for option by it's value, and sets the result\r\n         * to 'preview' observable\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        getPreview: function () {\r\n            var value = this.value(),\r\n                option = this.indexedOptions[value],\r\n                preview = option ? option.label : '';\r\n\r\n            this.preview(preview);\r\n\r\n            return preview;\r\n        },\r\n\r\n        /**\r\n         * Get option from indexedOptions list.\r\n         *\r\n         * @param {Number} value\r\n         * @returns {Object} Chainable\r\n         */\r\n        getOption: function (value) {\r\n            return this.indexedOptions[value];\r\n        },\r\n\r\n        /**\r\n         * Select first available option\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            var value = this.caption() ? '' : findFirst(this.options);\r\n\r\n            this.value(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            if (_.isUndefined(this.value()) && !this.default) {\r\n                this.clear();\r\n            }\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox-toggle-notice.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (SingleCheckbox) {\r\n    'use strict';\r\n\r\n    return SingleCheckbox.extend({\r\n        defaults: {\r\n            notices: [],\r\n            tracks: {\r\n                notice: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Choose notice on initialization\r\n         *\r\n         * @returns {*|void|Element}\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .chooseNotice();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Choose notice function\r\n         *\r\n         * @returns void\r\n         */\r\n        chooseNotice: function () {\r\n            var checkedNoticeNumber = Number(this.checked());\r\n\r\n            this.notice = this.notices[checkedNoticeNumber];\r\n        },\r\n\r\n        /**\r\n         * Choose notice on update\r\n         *\r\n         * @returns void\r\n         */\r\n        onUpdate: function () {\r\n            this._super();\r\n            this.chooseNotice();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox-use-config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            isUseDefault: false,\r\n            isUseConfig: false,\r\n            listens: {\r\n                'isUseConfig': 'toggleElement',\r\n                'isUseDefault': 'toggleElement'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n\r\n            return this\r\n                ._super()\r\n                .observe('isUseConfig');\r\n        },\r\n\r\n        /**\r\n         * Toggle element\r\n         */\r\n        toggleElement: function () {\r\n            this.disabled(this.isUseDefault() || this.isUseConfig());\r\n\r\n            if (this.source) {\r\n                this.source.set('data.use_default.' + this.index, Number(this.isUseDefault()));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'underscore',\r\n    'mage/translate'\r\n], function (AbstractField, _, $t) {\r\n    'use strict';\r\n\r\n    return AbstractField.extend({\r\n        defaults: {\r\n            template: 'ui/form/components/single/field',\r\n            checked: false,\r\n            initialChecked: false,\r\n            multiple: false,\r\n            prefer: 'checkbox', // 'radio' | 'checkbox' | 'toggle'\r\n            valueMap: {},\r\n\r\n            templates: {\r\n                radio: 'ui/form/components/single/radio',\r\n                checkbox: 'ui/form/components/single/checkbox',\r\n                toggle: 'ui/form/components/single/switcher'\r\n            },\r\n\r\n            listens: {\r\n                'checked': 'onCheckedChanged',\r\n                'value': 'onExtendedValueChanged'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function (config) {\r\n            this._super();\r\n\r\n            if (!config.elementTmpl) {\r\n                if (!this.prefer && !this.multiple) {\r\n                    this.elementTmpl = this.templates.radio;\r\n                } else if (this.prefer === 'radio') {\r\n                    this.elementTmpl = this.templates.radio;\r\n                } else if (this.prefer === 'checkbox') {\r\n                    this.elementTmpl = this.templates.checkbox;\r\n                } else if (this.prefer === 'toggle') {\r\n                    this.elementTmpl = this.templates.toggle;\r\n                } else {\r\n                    this.elementTmpl = this.templates.checkbox;\r\n                }\r\n            }\r\n\r\n            if (this.prefer === 'toggle' && _.isEmpty(this.toggleLabels)) {\r\n                this.toggleLabels = {\r\n                    'on': $t('Yes'),\r\n                    'off': $t('No')\r\n                };\r\n            }\r\n\r\n            if (typeof this.default === 'undefined' || this.default === null) {\r\n                this.default = '';\r\n            }\r\n\r\n            if (typeof this.value === 'undefined' || this.value === null) {\r\n                this.value = _.isEmpty(this.valueMap) || this.default !== '' ? this.default : this.valueMap.false;\r\n                this.initialValue = this.value;\r\n            } else {\r\n                this.initialValue = this.value;\r\n            }\r\n\r\n            if (this.multiple && !_.isArray(this.value)) {\r\n                this.value = []; // needed for correct observable assignment\r\n            }\r\n\r\n            this.initialChecked = this.checked;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe('checked');\r\n        },\r\n\r\n        /**\r\n         * Get true/false key from valueMap by value.\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean|undefined}\r\n         */\r\n        getReverseValueMap: function getReverseValueMap(value) {\r\n            var bool = false;\r\n\r\n            _.some(this.valueMap, function (iValue, iBool) {\r\n                if (iValue === value) {\r\n                    bool = iBool === 'true';\r\n\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return bool;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            if (_.isEmpty(this.valueMap)) {\r\n                this.on('value', this.onUpdate.bind(this));\r\n            } else {\r\n                this._super();\r\n                this.checked(this.getReverseValueMap(this.value()));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handle dataScope changes for checkbox / radio button.\r\n         *\r\n         * @param {*} newExportedValue\r\n         */\r\n        onExtendedValueChanged: function (newExportedValue) {\r\n            var isMappedUsed = !_.isEmpty(this.valueMap),\r\n                oldChecked = this.checked.peek(),\r\n                oldValue = this.initialValue,\r\n                newChecked;\r\n\r\n            if (this.multiple) {\r\n                newChecked = newExportedValue.indexOf(oldValue) !== -1;\r\n            } else if (isMappedUsed) {\r\n                newChecked = this.getReverseValueMap(newExportedValue);\r\n            } else if (typeof newExportedValue === 'boolean') {\r\n                newChecked = newExportedValue;\r\n            } else {\r\n                newChecked = newExportedValue === oldValue;\r\n            }\r\n\r\n            if (newChecked !== oldChecked) {\r\n                this.checked(newChecked);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle checked state changes for checkbox / radio button.\r\n         *\r\n         * @param {Boolean} newChecked\r\n         */\r\n        onCheckedChanged: function (newChecked) {\r\n            var isMappedUsed = !_.isEmpty(this.valueMap),\r\n                oldValue = this.initialValue,\r\n                newValue;\r\n\r\n            if (isMappedUsed) {\r\n                newValue = this.valueMap[newChecked];\r\n            } else {\r\n                newValue = oldValue;\r\n            }\r\n\r\n            if (!this.multiple && newChecked) {\r\n                this.value(newValue);\r\n            } else if (!this.multiple && !newChecked) {\r\n                if (typeof newValue === 'boolean') {\r\n                    this.value(newChecked);\r\n                } else if (newValue === this.value.peek()) {\r\n                    this.value('');\r\n                }\r\n\r\n                if (isMappedUsed) {\r\n                    this.value(newValue);\r\n                }\r\n            } else if (this.multiple && newChecked && this.value.indexOf(newValue) === -1) {\r\n                this.value.push(newValue);\r\n            } else if (this.multiple && !newChecked && this.value.indexOf(newValue) !== -1) {\r\n                this.value.splice(this.value.indexOf(newValue), 1);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            if (this.hasUnique) {\r\n                this.setUnique();\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            if (this.multiple && this.initialChecked) {\r\n                this.value.push(this.initialValue);\r\n            } else if (this.multiple && !this.initialChecked) {\r\n                this.value.splice(this.value.indexOf(this.initialValue), 1);\r\n            } else {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            if (this.multiple) {\r\n                this.value([]);\r\n            } else {\r\n                this.value('');\r\n            }\r\n\r\n            this.error(false);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/text.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiElement',\r\n    'mageUtils'\r\n], function (Element, utils) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            visible: true,\r\n            label: '',\r\n            error: '',\r\n            uid: utils.uniqueid(),\r\n            disabled: false,\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Has service\r\n         *\r\n         * @returns {Boolean} false.\r\n         */\r\n        hasService: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Has addons\r\n         *\r\n         * @returns {Boolean} false.\r\n         */\r\n        hasAddons: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('disabled visible value');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/textarea.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            cols: 15,\r\n            rows: 2,\r\n            elementTmpl: 'ui/form/element/textarea'\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/url-input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, layout, $t, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            linkedElement: {},\r\n            settingTemplate: 'ui/form/element/urlInput/setting',\r\n            typeSelectorTemplate: 'ui/form/element/urlInput/typeSelector',\r\n            options: [],\r\n            linkedElementInstances: {},\r\n            //checkbox\r\n            isDisplayAdditionalSettings: true,\r\n            settingValue: false,\r\n            settingLabel: $t('Open in new tab'),\r\n            tracks: {\r\n                linkedElement: true\r\n            },\r\n            baseLinkSetting: {\r\n                namePrefix: '${$.name}.',\r\n                dataScopePrefix: '${$.dataScope}.',\r\n                provider: '${$.provider}'\r\n            },\r\n            urlTypes: {},\r\n            listens: {\r\n                settingValue: 'checked',\r\n                disabled: 'hideLinkedElement',\r\n                linkType: 'createChildUrlInputComponent'\r\n            },\r\n            links: {\r\n                linkType: '${$.provider}:${$.dataScope}.type',\r\n                settingValue: '${$.provider}:${$.dataScope}.setting'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var processedLinkTypes = {},\r\n                baseLinkType = this.constructor.defaults.baseLinkSetting;\r\n\r\n            _.each(config.urlTypes, function (linkSettingsArray, linkName) {\r\n                //add link name by link type\r\n                linkSettingsArray.name = baseLinkType.namePrefix + linkName;\r\n                linkSettingsArray.dataScope = baseLinkType.dataScopePrefix + linkName;\r\n                linkSettingsArray.type = linkName;\r\n                linkSettingsArray.disabled = config.disabled;\r\n                linkSettingsArray.visible = config.visible;\r\n                processedLinkTypes[linkName] = {};\r\n                _.extend(processedLinkTypes[linkName], baseLinkType, linkSettingsArray);\r\n            });\r\n            _.extend(this.constructor.defaults.urlTypes, processedLinkTypes);\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('componentTemplate options value linkType settingValue checked isDisplayAdditionalSettings')\r\n                .setOptions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set options to select based on link types configuration\r\n         *\r\n         * @return {Object}\r\n         */\r\n        setOptions: function () {\r\n            var result = [];\r\n\r\n            _.each(this.urlTypes, function (option, key) {\r\n                result.push({\r\n                    value: key,\r\n                    label: option.label,\r\n                    sortOrder: option.sortOrder || 0\r\n                });\r\n            });\r\n\r\n            //sort options by sortOrder\r\n            result.sort(function (a, b) {\r\n                return a.sortOrder > b.sortOrder ? 1 : -1;\r\n            });\r\n\r\n            this.options(result);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setPreview: function (visible) {\r\n            this.linkedElement().visible(visible);\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @param {Boolean} disabled\r\n         */\r\n        hideLinkedElement: function (disabled) {\r\n            this.linkedElement().disabled(disabled);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            _.each(this.linkedElementInstances, function (value) {\r\n                value().destroy();\r\n            });\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Create child component by value\r\n         *\r\n         * @param {String} value\r\n         * @return void\r\n         */\r\n        createChildUrlInputComponent: function (value) {\r\n            var elementConfig;\r\n\r\n            if (!_.isEmpty(value) && _.isUndefined(this.linkedElementInstances[value])) {\r\n                elementConfig = this.urlTypes[value];\r\n                layout([elementConfig]);\r\n                this.linkedElementInstances[value] = this.requestModule(elementConfig.name);\r\n            }\r\n            this.linkedElement = this.linkedElementInstances[value];\r\n\r\n        },\r\n\r\n        /**\r\n         * Returns linked element to display related field in template\r\n         * @return String\r\n         */\r\n        getLinkedElementName: function () {\r\n            return this.linkedElement;\r\n        },\r\n\r\n        /**\r\n         * Add ability to choose check box by clicking on label\r\n         */\r\n        checkboxClick: function () {\r\n            if (!this.disabled()) {\r\n                this.settingValue(!this.settingValue());\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/website.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select'\r\n], function (_, registry, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            customerId: null,\r\n            isGlobalScope: 0\r\n        },\r\n\r\n        /**\r\n         * Website component constructor.\r\n         * @returns {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.customerId || this.isGlobalScope) {\r\n                this.disable(true);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/wysiwyg.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'wysiwygAdapter',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'ko',\r\n    './abstract',\r\n    'mage/adminhtml/events',\r\n    'Magento_Variable/variables'\r\n], function (wysiwyg, $, _, ko, Abstract, varienGlobalEvents) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        currentWysiwyg: undefined,\r\n        defaults: {\r\n            elementSelector: 'textarea',\r\n            suffixRegExpPattern: '${ $.wysiwygUniqueSuffix }',\r\n            $wysiwygEditorButton: '',\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            template: 'ui/form/field',\r\n            elementTmpl: 'ui/form/element/wysiwyg',\r\n            content:        '',\r\n            showSpinner:    false,\r\n            loading:        false,\r\n            listens: {\r\n                disabled: 'setDisabled'\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initNodeListener();\r\n\r\n            $.async({\r\n                component: this,\r\n                selector: 'button'\r\n            }, function (element) {\r\n                this.$wysiwygEditorButton = this.$wysiwygEditorButton ?\r\n                    this.$wysiwygEditorButton.add($(element)) : $(element);\r\n            }.bind(this));\r\n\r\n            // disable editor completely after initialization is field is disabled\r\n            varienGlobalEvents.attachEventHandler('wysiwygEditorInitialized', function () {\r\n                if (!_.isUndefined(window.tinyMceEditors)) {\r\n                    this.currentWysiwyg = window.tinyMceEditors[this.wysiwygId];\r\n                }\r\n\r\n                if (this.disabled()) {\r\n                    this.setDisabled(true);\r\n                }\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var pattern = config.suffixRegExpPattern || this.constructor.defaults.suffixRegExpPattern;\r\n\r\n            pattern = pattern.replace(/\\$/g, '\\\\$&');\r\n            config.content = config.content.replace(new RegExp(pattern, 'g'), this.getUniqueSuffix(config));\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Build unique id based on name, underscore separated.\r\n         *\r\n         * @param {Object} config\r\n         */\r\n        getUniqueSuffix: function (config) {\r\n            return config.name.replace(/(\\.|-)/g, '_');\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            wysiwyg.removeEvents(this.wysiwygId);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('value');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {} Chainable.\r\n         */\r\n        initNodeListener: function () {\r\n            $.async({\r\n                component: this,\r\n                selector: this.elementSelector\r\n            }, this.setElementNode.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setElementNode: function (node) {\r\n            $(node).bindings({\r\n                value: this.value\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set disabled property to wysiwyg component\r\n         *\r\n         * @param {Boolean} disabled\r\n         */\r\n        setDisabled: function (disabled) {\r\n            if (this.$wysiwygEditorButton && disabled) {\r\n                this.$wysiwygEditorButton.prop('disabled', 'disabled');\r\n            } else if (this.$wysiwygEditorButton) {\r\n                this.$wysiwygEditorButton.removeProp('disabled');\r\n            }\r\n\r\n            /* eslint-disable no-undef */\r\n            if (!_.isUndefined(this.currentWysiwyg) && this.currentWysiwyg.activeEditor()) {\r\n                this.currentWysiwyg.setEnabledStatus(!disabled);\r\n                this.currentWysiwyg.getPluginButtons().prop('disabled', disabled);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/collapsible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiComponent'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            opened: false,\r\n            collapsible: true\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('opened');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles value of the 'opened' property.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        toggleOpened: function () {\r\n            this.opened() ?\r\n                this.close() :\r\n                this.open();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' flag to false.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        close: function () {\r\n            if (this.collapsible) {\r\n                this.opened(false);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' flag to true.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        open: function () {\r\n            if (this.collapsible) {\r\n                this.opened(true);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/key-codes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        13: 'enterKey',\r\n        27: 'escapeKey',\r\n        40: 'pageDownKey',\r\n        38: 'pageUpKey',\r\n        32: 'spaceKey',\r\n        9:  'tabKey',\r\n        37: 'pageLeftKey',\r\n        39: 'pageRightKey',\r\n        17: 'ctrlKey',\r\n        18: 'altKey',\r\n        16: 'shiftKey',\r\n        66: 'bKey',\r\n        73: 'iKey',\r\n        85: 'uKey'\r\n    };\r\n});\r\n","Magento_Ui/js/lib/spinner.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var selector = '[data-role=\"spinner\"]',\r\n        spinner = $(selector);\r\n\r\n    return {\r\n        /**\r\n         * Show spinner.\r\n         */\r\n        show: function () {\r\n            spinner.show();\r\n        },\r\n\r\n        /**\r\n         * Hide spinner.\r\n         */\r\n        hide: function () {\r\n            spinner.hide();\r\n        },\r\n\r\n        /**\r\n         * Get spinner by selector.\r\n         *\r\n         * @param {String} id\r\n         * @return {jQuery}\r\n         */\r\n        get: function (id) {\r\n            return $(selector + '[data-component=\"' + id + '\"]');\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/core/class.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/utils/wrapper'\r\n], function (_, utils, wrapper) {\r\n    'use strict';\r\n\r\n    var Class;\r\n\r\n    /**\r\n     * Returns property of an object if\r\n     * it's his own property.\r\n     *\r\n     * @param {Object} obj - Object whose property should be retrieved.\r\n     * @param {String} prop - Name of the property.\r\n     * @returns {*} Value of the property or false.\r\n     */\r\n    function getOwn(obj, prop) {\r\n        return _.isObject(obj) && obj.hasOwnProperty(prop) && obj[prop];\r\n    }\r\n\r\n    /**\r\n     * Creates constructor function which allows\r\n     * initialization without usage of a 'new' operator.\r\n     *\r\n     * @param {Object} protoProps - Prototypal properties of a new constructor.\r\n     * @param {Function} constructor\r\n     * @returns {Function} Created constructor.\r\n     */\r\n    function createConstructor(protoProps, constructor) {\r\n        var UiClass = constructor;\r\n\r\n        if (!UiClass) {\r\n\r\n            /**\r\n             * Default constructor function.\r\n             */\r\n            UiClass = function () {\r\n                var obj = this;\r\n\r\n                if (!_.isObject(obj) || Object.getPrototypeOf(obj) !== UiClass.prototype) {\r\n                    obj = Object.create(UiClass.prototype);\r\n                }\r\n\r\n                obj.initialize.apply(obj, arguments);\r\n\r\n                return obj;\r\n            };\r\n        }\r\n\r\n        UiClass.prototype = protoProps;\r\n        UiClass.prototype.constructor = UiClass;\r\n\r\n        return UiClass;\r\n    }\r\n\r\n    Class = createConstructor({\r\n\r\n        /**\r\n         * Entry point to the initialization of constructor's instance.\r\n         *\r\n         * @param {Object} [options={}]\r\n         * @returns {Class} Chainable.\r\n         */\r\n        initialize: function (options) {\r\n            this.initConfig(options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recursively extends data specified in constructors' 'defaults'\r\n         * property with provided options object. Evaluates resulting\r\n         * object using string templates (see: mage/utils/template.js).\r\n         *\r\n         * @param {Object} [options={}]\r\n         * @returns {Class} Chainable.\r\n         */\r\n        initConfig: function (options) {\r\n            var defaults    = this.constructor.defaults,\r\n                config      = utils.extend({}, defaults, options || {}),\r\n                ignored     = config.ignoreTmpls || {},\r\n                cached      = utils.omit(config, ignored);\r\n\r\n            config = utils.template(config, this, false, true);\r\n\r\n            _.each(cached, function (value, key) {\r\n                utils.nested(config, key, value);\r\n            });\r\n\r\n            return _.extend(this, config);\r\n        }\r\n    });\r\n\r\n    _.extend(Class, {\r\n        defaults: {\r\n            ignoreTmpls: {\r\n                templates: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates new constructor based on a current prototype properties,\r\n         * extending them with properties specified in 'exender' object.\r\n         *\r\n         * @param {Object} [extender={}]\r\n         * @returns {Function} New constructor.\r\n         */\r\n        extend: function (extender) {\r\n            var parent      = this,\r\n                parentProto = parent.prototype,\r\n                childProto  = Object.create(parentProto),\r\n                child       = createConstructor(childProto, getOwn(extender, 'constructor')),\r\n                defaults;\r\n\r\n            extender = extender || {};\r\n            defaults = extender.defaults;\r\n\r\n            delete extender.defaults;\r\n\r\n            _.each(extender, function (method, name) {\r\n                childProto[name] = wrapper.wrapSuper(parentProto[name], method);\r\n            });\r\n\r\n            child.defaults = utils.extend({}, parent.defaults || {});\r\n\r\n            if (defaults) {\r\n                utils.extend(child.defaults, defaults);\r\n                extender.defaults = defaults;\r\n            }\r\n\r\n            return _.extend(child, {\r\n                __super__:  parentProto,\r\n                extend:     parent.extend\r\n            });\r\n        }\r\n    });\r\n\r\n    return Class;\r\n});\r\n","Magento_Ui/js/lib/core/collection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiElement'\r\n], function (_, utils, registry, Element) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes non plain object items from the specified array.\r\n     *\r\n     * @param {Array} container - Array whose value should be filtered.\r\n     * @returns {Array}\r\n     */\r\n    function compact(container) {\r\n        return container.filter(utils.isObject);\r\n    }\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/collection',\r\n            _elems: [],\r\n            ignoreTmpls: {\r\n                childDefaults: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Model} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe({\r\n                    elems: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to current component.\r\n         *\r\n         * @param {Object} elem - Instance of an element that was added.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initElement: function (elem) {\r\n            elem.initContainer(this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a child found by provided index.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Object}\r\n         */\r\n        getChild: function (index) {\r\n            return _.findWhere(this.elems(), {\r\n                index: index\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Requests specified components to insert\r\n         * them into 'elems' array starting from provided position.\r\n         *\r\n         * @param {(String|Array)} elems - Name of the component to insert.\r\n         * @param {Number} [position=-1] - Position at which to insert elements.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        insertChild: function (elems, position) {\r\n            var container   = this._elems,\r\n                insert      = this._insert.bind(this),\r\n                update;\r\n\r\n            if (!Array.isArray(elems)) {\r\n                elems = [elems];\r\n            }\r\n\r\n            elems.map(function (item) {\r\n                return item.elem ?\r\n                    utils.insert(item.elem, container, item.position) :\r\n                    utils.insert(item, container, position);\r\n            }).forEach(function (item) {\r\n                if (item === true) {\r\n                    update = true;\r\n                } else if (_.isString(item)) {\r\n                    registry.get(item, insert);\r\n                } else if (utils.isObject(item)) {\r\n                    insert(item);\r\n                }\r\n            });\r\n\r\n            if (update) {\r\n                this._updateCollection();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified child from collection.\r\n         *\r\n         * @param {(Object|String)} elem - Child or index of a child to be removed.\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        removeChild: function (elem, skipUpdate) {\r\n            if (_.isString(elem)) {\r\n                elem = this.getChild(elem);\r\n            }\r\n\r\n            if (elem) {\r\n                utils.remove(this._elems, elem);\r\n\r\n                if (!skipUpdate) {\r\n                    this._updateCollection();\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys collection children with its' elements.\r\n         */\r\n        destroyChildren: function () {\r\n            this.elems.each(function (elem) {\r\n                elem.destroy(true);\r\n            });\r\n\r\n            this._updateCollection();\r\n        },\r\n\r\n        /**\r\n         * Clear data. Call method \"clear\"\r\n         * in child components\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            var elems = this.elems();\r\n\r\n            _.each(elems, function (elem) {\r\n                if (_.isFunction(elem.clear)) {\r\n                    elem.clear();\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified child exists in collection.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Boolean}\r\n         */\r\n        hasChild: function (index) {\r\n            return !!this.getChild(index);\r\n        },\r\n\r\n        /**\r\n         * Creates 'async' wrapper for the specified child\r\n         * using uiRegistry 'async' method and caches it\r\n         * in a '_requested' components  object.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Function} Async module wrapper.\r\n         */\r\n        requestChild: function (index) {\r\n            var name = this.formChildName(index);\r\n\r\n            return this.requestModule(name);\r\n        },\r\n\r\n        /**\r\n         * Creates complete child name based on a provided index.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {String}\r\n         */\r\n        formChildName: function (index) {\r\n            return this.name + '.' + index;\r\n        },\r\n\r\n        /**\r\n         * Retrieves requested region.\r\n         * Creates region if it was not created yet\r\n         *\r\n         * @returns {ObservableArray}\r\n         */\r\n        getRegion: function (name) {\r\n            var regions = this.regions = this.regions || {};\r\n\r\n            if (!regions[name]) {\r\n                regions[name] = [];\r\n\r\n                this.observe.call(regions, name);\r\n            }\r\n\r\n            return regions[name];\r\n        },\r\n\r\n        /**\r\n         * Checks if the specified region has any elements\r\n         * associated with it.\r\n         *\r\n         * @param {String} name\r\n         * @returns {Boolean}\r\n         */\r\n        regionHasElements: function (name) {\r\n            var region = this.getRegion(name);\r\n\r\n            return region().length > 0;\r\n        },\r\n\r\n        /**\r\n         * Replaces specified regions' data with a provided one.\r\n         * Creates region if it was not created yet.\r\n         *\r\n         * @param {Array} items - New regions' data.\r\n         * @param {String} name - Name of the region.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        updateRegion: function (items, name) {\r\n            this.getRegion(name)(items);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys collection along with its' elements.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n\r\n            this.elems.each('destroy');\r\n        },\r\n\r\n        /**\r\n         * Inserts provided component into 'elems' array at a specified position.\r\n         * @private\r\n         *\r\n         * @param {Object} elem - Element to insert.\r\n         */\r\n        _insert: function (elem) {\r\n            var index = this._elems.indexOf(elem.name);\r\n\r\n            if (~index) {\r\n                this._elems[index] = elem;\r\n            }\r\n\r\n            this._updateCollection()\r\n                .initElement(elem);\r\n        },\r\n\r\n        /**\r\n         * Synchronizes multiple elements arrays with a core '_elems' container.\r\n         * Performs elemets grouping by theirs 'displayArea' property.\r\n         * @private\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        _updateCollection: function () {\r\n            var _elems = compact(this._elems),\r\n                grouped;\r\n\r\n            grouped = _elems.filter(function (elem) {\r\n                return elem.displayArea && _.isString(elem.displayArea);\r\n            });\r\n            grouped = _.groupBy(grouped, 'displayArea');\r\n\r\n            _.each(grouped, this.updateRegion, this);\r\n\r\n            _.each(this.regions, function (items) {\r\n                var hasObsoleteComponents = items().length && !_.intersection(_elems, items()).length;\r\n\r\n                if (hasObsoleteComponents) {\r\n                    items.removeAll();\r\n                }\r\n            });\r\n\r\n            this.elems(_elems);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Tries to call specified method of a current component,\r\n         * otherwise delegates attempt to its' children.\r\n         *\r\n         * @param {String} target - Name of the method.\r\n         * @param {...*} parameters - Arguments that will be passed to method.\r\n         * @returns {*} Result of the method calls.\r\n         */\r\n        delegate: function (target) {\r\n            var args = _.toArray(arguments);\r\n\r\n            target = this[target];\r\n\r\n            if (_.isFunction(target)) {\r\n                return target.apply(this, args.slice(1));\r\n            }\r\n\r\n            return this._delegate(args);\r\n        },\r\n\r\n        /**\r\n         * Calls 'delegate' method of all of it's children components.\r\n         * @private\r\n         *\r\n         * @param {Array} args - An array of arguments to pass to the next delegation call.\r\n         * @returns {Array} An array of delegation results.\r\n         */\r\n        _delegate: function (args) {\r\n            var result;\r\n\r\n            result = this.elems.map(function (elem) {\r\n                var target;\r\n\r\n                if (!_.isFunction(elem.delegate)) {\r\n                    target = elem[args[0]];\r\n\r\n                    if (_.isFunction(target)) {\r\n                        return target.apply(elem, args.slice(1));\r\n                    }\r\n                } else {\r\n                    return elem.delegate.apply(elem, args);\r\n                }\r\n            });\r\n\r\n            return _.flatten(result);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/core/events.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global WeakMap, Map*/\r\ndefine([\r\n    'ko',\r\n    'underscore'\r\n], function (ko, _) {\r\n    'use strict';\r\n\r\n    var eventsMap = new WeakMap();\r\n\r\n    /**\r\n     * Returns events map or a specific event\r\n     * data associated with a provided object.\r\n     *\r\n     * @param {Object} obj - Key in the events weakmap.\r\n     * @param {String} [name] - Name of the event.\r\n     * @returns {Map|Array|Boolean}\r\n     */\r\n    function getEvents(obj, name) {\r\n        var events = eventsMap.get(obj);\r\n\r\n        if (!events) {\r\n            return false;\r\n        }\r\n\r\n        return name ? events.get(name) : events;\r\n    }\r\n\r\n    /**\r\n     * Adds new event handler.\r\n     *\r\n     * @param {Object} obj - Key in the events weakmap.\r\n     * @param {String} ns - Callback namespace.\r\n     * @param {Function} callback - Event callback.\r\n     * @param {String} name - Name of the event.\r\n     */\r\n    function addHandler(obj, ns, callback, name) {\r\n        var events      = getEvents(obj),\r\n            observable,\r\n            data;\r\n\r\n        observable = !ko.isObservable(obj[name]) ?\r\n            ko.getObservable(obj, name) :\r\n            obj[name];\r\n\r\n        if (observable) {\r\n            observable.subscribe(callback);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!events) {\r\n            events = new Map();\r\n\r\n            eventsMap.set(obj, events);\r\n        }\r\n\r\n        data = {\r\n            callback: callback,\r\n            ns: ns\r\n        };\r\n\r\n        events.has(name) ?\r\n            events.get(name).push(data) :\r\n            events.set(name, [data]);\r\n    }\r\n\r\n    /**\r\n     * Invokes provided callbacks with a specified arguments.\r\n     *\r\n     * @param {Array} handlers\r\n     * @param {Array} args\r\n     * @returns {Boolean}\r\n     */\r\n    function trigger(handlers, args) {\r\n        var bubble = true,\r\n            callback;\r\n\r\n        handlers.forEach(function (handler) {\r\n            callback = handler.callback;\r\n\r\n            if (callback.apply(null, args) === false) {\r\n                bubble = false;\r\n            }\r\n        });\r\n\r\n        return bubble;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Calls callback when name event is triggered.\r\n         * @param  {String}   events\r\n         * @param  {Function} callback\r\n         * @param  {Function} ns\r\n         * @return {Object} reference to this\r\n         */\r\n        on: function (events, callback, ns) {\r\n            var iterator;\r\n\r\n            if (arguments.length < 2) {\r\n                ns = callback;\r\n            }\r\n\r\n            iterator = addHandler.bind(null, this, ns);\r\n\r\n            _.isObject(events) ?\r\n                _.each(events, iterator) :\r\n                iterator(callback, events);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removed callback from listening to target event\r\n         * @param  {String} ns\r\n         * @return {Object} reference to this\r\n         */\r\n        off: function (ns) {\r\n            var storage = getEvents(this);\r\n\r\n            if (!storage) {\r\n                return this;\r\n            }\r\n\r\n            storage.forEach(function (handlers, name) {\r\n                handlers = handlers.filter(function (handler) {\r\n                    return !ns ? false : handler.ns !== ns;\r\n                });\r\n\r\n                handlers.length ?\r\n                    storage.set(name, handlers) :\r\n                    storage.delete(name);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggers event and executes all attached callbacks.\r\n         *\r\n         * @param {String} name - Name of the event to be triggered.\r\n         * @returns {Boolean}\r\n         */\r\n        trigger: function (name) {\r\n            var handlers,\r\n                args;\r\n\r\n            handlers = getEvents(this, name),\r\n            args = _.toArray(arguments).slice(1);\r\n\r\n            if (!handlers || !name) {\r\n                return true;\r\n            }\r\n\r\n            return trigger(handlers, args);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/core/element/element.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiEvents',\r\n    'uiClass',\r\n    './links',\r\n    '../storage/local'\r\n], function (ko, _, utils, registry, Events, Class, links) {\r\n    'use strict';\r\n\r\n    var Element;\r\n\r\n    /**\r\n     * Creates observable property using knockouts'\r\n     * 'observableArray' or 'observable' methods,\r\n     * depending on a type of 'value' parameter.\r\n     *\r\n     * @param {Object} obj - Object to whom property belongs.\r\n     * @param {String} key - Key of the property.\r\n     * @param {*} value - Initial value.\r\n     */\r\n    function observable(obj, key, value) {\r\n        var method = Array.isArray(value) ? 'observableArray' : 'observable';\r\n\r\n        if (_.isFunction(obj[key]) && !ko.isObservable(obj[key])) {\r\n            return;\r\n        }\r\n\r\n        if (ko.isObservable(value)) {\r\n            value = value();\r\n        }\r\n\r\n        ko.isObservable(obj[key]) ?\r\n            obj[key](value) :\r\n            obj[key] = ko[method](value);\r\n    }\r\n\r\n    /**\r\n     * Creates observable property using 'track' method.\r\n     *\r\n     * @param {Object} obj - Object to whom property belongs.\r\n     * @param {String} key - Key of the property.\r\n     * @param {*} value - Initial value.\r\n     */\r\n    function accessor(obj, key, value) {\r\n        if (_.isFunction(obj[key]) || ko.isObservable(obj[key])) {\r\n            return;\r\n        }\r\n\r\n        obj[key] = value;\r\n\r\n        if (!ko.es5.isTracked(obj, key)) {\r\n            ko.track(obj, [key]);\r\n        }\r\n    }\r\n\r\n    Element = _.extend({\r\n        defaults: {\r\n            _requested: {},\r\n            containers: [],\r\n            exports: {},\r\n            imports: {},\r\n            links: {},\r\n            listens: {},\r\n            name: '',\r\n            ns: '${ $.name.split(\".\")[0] }',\r\n            provider: '',\r\n            registerNodes: true,\r\n            source: null,\r\n            statefull: {},\r\n            template: '',\r\n            tracks: {},\r\n            storageConfig: {\r\n                provider: 'localStorage',\r\n                namespace: '${ $.name }',\r\n                path: '${ $.storageConfig.provider }:${ $.storageConfig.namespace }'\r\n            },\r\n            maps: {\r\n                imports: {},\r\n                exports: {}\r\n            },\r\n            modules: {\r\n                storage: '${ $.storageConfig.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes model instance.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initObservable()\r\n                .initModules()\r\n                .initStatefull()\r\n                .initLinks()\r\n                .initUnique();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            _.each(this.tracks, function (enabled, key) {\r\n                if (enabled) {\r\n                    this.track(key);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Parses 'modules' object and creates\r\n         * async wrappers for specified components.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initModules: function () {\r\n            _.each(this.modules, function (name, property) {\r\n                if (name) {\r\n                    this[property] = this.requestModule(name);\r\n                }\r\n            }, this);\r\n\r\n            if (!_.isFunction(this.source)) {\r\n                this.source = registry.get(this.provider);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when current element was injected to another component.\r\n         *\r\n         * @param {Object} parent - Instance of a 'parent' component.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initContainer: function (parent) {\r\n            this.containers.push(parent);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes statefull properties\r\n         * based on the keys of 'statefull' object.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initStatefull: function () {\r\n            _.each(this.statefull, function (path, key) {\r\n                if (path) {\r\n                    this.setStatefull(key, path);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes links between properties.\r\n         *\r\n         * @returns {Element} Chainbale.\r\n         */\r\n        initLinks: function () {\r\n            return this.setListeners(this.listens)\r\n                       .setLinks(this.links, 'imports')\r\n                       .setLinks(this.links, 'exports')\r\n                       .setLinks(this.exports, 'exports')\r\n                       .setLinks(this.imports, 'imports');\r\n        },\r\n\r\n        /**\r\n         * Initializes listeners of the unique property.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initUnique: function () {\r\n            var update = this.onUniqueUpdate.bind(this),\r\n                uniqueNs = this.uniqueNs;\r\n\r\n            this.hasUnique = this.uniqueProp && uniqueNs;\r\n\r\n            if (this.hasUnique) {\r\n                this.source.on(uniqueNs, update, this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Makes specified property to be stored automatically.\r\n         *\r\n         * @param {String} key - Name of the property\r\n         *      that will be stored.\r\n         * @param {String} [path=key] - Path to the property in storage.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        setStatefull: function (key, path) {\r\n            var link = {};\r\n\r\n            path        = !_.isString(path) || !path ? key : path;\r\n            link[key]   = this.storageConfig.path + '.' + path;\r\n\r\n            this.setLinks(link, 'imports')\r\n                .setLinks(link, 'exports');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates property specified in uniqueNs\r\n         * if elements' unique property is set to 'true'.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        setUnique: function () {\r\n            var property = this.uniqueProp;\r\n\r\n            if (this[property]()) {\r\n                this.source.set(this.uniqueNs, this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates 'async' wrapper for the specified component\r\n         * using uiRegistry 'async' method and caches it\r\n         * in a '_requested' components  object.\r\n         *\r\n         * @param {String} name - Name of requested component.\r\n         * @returns {Function} Async module wrapper.\r\n         */\r\n        requestModule: function (name) {\r\n            var requested = this._requested;\r\n\r\n            if (!requested[name]) {\r\n                requested[name] = registry.async(name);\r\n            }\r\n\r\n            return requested[name];\r\n        },\r\n\r\n        /**\r\n         * Returns path to elements' template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTemplate: function () {\r\n            return this.template;\r\n        },\r\n\r\n        /**\r\n         * Checks if template was specified for an element.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasTemplate: function () {\r\n            return !!this.template;\r\n        },\r\n\r\n        /**\r\n         * Returns value of the nested property.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         * @returns {*} Value of the property.\r\n         */\r\n        get: function (path) {\r\n            return utils.nested(this, path);\r\n        },\r\n\r\n        /**\r\n         * Sets provided value as a value of the specified nested property.\r\n         * Triggers changes notifications, if value has mutated.\r\n         *\r\n         * @param {String} path - Path to property.\r\n         * @param {*} value - New value of the property.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        set: function (path, value) {\r\n            var data = this.get(path),\r\n                diffs;\r\n\r\n            diffs = !_.isFunction(data) && !this.isTracked(path) ?\r\n                utils.compare(data, value, path) :\r\n                false;\r\n\r\n            utils.nested(this, path, value);\r\n\r\n            if (diffs) {\r\n                this._notifyChanges(diffs);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from the object.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        remove: function (path) {\r\n            var data = utils.nested(this, path),\r\n                diffs;\r\n\r\n            if (_.isUndefined(data) || _.isFunction(data)) {\r\n                return this;\r\n            }\r\n\r\n            diffs = utils.compare(data, undefined, path);\r\n\r\n            utils.nestedRemove(this, path);\r\n\r\n            this._notifyChanges(diffs);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates observable properties for the current object.\r\n         *\r\n         * If 'useTrack' flag is set to 'true' then each property will be\r\n         * created with a ES5 get/set accessor descriptors, instead of\r\n         * making them an observable functions.\r\n         * See 'knockout-es5' library for more information.\r\n         *\r\n         * @param {Boolean} [useAccessors=false] - Whether to create an\r\n         *      observable function or to use property accesessors.\r\n         * @param {(Object|String|Array)} properties - List of observable properties.\r\n         * @returns {Element} Chainable.\r\n         *\r\n         * @example Sample declaration and equivalent knockout methods.\r\n         *      this.key = 'value';\r\n         *      this.array = ['value'];\r\n         *\r\n         *      this.observe(['key', 'array']);\r\n         *      =>\r\n         *          this.key = ko.observable('value');\r\n         *          this.array = ko.observableArray(['value']);\r\n         *\r\n         * @example Another syntaxes of the previous example.\r\n         *      this.observe({\r\n         *          key: 'value',\r\n         *          array: ['value']\r\n         *      });\r\n         */\r\n        observe: function (useAccessors, properties) {\r\n            var model = this,\r\n                trackMethod;\r\n\r\n            if (typeof useAccessors !== 'boolean') {\r\n                properties   = useAccessors;\r\n                useAccessors = false;\r\n            }\r\n\r\n            trackMethod = useAccessors ? accessor : observable;\r\n\r\n            if (_.isString(properties)) {\r\n                properties = properties.split(' ');\r\n            }\r\n\r\n            if (Array.isArray(properties)) {\r\n                properties.forEach(function (key) {\r\n                    trackMethod(model, key, model[key]);\r\n                });\r\n            } else if (typeof properties === 'object') {\r\n                _.each(properties, function (value, key) {\r\n                    trackMethod(model, key, value);\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delegates call to 'observe' method but\r\n         * with a predefined 'useAccessors' flag.\r\n         *\r\n         * @param {(String|Array|Object)} properties - List of observable properties.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        track: function (properties) {\r\n            this.observe(true, properties);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified property is tracked.\r\n         *\r\n         * @param {String} property - Property to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isTracked: function (property) {\r\n            return ko.es5.isTracked(this, property);\r\n        },\r\n\r\n        /**\r\n         * Invokes subscribers for the provided changes.\r\n         *\r\n         * @param {Object} diffs - Object with changes descriptions.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _notifyChanges: function (diffs) {\r\n            diffs.changes.forEach(function (change) {\r\n                this.trigger(change.path, change.value, change);\r\n            }, this);\r\n\r\n            _.each(diffs.containers, function (changes, name) {\r\n                var value = utils.nested(this, name);\r\n\r\n                this.trigger(name, value, changes);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts all stored data and sets it to element.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        restore: function () {\r\n            var ns = this.storageConfig.namespace,\r\n                storage = this.storage();\r\n\r\n            if (storage) {\r\n                utils.extend(this, storage.get(ns));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Stores value of the specified property in components' storage module.\r\n         *\r\n         * @param {String} property\r\n         * @param {*} [data=this[property]]\r\n         * @returns {Element} Chainable.\r\n         */\r\n        store: function (property, data) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property);\r\n\r\n            if (arguments.length < 2) {\r\n                data = this.get(property);\r\n            }\r\n\r\n            this.storage('set', path, data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts specified property from storage.\r\n         *\r\n         * @param {String} [property] - Name of the property\r\n         *      to be extracted. If not specified then all of the\r\n         *      stored will be returned.\r\n         * @returns {*}\r\n         */\r\n        getStored: function (property) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property),\r\n                storage = this.storage(),\r\n                data;\r\n\r\n            if (storage) {\r\n                data = storage.get(path);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Removes stored property.\r\n         *\r\n         * @param {String} property - Property to be removed from storage.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        removeStored: function (property) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property);\r\n\r\n            this.storage('remove', path);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys current instance along with all of its' children.\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         */\r\n        destroy: function (skipUpdate) {\r\n            this._dropHandlers()\r\n                ._clearRefs(skipUpdate);\r\n        },\r\n\r\n        /**\r\n         * Removes events listeners.\r\n         * @private\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _dropHandlers: function () {\r\n            this.off();\r\n\r\n            if (_.isFunction(this.source)) {\r\n                this.source().off(this.name);\r\n            } else if (this.source) {\r\n                this.source.off(this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes all references to current instance and\r\n         * calls 'destroy' method on all of its' children.\r\n         * @private\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _clearRefs: function (skipUpdate) {\r\n            registry.remove(this.name);\r\n\r\n            this.containers.forEach(function (parent) {\r\n                parent.removeChild(this, skipUpdate);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides 'EventsBus.trigger' method to implement events bubbling.\r\n         *\r\n         * @param {...*} arguments - Any number of arguments that should be passed to the events' handler.\r\n         * @returns {Boolean} False if event bubbling was canceled.\r\n         */\r\n        bubble: function () {\r\n            var args = _.toArray(arguments),\r\n                bubble = this.trigger.apply(this, args),\r\n                result;\r\n\r\n            if (!bubble) {\r\n                return false;\r\n            }\r\n\r\n            this.containers.forEach(function (parent) {\r\n                result = parent.bubble.apply(parent, args);\r\n\r\n                if (result === false) {\r\n                    bubble = false;\r\n                }\r\n            });\r\n\r\n            return !!bubble;\r\n        },\r\n\r\n        /**\r\n         * Callback which fires when property under uniqueNs has changed.\r\n         */\r\n        onUniqueUpdate: function (name) {\r\n            var active = name === this.name,\r\n                property = this.uniqueProp;\r\n\r\n            this[property](active);\r\n        },\r\n\r\n        /**\r\n         * Clean data form data source.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        cleanData: function () {\r\n            if (this.source && this.source.componentType === 'dataSource') {\r\n                if (this.elems) {\r\n                    _.each(this.elems(), function (val) {\r\n                        val.cleanData();\r\n                    });\r\n                } else {\r\n                    this.source.remove(this.dataScope);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Fallback data.\r\n         */\r\n        cacheData: function () {\r\n            this.cachedComponent = utils.copy(this);\r\n        },\r\n\r\n        /**\r\n         * Update configuration in component.\r\n         *\r\n         * @param {*} oldValue\r\n         * @param {*} newValue\r\n         * @param {String} path - path to value.\r\n         * @returns {Element}\r\n         */\r\n        updateConfig: function (oldValue, newValue, path) {\r\n            var names = path.split('.'),\r\n                index = _.lastIndexOf(names, 'config') + 1;\r\n\r\n            names = names.splice(index, names.length - index).join('.');\r\n            this.set(names, newValue);\r\n\r\n            return this;\r\n        }\r\n    }, Events, links);\r\n\r\n    return Class.extend(Element);\r\n});\r\n","Magento_Ui/js/lib/core/element/links.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry'\r\n], function (ko, _, utils, registry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Parse provided data.\r\n     *\r\n     * @param {String} placeholder\r\n     * @param {String} data\r\n     * @param {String} direction\r\n     * @returns {Boolean|Object}\r\n     */\r\n    function parseData(placeholder, data, direction) {\r\n        if (typeof data !== 'string') {\r\n            return false;\r\n        }\r\n\r\n        data = data.split(':');\r\n\r\n        if (!data[0]) {\r\n            return false;\r\n        }\r\n\r\n        if (!data[1]) {\r\n            data[1] = data[0];\r\n            data[0] = placeholder;\r\n        }\r\n\r\n        return {\r\n            target: data[0],\r\n            property: data[1],\r\n            direction: direction\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if value not empty.\r\n     *\r\n     * @param {*} value\r\n     * @returns {Boolean}\r\n     */\r\n    function notEmpty(value) {\r\n        return typeof value !== 'undefined' && value != null;\r\n    }\r\n\r\n    /**\r\n     * Update value for linked component.\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} owner\r\n     * @param {Object} target\r\n     * @param {*} value\r\n     */\r\n    function updateValue(data, owner, target, value) {\r\n        var component = target.component,\r\n            property = target.property,\r\n            linked = data.linked;\r\n\r\n        if (data.mute) {\r\n            return;\r\n        }\r\n\r\n        if (linked) {\r\n            linked.mute = true;\r\n        }\r\n\r\n        if (owner.component !== target.component) {\r\n            value = data.inversionValue ? !utils.copy(value) : utils.copy(value);\r\n        }\r\n\r\n        component.set(property, value, owner);\r\n\r\n        if (linked) {\r\n            linked.mute = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get value form owner component property.\r\n     *\r\n     * @param {Object} owner\r\n     * @returns {*}\r\n     */\r\n    function getValue(owner) {\r\n        var component = owner.component,\r\n            property = owner.property;\r\n\r\n        return component.get(property);\r\n    }\r\n\r\n    /**\r\n     * Format provided params to object.\r\n     *\r\n     * @param {String} ownerComponent\r\n     * @param {String} targetComponent\r\n     * @param {String} ownerProp\r\n     * @param {String} targetProp\r\n     * @param {String} direction\r\n     * @returns {Object}\r\n     */\r\n    function form(ownerComponent, targetComponent, ownerProp, targetProp, direction) {\r\n        var result,\r\n            tmp;\r\n\r\n        result = {\r\n            owner: {\r\n                component: ownerComponent,\r\n                property: ownerProp\r\n            },\r\n            target: {\r\n                component: targetComponent,\r\n                property: targetProp\r\n            }\r\n        };\r\n\r\n        if (direction === 'exports') {\r\n            tmp = result.owner;\r\n            result.owner = result.target;\r\n            result.target = tmp;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set data to linked property.\r\n     *\r\n     * @param {Object} map\r\n     * @param {Object} data\r\n     */\r\n    function setLinked(map, data) {\r\n        var match;\r\n\r\n        if (!map) {\r\n            return;\r\n        }\r\n\r\n        match = _.findWhere(map, {\r\n            linked: false,\r\n            target: data.target,\r\n            property: data.property\r\n        });\r\n\r\n        if (match) {\r\n            match.linked = data;\r\n            data.linked = match;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set data by direction.\r\n     *\r\n     * @param {Object} maps\r\n     * @param {String} property\r\n     * @param {Object} data\r\n     */\r\n    function setData(maps, property, data) {\r\n        var direction   = data.direction,\r\n            map         = maps[direction];\r\n\r\n        data.linked = false;\r\n\r\n        (map[property] = map[property] || []).push(data);\r\n\r\n        direction = direction === 'imports' ? 'exports' : 'imports';\r\n\r\n        setLinked(maps[direction][property], data);\r\n    }\r\n\r\n    /**\r\n     * Set links for components.\r\n     *\r\n     * @param {String} target\r\n     * @param {String} owner\r\n     * @param {Object} data\r\n     * @param {String} property\r\n     * @param {Boolean} immediate\r\n     */\r\n    function setLink(target, owner, data, property, immediate) {\r\n        var direction = data.direction,\r\n            formated = form(target, owner, data.property, property, direction),\r\n            callback,\r\n            value;\r\n\r\n        owner = formated.owner;\r\n        target = formated.target;\r\n\r\n        callback = updateValue.bind(null, data, owner, target);\r\n\r\n        owner.component.on(owner.property, callback, target.component.name);\r\n\r\n        if (immediate) {\r\n            value = getValue(owner);\r\n\r\n            if (notEmpty(value)) {\r\n                updateValue(data, owner, target, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer data between components.\r\n     *\r\n     * @param {Object} owner\r\n     * @param {Object} data\r\n     */\r\n    function transfer(owner, data) {\r\n        var args = _.toArray(arguments);\r\n\r\n        if (data.target.substr(0, 1) === '!') {\r\n            data.target = data.target.substr(1);\r\n            data.inversionValue = true;\r\n        }\r\n\r\n        if (owner.name === data.target) {\r\n            args.unshift(owner);\r\n\r\n            setLink.apply(null, args);\r\n        } else {\r\n            registry.get(data.target, function (target) {\r\n                args.unshift(target);\r\n\r\n                setLink.apply(null, args);\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Assign listeners.\r\n         *\r\n         * @param {Object} listeners\r\n         * @returns {Object} Chainable\r\n         */\r\n        setListeners: function (listeners) {\r\n            var owner = this,\r\n                data;\r\n\r\n            _.each(listeners, function (callbacks, sources) {\r\n                sources = sources.split(' ');\r\n                callbacks = callbacks.split(' ');\r\n\r\n                sources.forEach(function (target) {\r\n                    callbacks.forEach(function (callback) {//eslint-disable-line max-nested-callbacks\r\n                        data = parseData(owner.name, target, 'imports');\r\n\r\n                        if (data) {\r\n                            setData(owner.maps, callback, data);\r\n                            transfer(owner, data, callback);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set links in provided direction.\r\n         *\r\n         * @param {Object} links\r\n         * @param {String} direction\r\n         * @returns {Object} Chainable\r\n         */\r\n        setLinks: function (links, direction) {\r\n            var owner = this,\r\n                property,\r\n                data;\r\n\r\n            for (property in links) {\r\n                if (links.hasOwnProperty(property)) {\r\n                    data = parseData(owner.name, links[property], direction);\r\n\r\n                    if (data) {//eslint-disable-line max-depth\r\n                        setData(owner.maps, property, data);\r\n                        transfer(owner, data, property, true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/core/storage/local.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiEvents'\r\n], function (_, registry, utils, EventsBus) {\r\n    'use strict';\r\n\r\n    var root = 'appData',\r\n        localStorage,\r\n        hasSupport,\r\n        storage;\r\n\r\n    /**\r\n     * Flag which indicates whether localStorage is supported.\r\n     */\r\n    hasSupport = (function () {\r\n        var key = '_storageSupported';\r\n\r\n        try {\r\n            localStorage = window.localStorage;\r\n            localStorage.setItem(key, 'true');\r\n\r\n            if (localStorage.getItem(key) === 'true') {\r\n                localStorage.removeItem(key);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    if (!hasSupport) {\r\n        localStorage = {\r\n            _data: {},\r\n\r\n            /**\r\n             * Sets value of the specified item.\r\n             *\r\n             * @param {String} key - Key of the property.\r\n             * @param {*} value - Properties' value.\r\n             */\r\n            setItem: function (key, value) {\r\n                this._data[key] = value + '';\r\n            },\r\n\r\n            /**\r\n             * Retrieves specified item.\r\n             *\r\n             * @param {String} key - Key of the property to be retrieved.\r\n             */\r\n            getItem: function (key) {\r\n                return this._data[key];\r\n            },\r\n\r\n            /**\r\n             * Removes specified item.\r\n             *\r\n             * @param {String} key - Key of the property to be removed.\r\n             */\r\n            removeItem: function (key) {\r\n                delete this._data[key];\r\n            },\r\n\r\n            /**\r\n             * Removes all items.\r\n             */\r\n            clear: function () {\r\n                this._data = {};\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Extracts and parses data stored in localStorage by the\r\n     * key specified in 'root' variable.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    function getRoot() {\r\n        var data = localStorage.getItem(root),\r\n            result = {};\r\n\r\n        if (!_.isNull(data) && typeof data != 'undefined') {\r\n            result = JSON.parse(data);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Writes provided data to the localStorage.\r\n     *\r\n     * @param {*} data - Data to be stored.\r\n     */\r\n    function setRoot(data) {\r\n        localStorage.setItem(root, JSON.stringify(data));\r\n    }\r\n\r\n    /**\r\n     * Provides methods to work with a localStorage\r\n     * as a single nested structure.\r\n     */\r\n    storage = _.extend({\r\n\r\n        /**\r\n         * Retrieves value of the specified property.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         *\r\n         * @example Retrieving data.\r\n         *      localStorage =>\r\n         *          'appData' => '\r\n         *              \"one\": {\"two\": \"three\"}\r\n         *          '\r\n         *      storage.get('one.two')\r\n         *      => \"three\"\r\n         *\r\n         *      storage.get('one')\r\n         *      => {\"two\": \"three\"}\r\n         */\r\n        get: function (path) {\r\n            var data = getRoot();\r\n\r\n            return utils.nested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Sets specified data to the localStorage.\r\n         *\r\n         * @param {String} path - Path of the property.\r\n         * @param {*} value - Value of the property.\r\n         *\r\n         * @example Setting data.\r\n         *      storage.set('one.two', 'four');\r\n         *      => localStorage =>\r\n         *          'appData' => '\r\n         *              \"one\": {\"two\": \"four\"}\r\n         *          '\r\n         */\r\n        set: function (path, value) {\r\n            var data = getRoot();\r\n\r\n            utils.nested(data, path, value);\r\n\r\n            setRoot(data);\r\n        },\r\n\r\n        /**\r\n         * Removes specified data from the localStorage.\r\n         *\r\n         * @param {String} path - Path to the property that should be removed.\r\n         *\r\n         * @example Removing data.\r\n         *      storage.remove('one.two', 'four');\r\n         *      => localStorage =>\r\n         *          'appData' => '\r\n         *              \"one\": {}\r\n         *          '\r\n         */\r\n        remove: function (path) {\r\n            var data = getRoot();\r\n\r\n            utils.nestedRemove(data, path);\r\n\r\n            setRoot(data);\r\n        }\r\n    }, EventsBus);\r\n\r\n    registry.set('localStorage', storage);\r\n\r\n    return storage;\r\n});\r\n","Magento_Ui/js/lib/knockout/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Loads all available knockout bindings, sets custom template engine, initializes knockout on page */\r\n\r\ndefine([\r\n    'ko',\r\n    './template/engine',\r\n    'knockoutjs/knockout-es5',\r\n    './bindings/bootstrap',\r\n    './extender/observable_array',\r\n    './extender/bound-nodes',\r\n    'domReady!'\r\n], function (ko, templateEngine) {\r\n    'use strict';\r\n\r\n    ko.uid = 0;\r\n\r\n    ko.setTemplateEngine(templateEngine);\r\n    ko.applyBindings();\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/after-render.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.afterRender = {\r\n\r\n        /**\r\n         * Binding init callback.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var callback = valueAccessor();\r\n\r\n            if (typeof callback === 'function') {\r\n                callback.call(viewModel, element, viewModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('afterRender');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/autoselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    '../template/renderer'\r\n], function (ko, $, renderer) {\r\n    'use strict';\r\n\r\n    /**\r\n     * 'Focus' event handler.\r\n     *\r\n     * @param {EventObject} e\r\n     */\r\n    function onFocus(e) {\r\n        e.target.select();\r\n    }\r\n\r\n    ko.bindingHandlers.autoselect = {\r\n\r\n        /**\r\n         * Adds event handler which automatically\r\n         * selects inputs' element text when field gets focused.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var enabled = ko.unwrap(valueAccessor());\r\n\r\n            if (enabled !== false) {\r\n                $(element).on('focus', onFocus);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('autoselect');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/bind-html.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/apply/main',\r\n    '../template/renderer'\r\n], function (ko, _, mage, renderer) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Set html to node element.\r\n     *\r\n     * @param {HTMLElement} el - Element to apply bindings to.\r\n     * @param {Function} html - Observable html content.\r\n     */\r\n    function setHtml(el, html) {\r\n        ko.utils.emptyDomNode(el);\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if (!_.isNull(html) && !_.isUndefined(html)) {\r\n            if (!_.isString(html)) {\r\n                html = html.toString();\r\n            }\r\n\r\n            el.innerHTML = html;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply bindings and call magento attributes parser.\r\n     *\r\n     * @param {HTMLElement} el - Element to apply bindings to.\r\n     * @param {ko.bindingContext} ctx - Instance of ko.bindingContext, passed to binding initially.\r\n     */\r\n    function applyComponents(el, ctx) {\r\n        ko.utils.arrayForEach(el.childNodes, ko.cleanNode);\r\n        ko.applyBindingsToDescendants(ctx, el);\r\n        mage.apply();\r\n    }\r\n\r\n    ko.bindingHandlers.bindHtml = {\r\n        /**\r\n         * Scope binding's init method.\r\n         *\r\n         * @returns {Object} - Knockout declaration for it to let binding control descendants.\r\n         */\r\n        init: function () {\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding.\r\n         * Set html to node element, apply bindings and call magento attributes parser.\r\n         *\r\n         * @param {HTMLElement} el - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to el.\r\n         * @param {ko.bindingContext} bindingContext - Instance of ko.bindingContext, passed to binding initially.\r\n         */\r\n        update: function (el, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            setHtml(el, valueAccessor());\r\n            applyComponents(el, bindingContext);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('bindHtml');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var renderer = require('../template/renderer');\r\n\r\n    renderer.addAttribute('repeat', renderer.handlers.wrapAttribute);\r\n\r\n    renderer.addAttribute('outerfasteach', {\r\n        binding: 'fastForEach',\r\n        handler: renderer.handlers.wrapAttribute\r\n    });\r\n\r\n    renderer\r\n        .addNode('repeat')\r\n        .addNode('fastForEach');\r\n\r\n    return {\r\n        resizable:      require('./resizable'),\r\n        i18n:           require('./i18n'),\r\n        scope:          require('./scope'),\r\n        range:          require('./range'),\r\n        mageInit:       require('./mage-init'),\r\n        keyboard:       require('./keyboard'),\r\n        optgroup:       require('./optgroup'),\r\n        afterRender:     require('./after-render'),\r\n        autoselect:     require('./autoselect'),\r\n        datepicker:     require('./datepicker'),\r\n        outerClick:     require('./outer_click'),\r\n        fadeVisible:    require('./fadeVisible'),\r\n        collapsible:    require('./collapsible'),\r\n        staticChecked:  require('./staticChecked'),\r\n        simpleChecked:  require('./simple-checked'),\r\n        bindHtml:       require('./bind-html'),\r\n        tooltip:        require('./tooltip'),\r\n        repeat:         require('knockoutjs/knockout-repeat'),\r\n        fastForEach:    require('knockoutjs/knockout-fast-foreach'),\r\n        colorPicker:    require('./color-picker')\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/collapsible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var collapsible,\r\n        defaults;\r\n\r\n    defaults = {\r\n        closeOnOuter: true,\r\n        onTarget: false,\r\n        openClass: '_active',\r\n        as: '$collapsible'\r\n    };\r\n\r\n    collapsible = {\r\n\r\n        /**\r\n         * Sets 'opened' property to true.\r\n         */\r\n        open: function () {\r\n            this.opened(true);\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' property to false.\r\n         */\r\n        close: function () {\r\n            this.opened(false);\r\n        },\r\n\r\n        /**\r\n         * Toggles value of the 'opened' property.\r\n         */\r\n        toggle: function () {\r\n            this.opened(!this.opened());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Document click handler which in case if event target is not\r\n     * a descendant of provided container element, closes collapsible model.\r\n     *\r\n     * @param {HTMLElement} container\r\n     * @param {Object} model\r\n     * @param {EventObject} e\r\n     */\r\n    function onOuterClick(container, model, e) {\r\n        var target = e.target;\r\n\r\n        if (target !== container && !container.contains(target)) {\r\n            model.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates 'css' binding which toggles\r\n     * class specified in 'name' parameter.\r\n     *\r\n     * @param {Object} model\r\n     * @param {String} name\r\n     * @returns {Object}\r\n     */\r\n    function getClassBinding(model, name) {\r\n        var binding = {};\r\n\r\n        binding[name] = model.opened;\r\n\r\n        return {\r\n            css: binding\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares configuration for the binding based\r\n     * on a default properties and provided options.\r\n     *\r\n     * @param {Object} [options={}]\r\n     * @returns {Object} Complete instance configuration.\r\n     */\r\n    function buildConfig(options) {\r\n        if (typeof options !== 'object') {\r\n            options = {};\r\n        }\r\n\r\n        return _.extend({}, defaults, options);\r\n    }\r\n\r\n    ko.bindingHandlers.collapsible = {\r\n\r\n        /**\r\n         * Initializes 'collapsible' binding.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var $collapsible = Object.create(collapsible),\r\n                config = buildConfig(valueAccessor()),\r\n                outerClick,\r\n                bindings;\r\n\r\n            _.bindAll($collapsible, 'open', 'close', 'toggle');\r\n\r\n            $collapsible.opened = ko.observable(!!config.opened);\r\n\r\n            bindingCtx[config.as] = $collapsible;\r\n\r\n            if (config.closeOnOuter) {\r\n                outerClick = onOuterClick.bind(null, element, $collapsible);\r\n\r\n                $(document).on('click', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('click', outerClick);\r\n                });\r\n            }\r\n\r\n            if (config.openClass) {\r\n                bindings = getClassBinding($collapsible, config.openClass);\r\n\r\n                ko.applyBindingsToNode(element, bindings, bindingCtx);\r\n            }\r\n\r\n            if (config.onTarget) {\r\n                $(element).on('click', $collapsible.toggle);\r\n            }\r\n\r\n            if (viewModel && _.isFunction(viewModel.on)) {\r\n                viewModel.on({\r\n                    close:          $collapsible.close,\r\n                    open:           $collapsible.open,\r\n                    toggleOpened:   $collapsible.toggle\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.closeCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which closes associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.close);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.openCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which opens associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.open);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.toggleCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which toggles associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.toggle);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer\r\n        .addAttribute('collapsible')\r\n        .addAttribute('openCollapsible')\r\n        .addAttribute('closeCollapsible')\r\n        .addAttribute('toggleCollapsible');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/color-picker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    '../template/renderer',\r\n    'spectrum',\r\n    'tinycolor'\r\n], function (ko, $, renderer, spectrum, tinycolor) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Change color picker status to be enabled or disabled\r\n     *\r\n     * @param {HTMLElement} element - Element to apply colorpicker enable/disable status to.\r\n     * @param {Object} viewModel - Object, which represents view model binded to el.\r\n     */\r\n    function changeColorPickerStateBasedOnViewModel(element, viewModel) {\r\n        $(element).spectrum(viewModel.disabled() ? 'disable' : 'enable');\r\n    }\r\n\r\n    ko.bindingHandlers.colorPicker = {\r\n        /**\r\n         * Binding init callback.\r\n         *\r\n         * @param {*} element\r\n         * @param {Function} valueAccessor\r\n         * @param {Function} allBindings\r\n         * @param {Object} viewModel\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var config = valueAccessor(),\r\n\r\n                /** change value */\r\n                changeValue = function (value) {\r\n                    if (value == null) {\r\n                        value = '';\r\n                    }\r\n                    config.value(value.toString());\r\n                };\r\n\r\n            config.change = changeValue;\r\n\r\n            config.hide = changeValue;\r\n\r\n            /** show value */\r\n            config.show = function () {\r\n                if (!viewModel.focused()) {\r\n                    viewModel.focused(true);\r\n                }\r\n\r\n                return true;\r\n            };\r\n\r\n            $(element).spectrum(config);\r\n\r\n            changeColorPickerStateBasedOnViewModel(element, viewModel);\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding, parses component declarations.\r\n         * Fetches for those found and attaches them to the new context.\r\n         *\r\n         * @param {HTMLElement} element - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to element.\r\n         */\r\n        update: function (element, valueAccessor, allBindings, viewModel) {\r\n            var config = valueAccessor();\r\n\r\n            /** Initialise value as empty if it is undefined when color picker input is reset **/\r\n            if (config.value() === undefined) {\r\n                config.value('');\r\n            }\r\n\r\n            if (tinycolor(config.value()).isValid() || config.value() === '') {\r\n                $(element).spectrum('set', config.value());\r\n\r\n                if (config.value() !== '') {\r\n                    config.value($(element).spectrum('get').toString());\r\n                }\r\n            }\r\n\r\n            changeColorPickerStateBasedOnViewModel(element, viewModel);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('colorPicker');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/datepicker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates datepicker binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (ko, _, $, $t) {\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        dateFormat: 'mm\\/dd\\/yyyy',\r\n        showsTime: false,\r\n        timeFormat: null,\r\n        buttonImage: null,\r\n        buttonImageOnly: null,\r\n        buttonText: $t('Select Date')\r\n    };\r\n\r\n    ko.bindingHandlers.datepicker = {\r\n        /**\r\n         * Initializes calendar widget on element and stores it's value to observable property.\r\n         * Datepicker binding takes either observable property or object\r\n         *  { storage: {ko.observable}, options: {Object} }.\r\n         * For more info about options take a look at \"mage/calendar\" and jquery.ui.datepicker widget.\r\n         * @param {HTMLElement} el - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         */\r\n        init: function (el, valueAccessor) {\r\n            var config = valueAccessor(),\r\n                observable,\r\n                options = {};\r\n\r\n            _.extend(options, defaults);\r\n\r\n            if (typeof config === 'object') {\r\n                observable = config.storage;\r\n                _.extend(options, config.options);\r\n            } else {\r\n                observable = config;\r\n            }\r\n\r\n            require(['mage/calendar'], function () {\r\n                $(el).calendar(options);\r\n\r\n                ko.utils.registerEventHandler(el, 'change', function () {\r\n                    observable(this.value);\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update calendar widget on element and stores it's value to observable property.\r\n         * Datepicker binding takes either observable property or object\r\n         *  { storage: {ko.observable}, options: {Object} }.\r\n         * @param {HTMLElement} element - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            var config = valueAccessor(),\r\n                $element = $(element),\r\n                observable,\r\n                options = {},\r\n                newVal;\r\n\r\n            _.extend(options, defaults);\r\n\r\n            if (typeof config === 'object') {\r\n                observable = config.storage;\r\n                _.extend(options, config.options);\r\n            } else {\r\n                observable = config;\r\n            }\r\n\r\n            require(['moment', 'mage/utils/misc', 'mage/calendar'], function (moment, utils) {\r\n                if (_.isEmpty(observable())) {\r\n                    newVal = null;\r\n                } else {\r\n                    newVal = moment(\r\n                        observable(),\r\n                        utils.convertToMomentFormat(\r\n                            options.dateFormat + (options.showsTime ? ' ' + options.timeFormat : '')\r\n                        )\r\n                    ).toDate();\r\n                }\r\n\r\n                $element.datepicker('setDate', newVal);\r\n                $element.blur();\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/fadeVisible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko'\r\n], function ($, ko) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.fadeVisible = {\r\n        /**\r\n         * Initially set the element to be instantly visible/hidden depending on the value.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var value = valueAccessor();\r\n\r\n            // Use \"unwrapObservable\" so we can handle values that may or may not be observable\r\n            $(element).toggle(ko.unwrap(value));\r\n        },\r\n\r\n        /**\r\n         * Whenever the value subsequently changes, slowly fade the element in or out.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            var value = valueAccessor();\r\n\r\n            ko.unwrap(value) ? $(element).fadeIn() : $(element).fadeOut();\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/i18n.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'module',\r\n    '../template/renderer',\r\n    'mage/translate'\r\n], function ($, ko, module, renderer) {\r\n    'use strict';\r\n\r\n    var locations = {\r\n            'legend': 'Caption for the fieldset element',\r\n            'label': 'Label for an input element.',\r\n            'button': 'Push button',\r\n            'a': 'Link label',\r\n            'b': 'Bold text',\r\n            'strong': 'Strong emphasized text',\r\n            'i': 'Italic text',\r\n            'em': 'Emphasized text',\r\n            'u': 'Underlined text',\r\n            'sup': 'Superscript text',\r\n            'sub': 'Subscript text',\r\n            'span': 'Span element',\r\n            'small': 'Smaller text',\r\n            'big': 'Bigger text',\r\n            'address': 'Contact information',\r\n            'blockquote': 'Long quotation',\r\n            'q': 'Short quotation',\r\n            'cite': 'Citation',\r\n            'caption': 'Table caption',\r\n            'abbr': 'Abbreviated phrase',\r\n            'acronym': 'An acronym',\r\n            'var': 'Variable part of a text',\r\n            'dfn': 'Term',\r\n            'strike': 'Strikethrough text',\r\n            'del': 'Deleted text',\r\n            'ins': 'Inserted text',\r\n            'h1': 'Heading level 1',\r\n            'h2': 'Heading level 2',\r\n            'h3': 'Heading level 3',\r\n            'h4': 'Heading level 4',\r\n            'h5': 'Heading level 5',\r\n            'h6': 'Heading level 6',\r\n            'center': 'Centered text',\r\n            'select': 'List options',\r\n            'img': 'Image',\r\n            'input': 'Form element'\r\n        },\r\n\r\n        /**\r\n         * Generates [data-translate] attribute's value\r\n         * @param {Object} translationData\r\n         * @param {String} location\r\n         */\r\n        composeTranslateAttr = function (translationData, location) {\r\n            var obj = [{\r\n                'shown': translationData.shown,\r\n                'translated': translationData.translated,\r\n                'original': translationData.original,\r\n                'location': locations[location] || 'Text'\r\n            }];\r\n\r\n            return JSON.stringify(obj);\r\n        },\r\n\r\n        /**\r\n         * Sets text for the element\r\n         * @param {Object} el\r\n         * @param {String} text\r\n         */\r\n        setText = function (el, text) {\r\n            $(el).text(text);\r\n        },\r\n\r\n        /**\r\n         * Sets [data-translate] attribute for the element\r\n         * @param {Object} el - The element which is binded\r\n         * @param {String} original - The original value of the element\r\n         */\r\n        setTranslateProp = function (el, original) {\r\n            var location = $(el).prop('tagName').toLowerCase(),\r\n                translated = $.mage.__(original),\r\n                translationData = {\r\n                    shown: translated,\r\n                    translated: translated,\r\n                    original: original\r\n                },\r\n                translateAttr = composeTranslateAttr(translationData, location);\r\n\r\n            $(el).attr('data-translate', translateAttr);\r\n\r\n            setText(el, translationData.shown);\r\n        },\r\n\r\n        /**\r\n         * Checks if node represents ko virtual node (nodeType === 8, nodeName === '#comment').\r\n         *\r\n         * @param {HTMLElement} node\r\n         * @returns {Boolean}\r\n         */\r\n        isVirtualElement = function (node) {\r\n            return node.nodeType === 8;\r\n        },\r\n\r\n        /**\r\n        * Checks if it's real DOM element\r\n        * in case of virtual element, returns span wrapper\r\n        * @param {Object} el\r\n        * @param {bool} isUpdate\r\n        * @return {Object} el\r\n        */\r\n        getRealElement = function (el, isUpdate) {\r\n            if (isVirtualElement(el)) {\r\n                if (isUpdate) {\r\n                    return $(el).next('span');\r\n                }\r\n\r\n                return $('<span/>').insertAfter(el);\r\n            }\r\n\r\n            return el;\r\n        },\r\n\r\n        /**\r\n         * execute i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         * @param {bool} isUpdate\r\n         */\r\n        execute = function (element, valueAccessor, isUpdate) {\r\n            var original = ko.unwrap(valueAccessor() || ''),\r\n                el = getRealElement(element, isUpdate),\r\n                inlineTranslation = (module.config() || {}).inlineTranslation;\r\n\r\n            if (inlineTranslation) {\r\n                setTranslateProp(el, original);\r\n            } else {\r\n                setText(el, $.mage.__(original));\r\n            }\r\n        };\r\n\r\n    /**\r\n     * i18n binding\r\n     * @property {Function}  init\r\n     * @property {Function}  update\r\n     */\r\n    ko.bindingHandlers.i18n = {\r\n\r\n        /**\r\n         * init i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            execute(element, valueAccessor);\r\n        },\r\n\r\n        /**\r\n         * update i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            execute(element, valueAccessor, true);\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.i18n = true;\r\n\r\n    renderer\r\n        .addNode('translate', {\r\n            binding: 'i18n'\r\n        })\r\n        .addAttribute('translate', {\r\n            binding: 'i18n'\r\n        });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/keyboard.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.keyboard = {\r\n\r\n        /**\r\n         * Attaches keypress handlers to element\r\n         * @param {HTMLElement} el - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         * @param  {Object} allBindings - all bindings object\r\n         * @param  {Object} viewModel - reference to viewmodel\r\n         */\r\n        init: function (el, valueAccessor, allBindings, viewModel) {\r\n            var map = valueAccessor();\r\n\r\n            ko.utils.registerEventHandler(el, 'keyup', function (e) {\r\n                var callback = map[e.keyCode];\r\n\r\n                if (callback) {\r\n                    return callback.call(viewModel, e);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('keyboard');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/mage-init.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/apply/main'\r\n], function (ko, _, mage) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.mageInit = {\r\n        /**\r\n         * Initializes components assigned to HTML elements.\r\n         *\r\n         * @param {HTMLElement} el\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (el, valueAccessor) {\r\n            var data = valueAccessor();\r\n\r\n            _.each(data, function (config, component) {\r\n                mage.applyFor(el, config, component);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/optgroup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'mageUtils'\r\n    ], function (ko, utils) {\r\n    'use strict';\r\n\r\n    var captionPlaceholder = {},\r\n        optgroupTmpl = '<optgroup label=\"${ $.label }\"></optgroup>',\r\n        nbspRe = /&nbsp;/g,\r\n        optionsText,\r\n        optionsValue,\r\n        optionTitle;\r\n\r\n    ko.bindingHandlers.optgroup = {\r\n        /**\r\n         * @param {*} element\r\n         * @returns {Object}\r\n         */\r\n        init: function (element) {\r\n            if (ko.utils.tagNameLower(element) !== 'select') {\r\n                throw new Error('options binding applies only to SELECT elements');\r\n            }\r\n\r\n            // Remove all existing <option>s.\r\n            while (element.length > 0) {\r\n                element.remove(0);\r\n            }\r\n\r\n            // Ensures that the binding processor doesn't try to bind the options\r\n            return {\r\n                'controlsDescendantBindings': true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {*} element\r\n         * @param {*} valueAccessor\r\n         * @param {*} allBindings\r\n         */\r\n        update: function (element, valueAccessor, allBindings) {\r\n            var selectWasPreviouslyEmpty = element.length === 0,\r\n                previousScrollTop = !selectWasPreviouslyEmpty && element.multiple ? element.scrollTop : null,\r\n                includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n                arrayToDomNodeChildrenOptions = {},\r\n                captionValue,\r\n                unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n                filteredArray,\r\n                previousSelectedValues,\r\n                itemUpdate = false,\r\n                callback = setSelectionCallback,//eslint-disable-line no-use-before-define\r\n                nestedOptionsLevel = -1;\r\n\r\n            optionsText = ko.utils.unwrapObservable(allBindings.get('optionsText')) || 'text';\r\n            optionsValue = ko.utils.unwrapObservable(allBindings.get('optionsValue')) || 'value';\r\n            optionTitle = optionsText + 'title';\r\n\r\n            if (element.multiple) {\r\n                previousSelectedValues = ko.utils.arrayMap(\r\n                    selectedOptions(),//eslint-disable-line no-use-before-define\r\n                    ko.selectExtensions.readValue\r\n                );\r\n            } else {\r\n                previousSelectedValues = element.selectedIndex >= 0 ?\r\n                    [ko.selectExtensions.readValue(element.options[element.selectedIndex])] :\r\n                    [];\r\n            }\r\n\r\n            if (unwrappedArray) {\r\n                if (typeof unwrappedArray.length === 'undefined') { // Coerce single value into array\r\n                    unwrappedArray = [unwrappedArray];\r\n                }\r\n\r\n                // Filter out any entries marked as destroyed\r\n                filteredArray = ko.utils.arrayFilter(unwrappedArray, function (item) {\r\n                    if (item && !item.label) {\r\n                        return false;\r\n                    }\r\n\r\n                    return includeDestroyed ||\r\n                        item === undefined ||\r\n                        item === null ||\r\n                        !ko.utils.unwrapObservable(item._destroy);\r\n                });\r\n                filteredArray.map(recursivePathBuilder, null);//eslint-disable-line no-use-before-define\r\n            }\r\n\r\n            /**\r\n             * @param {*} option\r\n             */\r\n            arrayToDomNodeChildrenOptions.beforeRemove = function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n            if (allBindings.has('optionsAfterRender')) {\r\n\r\n                /**\r\n                 * @param {*} arrayEntry\r\n                 * @param {*} newOptions\r\n                 */\r\n                callback = function (arrayEntry, newOptions) {\r\n                    setSelectionCallback(arrayEntry, newOptions);//eslint-disable-line no-use-before-define\r\n                    ko.dependencyDetection.ignore(\r\n                        allBindings.get('optionsAfterRender'),\r\n                        null,\r\n                        [newOptions[0],\r\n                        arrayEntry !== captionPlaceholder ? arrayEntry : undefined]\r\n                    );\r\n                };\r\n            }\r\n\r\n            filteredArray = formatOptions(filteredArray);//eslint-disable-line no-use-before-define\r\n            ko.utils.setDomNodeChildrenFromArrayMapping(\r\n                element,\r\n                filteredArray,\r\n                optionNodeFromArray,//eslint-disable-line no-use-before-define\r\n                arrayToDomNodeChildrenOptions,\r\n                callback\r\n            );\r\n\r\n            ko.dependencyDetection.ignore(function () {\r\n                var selectionChanged;\r\n\r\n                if (allBindings.get('valueAllowUnset') && allBindings.has('value')) {\r\n                    // The model value is authoritative, so make sure its value is the one selected\r\n                    ko.selectExtensions.writeValue(\r\n                        element,\r\n                        ko.utils.unwrapObservable(allBindings.get('value')),\r\n                        true /* allowUnset */\r\n                    );\r\n                } else {\r\n                    // Determine if the selection has changed as a result of updating the options list\r\n                    if (element.multiple) {\r\n                        // For a multiple-select box, compare the new selection count to the previous one\r\n                        // But if nothing was selected before, the selection can't have changed\r\n                        selectionChanged = previousSelectedValues.length &&\r\n                            selectedOptions().length < //eslint-disable-line no-use-before-define\r\n                            previousSelectedValues.length;\r\n                    } else {\r\n                        // For a single-select box, compare the current value to the previous value\r\n                        // But if nothing was selected before or nothing is selected now,\r\n                        // just look for a change in selection\r\n                        selectionChanged = previousSelectedValues.length && element.selectedIndex >= 0 ?\r\n                            ko.selectExtensions.readValue(element.options[element.selectedIndex]) !==\r\n                            previousSelectedValues[0] : previousSelectedValues.length || element.selectedIndex >= 0;\r\n                    }\r\n\r\n                    // Ensure consistency between model value and selected option.\r\n                    // If the dropdown was changed so that selection is no longer the same,\r\n                    // notify the value or selectedOptions binding.\r\n                    if (selectionChanged) {\r\n                        ko.utils.triggerEvent(element, 'change');\r\n                    }\r\n                }\r\n            });\r\n\r\n            /*eslint-enable max-len, no-use-before-define*/\r\n\r\n            if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20) {\r\n                element.scrollTop = previousScrollTop;\r\n            }\r\n\r\n            /**\r\n             * @returns {*}\r\n             */\r\n            function selectedOptions() {\r\n                return ko.utils.arrayFilter(element.options, function (node) {\r\n                    return node.selected;\r\n                });\r\n            }\r\n\r\n            /**\r\n             * @param {*} object\r\n             * @param {*} predicate\r\n             * @param {*} defaultValue\r\n             * @returns {*}\r\n             */\r\n            function applyToObject(object, predicate, defaultValue) {\r\n                var predicateType = typeof predicate;\r\n\r\n                if (predicateType === 'function') {   // run it against the data value\r\n                    return predicate(object);\r\n                } else if (predicateType === 'string') { // treat it as a property name on the data value\r\n                    return object[predicate];\r\n                }\r\n\r\n                return defaultValue;\r\n            }\r\n\r\n            /**\r\n             * @param {*} obj\r\n             */\r\n            function recursivePathBuilder(obj) {\r\n\r\n                obj[optionTitle] = (this && this[optionTitle] ? this[optionTitle] + '/' : '') + obj[optionsText].trim();\r\n\r\n                if (Array.isArray(obj[optionsValue])) {\r\n                    obj[optionsValue].map(recursivePathBuilder, obj);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @param {Array} arrayEntry\r\n             * @param {*} oldOptions\r\n             * @returns {*[]}\r\n             */\r\n            function optionNodeFromArray(arrayEntry, oldOptions) {\r\n                var option;\r\n\r\n                if (oldOptions.length) {\r\n                    previousSelectedValues = oldOptions[0].selected ?\r\n                        [ko.selectExtensions.readValue(oldOptions[0])] : [];\r\n                    itemUpdate = true;\r\n                }\r\n\r\n                if (arrayEntry === captionPlaceholder) { // empty value, label === caption\r\n                    option = element.ownerDocument.createElement('option');\r\n                    ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                    ko.selectExtensions.writeValue(option, undefined);\r\n                } else if (typeof arrayEntry[optionsValue] === 'undefined') { // empty value === optgroup\r\n                    if (arrayEntry.__disableTmpl) {\r\n                        option = '<optgroup label=\"' + arrayEntry[optionsText] + '\"></optgroup>';\r\n                    } else {\r\n                        option = utils.template(optgroupTmpl, {\r\n                            label: arrayEntry[optionsText],\r\n                            title: arrayEntry[optionsText + 'title']\r\n                        });\r\n                    }\r\n                    option = ko.utils.parseHtmlFragment(option)[0];\r\n\r\n                } else {\r\n                    option = element.ownerDocument.createElement('option');\r\n                    option.setAttribute('data-title', arrayEntry[optionsText + 'title']);\r\n                    ko.selectExtensions.writeValue(option, arrayEntry[optionsValue]);\r\n                    ko.utils.setTextContent(option, arrayEntry[optionsText]);\r\n                }\r\n\r\n                return [option];\r\n            }\r\n\r\n            /**\r\n             * @param {*} newOptions\r\n             */\r\n            function setSelectionCallback(newOptions) {\r\n                var isSelected;\r\n\r\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                // That's why we first added them without selection. Now it's time to set the selection.\r\n                if (previousSelectedValues.length && newOptions.value) {\r\n                    isSelected = ko.utils.arrayIndexOf(\r\n                        previousSelectedValues,\r\n                        ko.selectExtensions.readValue(newOptions.value)\r\n                    ) >= 0;\r\n\r\n                    ko.utils.setOptionNodeSelectionState(newOptions.value, isSelected);\r\n\r\n                    // If this option was changed from being selected during a single-item update, notify the change\r\n                    if (itemUpdate && !isSelected) {\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, 'change']);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @param {*} string\r\n             * @param {Number} times\r\n             * @returns {Array}\r\n             */\r\n            function strPad(string, times) {\r\n                return (new Array(times + 1)).join(string);\r\n            }\r\n\r\n            /**\r\n             * @param {*} options\r\n             * @returns {Array}\r\n             */\r\n            function formatOptions(options) {\r\n                var res = [];\r\n\r\n                nestedOptionsLevel++;\r\n\r\n                if (!nestedOptionsLevel) { // zero level\r\n                    // If caption is included, add it to the array\r\n                    if (allBindings.has('optionsCaption')) {\r\n                        captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                        // If caption value is null or undefined, don't show a caption\r\n                        if (//eslint-disable-line max-depth\r\n                            captionValue !== null &&\r\n                            captionValue !== undefined &&\r\n                            captionValue !== false\r\n                        ) {\r\n                            res.push(captionPlaceholder);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                ko.utils.arrayForEach(options, function (option) {\r\n                    var value = applyToObject(option, optionsValue, option),\r\n                        label = applyToObject(option, optionsText, value) || '',\r\n                        disabled = applyToObject(option, 'disabled', false) || false,\r\n                        obj = {},\r\n                        space = '\\u2007\\u2007\\u2007';\r\n\r\n                    obj[optionTitle] = applyToObject(option, optionsText + 'title', value);\r\n\r\n                    if (disabled) {\r\n                        obj.disabled = disabled;\r\n                    }\r\n\r\n                    if (option.hasOwnProperty('__disableTmpl')) {\r\n                        obj.__disableTmpl = option.__disableTmpl;\r\n                    }\r\n\r\n                    label = label.replace(nbspRe, '').trim();\r\n\r\n                    if (Array.isArray(value)) {\r\n                        obj[optionsText] = strPad('&nbsp;', nestedOptionsLevel * 4) + label;\r\n                        res.push(obj);\r\n                        res = res.concat(formatOptions(value));\r\n                    } else {\r\n                        obj[optionsText] = strPad(space, nestedOptionsLevel * 2) + label;\r\n                        obj[optionsValue] = value;\r\n                        res.push(obj);\r\n                    }\r\n                });\r\n                nestedOptionsLevel--;\r\n\r\n                return res;\r\n            }\r\n        }\r\n    };\r\n    ko.bindingHandlers.selectedOptions.after.push('optgroup');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/outer_click.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates outerClick binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        onlyIfVisible: true\r\n    };\r\n\r\n    /**\r\n     * Checks if element sis visible.\r\n     *\r\n     * @param {Element} el\r\n     * @returns {Boolean}\r\n     */\r\n    function isVisible(el) {\r\n        var style = window.getComputedStyle(el),\r\n            visibility = {\r\n                display: 'none',\r\n                visibility: 'hidden',\r\n                opacity: '0'\r\n            },\r\n            visible = true;\r\n\r\n        _.each(visibility, function (val, key) {\r\n            if (style[key] === val) {\r\n                visible = false;\r\n            }\r\n        });\r\n\r\n        return visible;\r\n    }\r\n\r\n    /**\r\n     * Document click handler which in case if event target is not\r\n     * a descendant of provided container element,\r\n     * invokes specified in configuration callback.\r\n     *\r\n     * @param {HTMLElement} container\r\n     * @param {Object} config\r\n     * @param {EventObject} e\r\n     */\r\n    function onOuterClick(container, config, e) {\r\n        var target = e.target,\r\n            callback = config.callback;\r\n\r\n        if (container === target || container.contains(target)) {\r\n            return;\r\n        }\r\n\r\n        if (config.onlyIfVisible) {\r\n            if (!_.isNull(container.offsetParent) && isVisible(container)) {\r\n                callback();\r\n            }\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares configuration for the binding based\r\n     * on a default properties and provided options.\r\n     *\r\n     * @param {(Object|Function)} [options={}]\r\n     * @returns {Object}\r\n     */\r\n    function buildConfig(options) {\r\n        var config = {};\r\n\r\n        if (_.isFunction(options)) {\r\n            options = {\r\n                callback: options\r\n            };\r\n        } else if (!_.isObject(options)) {\r\n            options = {};\r\n        }\r\n\r\n        return _.extend(config, defaults, options);\r\n    }\r\n\r\n    ko.bindingHandlers.outerClick = {\r\n\r\n        /**\r\n         * Initializes outer click binding.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var config = buildConfig(valueAccessor()),\r\n                outerClick = onOuterClick.bind(null, element, config),\r\n                isTouchDevice = typeof document.ontouchstart !== 'undefined';\r\n\r\n            if (isTouchDevice) {\r\n                $(document).on('touchstart', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('touchstart', outerClick);\r\n                });\r\n            } else {\r\n                $(document).on('click', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('click', outerClick);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('outerClick');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/range.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var isTouchDevice = !_.isUndefined(document.ontouchstart),\r\n        sliderFn = 'slider',\r\n        sliderModule = 'jquery-ui-modules/slider';\r\n\r\n    if (isTouchDevice) {\r\n        sliderFn = 'touchSlider';\r\n        sliderModule = 'mage/touch-slider';\r\n    }\r\n\r\n    ko.bindingHandlers.range = {\r\n\r\n        /**\r\n         * Initializes binding and a slider update.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var config  = valueAccessor(),\r\n                value   = config.value;\r\n\r\n            _.extend(config, {\r\n                value: value(),\r\n\r\n                /**\r\n                 * Callback which is being called when sliders' value changes.\r\n                 *\r\n                 * @param {Event} event\r\n                 * @param {Object} ui\r\n                 */\r\n                slide: function (event, ui) {\r\n                    value(ui.value);\r\n                }\r\n            });\r\n\r\n            require([sliderModule], function () {\r\n                $(element)[sliderFn](config);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates sliders' plugin configuration.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            var config = valueAccessor();\r\n\r\n            config.value = ko.unwrap(config.value);\r\n\r\n            require([sliderModule], function () {\r\n                $(element)[sliderFn]('option', config);\r\n            });\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('range');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/resizable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiRegistry',\r\n    'underscore',\r\n    '../template/renderer',\r\n    'jquery-ui-modules/resizable'\r\n], function (ko, $, async, registry, _, renderer) {\r\n    'use strict';\r\n\r\n    var sizeOptions = [\r\n            'minHeight',\r\n            'maxHeight',\r\n            'minWidth',\r\n            'maxWidth'\r\n        ],\r\n\r\n        handles = {\r\n            height: '.ui-resizable-s, .ui-resizable-n',\r\n            width: '.ui-resizable-w, .ui-resizable-e'\r\n        };\r\n\r\n    /**\r\n     * Recalcs visibility of handles, width and height of resizable based on content\r\n     * @param {HTMLElement} element\r\n     */\r\n    function adjustSize(element) {\r\n        var maxHeight,\r\n            maxWidth;\r\n\r\n        element = $(element);\r\n        maxHeight = element.resizable('option').maxHeight;\r\n        maxWidth = element.resizable('option').maxWidth;\r\n\r\n        if (maxHeight && element.height() > maxHeight) {\r\n            element.height(maxHeight + 1);\r\n            $(handles.height).hide();\r\n        } else {\r\n            $(handles.height).show();\r\n        }\r\n\r\n        if (maxWidth && element.width() > maxWidth) {\r\n            element.width(maxWidth + 1);\r\n            $(handles.width).hide();\r\n        } else {\r\n            $(handles.width).show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recalcs allowed min, max width and height based on configured selectors\r\n     * @param {Object} sizeConstraints\r\n     * @param {String} componentName\r\n     * @param {HTMLElement} element\r\n     * @param {Boolean} hasWidthUpdate\r\n     */\r\n    function recalcAllowedSize(sizeConstraints, componentName, element, hasWidthUpdate) {\r\n        var size;\r\n\r\n        element = $(element);\r\n\r\n        if (!element.data('resizable')) {\r\n            return;\r\n        }\r\n\r\n        if (!hasWidthUpdate) {\r\n            element.css('width', 'auto');\r\n        }\r\n\r\n        _.each(sizeConstraints, function (selector, key) {\r\n            async.async({\r\n                component: componentName,\r\n                selector: selector\r\n            }, function (elem) {\r\n                size = key.indexOf('Height') !== -1 ? $(elem).outerHeight(true) : $(elem).outerWidth(true);\r\n\r\n                if (element.data('resizable')) {\r\n                    element.resizable('option', key, size + 1);\r\n                }\r\n            });\r\n        }, this);\r\n\r\n        adjustSize(element);\r\n    }\r\n\r\n    /**\r\n     * Preprocess config to separate options,\r\n     * which must be processed further before applying\r\n     *\r\n     * @param {Object} config\r\n     * @param {Object} viewModel\r\n     * @param {*} element\r\n     * @return {Object} config\r\n     */\r\n    function processConfig(config, viewModel, element) {\r\n        var sizeConstraint,\r\n            sizeConstraints = {},\r\n            recalc,\r\n            hasWidthUpdate;\r\n\r\n        if (_.isEmpty(config)) {\r\n            return {};\r\n        }\r\n        _.each(sizeOptions, function (key) {\r\n            sizeConstraint = config[key];\r\n\r\n            if (sizeConstraint && !_.isNumber(sizeConstraint)) {\r\n                sizeConstraints[key] = sizeConstraint;\r\n                delete config[key];\r\n            }\r\n        });\r\n        hasWidthUpdate =  _.some(sizeConstraints, function (value, key) {\r\n            return key.indexOf('Width') !== -1;\r\n        });\r\n\r\n        recalc = recalcAllowedSize.bind(null, sizeConstraints, viewModel.name, element, hasWidthUpdate);\r\n        config.start = recalc;\r\n        $(window).on('resize.resizable', recalc);\r\n        registry.get(viewModel.provider).on('reloaded', recalc);\r\n\r\n        return config;\r\n    }\r\n\r\n    ko.bindingHandlers.resizable = {\r\n\r\n        /**\r\n         * Binding init callback.\r\n         *\r\n         * @param {*} element\r\n         * @param {Function} valueAccessor\r\n         * @param {Function} allBindings\r\n         * @param {Object} viewModel\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var config = processConfig(valueAccessor(), viewModel, element);\r\n\r\n            $(element).resizable(config);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('resizable');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/scope.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates scope binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'uiRegistry',\r\n    'mage/translate',\r\n    '../template/renderer',\r\n    'jquery',\r\n    '../../logger/console-logger'\r\n], function (ko, registry, $t, renderer, $, consoleLogger) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates child context with passed component param as $data. Extends context with $t helper.\r\n     * Applies bindings to descendant nodes.\r\n     * @param {HTMLElement} el - element to apply bindings to.\r\n     * @param {ko.bindingContext} bindingContext - instance of ko.bindingContext, passed to binding initially.\r\n     * @param {Promise} promise - instance of jQuery promise\r\n     * @param {Object} component - component instance to attach to new context\r\n     */\r\n    function applyComponents(el, bindingContext, promise, component) {\r\n        promise.resolve();\r\n        component = bindingContext.createChildContext(component);\r\n\r\n        ko.utils.extend(component, {\r\n            $t: $t\r\n        });\r\n\r\n        ko.utils.arrayForEach(el.childNodes, ko.cleanNode);\r\n\r\n        ko.applyBindingsToDescendants(component, el);\r\n    }\r\n\r\n    ko.bindingHandlers.scope = {\r\n\r\n        /**\r\n         * Scope binding's init method.\r\n         * @returns {Object} - Knockout declaration for it to let binding control descendants.\r\n         */\r\n        init: function () {\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding, parses component declarations.\r\n         * Fetches for those found and attaches them to the new context.\r\n         * @param {HTMLElement} el - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to el.\r\n         * @param {ko.bindingContext} bindingContext - Instance of ko.bindingContext, passed to binding initially.\r\n         */\r\n        update: function (el, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var component = valueAccessor(),\r\n                promise = $.Deferred(),\r\n                apply = applyComponents.bind(this, el, bindingContext, promise),\r\n                loggerUtils = consoleLogger.utils;\r\n\r\n            if (typeof component === 'string') {\r\n                loggerUtils.asyncLog(\r\n                    promise,\r\n                    {\r\n                        data: {\r\n                            component: component\r\n                        },\r\n                        messages: loggerUtils.createMessages(\r\n                            'requestingComponent',\r\n                            'requestingComponentIsLoaded',\r\n                            'requestingComponentIsFailed'\r\n                        )\r\n                    }\r\n                );\r\n\r\n                registry.get(component, apply);\r\n            } else if (typeof component === 'function') {\r\n                component(apply);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.scope = true;\r\n\r\n    renderer\r\n        .addNode('scope')\r\n        .addAttribute('scope', {\r\n            name: 'ko-scope'\r\n        });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/simple-checked.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.simpleChecked = {\r\n        'after': ['attr'],\r\n\r\n        /**\r\n         * Implements same functionality as a standard 'simpleChecked' binding,\r\n         * but with a difference that it wont' change values array if\r\n         * value of DOM element changes.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var isCheckbox = element.type === 'checkbox',\r\n                isRadio = element.type === 'radio',\r\n                updateView,\r\n                updateModel;\r\n\r\n            if (!isCheckbox && !isRadio) {\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * Updates checked observable\r\n             */\r\n            updateModel = function () {\r\n                var  modelValue = ko.dependencyDetection.ignore(valueAccessor),\r\n                    isChecked = element.checked;\r\n\r\n                if (ko.computedContext.isInitial()) {\r\n                    return;\r\n                }\r\n\r\n                if (modelValue.peek() === isChecked) {\r\n                    return;\r\n                }\r\n\r\n                if (isRadio && !isChecked) {\r\n                    return;\r\n                }\r\n\r\n                modelValue(isChecked);\r\n            };\r\n\r\n            /**\r\n             * Updates checkbox state\r\n             */\r\n            updateView = function () {\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                element.checked = !!modelValue;\r\n            };\r\n\r\n            ko.utils.registerEventHandler(element, 'change', updateModel);\r\n\r\n            ko.computed(updateModel, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n            ko.computed(updateView, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.expressionRewriting._twoWayBindings.simpleChecked = true;\r\n\r\n    renderer.addAttribute('simpleChecked');\r\n    renderer.addAttribute('simple-checked', {\r\n        binding: 'simpleChecked'\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/staticChecked.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.staticChecked = {\r\n        'after': ['value', 'attr'],\r\n\r\n        /**\r\n         * Implements same functionality as a standard 'checked' binding,\r\n         * but with a difference that it wont' change values array if\r\n         * value of DOM element changes.\r\n         */\r\n        init: function (element, valueAccessor, allBindings) {\r\n            var isCheckbox = element.type === 'checkbox',\r\n                isRadio = element.type === 'radio',\r\n                isValueArray,\r\n                oldElemValue,\r\n                useCheckedValue,\r\n                checkedValue,\r\n                updateModel,\r\n                updateView;\r\n\r\n            if (!isCheckbox && !isRadio) {\r\n                return;\r\n            }\r\n\r\n            checkedValue = ko.pureComputed(function () {\r\n                if (allBindings.has('checkedValue')) {\r\n                    return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n                } else if (allBindings.has('value')) {\r\n                    return ko.utils.unwrapObservable(allBindings.get('value'));\r\n                }\r\n\r\n                return element.value;\r\n            });\r\n\r\n            isValueArray = isCheckbox && ko.utils.unwrapObservable(valueAccessor()) instanceof Array;\r\n            oldElemValue = isValueArray ? checkedValue() : undefined;\r\n            useCheckedValue = isRadio || isValueArray;\r\n\r\n            /**\r\n             * Updates values array if it's necessary.\r\n             */\r\n            updateModel = function () {\r\n                var isChecked = element.checked,\r\n                    elemValue = useCheckedValue ? checkedValue() : isChecked,\r\n                    modelValue;\r\n\r\n                if (ko.computedContext.isInitial()) {\r\n                    return;\r\n                }\r\n\r\n                if (isRadio && !isChecked) {\r\n                    return;\r\n                }\r\n\r\n                modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n\r\n                if (isValueArray) {\r\n                    if (oldElemValue !== elemValue) {\r\n                        oldElemValue = elemValue;\r\n                    } else {\r\n                        ko.utils.addOrRemoveItem(modelValue, elemValue, isChecked);\r\n                    }\r\n                } else {\r\n                    ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Updates checkbox state.\r\n             */\r\n            updateView = function () {\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                if (isValueArray) {\r\n                    element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\r\n                } else if (isCheckbox) {\r\n                    element.checked = modelValue;\r\n                } else {\r\n                    element.checked = checkedValue() === modelValue;\r\n                }\r\n            };\r\n\r\n            ko.computed(updateModel, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n\r\n            ko.utils.registerEventHandler(element, 'click', updateModel);\r\n\r\n            ko.computed(updateView, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.expressionRewriting._twoWayBindings.staticChecked = true;\r\n\r\n    renderer.addAttribute('staticChecked');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/tooltip.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/tooltip/tooltip.html',\r\n    '../template/renderer'\r\n], function ($, ko, _, template, tooltipTmpl, renderer) {\r\n    'use strict';\r\n\r\n    var tooltip,\r\n        defaults,\r\n        positions,\r\n        transformProp,\r\n        checkedPositions = {},\r\n        iterator = 0,\r\n        previousTooltip,\r\n        tooltipData,\r\n        positionData = {},\r\n        tooltipsCollection = {},\r\n        isTouchDevice = (function () {\r\n            return 'ontouchstart' in document.documentElement;\r\n        })(),\r\n        CLICK_EVENT = (function () {\r\n            return isTouchDevice ? 'touchstart' : 'click';\r\n        })();\r\n\r\n    defaults = {\r\n        tooltipWrapper: '[data-tooltip=tooltip-wrapper]',\r\n        tooltipContentBlock: 'data-tooltip-content',\r\n        closeButtonClass: 'action-close',\r\n        tailClass: 'data-tooltip-tail',\r\n        action: 'hover',\r\n        delay: 300,\r\n        track: false,\r\n        step: 20,\r\n        position: 'top',\r\n        closeButton: false,\r\n        showed: false,\r\n        strict: true,\r\n        center: false,\r\n        closeOnScroll: true\r\n    };\r\n\r\n    tooltipData = {\r\n        tooltipClasses: '',\r\n        trigger: false,\r\n        timeout: 0,\r\n        element: false,\r\n        event: false,\r\n        targetElement: {},\r\n        showed: false,\r\n        currentID: 0\r\n    };\r\n\r\n    /**\r\n     * Polyfill for css transform\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.createElement('div').style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform !== 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] !== 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    positions = {\r\n\r\n        /*eslint max-depth: [0, 0]*/\r\n\r\n        map: {\r\n            horizontal: {\r\n                s: 'w',\r\n                p: 'left'\r\n            },\r\n            vertical: {\r\n                s: 'h',\r\n                p: 'top'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        top: function (s) {\r\n            return positions._topLeftChecker(s, positions.map, 'vertical', '_bottom', 'top', 'right');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        left: function (s) {\r\n            return positions._topLeftChecker(s, positions.map, 'horizontal', '_right', 'left', 'top');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        bottom: function (s) {\r\n            return positions._bottomRightChecker(s, positions.map, 'vertical', '_top', 'bottom', 'left');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        right: function (s) {\r\n            return positions._bottomRightChecker(s, positions.map, 'horizontal', '_left', 'right', 'bottom');\r\n        },\r\n\r\n        /**\r\n         * Check can tooltip setted on current position or not. If can't setted - delegate call.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {String} className - class whats should be setted to tooltip\r\n         * @param {String} side - parent method name\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _topLeftChecker: function (s, map, direction, className, side, delegate) {\r\n            var result = {\r\n                    position: {}\r\n                },\r\n                config = tooltip.getTooltip(tooltipData.currentID),\r\n                startPosition = !config.strict ? s.eventPosition : s.elementPosition,\r\n                changedDirection;\r\n\r\n            checkedPositions[side] = true;\r\n\r\n            if (\r\n                startPosition[map[direction].p] - s.tooltipSize[map[direction].s] - config.step >\r\n                s.scrollPosition[map[direction].p]\r\n            ) {\r\n                result.position[map[direction].p] = startPosition[map[direction].p] - s.tooltipSize[map[direction].s] -\r\n                    config.step;\r\n                result.className = className;\r\n                result.side = side;\r\n                changedDirection = direction === 'vertical' ? 'horizontal' : 'vertical';\r\n                result = positions._normalize(s, result, config, delegate, map, changedDirection);\r\n            } else if (!checkedPositions[delegate]) {\r\n                result = positions[delegate].apply(null, arguments);\r\n            } else {\r\n                result = positions.positionCenter(s, result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Check can tooltip setted on current position or not. If can't setted - delegate call.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {String} className - class whats should be setted to tooltip\r\n         * @param {String} side - parent method name\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _bottomRightChecker: function (s, map, direction, className, side, delegate) {\r\n            var result = {\r\n                    position: {}\r\n                },\r\n                config = tooltip.getTooltip(tooltipData.currentID),\r\n                startPosition = !config.strict ? s.eventPosition : {\r\n                    top: s.elementPosition.top + s.elementSize.h,\r\n                    left: s.elementPosition.left + s.elementSize.w\r\n                },\r\n                changedDirection;\r\n\r\n            checkedPositions[side] = true;\r\n\r\n            if (\r\n                startPosition[map[direction].p] + s.tooltipSize[map[direction].s] + config.step <\r\n                s.scrollPosition[map[direction].p] + s.windowSize[map[direction].s]\r\n            ) {\r\n                result.position[map[direction].p] = startPosition[map[direction].p] + config.step;\r\n                result.className = className;\r\n                result.side = side;\r\n                changedDirection = direction === 'vertical' ? 'horizontal' : 'vertical';\r\n                result = positions._normalize(s, result, config, delegate, map, changedDirection);\r\n            } else if (!checkedPositions[delegate]) {\r\n                result = positions[delegate].apply(null, arguments);\r\n            } else {\r\n                result = positions.positionCenter(s, result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Centered tooltip if tooltip does not fit in window\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        positionCenter: function (s, data) {\r\n            data = positions._positionCenter(s, data, 'horizontal', positions.map);\r\n            data = positions._positionCenter(s, data, 'vertical', positions.map);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Centered tooltip side\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _positionCenter: function (s, data, direction, map) {\r\n            if (s.tooltipSize[map[direction].s] < s.windowSize[map[direction].s]) {\r\n                data.position[map[direction].p] = (s.windowSize[map[direction].s] -\r\n                    s.tooltipSize[map[direction].s]) / 2 + s.scrollPosition[map[direction].p];\r\n            } else {\r\n                data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                data.tooltipSize = {};\r\n                data.tooltipSize[map[direction].s] = s.windowSize[map[direction].s];\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Normalize horizontal or vertical position.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {Object} config - tooltip config\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _normalize: function (s, data, config, delegate, map, direction) {\r\n            var startPosition = !config.center ? s.eventPosition : {\r\n                    left: s.elementPosition.left + s.elementSize.w / 2,\r\n                    top: s.elementPosition.top + s.elementSize.h / 2\r\n                },\r\n                depResult;\r\n\r\n            if (startPosition[map[direction].p] - s.tooltipSize[map[direction].s] / 2 >\r\n                s.scrollPosition[map[direction].p] && startPosition[map[direction].p] +\r\n                s.tooltipSize[map[direction].s] / 2 <\r\n                s.scrollPosition[map[direction].p] + s.windowSize[map[direction].s]\r\n            ) {\r\n                data.position[map[direction].p] = startPosition[map[direction].p] - s.tooltipSize[map[direction].s] / 2;\r\n            } else {\r\n\r\n                /*eslint-disable no-lonely-if*/\r\n                if (!checkedPositions[delegate]) {\r\n                    depResult = positions[delegate].apply(null, arguments);\r\n\r\n                    if (depResult.hasOwnProperty('className')) {\r\n                        data = depResult;\r\n                    } else {\r\n                        data = positions._normalizeTail(s, data, config, delegate, map, direction, startPosition);\r\n                    }\r\n                } else {\r\n                    data = positions._normalizeTail(s, data, config, delegate, map, direction, startPosition);\r\n                }\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Calc tail position.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {Object} config - tooltip config\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {Object} startPosition - start position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _normalizeTail: function (s, data, config, delegate, map, direction, startPosition) {\r\n            data.tail = {};\r\n\r\n            if (s.tooltipSize[map[direction].s] < s.windowSize[map[direction].s]) {\r\n\r\n                if (\r\n                    startPosition[map[direction].p] >\r\n                    s.windowSize[map[direction].s] / 2 + s.scrollPosition[map[direction].p]\r\n                ) {\r\n                    data.position[map[direction].p] = s.windowSize[map[direction].s] +\r\n                        s.scrollPosition[map[direction].p] - s.tooltipSize[map[direction].s];\r\n                    data.tail[map[direction].p] = startPosition[map[direction].p] -\r\n                        s.tooltipSize[map[direction].s] / 2 - data.position[map[direction].p];\r\n                } else {\r\n                    data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                    data.tail[map[direction].p] = startPosition[map[direction].p] -\r\n                        s.tooltipSize[map[direction].s] / 2 - data.position[map[direction].p];\r\n                }\r\n            } else {\r\n                data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                data.tail[map[direction].p] = s.eventPosition[map[direction].p] - s.windowSize[map[direction].s] / 2;\r\n                data.tooltipSize = {};\r\n                data.tooltipSize[map[direction].s] = s.windowSize[map[direction].s];\r\n            }\r\n\r\n            return data;\r\n        }\r\n    };\r\n\r\n    tooltip = {\r\n\r\n        /**\r\n         * Set new tooltip to tooltipCollection, save config, and add unic id\r\n         *\r\n         * @param {Object} config - tooltip config\r\n         * @returns {String} tooltip id\r\n         */\r\n        setTooltip: function (config) {\r\n            var property = 'id-' + iterator;\r\n\r\n            tooltipsCollection[property] = config;\r\n            iterator++;\r\n\r\n            return property;\r\n        },\r\n\r\n        /**\r\n         * Get tooltip config by id\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @returns {Object} tooltip config\r\n         */\r\n        getTooltip: function (id) {\r\n            return tooltipsCollection[id];\r\n        },\r\n\r\n        /**\r\n         * Set content to current tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {Object} viewModel - tooltip view model\r\n         * @param {String} id - tooltip id\r\n         * @param {Object} bindingCtx - tooltip context\r\n         * @param {Object} event - action event\r\n         */\r\n        setContent: function (tooltipElement, viewModel, id, bindingCtx, event) {\r\n            var html = $(tooltipElement).html(),\r\n                config = tooltip.getTooltip(id),\r\n                body = $('body');\r\n\r\n            tooltipData.currentID = id;\r\n            tooltipData.trigger = $(event.currentTarget);\r\n            tooltip.setTargetData(event);\r\n            body.on('mousemove.setTargetData', tooltip.setTargetData);\r\n            tooltip.clearTimeout(id);\r\n\r\n            tooltipData.timeout = _.delay(function () {\r\n                body.off('mousemove.setTargetData', tooltip.setTargetData);\r\n\r\n                if (tooltipData.trigger[0] === tooltipData.targetElement) {\r\n                    tooltip.destroy(id);\r\n                    event.stopPropagation();\r\n                    tooltipElement = tooltip.createTooltip(id);\r\n                    tooltipElement.find('.' + defaults.tooltipContentBlock).append(html);\r\n                    tooltipElement.applyBindings(bindingCtx);\r\n                    tooltip.setHandlers(id);\r\n                    tooltip.setPosition(tooltipElement, id);\r\n                    previousTooltip = id;\r\n                }\r\n\r\n            }, config.delay);\r\n        },\r\n\r\n        /**\r\n         * Set position to current tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {String} id - tooltip id\r\n         */\r\n        setPosition: function (tooltipElement, id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            tooltip.sizeData = {\r\n                windowSize: {\r\n                    h: $(window).outerHeight(),\r\n                    w: $(window).outerWidth()\r\n                },\r\n                scrollPosition: {\r\n                    top: $(window).scrollTop(),\r\n                    left: $(window).scrollLeft()\r\n                },\r\n                tooltipSize: {\r\n                    h: tooltipElement.outerHeight(),\r\n                    w: tooltipElement.outerWidth()\r\n                },\r\n                elementSize: {\r\n                    h: tooltipData.trigger.outerHeight(),\r\n                    w: tooltipData.trigger.outerWidth()\r\n                },\r\n                elementPosition: tooltipData.trigger.offset(),\r\n                eventPosition: this.getEventPosition(tooltipData.event)\r\n            };\r\n\r\n            _.extend(positionData, positions[config.position](tooltip.sizeData));\r\n            tooltipElement.css(positionData.position);\r\n            tooltipElement.addClass(positionData.className);\r\n            tooltip._setTooltipSize(positionData, tooltipElement);\r\n            tooltip._setTailPosition(positionData, tooltipElement);\r\n            checkedPositions = {};\r\n        },\r\n\r\n        /**\r\n         * Check position data and change tooltip size if needs\r\n         *\r\n         * @param {Object} data - position data\r\n         * @param {Object} tooltipElement - tooltip element\r\n         */\r\n        _setTooltipSize: function (data, tooltipElement) {\r\n            if (data.tooltipSize) {\r\n                data.tooltipSize.w ?\r\n                    tooltipElement.css('width', data.tooltipSize.w) :\r\n                    tooltipElement.css('height', data.tooltipSize.h);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check position data and set position to tail\r\n         *\r\n         * @param {Object} data - position data\r\n         * @param {Object} tooltipElement - tooltip element\r\n         */\r\n        _setTailPosition: function (data, tooltipElement) {\r\n            var tail,\r\n                tailMargin;\r\n\r\n            if (data.tail) {\r\n                tail = tooltipElement.find('.' + defaults.tailClass);\r\n\r\n                if (data.tail.left) {\r\n                    tailMargin = parseInt(tail.css('margin-left'), 10);\r\n                    tail.css('margin-left', tailMargin + data.tail.left);\r\n                } else {\r\n                    tailMargin = parseInt(tail.css('margin-top'), 10);\r\n                    tail.css('margin-top', tailMargin + data.tail.top);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Resolves position for tooltip\r\n         *\r\n         * @param {Object} event\r\n         * @returns {Object}\r\n         */\r\n        getEventPosition: function (event) {\r\n            var position = {\r\n                left: event.originalEvent && event.originalEvent.pageX || 0,\r\n                top: event.originalEvent && event.originalEvent.pageY || 0\r\n            };\r\n\r\n            if (position.left === 0 && position.top === 0) {\r\n                _.extend(position, event.target.getBoundingClientRect());\r\n            }\r\n\r\n            return position;\r\n        },\r\n\r\n        /**\r\n         * Close tooltip if action happened outside handler and tooltip element\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @param {Object} event - action event\r\n         */\r\n        outerClick: function (id, event) {\r\n            var tooltipElement = $(event.target).parents(defaults.tooltipWrapper)[0],\r\n                isTrigger = event.target === tooltipData.trigger[0] || $.contains(tooltipData.trigger[0], event.target);\r\n\r\n            if (tooltipData.showed && tooltipElement !== tooltipData.element[0] && !isTrigger) {\r\n                tooltip.destroy(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Parse keydown event and if event trigger is escape key - close tooltip\r\n         *\r\n         * @param {Object} event - action event\r\n         */\r\n        keydownHandler: function (event) {\r\n            if (tooltipData.showed && event.keyCode === 27) {\r\n                tooltip.destroy(tooltipData.currentID);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change tooltip position when track is enabled\r\n         *\r\n         * @param {Object} event - current event\r\n         */\r\n        track: function (event) {\r\n            var inequality = {},\r\n                map = positions.map,\r\n                translate = {\r\n                    left: 'translateX',\r\n                    top: 'translateY'\r\n                },\r\n                eventPosition = {\r\n                    left: event.pageX,\r\n                    top: event.pageY\r\n                },\r\n                tooltipSize = {\r\n                    w: tooltipData.element.outerWidth(),\r\n                    h: tooltipData.element.outerHeight()\r\n                },\r\n                direction = positionData.side === 'bottom' || positionData.side === 'top' ? 'horizontal' : 'vertical';\r\n\r\n            inequality[map[direction].p] = eventPosition[map[direction].p] - (positionData.position[map[direction].p] +\r\n                tooltipSize[map[direction].s] / 2);\r\n\r\n            if (positionData.position[map[direction].p] + inequality[map[direction].p] +\r\n                tooltip.sizeData.tooltipSize[map[direction].s] >\r\n                tooltip.sizeData.windowSize[map[direction].s] + tooltip.sizeData.scrollPosition[map[direction].p] ||\r\n                inequality[map[direction].p] + positionData.position[map[direction].p] <\r\n                tooltip.sizeData.scrollPosition[map[direction].p]) {\r\n\r\n                return false;\r\n            }\r\n\r\n            tooltipData.element[0].style[transformProp] = translate[map[direction].p] +\r\n                '(' + inequality[map[direction].p] + 'px)';\r\n        },\r\n\r\n        /**\r\n         * Set handlers to tooltip\r\n         *\r\n         * @param {String} id - tooltip id\r\n         */\r\n        setHandlers: function (id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            if (config.track) {\r\n                tooltipData.trigger.on('mousemove.track', tooltip.track);\r\n            }\r\n\r\n            if (config.action === 'click') {\r\n                $(window).on(CLICK_EVENT + '.outerClick', tooltip.outerClick.bind(null, id));\r\n            }\r\n\r\n            if (config.closeButton) {\r\n                $('.' + config.closeButtonClass).on('click.closeButton', tooltip.destroy.bind(null, id));\r\n            }\r\n\r\n            if (config.closeOnScroll) {\r\n                document.addEventListener('scroll', tooltip.destroy, true);\r\n                $(window).on('scroll.tooltip', tooltip.outerClick.bind(null, id));\r\n            }\r\n\r\n            $(window).on('keydown.tooltip', tooltip.keydownHandler);\r\n            $(window).on('resize.outerClick', tooltip.outerClick.bind(null, id));\r\n        },\r\n\r\n        /**\r\n         * Toggle tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {Object} viewModel - tooltip view model\r\n         * @param {String} id - tooltip id\r\n         */\r\n        toggleTooltip: function (tooltipElement, viewModel, id) {\r\n            if (previousTooltip === id && tooltipData.showed) {\r\n                tooltip.destroy(id);\r\n\r\n                return false;\r\n            }\r\n\r\n            tooltip.setContent.apply(null, arguments);\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Create tooltip and append to DOM\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @returns {Object} tooltip element\r\n         */\r\n        createTooltip: function (id) {\r\n            var body = $('body'),\r\n                config = tooltip.getTooltip(id);\r\n\r\n            $(template(tooltipTmpl, {\r\n                data: config\r\n            })).appendTo(body);\r\n\r\n            tooltipData.showed = true;\r\n            tooltipData.element = $(config.tooltipWrapper);\r\n\r\n            return tooltipData.element;\r\n        },\r\n\r\n        /**\r\n         * Check action and clean timeout\r\n         *\r\n         * @param {String} id - tooltip id\r\n         */\r\n        clearTimeout: function (id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            if (config.action === 'hover') {\r\n                clearTimeout(tooltipData.timeout);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check previous tooltip\r\n         */\r\n        checkPreviousTooltip: function () {\r\n            if (!tooltipData.timeout) {\r\n                tooltip.destroy();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Destroy tooltip instance\r\n         */\r\n        destroy: function () {\r\n            if (tooltipData.element) {\r\n                tooltipData.element.remove();\r\n                tooltipData.showed = false;\r\n            }\r\n\r\n            positionData = {};\r\n            tooltipData.timeout = false;\r\n            tooltip.removeHandlers();\r\n        },\r\n\r\n        /**\r\n         * Remove tooltip handlers\r\n         */\r\n        removeHandlers: function () {\r\n            $('.' + defaults.closeButtonClass).off('click.closeButton');\r\n            tooltipData.trigger.off('mousemove.track');\r\n            document.removeEventListener('scroll', tooltip.destroy, true);\r\n            $(window).off('scroll.tooltip');\r\n            $(window).off(CLICK_EVENT + '.outerClick');\r\n            $(window).off('keydown.tooltip');\r\n            $(window).off('resize.outerClick');\r\n        },\r\n\r\n        /**\r\n         * Set target element\r\n         *\r\n         * @param {Object} event - current event\r\n         */\r\n        setTargetData: function (event) {\r\n            tooltipData.event = event;\r\n\r\n            //TODO: bug chrome v.49; Link to issue https://bugs.chromium.org/p/chromium/issues/detail?id=161464\r\n            if (event.timeStamp - (tooltipData.timestamp || 0) < 1) {\r\n                return;\r\n            }\r\n\r\n            if (event.type === 'mousemove') {\r\n                tooltipData.targetElement = event.target;\r\n            } else {\r\n                tooltipData.targetElement = event.currentTarget;\r\n                tooltipData.timestamp = event.timeStamp;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Merged user config with defaults configuration\r\n         *\r\n         * @param {Object} config - user config\r\n         * @returns {Object} merged config\r\n         */\r\n        processingConfig: function (config) {\r\n            return _.extend({}, defaults, config);\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.tooltip = {\r\n\r\n        /**\r\n         * Initialize tooltip\r\n         *\r\n         * @param {Object} elem - tooltip DOM element\r\n         * @param {Function} valueAccessor - ko observable property, tooltip data\r\n         * @param {Object} allBindings - all bindings on current element\r\n         * @param {Object} viewModel - current element viewModel\r\n         * @param {Object} bindingCtx - current element binding context\r\n         */\r\n        init: function (elem, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var config = tooltip.processingConfig(valueAccessor()),\r\n                $parentScope = config.parentScope ? $(config.parentScope) : $(elem).parent(),\r\n                tooltipId;\r\n\r\n            $(elem).addClass('hidden');\r\n\r\n            if (isTouchDevice) {\r\n                config.action = 'click';\r\n            }\r\n            tooltipId = tooltip.setTooltip(config);\r\n\r\n            if (config.action === 'hover') {\r\n                $parentScope.on(\r\n                    'mouseenter',\r\n                    config.trigger,\r\n                    tooltip.setContent.bind(null, elem, viewModel, tooltipId, bindingCtx)\r\n                );\r\n                $parentScope.on(\r\n                    'mouseleave',\r\n                    config.trigger,\r\n                    tooltip.checkPreviousTooltip.bind(null, tooltipId)\r\n                );\r\n            } else if (config.action === 'click') {\r\n                $parentScope.on(\r\n                    'click',\r\n                    config.trigger,\r\n                    tooltip.toggleTooltip.bind(null, elem, viewModel, tooltipId, bindingCtx)\r\n                );\r\n            }\r\n\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('tooltip');\r\n});\r\n","Magento_Ui/js/lib/knockout/extender/bound-nodes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global WeakMap */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/utils/wrapper',\r\n    'uiEvents'\r\n], function (ko, _, wrapper, Events) {\r\n    'use strict';\r\n\r\n    var nodesMap = new WeakMap();\r\n\r\n    /**\r\n     * Returns a array of nodes associated with a specified model.\r\n     *\r\n     * @param {Object} model\r\n     * @returns {Undefined|Array}\r\n     */\r\n    function getBounded(model) {\r\n        return nodesMap.get(model);\r\n    }\r\n\r\n    /**\r\n     * Removes specified node to models' associations list, if it's\r\n     * a root node (node is not a descendant of any previously added nodes).\r\n     * Triggers 'addNode' event.\r\n     *\r\n     * @param {Object} model\r\n     * @param {HTMLElement} node\r\n     */\r\n    function addBounded(model, node) {\r\n        var nodes = getBounded(model),\r\n            isRoot;\r\n\r\n        if (!nodes) {\r\n            nodesMap.set(model, [node]);\r\n\r\n            Events.trigger.call(model, 'addNode', node);\r\n\r\n            return;\r\n        }\r\n\r\n        isRoot = nodes.every(function (bounded) {\r\n            return !bounded.contains(node);\r\n        });\r\n\r\n        if (isRoot) {\r\n            nodes.push(node);\r\n\r\n            Events.trigger.call(model, 'addNode', node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes specified node from models' associations list.\r\n     * Triggers 'removeNode' event.\r\n     *\r\n     * @param {Object} model\r\n     * @param {HTMLElement} node\r\n     */\r\n    function removeBounded(model, node) {\r\n        var nodes = getBounded(model),\r\n            index;\r\n\r\n        if (!nodes) {\r\n            return;\r\n        }\r\n\r\n        index = nodes.indexOf(node);\r\n\r\n        if (~index) {\r\n            nodes.splice(index, 0);\r\n\r\n            Events.trigger.call(model, 'removeNode', node);\r\n        }\r\n\r\n        if (!nodes.length) {\r\n            nodesMap.delete(model);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns node's first sibling of 'element' type within the common component scope\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {*} data\r\n     * @returns {HTMLElement}\r\n     */\r\n    function getElement(node, data) {\r\n        var elem;\r\n\r\n        while (node.nextElementSibling) {\r\n            node = node.nextElementSibling;\r\n\r\n            if (node.nodeType === 1 && ko.dataFor(node) === data) {\r\n                elem = node;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    wrapper.extend(ko, {\r\n\r\n        /**\r\n         * Extends knockouts' 'applyBindings'\r\n         * to track nodes associated with model.\r\n         *\r\n         * @param {Function} orig - Original 'applyBindings' method.\r\n         * @param {Object} ctx\r\n         * @param {HTMLElement} node - Original 'applyBindings' method.\r\n         */\r\n        applyBindings: function (orig, ctx, node) {\r\n            var result = orig(),\r\n                data = ctx && (ctx.$data || ctx);\r\n\r\n            if (node && node.nodeType === 8) {\r\n                node = getElement(node, data);\r\n            }\r\n\r\n            if (!node || node.nodeType !== 1) {\r\n                return result;\r\n            }\r\n\r\n            if (data && data.registerNodes) {\r\n                addBounded(data, node);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Extends knockouts' cleanNode\r\n         * to track nodes associated with model.\r\n         *\r\n         * @param {Function} orig - Original 'cleanNode' method.\r\n         * @param {HTMLElement} node - Original 'cleanNode' method.\r\n         */\r\n        cleanNode: function (orig, node) {\r\n            var result = orig(),\r\n                data;\r\n\r\n            if (node.nodeType !== 1) {\r\n                return result;\r\n            }\r\n\r\n            data = ko.dataFor(node);\r\n\r\n            if (data && data.registerNodes) {\r\n                removeBounded(data, node);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return {\r\n\r\n        /**\r\n         * Returns root nodes associated with a model. If callback is provided,\r\n         * will iterate through all of the present nodes triggering callback\r\n         * for each of it. Also it will subscribe to the 'addNode' event.\r\n         *\r\n         * @param {Object} model\r\n         * @param {Function} [callback]\r\n         * @returns {Array|Undefined}\r\n         */\r\n        get: function (model, callback) {\r\n            var nodes = getBounded(model) || [];\r\n\r\n            if (!_.isFunction(callback)) {\r\n                return nodes;\r\n            }\r\n\r\n            nodes.forEach(function (node) {\r\n                callback(node);\r\n            });\r\n\r\n            this.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Subscribes to adding of nodes associated with a model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        add: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            args.unshift('addNode');\r\n\r\n            Events.on.apply(model, args);\r\n        },\r\n\r\n        /**\r\n         * Subscribes to removal of nodes associated with a model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        remove: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            args.unshift('removeNode');\r\n\r\n            Events.on.apply(model, args);\r\n        },\r\n\r\n        /**\r\n         * Removes subscriptions from the model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        off: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            Events.off.apply(model, args);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/extender/observable_array.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore'\r\n], function (ko, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Iterator function.\r\n     *\r\n     * @param {String} callback\r\n     * @param {Array} args\r\n     * @param {Object} elem\r\n     * @returns {*}\r\n     */\r\n    function iterator(callback, args, elem) {\r\n        callback = elem[callback];\r\n\r\n        if (_.isFunction(callback)) {\r\n            return callback.apply(elem, args);\r\n        }\r\n\r\n        return callback;\r\n    }\r\n\r\n    /**\r\n     * Wrapper function.\r\n     *\r\n     * @param {String} method\r\n     * @returns {Function}\r\n     */\r\n    function wrapper(method) {\r\n        return function (iteratee) {\r\n            var callback = iteratee,\r\n                elems = this(),\r\n                args = _.toArray(arguments);\r\n\r\n            if (_.isString(iteratee)) {\r\n                callback = iterator.bind(null, iteratee, args.slice(1));\r\n\r\n                args.unshift(callback);\r\n            }\r\n\r\n            args.unshift(elems);\r\n\r\n            return _[method].apply(_, args);\r\n        };\r\n    }\r\n\r\n    _.extend(ko.observableArray.fn, {\r\n        each: wrapper('each'),\r\n\r\n        map: wrapper('map'),\r\n\r\n        filter: wrapper('filter'),\r\n\r\n        some: wrapper('some'),\r\n\r\n        every: wrapper('every'),\r\n\r\n        groupBy: wrapper('groupBy'),\r\n\r\n        sortBy: wrapper('sortBy'),\r\n\r\n        /**\r\n         * Wrapper for underscore findWhere function.\r\n         *\r\n         * @param {Object} properties\r\n         * @return {Object}\r\n         */\r\n        findWhere: function (properties) {\r\n            return _.findWhere(this(), properties);\r\n        },\r\n\r\n        /**\r\n         * Wrapper for underscore contains function.\r\n         *\r\n         * @param {*} value\r\n         * @return {Boolean}\r\n         */\r\n        contains: function (value) {\r\n            return _.contains(this(), value);\r\n        },\r\n\r\n        /**\r\n         * Inverse contains call.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        hasNo: function () {\r\n            return !this.contains.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Getter for length property.\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getLength: function () {\r\n            return this().length;\r\n        },\r\n\r\n        /**\r\n         * Create object with keys that gets from each object property.\r\n         *\r\n         * @return {Object}\r\n         */\r\n        indexBy: function (key) {\r\n            return _.indexBy(this(), key);\r\n        },\r\n\r\n        /**\r\n         * Returns a copy of the array with all instances of the values removed.\r\n         *\r\n         * @return {Array}\r\n         */\r\n        without: function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n\r\n            args.unshift(this());\r\n\r\n            return _.without.apply(_, args);\r\n        },\r\n\r\n        /**\r\n         * Returns the first element of an array.\r\n         *\r\n         * @return {*}\r\n         */\r\n        first: function () {\r\n            return _.first(this());\r\n        },\r\n\r\n        /**\r\n         * Returns the last element of an array\r\n         *\r\n         * @return {*}\r\n         */\r\n        last: function () {\r\n            return _.last(this());\r\n        },\r\n\r\n        /**\r\n         * Iterate and pick provided properties.\r\n         *\r\n         * @return {Array}\r\n         */\r\n        pluck: function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n\r\n            args.unshift(this());\r\n\r\n            return _.pluck.apply(_, args);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/template/engine.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    './observable_source',\r\n    './renderer',\r\n    '../../logger/console-logger'\r\n], function ($, ko, _, Source, renderer, consoleLogger) {\r\n    'use strict';\r\n\r\n    var RemoteTemplateEngine,\r\n        NativeTemplateEngine = ko.nativeTemplateEngine,\r\n        sources = {};\r\n\r\n    /**\r\n     * Remote template engine class. Is used to be able to load remote templates via knockout template binding.\r\n     */\r\n    RemoteTemplateEngine = function () {\r\n        // Instance reference for closure.\r\n        var engine = this,\r\n        // Decorate the builtin Knockout \"template\" binding to track synchronous template renders.\r\n        origUpdate = ko.bindingHandlers.template.update;\r\n\r\n        /**\r\n         * Counter to track the number of currently running render tasks (both synchronous and asynchronous).\r\n         * @type {Number}\r\n         * @private\r\n         */\r\n        this._rendersOutstanding = 0;\r\n\r\n        /**\r\n         * Use a jQuery object as an event bus (but any event emitter with on/off/emit methods could work)\r\n         * @type {jQuery}\r\n         * @private\r\n         */\r\n        this._events = $(this);\r\n\r\n        /**\r\n         * Rendered templates\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this._templatesRendered = {};\r\n\r\n        /*eslint-disable no-unused-vars*/\r\n        /**\r\n         * Decorate update method\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         * @param {Object} allBindings\r\n         * @param {Object} viewModel\r\n         * @param {ko.bindingContext} bindingContext\r\n         * @returns {*}\r\n         */\r\n        ko.bindingHandlers.template.update = function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            /*eslint-enable no-unused-vars*/\r\n            var options = ko.utils.peekObservable(valueAccessor()),\r\n                templateName,\r\n                isSync,\r\n                updated;\r\n\r\n            if (typeof options === 'object') {\r\n                if (options.templateEngine && options.templateEngine !== engine) {\r\n                    return origUpdate.apply(this, arguments);\r\n                }\r\n\r\n                if (!options.name) {\r\n                    consoleLogger.error('Could not find template name', options);\r\n                }\r\n                templateName = options.name;\r\n            } else if (typeof options === 'string') {\r\n                templateName = options;\r\n            } else {\r\n                consoleLogger.error('Could not build a template binding', options);\r\n            }\r\n            engine._trackRender(templateName);\r\n            isSync = engine._hasTemplateLoaded(templateName);\r\n            updated = origUpdate.apply(this, arguments);\r\n\r\n            if (isSync) {\r\n                engine._releaseRender(templateName, 'sync');\r\n            }\r\n\r\n            return updated;\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Creates unique template identifier based on template name and it's extenders (optional)\r\n     * @param  {String} templateName\r\n     * @return {String} - unique template identifier\r\n     */\r\n    function createTemplateIdentifier(templateName) {\r\n        return templateName;\r\n    }\r\n\r\n    RemoteTemplateEngine.prototype = new NativeTemplateEngine;\r\n    RemoteTemplateEngine.prototype.constructor = RemoteTemplateEngine;\r\n\r\n    /**\r\n     * When an asynchronous render task begins, increment the internal counter for tracking when renders are complete.\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._trackRender = function (templateName) {\r\n        var rendersForTemplate = this._templatesRendered[templateName] !== undefined ?\r\n            this._templatesRendered[templateName] : 0;\r\n\r\n        this._rendersOutstanding++;\r\n        this._templatesRendered[templateName] = rendersForTemplate + 1;\r\n        this._resolveRenderWaits();\r\n    };\r\n\r\n    /**\r\n     * When an asynchronous render task ends, decrement the internal counter for tracking when renders are complete.\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._releaseRender = function (templateName) {\r\n        var rendersForTemplate = this._templatesRendered[templateName];\r\n\r\n        this._rendersOutstanding--;\r\n        this._templatesRendered[templateName] = rendersForTemplate - 1;\r\n        this._resolveRenderWaits();\r\n    };\r\n\r\n    /**\r\n     * Check to see if renders are complete and trigger events for listeners.\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._resolveRenderWaits = function () {\r\n        if (this._rendersOutstanding === 0) {\r\n            this._events.triggerHandler('finishrender');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get a promise for the end of the current run of renders, both sync and async.\r\n     * @return {jQueryPromise} - promise that resolves when render completes\r\n     */\r\n    RemoteTemplateEngine.prototype.waitForFinishRender = function () {\r\n        var defer = $.Deferred();\r\n\r\n        this._events.one('finishrender', defer.resolve);\r\n\r\n        return defer.promise();\r\n    };\r\n\r\n    /**\r\n     * Returns true if this template has already been asynchronously loaded and will be synchronously rendered.\r\n     * @param {String} templateName\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._hasTemplateLoaded = function (templateName) {\r\n        // Sources object will have cached template once makeTemplateSource has run\r\n        return sources.hasOwnProperty(templateName);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Caches template after it's unique name and renders in once.\r\n     * If template name is not typeof string, delegates work to knockout.templateSources.anonymousTemplate.\r\n     * @param  {*} template\r\n     * @param  {HTMLElement} templateDocument - document\r\n     * @param  {Object} options - options, passed to template binding\r\n     * @param  {ko.bindingContext} bindingContext\r\n     * @returns {TemplateSource} Object with methods 'nodes' and 'data'.\r\n     */\r\n    RemoteTemplateEngine.prototype.makeTemplateSource = function (template, templateDocument, options, bindingContext) {\r\n        var engine = this,\r\n            source,\r\n            templateId;\r\n\r\n        if (typeof template === 'string') {\r\n            templateId = createTemplateIdentifier(template);\r\n            source = sources[templateId];\r\n\r\n            if (!source) {\r\n                source = new Source(template);\r\n                source.requestedBy = bindingContext.$data.name;\r\n                sources[templateId] = source;\r\n\r\n                consoleLogger.info('templateStartLoading', {\r\n                    template: templateId,\r\n                    component: bindingContext.$data.name\r\n                });\r\n\r\n                renderer.render(template).then(function (rendered) {\r\n                    consoleLogger.info('templateLoadedFromServer', {\r\n                        template: templateId,\r\n                        component: bindingContext.$data.name\r\n                    });\r\n                    source.nodes(rendered);\r\n                    engine._releaseRender(templateId, 'async');\r\n                }).fail(function () {\r\n                    consoleLogger.error('templateLoadingFail', {\r\n                        template: templateId,\r\n                        component: bindingContext.$data.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            if (source.requestedBy !== bindingContext.$data.name) {\r\n                consoleLogger.info('templateLoadedFromCache', {\r\n                    template: templateId,\r\n                    component: bindingContext.$data.name\r\n                });\r\n            }\r\n\r\n            return source;\r\n        } else if (template.nodeType === 1 || template.nodeType === 8) {\r\n            source = new ko.templateSources.anonymousTemplate(template);\r\n\r\n            return source;\r\n        }\r\n\r\n        throw new Error('Unknown template type: ' + template);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Should return array of html elements.\r\n     * @param  {TemplateSource} templateSource - object with methods 'nodes' and 'data'.\r\n     * @return {Array} - array of html elements\r\n     */\r\n    RemoteTemplateEngine.prototype.renderTemplateSource = function (templateSource) {\r\n        var nodes = templateSource.nodes();\r\n\r\n        return ko.utils.cloneNodes(nodes);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Created in order to invoke makeTemplateSource method with custom set of params.\r\n     * @param  {*} template - template identifier\r\n     * @param  {ko.bindingContext} bindingContext\r\n     * @param  {Object} options - options, passed to template binding\r\n     * @param  {HTMLElement} templateDocument - document\r\n     * @return {Array} - array of html elements\r\n     */\r\n    RemoteTemplateEngine.prototype.renderTemplate = function (template, bindingContext, options, templateDocument) {\r\n        var templateSource = this.makeTemplateSource(template, templateDocument, options, bindingContext);\r\n\r\n        return this.renderTemplateSource(templateSource);\r\n    };\r\n\r\n    return new RemoteTemplateEngine;\r\n});\r\n","Magento_Ui/js/lib/knockout/template/loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var licenseRegExp   = /<!--[\\s\\S]*?-->/,\r\n        defaultPlugin   = 'text',\r\n        defaultExt      = 'html';\r\n\r\n    /**\r\n     * Checks of provided string contains a file extension.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasFileExtension(str) {\r\n        return !!~str.indexOf('.') && !!str.split('.').pop();\r\n    }\r\n\r\n    /**\r\n     * Checks if provided string contains a requirejs's plugin reference.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasPlugin(str) {\r\n        return !!~str.indexOf('!');\r\n    }\r\n\r\n    /**\r\n     * Checks if provided string is a full path to the file.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isFullPath(str) {\r\n        return !!~str.indexOf('://');\r\n    }\r\n\r\n    /**\r\n     * Removes license comment from the provided string.\r\n     *\r\n     * @param {String} content - String to be processed.\r\n     * @returns {String}\r\n     */\r\n    function removeLicense(content) {\r\n        return content.replace(licenseRegExp, function (match) {\r\n            return ~match.indexOf('/**') ? '' : match;\r\n        });\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to extract template by provided path from\r\n         * a DOM element and falls back to a file loading if\r\n         * none of the DOM nodes was found.\r\n         *\r\n         * @param {String} path - Path to the template or a DOM selector.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        loadTemplate: function (path) {\r\n            var content = this.loadFromNode(path),\r\n                defer;\r\n\r\n            if (content) {\r\n                defer = $.Deferred();\r\n\r\n                defer.resolve(content);\r\n\r\n                return defer.promise();\r\n            }\r\n\r\n            return this.loadFromFile(path);\r\n        },\r\n\r\n        /**\r\n         * Loads template from external file by provided\r\n         * path, which will be preliminary formatted.\r\n         *\r\n         * @param {String} path - Path to the template.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        loadFromFile: function (path) {\r\n            var loading = $.Deferred();\r\n\r\n            path = this.formatPath(path);\r\n\r\n            require([path], function (template) {\r\n                template = removeLicense(template);\r\n                loading.resolve(template);\r\n            }, function (err) {\r\n                loading.reject(err);\r\n            });\r\n\r\n            return loading.promise();\r\n        },\r\n\r\n        /**\r\n         * Attempts to extract content of a node found by provided selector.\r\n         *\r\n         * @param {String} selector - Node's selector (not necessary valid).\r\n         * @returns {String|Boolean} If specified node doesn't exists\r\n         *      'false' will be returned, otherwise returns node's content.\r\n         */\r\n        loadFromNode: function (selector) {\r\n            var node;\r\n\r\n            try {\r\n                node =\r\n                    document.getElementById(selector) ||\r\n                    document.querySelector(selector);\r\n\r\n                return node ? node.innerHTML : false;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Adds requirejs's plugin and file extension to\r\n         * to the provided string if it's necessary.\r\n         *\r\n         * @param {String} path - Path to be processed.\r\n         * @returns {String} Formatted path.\r\n         */\r\n        formatPath: function (path) {\r\n            var result = path;\r\n\r\n            if (!hasPlugin(path)) {\r\n                result = defaultPlugin + '!' + result;\r\n            }\r\n\r\n            if (isFullPath(path)) {\r\n                return result;\r\n            }\r\n\r\n            if (!hasFileExtension(path)) {\r\n                result += '.' + defaultExt;\r\n            }\r\n\r\n            return result.replace(/^([^\\/]+)/g, '$1/template');\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/template/observable_source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * Is being used by knockout template engine to store template to.\r\n */\r\ndefine([\r\n    'ko',\r\n    'uiClass'\r\n], function (ko, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Initializes templateName, _data, nodes properties.\r\n         *\r\n         * @param  {template} template - identifier of template\r\n         */\r\n        initialize: function (template) {\r\n            this.templateName = template;\r\n            this._data = {};\r\n            this.nodes = ko.observable([]);\r\n        },\r\n\r\n        /**\r\n         * Data setter. If only one arguments passed, returns corresponding value.\r\n         * Else, writes into it.\r\n         * @param  {String} key - key to write to or to read from\r\n         * @param  {*} value\r\n         * @return {*} - if 1 arg provided, Returns _data[key] property\r\n         */\r\n        data: function (key, value) {\r\n            if (arguments.length === 1) {\r\n                return this._data[key];\r\n            }\r\n\r\n            this._data[key] = value;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/template/renderer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    './loader'\r\n], function ($, _, loader) {\r\n    'use strict';\r\n\r\n    var colonReg       = /\\\\:/g,\r\n        renderedTemplatePromises = {},\r\n        attributes     = {},\r\n        elements       = {},\r\n        globals        = [],\r\n        renderer,\r\n        preset;\r\n\r\n    renderer = {\r\n\r\n        /**\r\n         * Loads template by provided path and\r\n         * than converts it's content to html.\r\n         *\r\n         * @param {String} tmplPath - Path to the template.\r\n         * @returns {jQueryPromise}\r\n         * @alias getRendered\r\n         */\r\n        render: function (tmplPath) {\r\n            var cachedPromise = renderedTemplatePromises[tmplPath];\r\n\r\n            if (!cachedPromise) {\r\n                cachedPromise = renderedTemplatePromises[tmplPath] = loader\r\n                    .loadTemplate(tmplPath)\r\n                    .then(renderer.parseTemplate);\r\n            }\r\n\r\n            return cachedPromise;\r\n        },\r\n\r\n        /**\r\n         * @ignore\r\n         */\r\n        getRendered: function (tmplPath) {\r\n            return renderer.render(tmplPath);\r\n        },\r\n\r\n        /**\r\n         * Parses provided string as html content\r\n         * and returns an array of DOM elements.\r\n         *\r\n         * @param {String} html - String to be processed.\r\n         * @returns {Array}\r\n         */\r\n        parseTemplate: function (html) {\r\n            var fragment = document.createDocumentFragment();\r\n\r\n            $(fragment).append(html);\r\n\r\n            return renderer.normalize(fragment);\r\n        },\r\n\r\n        /**\r\n         * Processes custom attributes and nodes of provided DOM element.\r\n         *\r\n         * @param {HTMLElement} content - Element to be processed.\r\n         * @returns {Array} An array of content's child nodes.\r\n         */\r\n        normalize: function (content) {\r\n            globals.forEach(function (handler) {\r\n                handler(content);\r\n            });\r\n\r\n            return _.toArray(content.childNodes);\r\n        },\r\n\r\n        /**\r\n         * Adds new global content handler.\r\n         *\r\n         * @param {Function} handler - Function which will be invoked for\r\n         *      an every content passed to 'normalize' method.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addGlobal: function (handler) {\r\n            if (!_.contains(globals, handler)) {\r\n                globals.push(handler);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified global content handler.\r\n         *\r\n         * @param {Function} handler - Handler to be removed.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeGlobal: function (handler) {\r\n            var index = globals.indexOf(handler);\r\n\r\n            if (~index) {\r\n                globals.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds new custom attribute handler.\r\n         *\r\n         * @param {String} id - Attribute identifier.\r\n         * @param {(Object|Function)} [config={}]\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addAttribute: function (id, config) {\r\n            var data = {\r\n                name: id,\r\n                binding: id,\r\n                handler: renderer.handlers.attribute\r\n            };\r\n\r\n            if (_.isFunction(config)) {\r\n                data.handler = config;\r\n            } else if (_.isObject(config)) {\r\n                _.extend(data, config);\r\n            }\r\n\r\n            data.id = id;\r\n            attributes[id] = data;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified attribute handler.\r\n         *\r\n         * @param {String} id - Attribute identifier.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeAttribute: function (id) {\r\n            delete attributes[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds new custom node handler.\r\n         *\r\n         * @param {String} id - Node identifier.\r\n         * @param {(Object|Function)} [config={}]\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addNode: function (id, config) {\r\n            var data = {\r\n                name: id,\r\n                binding: id,\r\n                handler: renderer.handlers.node\r\n            };\r\n\r\n            if (_.isFunction(config)) {\r\n                data.handler = config;\r\n            } else if (_.isObject(config)) {\r\n                _.extend(data, config);\r\n            }\r\n\r\n            data.id = id;\r\n            elements[id] = data;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified custom node handler.\r\n         *\r\n         * @param {String} id - Node identifier.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeNode: function (id) {\r\n            delete elements[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided DOM element is a custom node.\r\n         *\r\n         * @param {HTMLElement} node - Node to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomNode: function (node) {\r\n            return _.some(elements, function (elem) {\r\n                return elem.name.toUpperCase() === node.tagName;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Processes custom attributes of a content's child nodes.\r\n         *\r\n         * @param {HTMLElement} content - DOM element to be processed.\r\n         */\r\n        processAttributes: function (content) {\r\n            var repeat;\r\n\r\n            repeat = _.some(attributes, function (attr) {\r\n                var attrName = attr.name,\r\n                    nodes    = content.querySelectorAll('[' + attrName + ']'),\r\n                    handler  = attr.handler;\r\n\r\n                return _.toArray(nodes).some(function (node) {\r\n                    var data = node.getAttribute(attrName);\r\n\r\n                    return handler(node, data, attr) === true;\r\n                });\r\n            });\r\n\r\n            if (repeat) {\r\n                renderer.processAttributes(content);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Processes custom nodes of a provided content.\r\n         *\r\n         * @param {HTMLElement} content - DOM element to be processed.\r\n         */\r\n        processNodes: function (content) {\r\n            var repeat;\r\n\r\n            repeat = _.some(elements, function (element) {\r\n                var nodes   = content.querySelectorAll(element.name),\r\n                    handler = element.handler;\r\n\r\n                return _.toArray(nodes).some(function (node) {\r\n                    var data = node.getAttribute('args');\r\n\r\n                    return handler(node, data, element) === true;\r\n                });\r\n            });\r\n\r\n            if (repeat) {\r\n                renderer.processNodes(content);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wraps provided string in curly braces if it's necessary.\r\n         *\r\n         * @param {String} args - String to be wrapped.\r\n         * @returns {String} Wrapped string.\r\n         */\r\n        wrapArgs: function (args) {\r\n            if (~args.indexOf('\\\\:')) {\r\n                args = args.replace(colonReg, ':');\r\n            } else if (~args.indexOf(':') && !~args.indexOf('}')) {\r\n                args = '{' + args + '}';\r\n            }\r\n\r\n            return args;\r\n        },\r\n\r\n        /**\r\n         * Wraps child nodes of provided DOM element\r\n         * with knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node whose children should be wrapped.\r\n         * @param {String} binding - Name of the binding for the opener comment tag.\r\n         * @param {String} data - Data associated with a binding.\r\n         *\r\n         * @example\r\n         *      <div id=\"example\"><span/></div>\r\n         *      wrapChildren(document.getElementById('example'), 'foreach', 'data');\r\n         *      =>\r\n         *      <div id=\"example\">\r\n         *      <!-- ko foreach: data -->\r\n         *          <span></span>\r\n         *      <!-- /ko -->\r\n         *      </div>\r\n         */\r\n        wrapChildren: function (node, binding, data) {\r\n            var tag = this.createComment(binding, data),\r\n                $node = $(node);\r\n\r\n            $node.prepend(tag.open);\r\n            $node.append(tag.close);\r\n        },\r\n\r\n        /**\r\n         * Wraps specified node with knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node to be wrapped.\r\n         * @param {String} binding - Name of the binding for the opener comment tag.\r\n         * @param {String} data - Data associated with a binding.\r\n         *\r\n         * @example\r\n         *      <div id=\"example\"></div>\r\n         *      wrapNode(document.getElementById('example'), 'foreach', 'data');\r\n         *      =>\r\n         *      <!-- ko foreach: data -->\r\n         *          <div id=\"example\"></div>\r\n         *      <!-- /ko -->\r\n         */\r\n        wrapNode: function (node, binding, data) {\r\n            var tag = this.createComment(binding, data),\r\n                $node = $(node);\r\n\r\n            $node.before(tag.open);\r\n            $node.after(tag.close);\r\n        },\r\n\r\n        /**\r\n         * Creates knockouts' comment tag for the provided binding.\r\n         *\r\n         * @param {String} binding - Name of the binding.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @returns {Object} Object with an open and close comment elements.\r\n         */\r\n        createComment: function (binding, data) {\r\n            return {\r\n                open: document.createComment(' ko ' + binding + ': ' + data + ' '),\r\n                close: document.createComment(' /ko ')\r\n            };\r\n        }\r\n    };\r\n\r\n    renderer.handlers = {\r\n\r\n        /**\r\n         * Basic node handler. Replaces custom nodes\r\n         * with a corresponding knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node to be processed.\r\n         * @param {String} data\r\n         * @param {Object} element\r\n         * @returns {Boolean} True\r\n         *\r\n         * @example Sample syntaxes conversions.\r\n         *      <with args=\"model\">\r\n         *          <span/>\r\n         *      </with>\r\n         *      =>\r\n         *      <!-- ko with: model-->\r\n         *          <span/>\r\n         *      <!-- /ko -->\r\n         */\r\n        node: function (node, data, element) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, element.binding, data);\r\n            $(node).replaceWith(node.childNodes);\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Base attribute handler. Replaces custom attributes with\r\n         * a corresponding knockouts' data binding.\r\n         *\r\n         * @param {HTMLElement} node - Node to be processed.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @param {Object} attr - Attribute definition.\r\n         *\r\n         * @example Sample syntaxes conversions.\r\n         *      <div text=\"label\"></div>\r\n         *      =>\r\n         *      <div data-bind=\"text: label\"></div>\r\n         */\r\n        attribute: function (node, data, attr) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.bindings.add(node, attr.binding, data);\r\n            node.removeAttribute(attr.name);\r\n        },\r\n\r\n        /**\r\n         * Wraps provided node with a knockouts' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node that will be wrapped.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @param {Object} attr - Attribute definition.\r\n         *\r\n         * @example\r\n         *      <div outereach=\"data\" class=\"test\"></div>\r\n         *      =>\r\n         *      <!-- ko foreach: data -->\r\n         *          <div class=\"test\"></div>\r\n         *      <!-- /ko -->\r\n         */\r\n        wrapAttribute: function (node, data, attr) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, attr.binding, data);\r\n            node.removeAttribute(attr.name);\r\n        }\r\n    };\r\n\r\n    renderer.bindings = {\r\n\r\n        /**\r\n         * Appends binding string to the current\r\n         * 'data-bind' attribute of provided node.\r\n         *\r\n         * @param {HTMLElement} node - DOM element whose 'data-bind' attribute will be extended.\r\n         * @param {String} name - Name of a binding.\r\n         * @param {String} data - Data associated with the binding.\r\n         */\r\n        add: function (node, name, data) {\r\n            var bindings = this.get(node);\r\n\r\n            if (bindings) {\r\n                bindings += ', ';\r\n            }\r\n\r\n            bindings += name;\r\n\r\n            if (data) {\r\n                bindings += ': ' + data;\r\n            }\r\n\r\n            this.set(node, bindings);\r\n        },\r\n\r\n        /**\r\n         * Extracts value of a 'data-bind' attribute from provided node.\r\n         *\r\n         * @param {HTMLElement} node - Node whose attribute to be extracted.\r\n         * @returns {String}\r\n         */\r\n        get: function (node) {\r\n            return node.getAttribute('data-bind') || '';\r\n        },\r\n\r\n        /**\r\n         * Sets 'data-bind' attribute of the specified node\r\n         * to the provided value.\r\n         *\r\n         * @param {HTMLElement} node - Node whose attribute will be altered.\r\n         * @param {String} bindings - New value of 'data-bind' attribute.\r\n         */\r\n        set: function (node, bindings) {\r\n            node.setAttribute('data-bind', bindings);\r\n        }\r\n    };\r\n\r\n    renderer\r\n        .addGlobal(renderer.processAttributes)\r\n        .addGlobal(renderer.processNodes);\r\n\r\n    /**\r\n     * Collection of default binding conversions.\r\n     */\r\n    preset = {\r\n        nodes: _.object([\r\n            'if',\r\n            'text',\r\n            'with',\r\n            'scope',\r\n            'ifnot',\r\n            'foreach',\r\n            'component'\r\n        ], Array.prototype),\r\n        attributes: _.object([\r\n            'css',\r\n            'attr',\r\n            'html',\r\n            'with',\r\n            'text',\r\n            'click',\r\n            'event',\r\n            'submit',\r\n            'enable',\r\n            'disable',\r\n            'options',\r\n            'visible',\r\n            'template',\r\n            'hasFocus',\r\n            'textInput',\r\n            'component',\r\n            'uniqueName',\r\n            'optionsText',\r\n            'optionsValue',\r\n            'checkedValue',\r\n            'selectedOptions'\r\n        ], Array.prototype)\r\n    };\r\n\r\n    _.extend(preset.attributes, {\r\n        if: renderer.handlers.wrapAttribute,\r\n        ifnot: renderer.handlers.wrapAttribute,\r\n        innerif: {\r\n            binding: 'if'\r\n        },\r\n        innerifnot: {\r\n            binding: 'ifnot'\r\n        },\r\n        outereach: {\r\n            binding: 'foreach',\r\n            handler: renderer.handlers.wrapAttribute\r\n        },\r\n        foreach: {\r\n            name: 'each'\r\n        },\r\n        value: {\r\n            name: 'ko-value'\r\n        },\r\n        style: {\r\n            name: 'ko-style'\r\n        },\r\n        checked: {\r\n            name: 'ko-checked'\r\n        },\r\n        disabled: {\r\n            name: 'ko-disabled',\r\n            binding: 'disable'\r\n        },\r\n        focused: {\r\n            name: 'ko-focused',\r\n            binding: 'hasFocus'\r\n        },\r\n\r\n        /**\r\n         * Custom 'render' attribute handler function. Wraps child elements\r\n         * of a node with knockout's 'ko template:' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Element to be processed.\r\n         * @param {String} data - Data specified in 'render' attribute of a node.\r\n         */\r\n        render: function (node, data) {\r\n            data = data || 'getTemplate()';\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapChildren(node, 'template', data);\r\n            node.removeAttribute('render');\r\n        }\r\n    });\r\n\r\n    _.extend(preset.nodes, {\r\n        foreach: {\r\n            name: 'each'\r\n        },\r\n\r\n        /**\r\n         * Custom 'render' node handler function.\r\n         * Replaces node with knockout's 'ko template:' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Element to be processed.\r\n         * @param {String} data - Data specified in 'args' attribute of a node.\r\n         */\r\n        render: function (node, data) {\r\n            data = data || 'getTemplate()';\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, 'template', data);\r\n            $(node).replaceWith(node.childNodes);\r\n        }\r\n    });\r\n\r\n    _.each(preset.attributes, function (data, id) {\r\n        renderer.addAttribute(id, data);\r\n    });\r\n\r\n    _.each(preset.nodes, function (data, id) {\r\n        renderer.addNode(id, data);\r\n    });\r\n\r\n    return renderer;\r\n});\r\n","Magento_Ui/js/lib/logger/console-logger.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './logger',\r\n    './entry-factory',\r\n    './console-output-handler',\r\n    './formatter',\r\n    './message-pool',\r\n    './levels-pool',\r\n    'Magento_Ui/js/lib/core/storage/local',\r\n    'underscore',\r\n    './logger-utils'\r\n], function (Logger, entryFactory, ConsoleHandler, Formatter, messagePoll, levelsPoll, storage, _, LoggerUtils) {\r\n    'use strict';\r\n\r\n    var STORAGE_NAMESPACE = 'CONSOLE_LOGGER';\r\n\r\n    /**\r\n     * Singleton Logger's sub-class instance of which is configured to display its\r\n     * messages to the console. It also provides the support of predefined messages\r\n     * and persists its display level.\r\n     */\r\n    function ConsoleLogger() {\r\n        var formatter = new Formatter(),\r\n            consoleHandler = new ConsoleHandler(formatter),\r\n            savedLevel = storage.get(STORAGE_NAMESPACE),\r\n            utils = new LoggerUtils(this);\r\n\r\n        Logger.call(this, consoleHandler, entryFactory);\r\n\r\n        if (savedLevel) {\r\n            this.displayLevel_ = savedLevel;\r\n        }\r\n\r\n        this.utils = utils;\r\n        this.messages = messagePoll;\r\n        this.levels = levelsPoll.getLevels();\r\n    }\r\n\r\n    _.extend(ConsoleLogger, Logger);\r\n\r\n    ConsoleLogger.prototype = Object.create(Logger.prototype);\r\n    ConsoleLogger.prototype.constructor = ConsoleLogger;\r\n\r\n    /**\r\n     * Overrides parent method to save the provided display level.\r\n     *\r\n     * @override\r\n     */\r\n    ConsoleLogger.prototype.setDisplayLevel = function (level) {\r\n        Logger.prototype.setDisplayLevel.call(this, level);\r\n\r\n        storage.set(STORAGE_NAMESPACE, level);\r\n    };\r\n\r\n    /**\r\n     * Adds the support of predefined messages.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    ConsoleLogger.prototype.createEntry_ = function (message, level, data) {\r\n        var code;\r\n\r\n        if (messagePoll.hasMessage(message)) {\r\n            data = data || {};\r\n            code = message;\r\n            message = messagePoll.getMessage(code);\r\n\r\n            data.messageCode = code;\r\n        }\r\n\r\n        return Logger.prototype.createEntry_.call(this, message, level, data);\r\n    };\r\n\r\n    return new ConsoleLogger();\r\n});\r\n","Magento_Ui/js/lib/logger/console-output-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './levels-pool'\r\n], function (logLevels) {\r\n    'use strict';\r\n\r\n    var levels = logLevels.getLevels();\r\n\r\n    /**\r\n     * @param {LogFormatter} formatter\r\n     */\r\n    function ConsoleOutputHandler(formatter) {\r\n        /**\r\n         * @protected\r\n         * @type {LogFormatter}\r\n         */\r\n        this.formatter_ = formatter;\r\n    }\r\n\r\n    /**\r\n     * Display data of the provided entry to the console.\r\n     *\r\n     * @param {LogEntry} entry - Entry to be displayed.\r\n     */\r\n    ConsoleOutputHandler.prototype.show = function (entry) {\r\n        var displayString = this.formatter_.process(entry);\r\n\r\n        switch (entry.level) {\r\n            case levels.ERROR:\r\n                console.error(displayString);\r\n                break;\r\n\r\n            case levels.WARN:\r\n                console.warn(displayString);\r\n                break;\r\n\r\n            case levels.INFO:\r\n                console.info(displayString);\r\n                break;\r\n\r\n            case levels.DEBUG:\r\n                console.log(displayString);\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Displays the array of entries.\r\n     *\r\n     * @param {Array<LogEntry>} entries\r\n     */\r\n    ConsoleOutputHandler.prototype.dump = function (entries) {\r\n        entries.forEach(this.show, this);\r\n    };\r\n\r\n    return ConsoleOutputHandler;\r\n});\r\n","Magento_Ui/js/lib/logger/entry-factory.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './entry'\r\n], function (LogEntry) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * @param {String} message\r\n         * @param {Number} level\r\n         * @param {Object} [messageData]\r\n         * @returns {LogEntry}\r\n         */\r\n        createEntry: function (message, level, messageData) {\r\n            return new LogEntry(message, level, messageData);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/logger/entry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './levels-pool'\r\n], function (logLevels) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Number} level\r\n     * @param {Object} [data]\r\n     */\r\n    function LogEntry(message, level, data) {\r\n        /**\r\n         * @readonly\r\n         * @type {Number}\r\n         */\r\n        this.timestamp = Date.now();\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {Number}\r\n         */\r\n        this.level = level;\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {String}\r\n         */\r\n        this.levelName = logLevels.getNameByCode(level);\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {Object}\r\n         */\r\n        this.data = data;\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {String}\r\n         */\r\n        this.message = message;\r\n    }\r\n\r\n    return LogEntry;\r\n});\r\n","Magento_Ui/js/lib/logger/formatter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'moment',\r\n    'mage/utils/template'\r\n], function (moment, mageTemplate) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} dateFormat\r\n     * @param {String} template\r\n     */\r\n    function LogFormatter(dateFormat, template) {\r\n        /**\r\n         * @protected\r\n         * @type {String}\r\n         */\r\n        this.dateFormat_ = 'YYYY-MM-DD hh:mm:ss';\r\n\r\n        /**\r\n         * @protected\r\n         * @type {String}\r\n         */\r\n        this.template_ = '[${ $.date }] [${ $.entry.levelName }] ${ $.message }';\r\n\r\n        if (dateFormat) {\r\n            this.dateFormat_ = dateFormat;\r\n        }\r\n\r\n        if (template) {\r\n            this.template_ = template;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {LogEntry} entry\r\n     * @returns {String}\r\n     */\r\n    LogFormatter.prototype.process = function (entry) {\r\n        var message = mageTemplate.template(entry.message, entry.data),\r\n            date = moment(entry.timestamp).format(this.dateFormat_);\r\n\r\n        return mageTemplate.template(this.template_, {\r\n            date: date,\r\n            entry: entry,\r\n            message: message\r\n        });\r\n    };\r\n\r\n    return LogFormatter;\r\n});\r\n","Magento_Ui/js/lib/logger/levels-pool.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var LEVELS,\r\n        CODE_MAP;\r\n\r\n    LEVELS = {\r\n        NONE: 0,\r\n        ERROR: 1,\r\n        WARN: 2,\r\n        INFO: 3,\r\n        DEBUG: 4,\r\n        ALL: 5\r\n    };\r\n\r\n    CODE_MAP = _.invert(LEVELS);\r\n\r\n    return {\r\n        /**\r\n         * Returns the list of available log levels.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getLevels: function () {\r\n            return LEVELS;\r\n        },\r\n\r\n        /**\r\n         * Returns name of the log level that matches to the provided code.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getNameByCode: function (code) {\r\n            return CODE_MAP[code];\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/logger/logger-utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Utils methods for logger\r\n     * @param {Logger} logger\r\n     */\r\n    function LogUtils(logger) {\r\n        this.logger = logger;\r\n\r\n    }\r\n\r\n    /**\r\n     * Method for logging asynchronous operations\r\n     * @param {Promise} promise\r\n     * @param {Object} config\r\n     */\r\n    LogUtils.prototype.asyncLog = function (promise, config) {\r\n        var levels,\r\n            messages,\r\n            wait;\r\n\r\n        config = config || {};\r\n        levels = config.levels || this.createLevels();\r\n        messages = config.messages || this.createMessages();\r\n        wait = config.wait || 5000;\r\n\r\n        this.logger[levels.requested](messages.requested, config.data);\r\n        setTimeout(function () {\r\n            promise.state() === 'pending' ?\r\n                this.logger[levels.failed](messages.failed, config.data) :\r\n                this.logger[levels.loaded](messages.loaded, config.data);\r\n        }.bind(this), wait);\r\n    };\r\n\r\n    /**\r\n     * Method that creates object of messages\r\n     * @param {String} requested - log message that showing that request for class is started\r\n     * @param {String} loaded - log message that show when requested class is loaded\r\n     * @param {String} failed - log message that show when requested class is failed\r\n     * @returns {Object}\r\n     */\r\n    LogUtils.prototype.createMessages = function (requested, loaded, failed) {\r\n        return {\r\n            requested: requested || '',\r\n            loaded: loaded || '',\r\n            failed: failed || ''\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Method that creates object of log levels\r\n     * @param {String} requested - log message that showing that request for class is started\r\n     * @param {String} loaded - log message that show when requested class is loaded\r\n     * @param {String} failed - log message that show when requested class is failed\r\n     * @returns {Object}\r\n     */\r\n    LogUtils.prototype.createLevels = function (requested, loaded, failed) {\r\n        return {\r\n            requested: requested || 'info',\r\n            loaded: loaded || 'info',\r\n            failed: failed || 'warn'\r\n        };\r\n    };\r\n\r\n    return LogUtils;\r\n});\r\n","Magento_Ui/js/lib/logger/logger.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './levels-pool'\r\n], function (logLevels) {\r\n    'use strict';\r\n\r\n    var levels = logLevels.getLevels();\r\n\r\n    /**\r\n     * @param {LogOutputHandler} outputHandler\r\n     * @param {LogEntryFactory} entryFactory\r\n     */\r\n    function Logger(outputHandler, entryFactory) {\r\n        /**\r\n         * An array of log entries.\r\n         *\r\n         * @protected\r\n         * @type {Array<LogEntry>}\r\n         */\r\n        this.entries_ = [];\r\n\r\n        /**\r\n         * Current display level.\r\n         *\r\n         * @protected\r\n         * @type {Number}\r\n         */\r\n        this.displayLevel_ = levels.ERROR;\r\n\r\n        /**\r\n         * An array of display criteria.\r\n         *\r\n         * @protected\r\n         * @type {Array<LogCriteria>}\r\n         */\r\n        this.displayCriteria_ = [];\r\n\r\n        /**\r\n         * @protected\r\n         * @type {LogEntryFactory}\r\n         */\r\n        this.entryFactory_ = entryFactory;\r\n\r\n        /**\r\n         * @protected\r\n         * @type {Array<LogOutputHandler>}\r\n         */\r\n        this.outputHandlers_ = [outputHandler];\r\n\r\n        this.addDisplayCriteria(this.matchesLevel_);\r\n    }\r\n\r\n    /**\r\n     * Swaps current display level with the provided one.\r\n     *\r\n     * @param {Number} level - Level's code.\r\n     */\r\n    Logger.prototype.setDisplayLevel = function (level) {\r\n        var levelName = logLevels.getNameByCode(level);\r\n\r\n        if (!levelName) {\r\n            throw new TypeError('The provided level is not defined in the levels list.');\r\n        }\r\n\r\n        this.displayLevel_ = level;\r\n    };\r\n\r\n    /**\r\n     * Sets up the criteria by which log entries will be filtered out from the output.\r\n     *\r\n     * @param {LogCriteria} criteria\r\n     */\r\n    Logger.prototype.addDisplayCriteria = function (criteria) {\r\n        this.displayCriteria_.push(criteria);\r\n    };\r\n\r\n    /**\r\n     * Removes previously defined criteria.\r\n     *\r\n     * @param {LogCriteria} criteria\r\n     */\r\n    Logger.prototype.removeDisplayCriteria = function (criteria) {\r\n        var index = this.displayCriteria_.indexOf(criteria);\r\n\r\n        if (~index) {\r\n            this.displayCriteria_.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.error = function (message, messageData) {\r\n        return this.log_(message, levels.ERROR, messageData);\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.warn = function (message, messageData) {\r\n        return this.log_(message, levels.WARN, messageData);\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.info = function (message, messageData) {\r\n        return this.log_(message, levels.INFO, messageData);\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.debug = function (message, messageData) {\r\n        return this.log_(message, levels.DEBUG, messageData);\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {String} message\r\n     * @param {Number} level\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.log_ = function (message, level, messageData) {\r\n        var entry = this.createEntry_(message, level, messageData);\r\n\r\n        this.entries_.push(entry);\r\n\r\n        if (this.matchesCriteria_(entry)) {\r\n            this.processOutput_(entry);\r\n        }\r\n\r\n        return entry;\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {String} message\r\n     * @param {Number} level\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.createEntry_ = function (message, level, messageData) {\r\n        return this.entryFactory_.createEntry(message, level, messageData);\r\n    };\r\n\r\n    /**\r\n     * Returns an array of log entries that have been added to the logger.\r\n     *\r\n     * @param {LogCriteria} [criteria] - Optional filter criteria.\r\n     * @returns {Array<LogEntry>}\r\n     */\r\n    Logger.prototype.getEntries = function (criteria) {\r\n        if (criteria) {\r\n            return this.entries_.filter(criteria);\r\n        }\r\n\r\n        return this.entries_;\r\n    };\r\n\r\n    /**\r\n     * @param {LogCriteria} [criteria]\r\n     */\r\n    Logger.prototype.dump = function (criteria) {\r\n        var entries;\r\n\r\n        if (!criteria) {\r\n            criteria = this.matchesCriteria_;\r\n        }\r\n\r\n        entries = this.entries_.filter(criteria, this);\r\n\r\n        this.outputHandlers_.forEach(function (handler) {\r\n            handler.dump(entries);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {LogEntry} entry\r\n     */\r\n    Logger.prototype.processOutput_ = function (entry) {\r\n        this.outputHandlers_.forEach(function (handler) {\r\n            handler.show(entry);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {LogEntry} entry\r\n     * @returns {Boolean}\r\n     */\r\n    Logger.prototype.matchesCriteria_ = function (entry) {\r\n        return this.displayCriteria_.every(function (criteria) {\r\n            return criteria.call(this, entry);\r\n        }, this);\r\n    };\r\n\r\n    /**\r\n     * Checks that the level of provided entry passes the \"displayLevel_\" threshold.\r\n     *\r\n     * @protected\r\n     * @param {LogEntry} entry - Entry to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    Logger.prototype.matchesLevel_ = function (entry) {\r\n        return entry.level <= this.displayLevel_;\r\n    };\r\n\r\n    return Logger;\r\n});\r\n","Magento_Ui/js/lib/logger/message-pool.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var MESSAGES = {\r\n        templateStartLoading:\r\n            'The \"${ $.template }\" template requested by  the \"${$.component}\" component started loading.',\r\n        templateLoadedFromServer:\r\n            'The \"${ $.template }\" template requested by the \"${$.component}\" component  was loaded from server.\"',\r\n        templateLoadedFromCache:\r\n            'The \"${ $.template }\" template  requested by the \"${$.component}\" component was loaded from cache.\"',\r\n        templateLoadingFail: 'Failed to load the \"${ $.template }\" template requested by \"${$.component}\".',\r\n        componentStartInitialization:\r\n            'Component \"${$.component}\" start initialization with instance name \"${$.componentName}\".',\r\n        componentStartLoading: ' Started loading the \"${$.component}\" component.',\r\n        componentFinishLoading: 'The \"${$.component}\" component was loaded.',\r\n        componentLoadingFail: 'Failed to load the \"${$.component}\" component.',\r\n        depsLoadingFail: 'Could not get the declared \"${$.deps}\" dependency for the \"${$.component}\" instance.',\r\n        depsStartRequesting: 'Requesting the \"${$.deps}\" dependency for the \"${$.component}\" instance.',\r\n        depsFinishRequesting: 'The \"${$.deps}\" dependency for the \"${$.component}\" instance was received.',\r\n        requestingComponent: 'Requesting the \"${$.component}\" component.',\r\n        requestingComponentIsLoaded: 'The requested \"${$.component}\" component was received.',\r\n        requestingComponentIsFailed: 'Could not get the requested \"${$.component}\" component.'\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * Returns message that matches the provided code.\r\n         *\r\n         * @param {String} code - Message's identifier\r\n         * @returns {String}\r\n         */\r\n        getMessage: function (code) {\r\n            return MESSAGES[code];\r\n        },\r\n\r\n        /**\r\n         * Adds a new message to the poll.\r\n         *\r\n         * @param {String} code - Message's identifier.\r\n         * @param {String} message - Text of the message\r\n         */\r\n        addMessage: function (code, message) {\r\n            MESSAGES[code] = message;\r\n        },\r\n\r\n        /**\r\n         * Tells whether message with provide code exists in the poll.\r\n         *\r\n         * @param {String} code - Message's identifier.\r\n         * @returns {Boolean}\r\n         */\r\n        hasMessage: function (code) {\r\n            return MESSAGES.hasOwnProperty(code);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/registry/registry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n/* global WeakMap */\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var privateData = new WeakMap();\r\n\r\n    /**\r\n     * Extracts private item storage associated\r\n     * with a provided registry instance.\r\n     *\r\n     * @param {Object} container\r\n     * @returns {Object}\r\n     */\r\n    function getItems(container) {\r\n        return privateData.get(container).items;\r\n    }\r\n\r\n    /**\r\n     * Extracts private requests array associated\r\n     * with a provided registry instance.\r\n     *\r\n     * @param {Object} container\r\n     * @returns {Array}\r\n     */\r\n    function getRequests(container) {\r\n        return privateData.get(container).requests;\r\n    }\r\n\r\n    /**\r\n     * Wrapper function used for convenient access to the elements.\r\n     * See 'async' method for examples of usage and comparison\r\n     * with a regular 'get' method.\r\n     *\r\n     * @param {(String|Object|Function)} name - Key of the requested element.\r\n     * @param {Registry} registry - Instance of a registry\r\n     *      where to search for the element.\r\n     * @param {(Function|String)} [method] - Optional callback function\r\n     *      or a name of the elements' method which\r\n     *      will be invoked when element is available in registry.\r\n     * @returns {*}\r\n     */\r\n    function async(name, registry, method) {\r\n        var args = _.toArray(arguments).slice(3);\r\n\r\n        if (_.isString(method)) {\r\n            registry.get(name, function (component) {\r\n                component[method].apply(component, args);\r\n            });\r\n        } else if (_.isFunction(method)) {\r\n            registry.get(name, method);\r\n        } else if (!args.length) {\r\n            return registry.get(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks that every property of the query object\r\n     * is present and equal to the corresponding\r\n     * property in target object.\r\n     * Note that non-strict comparison is used.\r\n     *\r\n     * @param {Object} query - Query object.\r\n     * @param {Object} target - Target object.\r\n     * @returns {Boolean}\r\n     */\r\n    function compare(query, target) {\r\n        var matches = true,\r\n            index,\r\n            keys,\r\n            key;\r\n\r\n        if (!_.isObject(query) || !_.isObject(target)) {\r\n            return false;\r\n        }\r\n\r\n        keys = Object.getOwnPropertyNames(query);\r\n        index = keys.length;\r\n\r\n        while (matches && index--) {\r\n            key = keys[index];\r\n\r\n            /* eslint-disable eqeqeq */\r\n            if (target[key] != query[key]) {\r\n                matches = false;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n\r\n        return matches;\r\n    }\r\n\r\n    /**\r\n     * Explodes incoming string into object if\r\n     * string is defined as a set of key = value pairs.\r\n     *\r\n     * @param {(String|*)} query - String to be processed.\r\n     * @returns {Object|*} Either created object or an unmodified incoming\r\n     *      value if conversion was not possible.\r\n     * @example Sample conversions.\r\n     *      'key = value, key2 = value2'\r\n     *      => {key: 'value', key2: 'value2'}\r\n     */\r\n    function explode(query) {\r\n        var result = {},\r\n            index,\r\n            data;\r\n\r\n        if (typeof query !== 'string' || !~query.indexOf('=')) {\r\n            return query;\r\n        }\r\n\r\n        query = query.split(',');\r\n        index = query.length;\r\n\r\n        while (index--) {\r\n            data = query[index].split('=');\r\n\r\n            result[data[0].trim()] = data[1].trim();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts items from the provided data object\r\n     * which matches specified search criteria.\r\n     *\r\n     * @param {Object} data - Data object where to perform a lookup.\r\n     * @param {(String|Object|Function)} query - Search criteria.\r\n     * @param {Boolean} findAll - Flag that defines whether to\r\n     *      search for all applicable items or to stop on a first found entry.\r\n     * @returns {Array|Object|*}\r\n     */\r\n    function find(data, query, findAll) {\r\n        var iterator,\r\n            item;\r\n\r\n        query = explode(query);\r\n\r\n        if (typeof query === 'string') {\r\n            item = data[query];\r\n\r\n            if (findAll) {\r\n                return item ? [item] : [];\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        iterator = !_.isFunction(query) ?\r\n            compare.bind(null, query) :\r\n            query;\r\n\r\n        return findAll ?\r\n            _.filter(data, iterator) :\r\n            _.find(data, iterator);\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function Registry() {\r\n        var data = {\r\n            items: {},\r\n            requests: []\r\n        };\r\n\r\n        this._updateRequests = _.debounce(this._updateRequests.bind(this), 10);\r\n        privateData.set(this, data);\r\n    }\r\n\r\n    Registry.prototype = {\r\n        constructor: Registry,\r\n\r\n        /**\r\n         * Retrieves item from registry which matches specified search criteria.\r\n         *\r\n         * @param {(Object|String|Function|Array)} query - Search condition (see examples).\r\n         * @param {Function} [callback] - Callback that will be invoked when\r\n         *      all of the requested items are available.\r\n         * @returns {*}\r\n         *\r\n         * @example Requesting item by it's name.\r\n         *      var obj = {index: 'test', sample: true};\r\n         *\r\n         *      registry.set('first', obj);\r\n         *      registry.get('first') === obj;\r\n         *      => true\r\n         *\r\n         * @example Requesting item with a specific properties.\r\n         *      registry.get('sample = 1, index = test') === obj;\r\n         *      => true\r\n         *      registry.get('sample = 0, index = foo') === obj;\r\n         *      => false\r\n         *\r\n         * @example Declaring search criteria as an object.\r\n         *      registry.get({sample: true}) === obj;\r\n         *      => true;\r\n         *\r\n         * @example Providing custom search handler.\r\n         *      registry.get(function (item) { return item.sample === true; }) === obj;\r\n         *      => true\r\n         *\r\n         * @example Sample asynchronous request declaration.\r\n         *      registry.get('index = test', function (item) {});\r\n         *\r\n         * @example Requesting multiple elements.\r\n         *      registry.set('second', {index: 'test2'});\r\n         *      registry.get(['first', 'second'], function (first, second) {});\r\n         */\r\n        get: function (query, callback) {\r\n            if (typeof callback !== 'function') {\r\n                return find(getItems(this), query);\r\n            }\r\n\r\n            this._addRequest(query, callback);\r\n        },\r\n\r\n        /**\r\n         * Sets provided item to the registry.\r\n         *\r\n         * @param {String} id - Item's identifier.\r\n         * @param {*} item - Item's data.\r\n         * returns {Registry} Chainable.\r\n         */\r\n        set: function (id, item) {\r\n            getItems(this)[id] = item;\r\n\r\n            this._updateRequests();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified item from registry.\r\n         * Note that search query is not applicable.\r\n         *\r\n         * @param {String} id - Item's identifier.\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        remove: function (id) {\r\n            delete getItems(this)[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves a collection of elements that match\r\n         * provided search criteria.\r\n         *\r\n         * @param {(Object|String|Function)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Array} Found elements.\r\n         */\r\n        filter: function (query) {\r\n            return find(getItems(this), query, true);\r\n        },\r\n\r\n        /**\r\n         * Checks that at least one element in collection\r\n         * matches provided search criteria.\r\n         *\r\n         * @param {(Object|String|Function)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Boolean}\r\n         */\r\n        has: function (query) {\r\n            return !!this.get(query);\r\n        },\r\n\r\n        /**\r\n         * Checks that registry contains a provided item.\r\n         *\r\n         * @param {*} item - Item to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        contains: function (item) {\r\n            return _.contains(getItems(this), item);\r\n        },\r\n\r\n        /**\r\n         * Extracts identifier of an item if it's present in registry.\r\n         *\r\n         * @param {*} item - Item whose identifier will be extracted.\r\n         * @returns {String|Undefined}\r\n         */\r\n        indexOf: function (item) {\r\n            return _.findKey(getItems(this), function (elem) {\r\n                return item === elem;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Same as a 'get' method except that it returns\r\n         * a promise object instead of invoking provided callback.\r\n         *\r\n         * @param {(String|Function|Object|Array)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        promise: function (query) {\r\n            var defer    = $.Deferred(),\r\n                callback = defer.resolve.bind(defer);\r\n\r\n            this.get(query, callback);\r\n\r\n            return defer.promise();\r\n        },\r\n\r\n        /**\r\n         * Creates a wrapper function over the provided search query\r\n         * in order to provide somehow more convenient access to the\r\n         * registry's items.\r\n         *\r\n         * @param {(String|Object|Function)} query - Search criteria.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Function}\r\n         *\r\n         * @example Comparison with a 'get' method on retrieving items.\r\n         *      var module = registry.async('name');\r\n         *\r\n         *      module();\r\n         *      => registry.get('name');\r\n         *\r\n         * @example Asynchronous request.\r\n         *      module(function (component) {});\r\n         *      => registry.get('name', function (component) {});\r\n         *\r\n         * @example Requesting item and invoking it's method with specified parameters.\r\n         *      module('trigger', true);\r\n         *      => registry.get('name', function (component) {\r\n         *          component.trigger(true);\r\n         *      });\r\n         */\r\n        async: function (query) {\r\n            return async.bind(null, query, this);\r\n        },\r\n\r\n        /**\r\n         * Creates new instance of a Registry.\r\n         *\r\n         * @returns {Registry} New instance.\r\n         */\r\n        create: function () {\r\n            return new Registry;\r\n        },\r\n\r\n        /**\r\n         * Adds new request to the queue or resolves it immediately\r\n         * if all of the required items are available.\r\n         *\r\n         * @private\r\n         * @param {(Object|String|Function|Array)} queries - Search criteria.\r\n         *      See 'get' method for the syntax examples.\r\n         * @param {Function} callback - Callback that will be invoked when\r\n         *      all of the requested items are available.\r\n         * @returns {Registry}\r\n         */\r\n        _addRequest: function (queries, callback) {\r\n            var request;\r\n\r\n            if (!Array.isArray(queries)) {\r\n                queries = queries ? [queries] : [];\r\n            }\r\n\r\n            request = {\r\n                queries: queries.map(explode),\r\n                callback: callback\r\n            };\r\n\r\n            this._canResolve(request) ?\r\n                this._resolveRequest(request) :\r\n                getRequests(this).push(request);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates requests list resolving applicable items.\r\n         *\r\n         * @private\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        _updateRequests: function () {\r\n            getRequests(this)\r\n                .filter(this._canResolve, this)\r\n                .forEach(this._resolveRequest, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resolves provided request invoking it's callback\r\n         * with items specified in query parameters.\r\n         *\r\n         * @private\r\n         * @param {Object} request - Request object.\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        _resolveRequest: function (request) {\r\n            var requests = getRequests(this),\r\n                items    = request.queries.map(this.get, this),\r\n                index    = requests.indexOf(request);\r\n\r\n            request.callback.apply(null, items);\r\n\r\n            if (~index) {\r\n                requests.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided request can be resolved.\r\n         *\r\n         * @private\r\n         * @param {Object} request - Request object.\r\n         * @returns {Boolean}\r\n         */\r\n        _canResolve: function (request) {\r\n            var queries = request.queries;\r\n\r\n            return queries.every(this.has, this);\r\n        }\r\n    };\r\n\r\n    return new Registry;\r\n});\r\n","Magento_Ui/js/lib/validation/rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    './utils',\r\n    'moment',\r\n    'tinycolor',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($, _, utils, moment, tinycolor) {\r\n    'use strict';\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param {String} s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = '0123456789',\r\n            w = '',\r\n            i, j, k, m, c, a, x;\r\n\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n\r\n            if (v.indexOf(x, 0) !== -1) {\r\n                w += x;\r\n            }\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n\r\n        return c % 10 === 0;\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    return _.mapObject({\r\n        'min_text_length': [\r\n            function (value, params) {\r\n                return _.isUndefined(value) || value.length === 0 || value.length >= +params;\r\n            },\r\n            $.mage.__('Please enter more or equal than {0} symbols.')\r\n        ],\r\n        'max_text_length': [\r\n            function (value, params) {\r\n                return !_.isUndefined(value) && value.length <= +params;\r\n            },\r\n            $.mage.__('Please enter less or equal than {0} symbols.')\r\n        ],\r\n        'max-words': [\r\n            function (value, params) {\r\n                return utils.isEmpty(value) || utils.stripHtml(value).match(/\\b\\w+\\b/g).length < params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        'min-words': [\r\n            function (value, params) {\r\n                return utils.isEmpty(value) || utils.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        'range-words': [\r\n            function (value, params) {\r\n                var match = utils.stripHtml(value).match(/\\b\\w+\\b/g) || [];\r\n\r\n                return utils.isEmpty(value) || match.length >= params[0] &&\r\n                    match.length <= params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        'letters-with-basic-punc': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^[a-z\\-.,()\\u0027\\u0022\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        'alphanumeric': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        'letters-only': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        'no-whitespace': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        'no-marginal-whitespace': [\r\n            function (value) {\r\n                return !/^\\s+|\\s+$/i.test(value);\r\n            },\r\n            $.mage.__('No marginal white space please')\r\n        ],\r\n        'zip-range': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        'integer': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        'vinUS': [\r\n            function (value) {\r\n                if (utils.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n\r\n                if (value.length !== 17) {\r\n                    return false;\r\n                }\r\n                var i, n, d, f, cd, cdv,//eslint-disable-line vars-on-top\r\n                    LL = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],//eslint-disable-line max-len\r\n                    VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],\r\n                    FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\r\n                    rs = 0;\r\n\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = value.slice(i, i + 1);\r\n\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {//eslint-disable-line max-depth\r\n                            if (d.toUpperCase() === LL[n]) {//eslint-disable-line max-depth\r\n                                d = VL[n];\r\n                                d *= f;\r\n\r\n                                if (isNaN(cdv) && n === 8) {//eslint-disable-line max-depth\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n                cd = rs % 11;\r\n\r\n                if (cd === 10) {\r\n                    cd = 'X';\r\n                }\r\n\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        'dateITA': [\r\n            function (value) {\r\n                var check = false,\r\n                    re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\r\n                    adata, gg, mm, aaaa, xdata;\r\n\r\n                if (re.test(value)) {\r\n                    adata = value.split('/');\r\n                    gg = parseInt(adata[0], 10);\r\n                    mm = parseInt(adata[1], 10);\r\n                    aaaa = parseInt(adata[2], 10);\r\n                    xdata = new Date(aaaa, mm - 1, gg);\r\n\r\n                    if (xdata.getFullYear() === aaaa &&\r\n                        xdata.getMonth() === mm - 1 &&\r\n                        xdata.getDate() === gg\r\n                    ) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n\r\n                return check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        'dateNL': [\r\n            function (value) {\r\n                return /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            $.mage.__('Vul hier een geldige datum in.')\r\n        ],\r\n        'time': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        'time12h': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\s[AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        'phoneUS': [\r\n            function (value) {\r\n                value = value.replace(/\\s+/g, '');\r\n\r\n                return utils.isEmpty(value) || value.length > 9 &&\r\n                    value.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'phoneUK': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || value.length > 9 &&\r\n                    value.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'mobileUK': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || value.length > 9 && value.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        'stripped-min-length': [\r\n            function (value, param) {\r\n                return _.isUndefined(value) || value.length === 0 || utils.stripHtml(value).length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n        'email2': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^((([a-z]|\\d|[!#\\$%&\\u0027\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&\\u0027\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\u0022)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\u0022)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        'url2': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n        'credit-card-types': [\r\n            function (value, param) {\r\n                var validTypes;\r\n\r\n                if (utils.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, '');\r\n                validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'ipv4': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        'ipv6': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n        'pattern': [\r\n            function (value, param) {\r\n                return utils.isEmpty(value) || new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        'validate-no-html-tags': [\r\n            function (value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        'validate-select': [\r\n            function (value) {\r\n                return value !== 'none' && value != null && value.length !== 0;\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        'validate-no-empty': [\r\n            function (value) {\r\n                return !utils.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        'validate-alphanum-with-spaces': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z0-9 ]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        'validate-data': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-street': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) ||\r\n                    /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        'validate-phoneStrict': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-phoneLax': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) ||\r\n                    /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-fax': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        'validate-email': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-emailSender': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[\\S ]+$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-password': [\r\n            function (value) {\r\n                var pass;\r\n\r\n                if (value == null) {\r\n                    return false;\r\n                }\r\n\r\n                pass = $.trim(value);\r\n\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-admin-password': [\r\n            function (value) {\r\n                var pass;\r\n\r\n                if (value == null) {\r\n                    return false;\r\n                }\r\n\r\n                pass = $.trim(value);\r\n\r\n                if (pass.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (!/[a-z]/i.test(value) || !/[0-9]/.test(value)) {\r\n                    return false;\r\n                }\r\n\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        'validate-customer-password': [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    counter = 0,\r\n                    passwordMinLength = $(elm).data('password-min-length'),\r\n                    passwordMinCharacterSets = $(elm).data('password-min-character-sets'),\r\n                    pass = $.trim(v),\r\n                    result = pass.length >= passwordMinLength;\r\n\r\n                if (result === false) {\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                if (pass.match(/\\d+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets);//eslint-disable-line max-len\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        'validate-url': [\r\n            function (value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = (value || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(value);//eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        'validate-clean-url': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(value) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(value);//eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        'validate-xml-identifier': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        'validate-ssn': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        'validate-zip-us': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        'validate-date-au': [\r\n            function (value) {\r\n                var regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/,\r\n                    d;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                if (utils.isEmpty(value) || !regex.test(value)) {\r\n                    return false;\r\n                }\r\n                d = new Date(value.replace(regex, '$2/$1/$3'));\r\n\r\n                return parseInt(RegExp.$2, 10) === 1 + d.getMonth() &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        'validate-currency-dollar': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(value);//eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        'validate-not-negative-number': [\r\n            function (value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = utils.parseNumber(value);\r\n\r\n                return !isNaN(value) && value >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        'validate-zero-or-greater': [\r\n            function (value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = utils.parseNumber(value);\r\n\r\n                return !isNaN(value) && value >= 0;\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        'validate-greater-than-zero': [\r\n            function (value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = utils.parseNumber(value);\r\n\r\n                return !isNaN(value) && value > 0;\r\n            },\r\n            $.mage.__('Please enter a number greater than 0 in this field.')\r\n        ],\r\n        'validate-css-length': [\r\n            function (value) {\r\n                if (value !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(value);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        'validate-number': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) ||\r\n                    !isNaN(utils.parseNumber(value)) &&\r\n                    /^\\s*-?\\d*(?:[.,|'|\\s]\\d+)*(?:[.,|'|\\s]\\d{2})?-?\\s*$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-integer': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || !isNaN(utils.parseNumber(value)) && /^\\s*-?\\d*\\s*$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid integer in this field.')\r\n        ],\r\n        'validate-number-range': [\r\n            function (value, param) {\r\n                var numValue, dataAttrRange, result, range, m;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = utils.parseNumber(value);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (range) {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && utils.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-positive-percent-decimal': [\r\n            function (value) {\r\n                var numValue;\r\n\r\n                if (utils.isEmptyNoTrim(value) || !/^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(value)) {\r\n                    return false;\r\n                }\r\n\r\n                numValue = utils.parseNumber(value);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                return utils.isBetween(numValue, 0.01, 100);\r\n            },\r\n            $.mage.__('Please enter a valid percentage discount value greater than 0.')\r\n        ],\r\n        'validate-digits': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || !/[^\\d]/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-digits-range': [\r\n            function (value, param) {\r\n                var numValue, dataAttrRange, result, range, m;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = utils.parseNumber(value);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (range) {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && utils.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-range': [\r\n            function (value) {\r\n                var minValue, maxValue, ranges;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](value)) {\r\n                    minValue = maxValue = utils.parseNumber(value);\r\n                } else {\r\n                    ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(value);\r\n\r\n                    if (ranges) {\r\n                        minValue = utils.parseNumber(ranges[1]);\r\n                        maxValue = utils.parseNumber(ranges[2]);\r\n\r\n                        if (minValue > maxValue) {//eslint-disable-line max-depth\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-alpha': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        'validate-code': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-z]+[a-z0-9_]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only lowercase letters (a-z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-alphanum': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z0-9]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-not-number-first': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[^0-9-\\.].*$/.test(value.trim());\r\n            },\r\n            $.mage.__('First character must be letter.')\r\n        ],\r\n        'validate-date': [\r\n            function (value, params, additionalParams) {\r\n                var test = moment(value, additionalParams.dateFormat);\r\n\r\n                return utils.isEmptyNoTrim(value) || test.isValid();\r\n            },\r\n            $.mage.__('Please enter a valid date.')\r\n        ],\r\n        'validate-date-range': [\r\n            function (value, params) {\r\n                var fromDate = $('input[name*=\"' + params + '\"]').val();\r\n\r\n                return moment.utc(value).unix() >= moment.utc(fromDate).unix() || isNaN(moment.utc(value).unix());\r\n            },\r\n            $.mage.__('Make sure the To Date is later than or the same as the From Date.')\r\n        ],\r\n        'validate-identifier': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").')//eslint-disable-line max-len\r\n        ],\r\n        'validate-zip-international': [\r\n\r\n            /*function(v) {\r\n            // @TODO: Cleanup\r\n            return Validation.get('IsEmpty').test(v) || /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n            }*/\r\n            function () {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        'validate-state': [\r\n            function (value) {\r\n                return value !== 0;\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        'less-than-equals-to': [\r\n            function (value, params) {\r\n                if ($.isNumeric(params) && $.isNumeric(value)) {\r\n                    return parseFloat(value) <= parseFloat(params);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a value less than or equal to {0}.')\r\n        ],\r\n        'greater-than-equals-to': [\r\n            function (value, params) {\r\n                if ($.isNumeric(params) && $.isNumeric(value)) {\r\n                    return parseFloat(value) >= parseFloat(params);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a value greater than or equal to {0}.')\r\n        ],\r\n        'validate-emails': [\r\n            function (value) {\r\n                var validRegexp, emails, i;\r\n\r\n                if (utils.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                validRegexp = /^[a-z0-9\\._-]{1,30}@([a-z0-9_-]{1,30}\\.){1,5}[a-z]{2,4}$/i;\r\n                emails = value.split(/[\\s\\n\\,]+/g);\r\n\r\n                for (i = 0; i < emails.length; i++) {\r\n                    if (!validRegexp.test(emails[i].strip())) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-cc-number': [\r\n\r\n            /**\r\n             * Validate credit card number based on mod 10.\r\n             *\r\n             * @param {String} value - credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'validate-cc-ukss': [\r\n\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled.\r\n             *\r\n             * @param {String} value - input field value\r\n             * @return {*}\r\n             */\r\n            function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n        'required-entry': [\r\n            function (value) {\r\n                return !utils.isEmpty(value);\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'checked': [\r\n            function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function (value) {\r\n                if (value.length) {\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(value);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function (value) {\r\n                var isValid = true,\r\n                    values = value.split(','),\r\n                    i;\r\n\r\n                if (utils.isEmpty(value)) {\r\n                    return isValid;\r\n                }\r\n\r\n                for (i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-new-password': [\r\n            function (value) {\r\n                if ($.validator.methods['validate-password'] && !$.validator.methods['validate-password'](value)) {\r\n                    return false;\r\n                }\r\n\r\n                if (utils.isEmpty(value) && value !== '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, params) {\r\n                var validator = this,\r\n                    result = false,\r\n                    // obtain values for validation\r\n                    qty = utils.parseNumber(value),\r\n                    isMinAllowedValid = typeof params.minAllowed === 'undefined' ||\r\n                        qty >= utils.parseNumber(params.minAllowed),\r\n                    isMaxAllowedValid = typeof params.maxAllowed === 'undefined' ||\r\n                        qty <= utils.parseNumber(params.maxAllowed),\r\n                    isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined' ||\r\n                        qty % utils.parseNumber(params.qtyIncrements) === 0;\r\n\r\n                result = qty > 0;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('Please enter a quantity greater than 0.');//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMinAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The fewest you may purchase is %1.').replace('%1', params.minAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMaxAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The maximum you may purchase is %1.').replace('%1', params.maxAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isQtyIncrementsValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('You can buy this product only in quantities of %1 at a time.').replace('%1', params.qtyIncrements);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.itemQtyErrorMessage;\r\n            }\r\n        ],\r\n        'equalTo': [\r\n            function (value, param) {\r\n                return value === $(param).val();\r\n            },\r\n            $.validator.messages.equalTo\r\n        ],\r\n        'validate-file-type': [\r\n            function (name, types) {\r\n                var extension = name.split('.').pop().toLowerCase();\r\n\r\n                if (types && typeof types === 'string') {\r\n                    types = types.split(' ');\r\n                }\r\n\r\n                return !types || !types.length || ~types.indexOf(extension);\r\n            },\r\n            $.mage.__('We don\\'t recognize or support this file extension type.')\r\n        ],\r\n        'validate-max-size': [\r\n            function (size, maxSize) {\r\n                return maxSize === false || size < maxSize;\r\n            },\r\n            $.mage.__('File you are trying to upload exceeds maximum file size limit.')\r\n        ],\r\n        'validate-if-tag-script-exist': [\r\n            function (value) {\r\n                return !value || (/<script\\b[^>]*>([\\s\\S]*?)<\\/script>$/ig).test(value);\r\n            },\r\n            $.mage.__('Please use tag SCRIPT with SRC attribute or with proper content to include JavaScript to the document.')//eslint-disable-line max-len\r\n        ],\r\n        'date_range_min': [\r\n            function (value, minValue, params) {\r\n                return moment.utc(value, params.dateFormat).unix() >= minValue;\r\n            },\r\n            $.mage.__('The date is not within the specified range.')\r\n        ],\r\n        'date_range_max': [\r\n            function (value, maxValue, params) {\r\n                return moment.utc(value, params.dateFormat).unix() <= maxValue;\r\n            },\r\n            $.mage.__('The date is not within the specified range.')\r\n        ],\r\n        'validate-color': [\r\n            function (value) {\r\n                if (value === '') {\r\n                    return true;\r\n                }\r\n\r\n                return tinycolor(value).isValid();\r\n            },\r\n            $.mage.__('Wrong color format. Please specify color in HEX, RGBa, HSVa, HSLa or use color name.')\r\n        ],\r\n        'blacklist-url': [\r\n            function (value, param) {\r\n                return new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('This link is not allowed.')\r\n        ],\r\n        'validate-dob': [\r\n            function (value, param, params) {\r\n                if (value === '') {\r\n                    return true;\r\n                }\r\n\r\n                return moment.utc(value, params.dateFormat).isSameOrBefore(moment.utc());\r\n            },\r\n            $.mage.__('The Date of Birth should not be greater than today.')\r\n        ]\r\n    }, function (data) {\r\n        return {\r\n            handler: data[0],\r\n            message: data[1]\r\n        };\r\n    });\r\n});\r\n","Magento_Ui/js/lib/validation/utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var utils = {\r\n        /**\r\n         * Check if string is empty with trim.\r\n         *\r\n         * @param {String} value\r\n         * @return {Boolean}\r\n         */\r\n        isEmpty: function (value) {\r\n            return value === '' || value == null || value.length === 0 || /^\\s+$/.test(value);\r\n        },\r\n\r\n        /**\r\n         * Check if string is empty no trim.\r\n         *\r\n         * @param {String} value\r\n         * @return {Boolean}\r\n         */\r\n        isEmptyNoTrim: function (value) {\r\n            return value === '' || value == null || value.length === 0;\r\n        },\r\n\r\n        /**\r\n         * Checks if {value} is between numbers {from} and {to}.\r\n         *\r\n         * @param {String} value\r\n         * @param {String} from\r\n         * @param {String} to\r\n         * @return {Boolean}\r\n         */\r\n        isBetween: function (value, from, to) {\r\n            return (from === null || from === '' || value >= utils.parseNumber(from)) &&\r\n                   (to === null || to === '' || value <= utils.parseNumber(to));\r\n        },\r\n\r\n        /**\r\n         * Parse price string.\r\n         *\r\n         * @param {String} value\r\n         * @return {Number}\r\n         */\r\n        parseNumber: function (value) {\r\n            var isDot, isComa;\r\n\r\n            if (typeof value !== 'string') {\r\n                return parseFloat(value);\r\n            }\r\n            isDot = value.indexOf('.');\r\n            isComa = value.indexOf(',');\r\n\r\n            if (isDot !== -1 && isComa !== -1) {\r\n                if (isComa > isDot) {\r\n                    value = value.replace('.', '').replace(',', '.');\r\n                } else {\r\n                    value = value.replace(',', '');\r\n                }\r\n            } else if (isComa !== -1) {\r\n                value = value.replace(',', '.');\r\n            }\r\n\r\n            return parseFloat(value);\r\n        },\r\n\r\n        /**\r\n         * Removes HTML tags and space characters, numbers and punctuation.\r\n         *\r\n         * @param {String} value -  Value being stripped.\r\n         * @return {String}\r\n         */\r\n        stripHtml: function (value) {\r\n            return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n        }\r\n    };\r\n\r\n    return utils;\r\n});\r\n","Magento_Ui/js/lib/validation/validator.js":"/*\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './rules'\r\n], function (_, rulesList) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Validates provided value be the specified rule.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @param {*} value - Value to be checked.\r\n     * @param {*} [params]\r\n     * @param {*} additionalParams - additional validation params set by method caller\r\n     * @returns {Object}\r\n     */\r\n    function validate(id, value, params, additionalParams) {\r\n        var rule,\r\n            message,\r\n            valid,\r\n            result = {\r\n                rule: id,\r\n                passed: true,\r\n                message: ''\r\n            };\r\n\r\n        if (_.isObject(params)) {\r\n            message = params.message || '';\r\n        }\r\n\r\n        if (!rulesList[id]) {\r\n            return result;\r\n        }\r\n\r\n        rule    = rulesList[id];\r\n        message = message || rule.message;\r\n        valid   = rule.handler(value, params, additionalParams);\r\n\r\n        if (!valid) {\r\n            params = Array.isArray(params) ?\r\n                params :\r\n                [params];\r\n\r\n            if (typeof message === 'function') {\r\n                message = message.call(rule);\r\n            }\r\n\r\n            message = params.reduce(function (msg, param, idx) {\r\n                return msg.replace(new RegExp('\\\\{' + idx + '\\\\}', 'g'), param);\r\n            }, message);\r\n\r\n            result.passed = false;\r\n            result.message = message;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Validates provided value by a specified set of rules.\r\n     *\r\n     * @param {(String|Object)} rules - One or many validation rules.\r\n     * @param {*} value - Value to be checked.\r\n     * @param {*} additionalParams - additional validation params set by method caller\r\n     * @returns {Object}\r\n     */\r\n    function validator(rules, value, additionalParams) {\r\n        var result;\r\n\r\n        if (typeof rules === 'object') {\r\n            result = {\r\n                passed: true\r\n            };\r\n\r\n            _.every(rules, function (ruleParams, id) {\r\n                if (ruleParams.validate || ruleParams !== false || additionalParams) {\r\n                    result = validate(id, value, ruleParams, additionalParams);\r\n\r\n                    return result.passed;\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        return validate.apply(null, arguments);\r\n    }\r\n\r\n    /**\r\n     * Adds new validation rule.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @param {Function} handler - Validation function.\r\n     * @param {String} message - Error message.\r\n     */\r\n    validator.addRule = function (id, handler, message) {\r\n        rulesList[id] = {\r\n            handler: handler,\r\n            message: message\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns rule object found by provided identifier.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @returns {Object}\r\n     */\r\n    validator.getRule = function (id) {\r\n        return rulesList[id];\r\n    };\r\n\r\n    return validator;\r\n});\r\n","Magento_Ui/js/lib/view/utils/async.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    './dom-observer',\r\n    'Magento_Ui/js/lib/knockout/extender/bound-nodes',\r\n    './bindings'\r\n], function (ko, $, _, registry, domObserver, boundedNodes) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided value is a dom element.\r\n     *\r\n     * @param {*} node - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDomElement(node) {\r\n        return typeof node === 'object' && node.tagName && node.nodeType;\r\n    }\r\n\r\n    /**\r\n     * Parses provided string and extracts\r\n     * component, context and selector data from it.\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {Object} Data retrieved from string.\r\n     *\r\n     * @example Sample format.\r\n     *      '{{component}}:{{ctx}} -> {{selector}}'\r\n     *\r\n     *      component - Name of component.\r\n     *      ctx - Selector of the root node upon which component is binded.\r\n     *      selector - Selector of DOM elements located\r\n     *          inside of a previously specified context.\r\n     */\r\n    function parseSelector(str) {\r\n        var data    = str.trim().split('->'),\r\n            result  = {},\r\n            componentData;\r\n\r\n        if (data.length === 1) {\r\n            if (!~data[0].indexOf(':')) {\r\n                result.selector = data[0];\r\n            } else {\r\n                componentData = data[0];\r\n            }\r\n        } else {\r\n            componentData   = data[0];\r\n            result.selector = data[1];\r\n        }\r\n\r\n        if (componentData) {\r\n            componentData = componentData.split(':');\r\n\r\n            result.component = componentData[0];\r\n            result.ctx = componentData[1];\r\n        }\r\n\r\n        _.each(result, function (value, key) {\r\n            result[key] = value.trim();\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Internal method used to normalize argumnets passed\r\n     * to 'async' module methods.\r\n     *\r\n     * @param {(String|Objetc)} selector\r\n     * @param {(HTMLElement|Object|String)} [ctx]\r\n     * @returns {Object}\r\n     */\r\n    function parseData(selector, ctx) {\r\n        var data = {};\r\n\r\n        if (arguments.length === 2) {\r\n            data.selector = selector;\r\n\r\n            if (isDomElement(ctx)) {\r\n                data.ctx = ctx;\r\n            } else {\r\n                data.component = ctx;\r\n                data.ctx = '*';\r\n            }\r\n        } else {\r\n            data = _.isString(selector) ?\r\n                parseSelector(selector) :\r\n                selector;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Creates promise that will be resolved\r\n     * when requested component is registred.\r\n     *\r\n     * @param {String} name - Name of component.\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function waitComponent(name) {\r\n        var deffer = $.Deferred();\r\n\r\n        if (_.isString(name)) {\r\n            registry.get(name, function (component) {\r\n                deffer.resolve(component);\r\n            });\r\n        } else {\r\n            deffer.resolve(name);\r\n        }\r\n\r\n        return deffer.promise();\r\n    }\r\n\r\n    /**\r\n     * Creates listener for the nodes binded to provided component.\r\n     *\r\n     * @param {Object} data - Listener data.\r\n     * @param {Object} component - Associated with nodes component.\r\n     */\r\n    function setRootListener(data, component) {\r\n        boundedNodes.get(component, function (root) {\r\n            if (!$(root).is(data.ctx || '*')) {\r\n                return;\r\n            }\r\n\r\n            data.selector ?\r\n                domObserver.get(data.selector, data.fn, root) :\r\n                data.fn(root);\r\n        });\r\n    }\r\n\r\n    /*eslint-disable no-unused-vars*/\r\n    /**\r\n     * Sets listener for the appearance of elements which\r\n     * matches specified selector data.\r\n     *\r\n     * @param {(String|Object)} selector - Valid css selector or a string\r\n     *      in format acceptable by 'parseSelector' method or an object with\r\n     *      'component', 'selector' and 'ctx' properties.\r\n     * @param {(HTMLElement|Object|String)} [ctx] - Optional context parameter\r\n     *      which might be a DOM element, component instance or components' name.\r\n     * @param {Function} fn - Callback that will be invoked\r\n     *      when required DOM element appears.\r\n     *\r\n     * @example\r\n     *      Creating listener of the 'span' nodes appearance,\r\n     *      located inside of 'div' nodes, which are binded to 'cms_page_listing' component:\r\n     *\r\n     *      $.async('cms_page_listing:div -> span', function (node) {});\r\n     *\r\n     * @example Another syntaxes of the previous example.\r\n     *      $.async({\r\n     *          component: 'cms_page_listing',\r\n     *          ctx: 'div',\r\n     *          selector: 'span'\r\n     *       }, function (node) {});\r\n     *\r\n     * @example Listens for appearance of any child node inside of specified component.\r\n     *      $.async('> *', 'cms_page_lsiting', function (node) {});\r\n     *\r\n     * @example Listens for appearance of 'span' nodes inside of specific context.\r\n     *      $.async('span', document.getElementById('test'), function (node) {});\r\n     */\r\n    $.async = function (selector, ctx, fn) {\r\n        var args = _.toArray(arguments),\r\n            data = parseData.apply(null, _.initial(args));\r\n\r\n        data.fn = _.last(args);\r\n\r\n        if (data.component) {\r\n            waitComponent(data.component)\r\n                .then(setRootListener.bind(null, data));\r\n        } else {\r\n            domObserver.get(data.selector, data.fn, data.ctx);\r\n        }\r\n    };\r\n\r\n    /*eslint-enable no-unused-vars*/\r\n\r\n    _.extend($.async, {\r\n\r\n        /*eslint-disable no-unused-vars*/\r\n        /**\r\n         * Returns collection of elements found by provided selector data.\r\n         *\r\n         * @param {(String|Object)} selector - See 'async' definition.\r\n         * @param {(HTMLElement|Object|String)} [ctx] - See 'async' definition.\r\n         * @returns {Array} An array of DOM elements.\r\n         */\r\n        get: function (selector, ctx) {\r\n            var data        = parseData.apply(null, arguments),\r\n                component   = data.component,\r\n                nodes;\r\n\r\n            if (!component) {\r\n                return $(data.selector, data.ctx).toArray();\r\n            } else if (_.isString(component)) {\r\n                component = registry.get(component);\r\n            }\r\n\r\n            if (!component) {\r\n                return [];\r\n            }\r\n\r\n            nodes = boundedNodes.get(component);\r\n            nodes = $(nodes).filter(data.ctx).toArray();\r\n\r\n            return data.selector ?\r\n                $(data.selector, nodes).toArray() :\r\n                nodes;\r\n        },\r\n\r\n        /*eslint-enable no-unused-vars*/\r\n\r\n        /**\r\n         * Sets removal listener of the specified nodes.\r\n         *\r\n         * @param {(HTMLElement|Array|ArrayLike)} nodes - Nodes whose removal to track.\r\n         * @param {Function} fn - Callback that will be invoked when node is removed.\r\n         */\r\n        remove: function (nodes, fn) {\r\n            domObserver.remove(nodes, fn);\r\n        },\r\n\r\n        parseSelector: parseSelector\r\n    });\r\n\r\n    return $;\r\n});\r\n","Magento_Ui/js/lib/view/utils/bindings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore'\r\n], function (ko, $, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided  value is a dom element.\r\n     *\r\n     * @param {*} node - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDomElement(node) {\r\n        return typeof node === 'object' && node.tagName && node.nodeType;\r\n    }\r\n\r\n    /**\r\n     * Removes from the provided array all non-root nodes located inside\r\n     * of the comment element as long as the closing comment tags.\r\n     *\r\n     * @param {(Array|ArrayLike)} nodes - An array of nodes to be processed.\r\n     * @returns {Array}\r\n     */\r\n    function normalize(nodes) {\r\n        var result;\r\n\r\n        nodes   = _.toArray(nodes);\r\n        result  = nodes.slice();\r\n\r\n        nodes.forEach(function (node) {\r\n            if (node.nodeType === 8) {\r\n                result = !ko.virtualElements.hasBindingValue(node) ?\r\n                    _.without(result, node) :\r\n                    _.difference(result, ko.virtualElements.childNodes(node));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extends binding context of each item in the collection.\r\n     *\r\n     * @param {...Object} extenders - Multiple extender objects to be applied to the context.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.extendCtx = function () {\r\n        var nodes       = normalize(this),\r\n            extenders   = _.toArray(arguments);\r\n\r\n        nodes.forEach(function (node) {\r\n            var ctx  = ko.contextFor(node),\r\n                data = [ctx].concat(extenders);\r\n\r\n            _.extend.apply(_, data);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Evaluates bindings specified in each DOM element of collection.\r\n     *\r\n     * @param {(HTMLElement|Object)} [ctx] - Context to use for bindings evaluation.\r\n     *      If not specified then current context of a collections' item will be used.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.applyBindings = function (ctx) {\r\n        var nodes = normalize(this),\r\n            nodeCtx;\r\n\r\n        if (isDomElement(ctx)) {\r\n            ctx = ko.contextFor(ctx);\r\n        }\r\n\r\n        nodes.forEach(function (node) {\r\n            nodeCtx = ctx || ko.contextFor(node);\r\n\r\n            ko.applyBindings(nodeCtx, node);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Adds specified bindings to each DOM element in\r\n     * collection and evaluates them with provided context.\r\n     *\r\n     * @param {(Object|Function)} data - Either bindings object or a function\r\n     *      which returns bindings data for each element in collection.\r\n     * @param {(HTMLElement|Object)} [ctx] - Context to use for bindings evaluation.\r\n     *      If not specified then current context of a collections' item will be used.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.bindings = function (data, ctx) {\r\n        var nodes    = normalize(this),\r\n            bindings = data,\r\n            nodeCtx;\r\n\r\n        if (isDomElement(ctx)) {\r\n            ctx = ko.contextFor(ctx);\r\n        }\r\n\r\n        nodes.forEach(function (node) {\r\n            nodeCtx = ctx || ko.contextFor(node);\r\n\r\n            if (_.isFunction(data)) {\r\n                bindings = data(nodeCtx, node);\r\n            }\r\n\r\n            ko.applyBindingsToNode(node, bindings, nodeCtx);\r\n        });\r\n\r\n        return this;\r\n    };\r\n});\r\n","Magento_Ui/js/lib/view/utils/dom-observer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'domReady!'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var counter = 1,\r\n        watchers,\r\n        globalObserver,\r\n        disabledNodes = [];\r\n\r\n    watchers = {\r\n        selectors: {},\r\n        nodes: {}\r\n    };\r\n\r\n    /**\r\n     * Checks if node represents an element node (nodeType === 1).\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Boolean}\r\n     */\r\n    function isElementNode(node) {\r\n        return node.nodeType === 1;\r\n    }\r\n\r\n    /**\r\n     * Extracts all child descendant\r\n     * elements of a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Array}\r\n     */\r\n    function extractChildren(node) {\r\n        var children = node.querySelectorAll('*');\r\n\r\n        return _.toArray(children);\r\n    }\r\n\r\n    /**\r\n     * Extracts node identifier. If ID is not specified,\r\n     * then it will be created for the provided node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Number}\r\n     */\r\n    function getNodeId(node) {\r\n        var id = node._observeId;\r\n\r\n        if (!id) {\r\n            id = node._observeId = counter++;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Invokes callback passing node to it.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {Object} data\r\n     */\r\n    function trigger(node, data) {\r\n        var id = getNodeId(node),\r\n            ids = data.invoked;\r\n\r\n        if (_.contains(ids, id)) {\r\n            return;\r\n        }\r\n\r\n        data.callback(node);\r\n        data.invoked.push(id);\r\n    }\r\n\r\n    /**\r\n     * Adds node to the observer list.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Object}\r\n     */\r\n    function createNodeData(node) {\r\n        var nodes   = watchers.nodes,\r\n            id      = getNodeId(node);\r\n\r\n        nodes[id] = nodes[id] || {};\r\n\r\n        return nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Returns data associated with a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Object|Undefined}\r\n     */\r\n    function getNodeData(node) {\r\n        var nodeId = node._observeId;\r\n\r\n        return watchers.nodes[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Removes data associated with a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     */\r\n    function removeNodeData(node) {\r\n        var nodeId = node._observeId;\r\n\r\n        delete watchers.nodes[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Adds removal listener for a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {Object} data\r\n     */\r\n    function addRemovalListener(node, data) {\r\n        var nodeData = createNodeData(node);\r\n\r\n        (nodeData.remove = nodeData.remove || []).push(data);\r\n    }\r\n\r\n    /**\r\n     * Adds listener for the nodes which matches specified selector.\r\n     *\r\n     * @param {String} selector - CSS selector.\r\n     * @param {Object} data\r\n     */\r\n    function addSelectorListener(selector, data) {\r\n        var storage = watchers.selectors;\r\n\r\n        (storage[selector] = storage[selector] || []).push(data);\r\n    }\r\n\r\n    /**\r\n     * Calls handlers associated with an added node.\r\n     * Adds listeners for the node removal.\r\n     *\r\n     * @param {HTMLElement} node - Added node.\r\n     */\r\n    function processAdded(node) {\r\n        _.each(watchers.selectors, function (listeners, selector) {\r\n            listeners.forEach(function (data) {\r\n                if (!data.ctx.contains(node) || !$(node, data.ctx).is(selector)) {\r\n                    return;\r\n                }\r\n\r\n                if (data.type === 'add') {\r\n                    trigger(node, data);\r\n                } else if (data.type === 'remove') {\r\n                    addRemovalListener(node, data);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calls handlers associated with a removed node.\r\n     *\r\n     * @param {HTMLElement} node - Removed node.\r\n     */\r\n    function processRemoved(node) {\r\n        var nodeData    = getNodeData(node),\r\n            listeners   = nodeData && nodeData.remove;\r\n\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n\r\n        listeners.forEach(function (data) {\r\n            trigger(node, data);\r\n        });\r\n\r\n        removeNodeData(node);\r\n    }\r\n\r\n    /**\r\n     * Removes all non-element nodes from provided array\r\n     * and appends to it descendant elements.\r\n     *\r\n     * @param {Array} nodes\r\n     * @returns {Array}\r\n     */\r\n    function formNodesList(nodes) {\r\n        var result = [],\r\n            children;\r\n\r\n        nodes = _.toArray(nodes).filter(isElementNode);\r\n\r\n        nodes.forEach(function (node) {\r\n            result.push(node);\r\n\r\n            children = extractChildren(node);\r\n            result   = result.concat(children);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Collects all removed and added nodes from\r\n     * mutation records into separate arrays\r\n     * while removing duplicates between both types of changes.\r\n     *\r\n     * @param {Array} mutations - An array of mutation records.\r\n     * @returns {Object} Object with 'removed' and 'added' nodes arrays.\r\n     */\r\n    function formChangesLists(mutations) {\r\n        var removed = [],\r\n            added = [];\r\n\r\n        mutations.forEach(function (record) {\r\n            removed = removed.concat(_.toArray(record.removedNodes));\r\n            added   = added.concat(_.toArray(record.addedNodes));\r\n        });\r\n\r\n        removed = removed.filter(function (node) {\r\n            var addIndex = added.indexOf(node),\r\n                wasAdded = !!~addIndex;\r\n\r\n            if (wasAdded) {\r\n                added.splice(addIndex, 1);\r\n            }\r\n\r\n            return !wasAdded;\r\n        });\r\n\r\n        return {\r\n            removed: formNodesList(removed),\r\n            added: formNodesList(added)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Verify if the DOM node is a child of a defined disabled node, if so we shouldn't observe provided mutation.\r\n     *\r\n     * @param {Object} mutation - a single mutation\r\n     * @returns {Boolean}\r\n     */\r\n    function shouldObserveMutation(mutation) {\r\n        var isDisabled;\r\n\r\n        if (disabledNodes.length > 0) {\r\n            // Iterate through the disabled nodes and determine if this mutation is occurring inside one of them\r\n            isDisabled = _.find(disabledNodes, function (node) {\r\n                return node === mutation.target || $.contains(node, mutation.target);\r\n            });\r\n\r\n            // If we find a matching node we should not observe the mutation\r\n            return !isDisabled;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Should we observe these mutations? Check the first and last mutation to determine if this is a disabled mutation,\r\n     * we check both the first and last in case one has been removed from the DOM during the process of the mutation.\r\n     *\r\n     * @param {Array} mutations - An array of mutation records.\r\n     * @returns {Boolean}\r\n     */\r\n    function shouldObserveMutations(mutations) {\r\n        var firstMutation,\r\n            lastMutation;\r\n\r\n        if (mutations.length > 0) {\r\n            firstMutation = mutations[0];\r\n            lastMutation = mutations[mutations.length - 1];\r\n\r\n            return shouldObserveMutation(firstMutation) && shouldObserveMutation(lastMutation);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    globalObserver = new MutationObserver(function (mutations) {\r\n        var changes;\r\n\r\n        if (shouldObserveMutations(mutations)) {\r\n            changes = formChangesLists(mutations);\r\n\r\n            changes.removed.forEach(processRemoved);\r\n            changes.added.forEach(processAdded);\r\n        }\r\n    });\r\n\r\n    globalObserver.observe(document.body, {\r\n        subtree: true,\r\n        childList: true\r\n    });\r\n\r\n    return {\r\n        /**\r\n         * Disable a node from being observed by the mutations, you may want to disable specific aspects of the\r\n         * application which are heavy on DOM changes. The observer running on some actions could cause significant\r\n         * delays and degrade the performance of that specific part of the application exponentially.\r\n         *\r\n         * @param {HTMLElement} node - a HTML node within the document\r\n         */\r\n        disableNode: function (node) {\r\n            disabledNodes.push(node);\r\n        },\r\n\r\n        /**\r\n         * Adds listener for the appearance of nodes that matches provided\r\n         * selector and which are inside of the provided context. Callback will be\r\n         * also invoked on elements which a currently present.\r\n         *\r\n         * @param {String} selector - CSS selector.\r\n         * @param {Function} callback - Function that will invoked when node appears.\r\n         * @param {HTMLElement} [ctx=document.body] - Context inside of which to search for the node.\r\n         */\r\n        get: function (selector, callback, ctx) {\r\n            var data,\r\n                nodes;\r\n\r\n            data = {\r\n                ctx: ctx || document.body,\r\n                type: 'add',\r\n                callback: callback,\r\n                invoked: []\r\n            };\r\n\r\n            nodes = $(selector, data.ctx).toArray();\r\n\r\n            nodes.forEach(function (node) {\r\n                trigger(node, data);\r\n            });\r\n\r\n            addSelectorListener(selector, data);\r\n        },\r\n\r\n        /**\r\n         * Adds listener for the nodes removal.\r\n         *\r\n         * @param {(jQueryObject|HTMLElement|Array|String)} selector\r\n         * @param {Function} callback - Function that will invoked when node is removed.\r\n         * @param {HTMLElement} [ctx=document.body] - Context inside of which to search for the node.\r\n         */\r\n        remove: function (selector, callback, ctx) {\r\n            var nodes = [],\r\n                data;\r\n\r\n            data = {\r\n                ctx: ctx || document.body,\r\n                type: 'remove',\r\n                callback: callback,\r\n                invoked: []\r\n            };\r\n\r\n            if (typeof selector === 'object') {\r\n                nodes = !_.isUndefined(selector.length) ?\r\n                    _.toArray(selector) :\r\n                    [selector];\r\n            } else if (_.isString(selector)) {\r\n                nodes = $(selector, ctx).toArray();\r\n\r\n                addSelectorListener(selector, data);\r\n            }\r\n\r\n            nodes.forEach(function (node) {\r\n                addRemovalListener(node, data);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Removes listeners.\r\n         *\r\n         * @param {String} selector\r\n         * @param {Function} [fn]\r\n         */\r\n        off: function (selector, fn) {\r\n            var selectors = watchers.selectors,\r\n                listeners = selectors[selector];\r\n\r\n            if (selector && !fn) {\r\n                delete selectors[selector];\r\n            } else if (listeners && fn) {\r\n                selectors[selector] = listeners.filter(function (data) {\r\n                    return data.callback !== fn;\r\n                });\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/view/utils/raf.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global WeakMap */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    var processMap = new WeakMap(),\r\n        origRaf,\r\n        raf;\r\n\r\n    origRaf = window.requestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        window.onRequestAnimationFrame ||\r\n        window.msRequestAnimationFrame ||\r\n        function (callback) {\r\n            if (typeof callback != 'function') {\r\n                throw new Error('raf argument \"callback\" must be of type function');\r\n            }\r\n            window.setTimeout(callback, 1000 / 60);\r\n        };\r\n\r\n    /**\r\n     * Creates new process object or extracts the\r\n     * the existing one.\r\n     *\r\n     * @param {*} id - Process identifier.\r\n     * @param {Number} fps - Required FPS count.\r\n     * @returns {Object}\r\n     */\r\n    function getProcess(id, fps) {\r\n        var process = processMap.get(id);\r\n\r\n        if (!process) {\r\n            process = {};\r\n            processMap.set(id, process);\r\n        }\r\n\r\n        if (process.fps !== fps) {\r\n            process.fps        = fps;\r\n            process.interval   = 1000 / fps;\r\n            process.update     = Date.now();\r\n        }\r\n\r\n        return process;\r\n    }\r\n\r\n    /**\r\n     * Proxy method which delegates call to the 'requestAnimationFrame'\r\n     * function and optionally can keep track of the FPS with which\r\n     * provided function is called.\r\n     *\r\n     * @param {Function} callback - Callback function to be passed to 'requestAnimationFrame'.\r\n     * @param {Number} [fps] - If specified, will update FPS counter for the provided function.\r\n     * @returns {Number|Boolean} ID of request or a flag which indicates\r\n     *      whether callback fits specified FPS.\r\n     */\r\n    raf = function (callback, fps) {\r\n        var rafId = origRaf(callback);\r\n\r\n        return fps ? raf.tick(callback, fps) : rafId;\r\n    };\r\n\r\n    /**\r\n     * Updates FPS counter for the specified process\r\n     * and returns a flag which indicates whether\r\n     * counter value is equal or greater than the required FPS.\r\n     *\r\n     * @param {*} id - Process identifier.\r\n     * @param {Number} fps - Required FPS count.\r\n     * @returns {Boolean}\r\n     */\r\n    raf.tick = function (id, fps) {\r\n        var process  = getProcess(id, fps),\r\n            now      = Date.now(),\r\n            delta    = now - process.update,\r\n            interval = process.interval;\r\n\r\n        if (fps >= 60 || delta >= interval) {\r\n            process.update = now - delta % interval;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    return raf;\r\n});\r\n","Magento_Ui/js/modal/alert.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery-ui-modules/widget',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.alert', $.mage.confirm, {\r\n        options: {\r\n            modalClass: 'confirm',\r\n            title: $.mage.__('Attention'),\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal(true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Close modal window.\r\n         */\r\n        closeModal: function () {\r\n            this.options.actions.always();\r\n            this.element.bind('alertclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div></div>').html(config.content).alert(config);\r\n    };\r\n});\r\n","Magento_Ui/js/modal/confirm.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/translate',\r\n    'jquery-ui-modules/widget',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, _, $t) {\r\n    'use strict';\r\n\r\n    $.widget('mage.confirm', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'confirm',\r\n            title: '',\r\n            focus: '.action-accept',\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {},\r\n\r\n                /**\r\n                 * Callback confirm.\r\n                 */\r\n                confirm: function () {},\r\n\r\n                /**\r\n                 * Callback cancel.\r\n                 */\r\n                cancel: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $t('Cancel'),\r\n                class: 'action-secondary action-dismiss',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event);\r\n                }\r\n            }, {\r\n                text: $t('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event, true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Create widget.\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this.modal.find(this.options.modalCloseBtn).off().on('click', _.bind(this.closeModal, this));\r\n            this.openModal();\r\n        },\r\n\r\n        /**\r\n         * Remove modal window.\r\n         */\r\n        _remove: function () {\r\n            this.modal.remove();\r\n        },\r\n\r\n        /**\r\n         * Open modal window.\r\n         */\r\n        openModal: function () {\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Close modal window.\r\n         */\r\n        closeModal: function (event, result) {\r\n            result = result || false;\r\n\r\n            if (result) {\r\n                this.options.actions.confirm(event);\r\n            } else {\r\n                this.options.actions.cancel(event);\r\n            }\r\n            this.options.actions.always(event);\r\n            this.element.bind('confirmclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div></div>').html(config.content).confirm(config);\r\n    };\r\n});\r\n","Magento_Ui/js/modal/modal-component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiCollection',\r\n    'uiRegistry',\r\n    'underscore',\r\n    './modal'\r\n], function ($, Collection, registry, _) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/modal/modal-component',\r\n            title: '',\r\n            subTitle: '',\r\n            options: {\r\n                modalClass: '',\r\n                title: '',\r\n                subTitle: '',\r\n                buttons: [],\r\n                keyEventHandlers: {}\r\n            },\r\n            valid: true,\r\n            links: {\r\n                title: 'options.title',\r\n                subTitle: 'options.subTitle'\r\n            },\r\n            listens: {\r\n                state: 'onState',\r\n                title: 'setTitle',\r\n                'options.subTitle': 'setSubTitle'\r\n            },\r\n            modalClass: 'modal-component',\r\n            onCancel: 'closeModal'\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this,\r\n                'initModal',\r\n                'openModal',\r\n                'closeModal',\r\n                'toggleModal',\r\n                'setPrevValues',\r\n                'validate');\r\n            this.initializeContent();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes modal configuration\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            return this._super()\r\n                .initSelector()\r\n                .initModalEvents();\r\n        },\r\n\r\n        /**\r\n         * Configure modal selector\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initSelector: function () {\r\n            var modalClass = this.name.replace(/\\./g, '_');\r\n\r\n            this.contentSelector = '.' + this.modalClass;\r\n            this.options.modalClass = this.options.modalClass + ' ' + modalClass;\r\n            this.rootSelector = '.' + modalClass;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure modal keyboard handlers\r\n         * and outer click\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initModalEvents: function () {\r\n            this.options.keyEventHandlers.escapeKey = this.options.outerClickHandler = this[this.onCancel].bind(this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize modal's content components\r\n         */\r\n        initializeContent: function () {\r\n            $.async({\r\n                component: this.name\r\n            }, this.initModal);\r\n        },\r\n\r\n        /**\r\n         * Init toolbar section so other components will be able to place something in it\r\n         */\r\n        initToolbarSection: function () {\r\n            this.set('toolbarSection', this.modal.data('mage-modal').modal.find('header').get(0));\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.observe(['state', 'focused']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Wrap content in a modal of certain type\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initModal: function (element) {\r\n            if (!this.modal) {\r\n                this.overrideModalButtonCallback();\r\n                this.options.modalCloseBtnHandler = this[this.onCancel].bind(this);\r\n                this.modal = $(element).modal(this.options);\r\n                this.initToolbarSection();\r\n\r\n                if (this.waitCbk) {\r\n                    this.waitCbk();\r\n                    this.waitCbk = null;\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Open modal\r\n         */\r\n        openModal: function () {\r\n            if (this.modal) {\r\n                this.state(true);\r\n            } else {\r\n                this.waitCbk = this.openModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal\r\n         */\r\n        closeModal: function () {\r\n            if (this.modal) {\r\n                this.state(false);\r\n            } else {\r\n                this.waitCbk = this.closeModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle modal\r\n         */\r\n        toggleModal: function () {\r\n            if (this.modal) {\r\n                this.state(!this.state());\r\n            } else {\r\n                this.waitCbk = this.toggleModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets title for modal\r\n         *\r\n         * @param {String} title\r\n         */\r\n        setTitle: function (title) {\r\n            if (this.title !== title) {\r\n                this.title = title;\r\n            }\r\n\r\n            if (this.modal) {\r\n                this.modal.modal('setTitle', title);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets subTitle for modal\r\n         *\r\n         * @param {String} subTitle\r\n         */\r\n        setSubTitle: function (subTitle) {\r\n            if (this.subTitle !== subTitle) {\r\n                this.subTitle = subTitle;\r\n            }\r\n\r\n            if (this.modal) {\r\n                this.modal.modal('setSubTitle', subTitle);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrap content in a modal of certain type\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        onState: function (state) {\r\n            if (state) {\r\n                this.modal.modal('openModal');\r\n                this.applyData();\r\n            } else {\r\n                this.modal.modal('closeModal');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate everything validatable in modal\r\n         */\r\n        validate: function (elem) {\r\n            if (typeof elem === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            if (typeof elem.validate === 'function') {\r\n                this.valid = this.valid & elem.validate().valid;\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.validate, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reset data from provider\r\n         */\r\n        resetData: function () {\r\n            this.elems().forEach(this.resetValue, this);\r\n        },\r\n\r\n        /**\r\n         * Update 'applied' property with data from modal content\r\n         */\r\n        applyData: function () {\r\n            var applied = {};\r\n\r\n            this.elems().forEach(this.gatherValues.bind(this, applied), this);\r\n            this.applied = applied;\r\n        },\r\n\r\n        /**\r\n         * Gather values from modal content\r\n         *\r\n         * @param {Array} applied\r\n         * @param {HTMLElement} elem\r\n         */\r\n        gatherValues: function (applied, elem) {\r\n            if (typeof elem.value === 'function') {\r\n                applied[elem.name] = elem.value();\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.gatherValues.bind(this, applied), this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set to previous values from modal content\r\n         *\r\n         * @param {HTMLElement} elem\r\n         */\r\n        setPrevValues: function (elem) {\r\n            if (typeof elem.value === 'function') {\r\n                this.modal.focus();\r\n                elem.value(this.applied[elem.name]);\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.setPrevValues, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers some method in every modal child elem, if this method is defined\r\n         *\r\n         * @param {Object} action - action configuration,\r\n         * must contain actionName and targetName and\r\n         * can contain params\r\n         */\r\n        triggerAction: function (action) {\r\n            var targetName = action.targetName,\r\n                params = action.params || [],\r\n                actionName = action.actionName,\r\n                target;\r\n\r\n            target = registry.async(targetName);\r\n\r\n            if (target && typeof target === 'function' && actionName) {\r\n                params.unshift(actionName);\r\n                target.apply(target, params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Override modal buttons callback placeholders with real callbacks\r\n         */\r\n        overrideModalButtonCallback: function () {\r\n            var buttons = this.options.buttons;\r\n\r\n            if (buttons && buttons.length) {\r\n                buttons.forEach(function (button) {\r\n                    button.click = this.getButtonClickHandler(button.actions);\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generate button click handler based on button's 'actions' configuration\r\n         */\r\n        getButtonClickHandler: function (actionsConfig) {\r\n            var actions = actionsConfig.map(\r\n                function (actionConfig) {\r\n                    if (_.isObject(actionConfig)) {\r\n                        return this.triggerAction.bind(this, actionConfig);\r\n                    }\r\n\r\n                    return this[actionConfig] ? this[actionConfig].bind(this) : function () {};\r\n                }, this);\r\n\r\n            return function () {\r\n                actions.forEach(\r\n                    function (action) {\r\n                        action();\r\n                    }\r\n                );\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Cancels changes in modal:\r\n         * returning elems values to the previous state,\r\n         * and close modal\r\n         */\r\n        actionCancel: function () {\r\n            this.elems().forEach(this.setPrevValues, this);\r\n            this.closeModal();\r\n        },\r\n\r\n        /**\r\n         * Accept changes in modal by not preventing them.\r\n         * Can be extended by exporting 'gatherValues' result somewhere\r\n         */\r\n        actionDone: function () {\r\n            this.valid = true;\r\n            this.elems().forEach(this.validate, this);\r\n\r\n            if (this.valid) {\r\n                this.closeModal();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/modal/modal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/modal/modal-popup.html',\r\n    'text!ui/template/modal/modal-slide.html',\r\n    'text!ui/template/modal/modal-custom.html',\r\n    'Magento_Ui/js/lib/key-codes',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/core',\r\n    'mage/translate'\r\n], function ($, _, template, popupTpl, slideTpl, customTpl, keyCodes) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Detect browser transition end event.\r\n     * @return {String|undefined} - transition event.\r\n     */\r\n    var transitionEvent =  (function () {\r\n        var transition,\r\n            elementStyle = document.createElement('div').style,\r\n            transitions = {\r\n                'transition': 'transitionend',\r\n                'OTransition': 'oTransitionEnd',\r\n                'MozTransition': 'transitionend',\r\n                'WebkitTransition': 'webkitTransitionEnd'\r\n            };\r\n\r\n        for (transition in transitions) {\r\n            if (elementStyle[transition] !== undefined && transitions.hasOwnProperty(transition)) {\r\n                return transitions[transition];\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Modal Window Widget\r\n     */\r\n    $.widget('mage.modal', {\r\n        options: {\r\n            id: null,\r\n            type: 'popup',\r\n            title: '',\r\n            subTitle: '',\r\n            modalClass: '',\r\n            focus: '[data-role=\"closeBtn\"]',\r\n            autoOpen: false,\r\n            clickableOverlay: true,\r\n            popupTpl: popupTpl,\r\n            slideTpl: slideTpl,\r\n            customTpl: customTpl,\r\n            modalVisibleClass: '_show',\r\n            parentModalClass: '_has-modal',\r\n            innerScrollClass: '_inner-scroll',\r\n            responsive: false,\r\n            innerScroll: false,\r\n            modalTitle: '[data-role=\"title\"]',\r\n            modalSubTitle: '[data-role=\"subTitle\"]',\r\n            modalBlock: '[data-role=\"modal\"]',\r\n            modalCloseBtn: '[data-role=\"closeBtn\"]',\r\n            modalContent: '[data-role=\"content\"]',\r\n            modalAction: '[data-role=\"action\"]',\r\n            focusableScope: '[data-role=\"focusable-scope\"]',\r\n            focusableStart: '[data-role=\"focusable-start\"]',\r\n            focusableEnd: '[data-role=\"focusable-end\"]',\r\n            appendTo: 'body',\r\n            wrapperClass: 'modals-wrapper',\r\n            overlayClass: 'modals-overlay',\r\n            responsiveClass: 'modal-slide',\r\n            trigger: '',\r\n            modalLeftMargin: 45,\r\n            closeText: $.mage.__('Close'),\r\n            buttons: [{\r\n                text: $.mage.__('Ok'),\r\n                class: '',\r\n                attr: {},\r\n\r\n                /**\r\n                 * Default action on button click\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event);\r\n                }\r\n            }],\r\n            keyEventHandlers: {\r\n\r\n                /**\r\n                 * Tab key press handler,\r\n                 * set focus to elements\r\n                 */\r\n                tabKey: function () {\r\n                    if (document.activeElement === this.modal[0]) {\r\n                        this._setFocus('start');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Escape key press handler,\r\n                 * close modal window\r\n                 * @param {Object} event - event\r\n                 */\r\n                escapeKey: function (event) {\r\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\r\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates modal widget.\r\n         */\r\n        _create: function () {\r\n            _.bindAll(\r\n                this,\r\n                'keyEventSwitcher',\r\n                '_tabSwitcher',\r\n                'closeModal'\r\n            );\r\n\r\n            this.options.id = this.uuid;\r\n            this.options.transitionEvent = transitionEvent;\r\n            this._createWrapper();\r\n            this._renderModal();\r\n            this._createButtons();\r\n\r\n            if (this.options.trigger) {\r\n                $(document).on('click', this.options.trigger, _.bind(this.toggleModal, this));\r\n            }\r\n            this._on(this.modal.find(this.options.modalCloseBtn), {\r\n                'click': this.options.modalCloseBtnHandler ? this.options.modalCloseBtnHandler : this.closeModal\r\n            });\r\n            this._on(this.element, {\r\n                'openModal': this.openModal,\r\n                'closeModal': this.closeModal\r\n            });\r\n            this.options.autoOpen ? this.openModal() : false;\r\n        },\r\n\r\n        /**\r\n         * Returns element from modal node.\r\n         * @return {Object} - element.\r\n         */\r\n        _getElem: function (elem) {\r\n            return this.modal.find(elem);\r\n        },\r\n\r\n        /**\r\n         * Gets visible modal count.\r\n         * * @return {Number} - visible modal count.\r\n         */\r\n        _getVisibleCount: function () {\r\n            var modals = this.modalWrapper.find(this.options.modalBlock);\r\n\r\n            return modals.filter('.' + this.options.modalVisibleClass).length;\r\n        },\r\n\r\n        /**\r\n         * Gets count of visible modal by slide type.\r\n         * * @return {Number} - visible modal count.\r\n         */\r\n        _getVisibleSlideCount: function () {\r\n            var elems = this.modalWrapper.find('[data-type=\"slide\"]');\r\n\r\n            return elems.filter('.' + this.options.modalVisibleClass).length;\r\n        },\r\n\r\n        /**\r\n         * Listener key events.\r\n         * Call handler function if it exists\r\n         */\r\n        keyEventSwitcher: function (event) {\r\n            var key = keyCodes[event.keyCode];\r\n\r\n            if (this.options.keyEventHandlers.hasOwnProperty(key)) {\r\n                this.options.keyEventHandlers[key].apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set title for modal.\r\n         *\r\n         * @param {String} title\r\n         */\r\n        setTitle: function (title) {\r\n            var $title = this.modal.find(this.options.modalTitle),\r\n                $subTitle = this.modal.find(this.options.modalSubTitle);\r\n\r\n            $title.text(title);\r\n            $title.append($subTitle);\r\n        },\r\n\r\n        /**\r\n         * Set sub title for modal.\r\n         *\r\n         * @param {String} subTitle\r\n         */\r\n        setSubTitle: function (subTitle) {\r\n            this.options.subTitle = subTitle;\r\n            this.modal.find(this.options.modalSubTitle).html(subTitle);\r\n        },\r\n\r\n        /**\r\n         * Toggle modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        toggleModal: function () {\r\n            if (this.options.isOpen === true) {\r\n                this.closeModal();\r\n            } else {\r\n                this.openModal();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        openModal: function () {\r\n            this.options.isOpen = true;\r\n            this.focussedElement = document.activeElement;\r\n            this._createOverlay();\r\n            this._setActive();\r\n            this._setKeyListener();\r\n            this.modal.one(this.options.transitionEvent, _.bind(this._setFocus, this, 'end', 'opened'));\r\n            this.modal.one(this.options.transitionEvent, _.bind(this._trigger, this, 'opened'));\r\n            this.modal.addClass(this.options.modalVisibleClass);\r\n\r\n            if (!this.options.transitionEvent) {\r\n                this._trigger('opened');\r\n            }\r\n\r\n            return this.element;\r\n        },\r\n\r\n        /**\r\n         * Set focus to element.\r\n         * @param {String} position - can be \"start\" and \"end\"\r\n         *      positions.\r\n         *      If position is \"end\" - sets focus to first\r\n         *      focusable element in modal window scope.\r\n         *      If position is \"start\" - sets focus to last\r\n         *      focusable element in modal window scope\r\n         *\r\n         *  @param {String} type - can be \"opened\" or false\r\n         *      If type is \"opened\" - looks to \"this.options.focus\"\r\n         *      property and sets focus\r\n         */\r\n        _setFocus: function (position, type) {\r\n            var focusableElements,\r\n                infelicity;\r\n\r\n            if (type === 'opened' && this.options.focus) {\r\n                this.modal.find($(this.options.focus)).focus();\r\n            } else if (type === 'opened' && !this.options.focus) {\r\n                this.modal.find(this.options.focusableScope).focus();\r\n            } else if (position === 'end') {\r\n                this.modal.find(this.options.modalCloseBtn).focus();\r\n            } else if (position === 'start') {\r\n                infelicity = 2; //Constant for find last focusable element\r\n                focusableElements = this.modal.find(':focusable');\r\n                focusableElements.eq(focusableElements.length - infelicity).focus();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set events listener when modal is opened.\r\n         */\r\n        _setKeyListener: function () {\r\n            this.modal.find(this.options.focusableStart).bind('focusin', this._tabSwitcher);\r\n            this.modal.find(this.options.focusableEnd).bind('focusin', this._tabSwitcher);\r\n            this.modal.bind('keydown', this.keyEventSwitcher);\r\n        },\r\n\r\n        /**\r\n         * Remove events listener when modal is closed.\r\n         */\r\n        _removeKeyListener: function () {\r\n            this.modal.find(this.options.focusableStart).unbind('focusin', this._tabSwitcher);\r\n            this.modal.find(this.options.focusableEnd).unbind('focusin', this._tabSwitcher);\r\n            this.modal.unbind('keydown', this.keyEventSwitcher);\r\n        },\r\n\r\n        /**\r\n         * Switcher for focus event.\r\n         * @param {Object} e - event\r\n         */\r\n        _tabSwitcher: function (e) {\r\n            var target = $(e.target);\r\n\r\n            if (target.is(this.options.focusableStart)) {\r\n                this._setFocus('start');\r\n            } else if (target.is(this.options.focusableEnd)) {\r\n                this._setFocus('end');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        closeModal: function () {\r\n            var that = this;\r\n\r\n            this._removeKeyListener();\r\n            this.options.isOpen = false;\r\n            this.modal.one(this.options.transitionEvent, function () {\r\n                that._close();\r\n            });\r\n            this.modal.removeClass(this.options.modalVisibleClass);\r\n\r\n            if (!this.options.transitionEvent) {\r\n                that._close();\r\n            }\r\n\r\n            return this.element;\r\n        },\r\n\r\n        /**\r\n         * Helper for closeModal function.\r\n         */\r\n        _close: function () {\r\n            var trigger = _.bind(this._trigger, this, 'closed', this.modal);\r\n\r\n            $(this.focussedElement).focus();\r\n            this._destroyOverlay();\r\n            this._unsetActive();\r\n            _.defer(trigger, this);\r\n        },\r\n\r\n        /**\r\n         * Set z-index and margin for modal and overlay.\r\n         */\r\n        _setActive: function () {\r\n            var zIndex = this.modal.zIndex(),\r\n                baseIndex = zIndex + this._getVisibleCount();\r\n\r\n            if (this.modal.data('active')) {\r\n                return;\r\n            }\r\n\r\n            this.modal.data('active', true);\r\n\r\n            this.overlay.zIndex(++baseIndex);\r\n            this.prevOverlayIndex = this.overlay.zIndex();\r\n            this.modal.zIndex(this.overlay.zIndex() + 1);\r\n\r\n            if (this._getVisibleSlideCount()) {\r\n                this.modal.css('marginLeft', this.options.modalLeftMargin * this._getVisibleSlideCount());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unset styles for modal and set z-index for previous modal.\r\n         */\r\n        _unsetActive: function () {\r\n            this.modal.removeAttr('style');\r\n            this.modal.data('active', false);\r\n\r\n            if (this.overlay) {\r\n                this.overlay.zIndex(this.prevOverlayIndex - 1);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates wrapper to hold all modals.\r\n         */\r\n        _createWrapper: function () {\r\n            this.modalWrapper = $(this.options.appendTo).find('.' + this.options.wrapperClass);\r\n\r\n            if (!this.modalWrapper.length) {\r\n                this.modalWrapper = $('<div></div>')\r\n                    .addClass(this.options.wrapperClass)\r\n                    .appendTo(this.options.appendTo);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Compile template and append to wrapper.\r\n         */\r\n        _renderModal: function () {\r\n            $(template(\r\n                this.options[this.options.type + 'Tpl'],\r\n                {\r\n                    data: this.options\r\n                })).appendTo(this.modalWrapper);\r\n            this.modal = this.modalWrapper.find(this.options.modalBlock).last();\r\n            this.element.appendTo(this._getElem(this.options.modalContent));\r\n\r\n            if (this.element.is(':hidden')) {\r\n                this.element.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates buttons pane.\r\n         */\r\n        _createButtons: function () {\r\n            this.buttons = this._getElem(this.options.modalAction);\r\n            _.each(this.options.buttons, function (btn, key) {\r\n                var button = this.buttons[key];\r\n\r\n                if (btn.attr) {\r\n                    $(button).attr(btn.attr);\r\n                }\r\n\r\n                if (btn.class) {\r\n                    $(button).addClass(btn.class);\r\n                }\r\n\r\n                if (!btn.click) {\r\n                    btn.click = this.closeModal;\r\n                }\r\n                $(button).on('click', _.bind(btn.click, this));\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Creates overlay, append it to wrapper, set previous click event on overlay.\r\n         */\r\n        _createOverlay: function () {\r\n            var events,\r\n                outerClickHandler = this.options.outerClickHandler || this.closeModal;\r\n\r\n            this.overlay = $('.' + this.options.overlayClass);\r\n\r\n            if (!this.overlay.length) {\r\n                $(this.options.appendTo).addClass(this.options.parentModalClass);\r\n                this.overlay = $('<div></div>')\r\n                    .addClass(this.options.overlayClass)\r\n                    .appendTo(this.modalWrapper);\r\n            }\r\n            events = $._data(this.overlay.get(0), 'events');\r\n            events ? this.prevOverlayHandler = events.click[0].handler : false;\r\n            this.options.clickableOverlay ? this.overlay.unbind().on('click', outerClickHandler) : false;\r\n        },\r\n\r\n        /**\r\n         * Destroy overlay.\r\n         */\r\n        _destroyOverlay: function () {\r\n            if (this._getVisibleCount()) {\r\n                this.overlay.unbind().on('click', this.prevOverlayHandler);\r\n            } else {\r\n                $(this.options.appendTo).removeClass(this.options.parentModalClass);\r\n                this.overlay.remove();\r\n                this.overlay = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.modal;\r\n});\r\n","Magento_Ui/js/modal/modalToggle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, el) {\r\n        var widget,\r\n            content;\r\n\r\n        if (config.contentSelector) {\r\n            content = $(config.contentSelector);\r\n        } else if (config.content) {\r\n            content = $('<div />').html(config.content);\r\n        } else {\r\n            content = $('<div />');\r\n        }\r\n\r\n        widget = content.modal(config);\r\n\r\n        $(el).on(config.toggleEvent, function () {\r\n            var state = widget.data('mage-modal').options.isOpen;\r\n\r\n            if (state) {\r\n                widget.modal('closeModal');\r\n            } else {\r\n                widget.modal('openModal');\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return widget;\r\n    };\r\n});\r\n","Magento_Ui/js/modal/prompt.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/modal/modal-prompt-content.html',\r\n    'jquery-ui-modules/widget',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($, _, template, promptContentTmpl) {\r\n    'use strict';\r\n\r\n    $.widget('mage.prompt', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'prompt',\r\n            promptContentTmpl: promptContentTmpl,\r\n            promptField: '[data-role=\"promptField\"]',\r\n            attributesForm: {},\r\n            attributesField: {},\r\n            value: '',\r\n            validation: false,\r\n            validationRules: [],\r\n            keyEventHandlers: {\r\n\r\n                /**\r\n                 * Enter key press handler,\r\n                 * submit result and close modal window\r\n                 * @param {Object} event - event\r\n                 */\r\n                enterKey: function (event) {\r\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\r\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\r\n                        this.closeModal(true);\r\n                        event.preventDefault();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Tab key press handler,\r\n                 * set focus to elements\r\n                 */\r\n                tabKey: function () {\r\n                    if (document.activeElement === this.modal[0]) {\r\n                        this._setFocus('start');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Escape key press handler,\r\n                 * cancel and close modal window\r\n                 * @param {Object} event - event\r\n                 */\r\n                escapeKey: function (event) {\r\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\r\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\r\n                        this.closeModal();\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            },\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {},\r\n\r\n                /**\r\n                 * Callback confirm.\r\n                 */\r\n                confirm: function () {},\r\n\r\n                /**\r\n                 * Callback cancel.\r\n                 */\r\n                cancel: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Cancel'),\r\n                class: 'action-secondary action-dismiss',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal();\r\n                }\r\n            }, {\r\n                text: $.mage.__('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal(true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Create widget.\r\n         */\r\n        _create: function () {\r\n            this.options.focus = this.options.promptField;\r\n            this.options.validation = this.options.validation && this.options.validationRules.length;\r\n            this.options.outerClickHandler = this.options.outerClickHandler || _.bind(this.closeModal, this, false);\r\n            this._super();\r\n            this.modal.find(this.options.modalContent).append(this.getFormTemplate());\r\n            this.modal.find(this.options.modalCloseBtn).off().on('click',  _.bind(this.closeModal, this, false));\r\n\r\n            if (this.options.validation) {\r\n                this.setValidationClasses();\r\n            }\r\n\r\n            this.openModal();\r\n        },\r\n\r\n        /**\r\n         * Form template getter.\r\n         *\r\n         * @returns {Object} Form template.\r\n         */\r\n        getFormTemplate: function () {\r\n            var formTemplate,\r\n                formAttr = '',\r\n                inputAttr = '',\r\n                attributeName;\r\n\r\n            for (attributeName in this.options.attributesForm) {\r\n                if (this.options.attributesForm.hasOwnProperty(attributeName)) {\r\n                    formAttr = formAttr + ' ' + attributeName + '=\"' +\r\n                        this.options.attributesForm[attributeName] + '\"';\r\n                }\r\n            }\r\n\r\n            for (attributeName in this.options.attributesField) {\r\n                if (this.options.attributesField.hasOwnProperty(attributeName)) {\r\n                    inputAttr = inputAttr + ' ' + attributeName + '=\"' +\r\n                        this.options.attributesField[attributeName] + '\"';\r\n                }\r\n            }\r\n\r\n            formTemplate = $(template(this.options.promptContentTmpl, {\r\n                data: this.options,\r\n                formAttr: formAttr,\r\n                inputAttr: inputAttr\r\n            }));\r\n\r\n            return formTemplate;\r\n        },\r\n\r\n        /**\r\n         * Remove widget\r\n         */\r\n        _remove: function () {\r\n            this.modal.remove();\r\n        },\r\n\r\n        /**\r\n         * Validate prompt field\r\n         */\r\n        validate: function () {\r\n            return $.validator.validateSingleElement(this.options.promptField);\r\n        },\r\n\r\n        /**\r\n         * Add validation classes to prompt field\r\n         */\r\n        setValidationClasses: function () {\r\n            this.modal.find(this.options.promptField).attr('class', $.proxy(function (i, val) {\r\n                return val + ' ' + this.options.validationRules.join(' ');\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Open modal window\r\n         */\r\n        openModal: function () {\r\n            this._super();\r\n            this.modal.find(this.options.promptField).val(this.options.value);\r\n        },\r\n\r\n        /**\r\n         * Close modal window\r\n         */\r\n        closeModal: function (result) {\r\n            var value;\r\n\r\n            if (result) {\r\n                if (this.options.validation && !this.validate()) {\r\n                    return false;\r\n                }\r\n\r\n                value = this.modal.find(this.options.promptField).val();\r\n                this.options.actions.confirm.call(this, value);\r\n            } else {\r\n                this.options.actions.cancel.call(this, result);\r\n            }\r\n\r\n            this.options.actions.always();\r\n            this.element.bind('promptclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div class=\"prompt-message\"></div>').html(config.content).prompt(config);\r\n    };\r\n});\r\n","Magento_Ui/js/model/messageList.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './messages'\r\n], function (Messages) {\r\n    'use strict';\r\n\r\n    return new Messages();\r\n});\r\n","Magento_Ui/js/model/messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'uiClass'\r\n], function (ko, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super()\r\n                .initObservable();\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this.errorMessages = ko.observableArray([]);\r\n            this.successMessages = ko.observableArray([]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add  message to list.\r\n         * @param {Object} messageObj\r\n         * @param {Object} type\r\n         * @returns {Boolean}\r\n         */\r\n        add: function (messageObj, type) {\r\n            var expr = /([%])\\w+/g,\r\n                message;\r\n\r\n            if (!messageObj.hasOwnProperty('parameters')) {\r\n                this.clear();\r\n                type.push(messageObj.message);\r\n\r\n                return true;\r\n            }\r\n            message = messageObj.message.replace(expr, function (varName) {\r\n                varName = varName.substr(1);\r\n\r\n                if (!isNaN(varName)) {\r\n                    varName--;\r\n                }\r\n\r\n                if (messageObj.parameters.hasOwnProperty(varName)) {\r\n                    return messageObj.parameters[varName];\r\n                }\r\n\r\n                return messageObj.parameters.shift();\r\n            });\r\n            this.clear();\r\n            type.push(message);\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Add success message.\r\n         *\r\n         * @param {Object} message\r\n         * @return {*|Boolean}\r\n         */\r\n        addSuccessMessage: function (message) {\r\n            return this.add(message, this.successMessages);\r\n        },\r\n\r\n        /**\r\n         * Add error message.\r\n         *\r\n         * @param {Object} message\r\n         * @return {*|Boolean}\r\n         */\r\n        addErrorMessage: function (message) {\r\n            return this.add(message, this.errorMessages);\r\n        },\r\n\r\n        /**\r\n         * Get error messages.\r\n         *\r\n         * @return {Array}\r\n         */\r\n        getErrorMessages: function () {\r\n            return this.errorMessages;\r\n        },\r\n\r\n        /**\r\n         * Get success messages.\r\n         *\r\n         * @return {Array}\r\n         */\r\n        getSuccessMessages: function () {\r\n            return this.successMessages;\r\n        },\r\n\r\n        /**\r\n         * Checks if an instance has stored messages.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        hasMessages: function () {\r\n            return this.errorMessages().length > 0 || this.successMessages().length > 0;\r\n        },\r\n\r\n        /**\r\n         * Removes stored messages.\r\n         */\r\n        clear: function () {\r\n            this.errorMessages.removeAll();\r\n            this.successMessages.removeAll();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/view/messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'uiComponent',\r\n    '../model/messageList',\r\n    'jquery-ui-modules/effect-blind'\r\n], function (ko, $, Component, globalMessages) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_Ui/messages',\r\n            selector: '[data-role=checkout-messages]',\r\n            isHidden: false,\r\n            hideTimeout: 5000,\r\n            hideSpeed: 500,\r\n            listens: {\r\n                isHidden: 'onHiddenChange'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function (config, messageContainer) {\r\n            this._super()\r\n                .initObservable();\r\n\r\n            this.messageContainer = messageContainer || config.messageContainer || globalMessages;\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('isHidden');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks visibility.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isVisible: function () {\r\n            return this.isHidden(this.messageContainer.hasMessages());\r\n        },\r\n\r\n        /**\r\n         * Remove all messages.\r\n         */\r\n        removeAll: function () {\r\n            this.messageContainer.clear();\r\n        },\r\n\r\n        /**\r\n         * @param {Boolean} isHidden\r\n         */\r\n        onHiddenChange: function (isHidden) {\r\n            // Hide message block if needed\r\n            if (isHidden) {\r\n                setTimeout(function () {\r\n                    $(this.selector).hide('blind', {}, this.hideSpeed);\r\n                }.bind(this), this.hideTimeout);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ups/js/model/shipping-rates-validation-rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        getRules: function () {\r\n            return {\r\n                'postcode': {\r\n                    'required': true\r\n                },\r\n                'country_id': {\r\n                    'required': true\r\n                }\r\n            };\r\n        }\r\n    };\r\n});\r\n","Magento_Ups/js/model/shipping-rates-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mageUtils',\r\n    'Magento_Ups/js/model/shipping-rates-validation-rules',\r\n    'mage/translate'\r\n], function ($, utils, validationRules, $t) {\r\n    'use strict';\r\n\r\n    return {\r\n        validationErrors: [],\r\n\r\n        /**\r\n         * @param {Object} address\r\n         * @return {Boolean}\r\n         */\r\n        validate: function (address) {\r\n            var self = this;\r\n\r\n            this.validationErrors = [];\r\n            $.each(validationRules.getRules(), function (field, rule) {\r\n                var message;\r\n\r\n                if (rule.required && utils.isEmpty(address[field])) {\r\n                    message = $t('Field ') + field + $t(' is required.');\r\n                    self.validationErrors.push(message);\r\n                }\r\n            });\r\n\r\n            return !this.validationErrors.length;\r\n        }\r\n    };\r\n});\r\n","Magento_Ups/js/view/shipping-rates-validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/shipping-rates-validator',\r\n    'Magento_Checkout/js/model/shipping-rates-validation-rules',\r\n    'Magento_Ups/js/model/shipping-rates-validator',\r\n    'Magento_Ups/js/model/shipping-rates-validation-rules'\r\n], function (\r\n    Component,\r\n    defaultShippingRatesValidator,\r\n    defaultShippingRatesValidationRules,\r\n    upsShippingRatesValidator,\r\n    upsShippingRatesValidationRules\r\n) {\r\n    'use strict';\r\n\r\n    defaultShippingRatesValidator.registerValidator('ups', upsShippingRatesValidator);\r\n    defaultShippingRatesValidationRules.registerRules('ups', upsShippingRatesValidationRules);\r\n\r\n    return Component;\r\n});\r\n","Magento_Usps/js/model/shipping-rates-validation-rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        getRules: function () {\r\n            return {\r\n                'country_id': {\r\n                    'required': true\r\n                },\r\n                'postcode': {\r\n                    'required': false\r\n                }\r\n            };\r\n        }\r\n    };\r\n});\r\n","Magento_Usps/js/model/shipping-rates-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mageUtils',\r\n    './shipping-rates-validation-rules',\r\n    'mage/translate'\r\n], function ($, utils, validationRules, $t) {\r\n    'use strict';\r\n\r\n    var checkoutConfig = window.checkoutConfig;\r\n\r\n    return {\r\n        validationErrors: [],\r\n\r\n        /**\r\n         * @param {Object} address\r\n         * @return {Boolean}\r\n         */\r\n        validate: function (address) {\r\n            var rules = validationRules.getRules(),\r\n                self = this;\r\n\r\n            $.each(rules, function (field, rule) {\r\n                var message;\r\n\r\n                if (rule.required && utils.isEmpty(address[field])) {\r\n                    message = $t('Field ') + field + $t(' is required.');\r\n                    self.validationErrors.push(message);\r\n                }\r\n            });\r\n\r\n            if (!this.validationErrors.length) {\r\n                if (address['country_id'] == checkoutConfig.originCountryCode) { //eslint-disable-line eqeqeq\r\n                    return !utils.isEmpty(address.postcode);\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n});\r\n","Magento_Usps/js/view/shipping-rates-validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/shipping-rates-validator',\r\n    'Magento_Checkout/js/model/shipping-rates-validation-rules',\r\n    '../model/shipping-rates-validator',\r\n    '../model/shipping-rates-validation-rules'\r\n], function (\r\n    Component,\r\n    defaultShippingRatesValidator,\r\n    defaultShippingRatesValidationRules,\r\n    uspsShippingRatesValidator,\r\n    uspsShippingRatesValidationRules\r\n) {\r\n    'use strict';\r\n\r\n    defaultShippingRatesValidator.registerValidator('usps', uspsShippingRatesValidator);\r\n    defaultShippingRatesValidationRules.registerRules('usps', uspsShippingRatesValidationRules);\r\n\r\n    return Component;\r\n});\r\n","Magento_Variable/js/grid/columns/radioselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'jquery'\r\n], function (_, $t, Column, jQuery) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Variable/grid/cells/radioselect',\r\n            draggable: false,\r\n            sortable: false,\r\n            selectedVariableCode: null,\r\n            selectedVariableType: null\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['selectedVariableCode']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Remove disable class from Insert Variable button after Variable has been chosen.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        selectVariable: function () {\r\n            if (jQuery('#insert_variable').hasClass('disabled')) {\r\n                jQuery('#insert_variable').removeClass('disabled');\r\n            }\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Vault/js/customer_account/deleteWidget.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modalToggle',\r\n    'mage/translate'\r\n], function ($, modalToggle) {\r\n    'use strict';\r\n\r\n    return function (config, deleteButton) {\r\n        config.buttons = [\r\n            {\r\n                text: $.mage.__('Cancel'),\r\n                class: 'action secondary cancel'\r\n            }, {\r\n                text: $.mage.__('Delete'),\r\n                class: 'action primary',\r\n\r\n                /**\r\n                 * Default action on button click\r\n                 */\r\n                click: function (event) { //eslint-disable-line no-unused-vars\r\n                    $(deleteButton.form).submit();\r\n                }\r\n            }\r\n        ];\r\n\r\n        modalToggle(config, deleteButton);\r\n    };\r\n});\r\n","Magento_Vault/js/view/payment/vault-enabler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n/* @api */\r\ndefine(\r\n    [\r\n        'uiElement'\r\n    ],\r\n    function (\r\n        Component\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                isActivePaymentTokenEnabler: true\r\n            },\r\n\r\n            /**\r\n             * @param {String} paymentCode\r\n             */\r\n            setPaymentCode: function (paymentCode) {\r\n                this.paymentCode = paymentCode;\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initObservable: function () {\r\n                this._super()\r\n                    .observe([\r\n                        'isActivePaymentTokenEnabler'\r\n                    ]);\r\n\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * @param {Object} data\r\n             */\r\n            visitAdditionalData: function (data) {\r\n                if (!this.isVaultEnabled()) {\r\n                    return;\r\n                }\r\n\r\n                if (!('additional_data' in data)) {\r\n                    data['additional_data'] = {};\r\n                }\r\n\r\n                data['additional_data']['is_active_payment_token_enabler'] = this.isActivePaymentTokenEnabler();\r\n            },\r\n\r\n            /**\r\n             * @returns {Boolean}\r\n             */\r\n            isVaultEnabled: function () {\r\n                return typeof window.checkoutConfig.vault[this.paymentCode] !== 'undefined' &&\r\n                    window.checkoutConfig.vault[this.paymentCode]['is_enabled'] === true;\r\n            }\r\n        });\r\n    }\r\n);\r\n","Magento_Vault/js/view/payment/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n/* @api */\r\ndefine([\r\n    'underscore',\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/payment/renderer-list',\r\n    'uiLayout',\r\n    'uiRegistry'\r\n], function (_, Component, rendererList, layout, registry) {\r\n    'use strict';\r\n\r\n    var vaultGroupName = 'vaultGroup';\r\n\r\n    layout([{\r\n        name: vaultGroupName,\r\n        component: 'Magento_Checkout/js/model/payment/method-group',\r\n        alias: 'vault',\r\n        sortOrder: 10\r\n    }]);\r\n\r\n    registry.get(vaultGroupName, function (vaultGroup) {\r\n        _.each(window.checkoutConfig.payment.vault, function (config, index) {\r\n            rendererList.push(\r\n                {\r\n                    type: index,\r\n                    config: config.config,\r\n                    component: config.component,\r\n                    group: vaultGroup,\r\n\r\n                    /**\r\n                     * Custom payment method types comparator\r\n                     * @param {String} typeA\r\n                     * @param {String} typeB\r\n                     * @return {Boolean}\r\n                     */\r\n                    typeComparatorCallback: function (typeA, typeB) {\r\n                        // vault token items have the same name as vault payment without index\r\n                        return typeA.substring(0, typeA.lastIndexOf('_')) === typeB;\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Add view logic here if needed\r\n     */\r\n    return Component.extend({});\r\n});\r\n","Magento_Vault/js/view/payment/method-renderer/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'Magento_Checkout/js/action/select-payment-method',\r\n        'Magento_Checkout/js/checkout-data'\r\n    ],\r\n    function (Component, selectPaymentMethod, checkoutData) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                template: 'Magento_Vault/payment/form'\r\n            },\r\n\r\n            /**\r\n             * @returns {exports.initObservable}\r\n             */\r\n            initObservable: function () {\r\n                this._super()\r\n                    .observe([]);\r\n\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * @returns\r\n             */\r\n            selectPaymentMethod: function () {\r\n                selectPaymentMethod(\r\n                    {\r\n                        method: this.getId()\r\n                    }\r\n                );\r\n                checkoutData.setSelectedPaymentMethod(this.getId());\r\n\r\n                return true;\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getTitle: function () {\r\n                return '';\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getToken: function () {\r\n                return '';\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getId: function () {\r\n                return this.index;\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getCode: function () {\r\n                return this.code;\r\n            },\r\n\r\n            /**\r\n             * Get last 4 digits of card\r\n             * @returns {String}\r\n             */\r\n            getMaskedCard: function () {\r\n                return '';\r\n            },\r\n\r\n            /**\r\n             * Get expiration date\r\n             * @returns {String}\r\n             */\r\n            getExpirationDate: function () {\r\n                return '';\r\n            },\r\n\r\n            /**\r\n             * Get card type\r\n             * @returns {String}\r\n             */\r\n            getCardType: function () {\r\n                return '';\r\n            },\r\n\r\n            /**\r\n             * @param {String} type\r\n             * @returns {Boolean}\r\n             */\r\n            getIcons: function (type) {\r\n                return window.checkoutConfig.payment.ccform.icons.hasOwnProperty(type) ?\r\n                    window.checkoutConfig.payment.ccform.icons[type]\r\n                    : false;\r\n            },\r\n\r\n            /**\r\n             * Return state of place order button.\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isButtonActive: function () {\r\n                return this.isActive() && this.isPlaceOrderActionAllowed();\r\n            },\r\n\r\n            /**\r\n             * Check if payment is active.\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isActive: function () {\r\n                return this.isChecked() === this.getId();\r\n            },\r\n\r\n            /**\r\n             * @returns {*}\r\n             */\r\n            getData: function () {\r\n                var data = {\r\n                    method: this.getCode()\r\n                };\r\n\r\n                data['additional_data'] = {};\r\n                data['additional_data']['public_hash'] = this.getToken();\r\n\r\n                return data;\r\n            }\r\n        });\r\n    }\r\n);\r\n","Magento_Weee/js/tax-toggle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {Object} config\r\n     * @param {jQuery.Event} e\r\n     */\r\n    function onToggle(config, e) {\r\n        var elem = $(e.currentTarget),\r\n            expandedClassName = config.expandedClassName || 'cart-tax-total-expanded';\r\n\r\n        elem.toggleClass(expandedClassName);\r\n\r\n        $(config.itemTaxId).toggle();\r\n    }\r\n\r\n    return function (data, el) {\r\n        $(el).on('click', onToggle.bind(null, data));\r\n    };\r\n});\r\n","Magento_Weee/js/price/adjustment.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Weee/price/adjustment',\r\n            dataSource: '${ $.parentName }.provider',\r\n            //Weee configuration constants can be configured from backend\r\n            inclFptWithDesc: 1,//show FPT and description\r\n            inclFpt: 0, //show FPT attribute\r\n            exclFpt: 2, //do not show FPT\r\n            bothFptPrices: 3 //show price without FPT and with FPT and with description\r\n        },\r\n\r\n        /**\r\n         * Get Weee attributes.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeAttributes: function (row) {\r\n            return row['price_info']['extension_attributes']['weee_attributes'];\r\n        },\r\n\r\n        /**\r\n         * Get Weee without Tax attributes.\r\n         *\r\n         * @param {Object} taxAmount\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeTaxWithoutTax: function (taxAmount) {\r\n            return taxAmount['amount_excl_tax'];\r\n        },\r\n\r\n        /**\r\n         * Get Weee with Tax attributes.\r\n         *\r\n         * @param {Object} taxAmount\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeTaxWithTax: function (taxAmount) {\r\n            return taxAmount['tax_amount_incl_tax'];\r\n        },\r\n\r\n        /**\r\n         * Get Weee Tax name.\r\n         *\r\n         * @param {String} taxAmount\r\n         * @return {String} Weee name\r\n         */\r\n        getWeeTaxAttributeName: function (taxAmount) {\r\n            return taxAmount['attribute_code'];\r\n        },\r\n\r\n        /**\r\n         * Set price type.\r\n         *\r\n         * @param {String} priceType\r\n         * @return {Object}\r\n         */\r\n        setPriceType: function (priceType) {\r\n            this.taxPriceType = priceType;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check if Weee Tax must be shown.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        isShown: function (row) {\r\n            return row['price_info']['extension_attributes']['weee_attributes'].length;\r\n        },\r\n\r\n        /**\r\n         * Get Weee final price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} Weee final price html\r\n         */\r\n        getWeeeAdjustment: function (row) {\r\n            return row['price_info']['extension_attributes']['weee_adjustment'];\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price including FPT only.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceInclFpt: function () {\r\n            return +this.source.data.displayWeee === this.inclFpt;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display\r\n         * price including FPT and FPT description.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceInclFptDescr: function () {\r\n            return +this.source.data.displayWeee === this.inclFptWithDesc;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price\r\n         * excluding FPT but including FPT description and final price.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclFptDescr: function () {\r\n            return +this.source.data.displayWeee === this.exclFpt;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price excluding FPT.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclFpt: function () {\r\n            return +this.source.data.displayWeee === this.bothFptPrices;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclTax: function () {\r\n            return +this.source.data.displayTaxes === this.inclFptWithDesc;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price including tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceInclTax: function () {\r\n            return +this.source.data.displayTaxes === this.exclFpt;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display\r\n         * both price including tax and price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayBothPricesTax: function () {\r\n            return +this.source.data.displayTaxes === this.bothFptPrices;\r\n        }\r\n    });\r\n});\r\n","Magento_Weee/js/view/cart/totals/weee.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Weee/js/view/checkout/summary/weee'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        isFullMode: function () {\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Weee/js/view/checkout/summary/weee.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'Magento_Checkout/js/view/summary/abstract-total',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/totals',\r\n    'Magento_Catalog/js/price-utils'\r\n], function (Component, quote, totals) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_Weee/checkout/summary/weee'\r\n        },\r\n        isIncludedInSubtotal: window.checkoutConfig.isIncludedInSubtotal,\r\n        totals: totals.totals,\r\n\r\n        /**\r\n         * @returns {Number}\r\n         */\r\n        getWeeeTaxSegment: function () {\r\n            var weee = totals.getSegment('weee_tax') || totals.getSegment('weee');\r\n\r\n            if (weee !== null && weee.hasOwnProperty('value')) {\r\n                return weee.value;\r\n            }\r\n\r\n            return 0;\r\n        },\r\n\r\n        /**\r\n         * Get weee value\r\n         * @returns {String}\r\n         */\r\n        getValue: function () {\r\n            return this.getFormattedPrice(this.getWeeeTaxSegment());\r\n        },\r\n\r\n        /**\r\n         * Weee display flag\r\n         * @returns {Boolean}\r\n         */\r\n        isDisplayed: function () {\r\n            return this.isFullMode() && this.getWeeeTaxSegment() > 0;\r\n        }\r\n    });\r\n});\r\n","Magento_Weee/js/view/checkout/summary/item/price/row_excl_tax.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'Magento_Weee/js/view/checkout/summary/item/price/weee'\r\n], function (weee) {\r\n    'use strict';\r\n\r\n    return weee.extend({\r\n        defaults: {\r\n            template: 'Magento_Weee/checkout/summary/item/price/row_excl_tax'\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Number}\r\n         */\r\n        getFinalRowDisplayPriceExclTax: function (item) {\r\n            var rowTotalExclTax = parseFloat(item['row_total']);\r\n\r\n            if (!window.checkoutConfig.getIncludeWeeeFlag) {\r\n                rowTotalExclTax += parseFloat(item['weee_tax_applied_amount']);\r\n            }\r\n\r\n            return rowTotalExclTax;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Number}\r\n         */\r\n        getRowDisplayPriceExclTax: function (item) {\r\n            var rowTotalExclTax = parseFloat(item['row_total']);\r\n\r\n            if (window.checkoutConfig.getIncludeWeeeFlag) {\r\n                rowTotalExclTax += this.getRowWeeeTaxExclTax(item);\r\n            }\r\n\r\n            return rowTotalExclTax;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Number}\r\n         */\r\n        getRowWeeeTaxExclTax: function (item) {\r\n            var totalWeeeTaxExclTaxApplied = 0,\r\n                weeeTaxAppliedAmounts;\r\n\r\n            if (item['weee_tax_applied']) {\r\n                weeeTaxAppliedAmounts = JSON.parse(item['weee_tax_applied']);\r\n                weeeTaxAppliedAmounts.forEach(function (weeeTaxAppliedAmount) {\r\n                    totalWeeeTaxExclTaxApplied += parseFloat(Math.max(weeeTaxAppliedAmount['row_amount'], 0));\r\n                });\r\n            }\r\n\r\n            return totalWeeeTaxExclTaxApplied;\r\n        }\r\n\r\n    });\r\n});\r\n","Magento_Weee/js/view/checkout/summary/item/price/row_incl_tax.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'Magento_Weee/js/view/checkout/summary/item/price/weee'\r\n], function (weee) {\r\n    'use strict';\r\n\r\n    return weee.extend({\r\n        defaults: {\r\n            template: 'Magento_Weee/checkout/summary/item/price/row_incl_tax',\r\n            displayArea: 'row_incl_tax'\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Number}\r\n         */\r\n        getFinalRowDisplayPriceInclTax: function (item) {\r\n            var rowTotalInclTax = parseFloat(item['row_total_incl_tax']);\r\n\r\n            if (!window.checkoutConfig.getIncludeWeeeFlag) {\r\n                rowTotalInclTax += this.getRowWeeeTaxInclTax(item);\r\n            }\r\n\r\n            return rowTotalInclTax;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Number}\r\n         */\r\n        getRowDisplayPriceInclTax: function (item) {\r\n            var rowTotalInclTax = parseFloat(item['row_total_incl_tax']);\r\n\r\n            if (window.checkoutConfig.getIncludeWeeeFlag) {\r\n                rowTotalInclTax += this.getRowWeeeTaxInclTax(item);\r\n            }\r\n\r\n            return rowTotalInclTax;\r\n        },\r\n\r\n        /**\r\n         * @param {Object}item\r\n         * @return {Number}\r\n         */\r\n        getRowWeeeTaxInclTax: function (item) {\r\n            var totalWeeeTaxInclTaxApplied = 0,\r\n                weeeTaxAppliedAmounts;\r\n\r\n            if (item['weee_tax_applied']) {\r\n                weeeTaxAppliedAmounts = JSON.parse(item['weee_tax_applied']);\r\n                weeeTaxAppliedAmounts.forEach(function (weeeTaxAppliedAmount) {\r\n                    totalWeeeTaxInclTaxApplied += parseFloat(Math.max(weeeTaxAppliedAmount['row_amount_incl_tax'], 0));\r\n                });\r\n            }\r\n\r\n            return totalWeeeTaxInclTaxApplied;\r\n        }\r\n\r\n    });\r\n});\r\n","Magento_Weee/js/view/checkout/summary/item/price/weee.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'Magento_Checkout/js/view/summary/abstract-total',\r\n    'Magento_Checkout/js/model/quote'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Boolean}\r\n         */\r\n        isDisplayPriceWithWeeeDetails: function (item) {\r\n            if (!parseFloat(item['weee_tax_applied_amount']) || parseFloat(item['weee_tax_applied_amount'] <= 0)) {\r\n                return false;\r\n            }\r\n\r\n            return window.checkoutConfig.isDisplayPriceWithWeeeDetails;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Boolean}\r\n         */\r\n        isDisplayFinalPrice: function (item) {\r\n            if (!parseFloat(item['weee_tax_applied_amount'])) {\r\n                return false;\r\n            }\r\n\r\n            return window.checkoutConfig.isDisplayFinalPrice;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Array}\r\n         */\r\n        getWeeeTaxApplied: function (item) {\r\n            if (item['weee_tax_applied']) {\r\n                return JSON.parse(item['weee_tax_applied']);\r\n            }\r\n\r\n            return [];\r\n        }\r\n    });\r\n});\r\n","Magento_Wishlist/js/add-to-wishlist.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.addToWishlist', {\r\n        options: {\r\n            bundleInfo: 'div.control [name^=bundle_option]',\r\n            configurableInfo: '.super-attribute-select',\r\n            groupedInfo: '#super-product-table input',\r\n            downloadableInfo: '#downloadable-links-list input',\r\n            customOptionsInfo: '.product-custom-option',\r\n            qtyInfo: '#qty',\r\n            actionElement: '[data-action=\"add-to-wishlist\"]'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var options = this.options,\r\n                dataUpdateFunc = '_updateWishlistData',\r\n                validateProductQty = '_validateWishlistQty',\r\n                changeCustomOption = 'change ' + options.customOptionsInfo,\r\n                changeQty = 'change ' + options.qtyInfo,\r\n                updateWishlist = 'click ' + options.actionElement,\r\n                events = {},\r\n                key;\r\n\r\n            if ('productType' in options) {\r\n                if (typeof options.productType === 'string') {\r\n                    options.productType = [options.productType];\r\n                }\r\n            } else {\r\n                options.productType = [];\r\n            }\r\n\r\n            events[changeCustomOption] = dataUpdateFunc;\r\n            events[changeQty] = dataUpdateFunc;\r\n            events[updateWishlist] = validateProductQty;\r\n\r\n            for (key in options.productType) {\r\n                if (options.productType.hasOwnProperty(key) && options.productType[key] + 'Info' in options) {\r\n                    events['change ' + options[options.productType[key] + 'Info']] = dataUpdateFunc;\r\n                }\r\n            }\r\n            this._on(events);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _updateWishlistData: function (event) {\r\n            var dataToAdd = {},\r\n                isFileUploaded = false,\r\n                self = this;\r\n\r\n            if (event.handleObj.selector == this.options.qtyInfo) { //eslint-disable-line eqeqeq\r\n                this._updateAddToWishlistButton({});\r\n                event.stopPropagation();\r\n\r\n                return;\r\n            }\r\n            $(event.handleObj.selector).each(function (index, element) {\r\n                if ($(element).is('input[type=text]') ||\r\n                    $(element).is('input[type=email]') ||\r\n                    $(element).is('input[type=number]') ||\r\n                    $(element).is('input[type=hidden]') ||\r\n                    $(element).is('input[type=checkbox]:checked') ||\r\n                    $(element).is('input[type=radio]:checked') ||\r\n                    $(element).is('textarea') ||\r\n                    $('#' + element.id + ' option:selected').length\r\n                ) {\r\n                    if ($(element).data('selector') || $(element).attr('name')) {\r\n                        dataToAdd = $.extend({}, dataToAdd, self._getElementData(element));\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                if ($(element).is('input[type=file]') && $(element).val()) {\r\n                    isFileUploaded = true;\r\n                }\r\n            });\r\n\r\n            if (isFileUploaded) {\r\n                this.bindFormSubmit();\r\n            }\r\n            this._updateAddToWishlistButton(dataToAdd);\r\n            event.stopPropagation();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} dataToAdd\r\n         * @private\r\n         */\r\n        _updateAddToWishlistButton: function (dataToAdd) {\r\n            var self = this;\r\n\r\n            $('[data-action=\"add-to-wishlist\"]').each(function (index, element) {\r\n                var params = $(element).data('post');\r\n\r\n                if (!params) {\r\n                    params = {\r\n                        'data': {}\r\n                    };\r\n                }\r\n\r\n                params.data = $.extend({}, params.data, dataToAdd, {\r\n                    'qty': $(self.options.qtyInfo).val()\r\n                });\r\n                $(element).data('post', params);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} array1\r\n         * @param {Object} array2\r\n         * @return {Object}\r\n         * @private\r\n         * @deprecated\r\n         */\r\n        _arrayDiffByKeys: function (array1, array2) {\r\n            var result = {};\r\n\r\n            $.each(array1, function (key, value) {\r\n                if (key.indexOf('option') === -1) {\r\n                    return;\r\n                }\r\n\r\n                if (!array2[key]) {\r\n                    result[key] = value;\r\n                }\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _getElementData: function (element) {\r\n            var data, elementName, elementValue;\r\n\r\n            element = $(element);\r\n            data = {};\r\n            elementName = element.data('selector') ? element.data('selector') : element.attr('name');\r\n            elementValue = element.val();\r\n\r\n            if (element.is('select[multiple]') && elementValue !== null) {\r\n                if (elementName.substr(elementName.length - 2) == '[]') { //eslint-disable-line eqeqeq\r\n                    elementName = elementName.substring(0, elementName.length - 2);\r\n                }\r\n                $.each(elementValue, function (key, option) {\r\n                    data[elementName + '[' + option + ']'] = option;\r\n                });\r\n            } else if (elementName.substr(elementName.length - 2) == '[]') { //eslint-disable-line eqeqeq, max-depth\r\n                elementName = elementName.substring(0, elementName.length - 2);\r\n\r\n                data[elementName + '[' + elementValue + ']'] = elementValue;\r\n            } else {\r\n                data[elementName] = elementValue;\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} params\r\n         * @param {Object} dataToAdd\r\n         * @private\r\n         * @deprecated\r\n         */\r\n        _removeExcessiveData: function (params, dataToAdd) {\r\n            var dataToRemove = this._arrayDiffByKeys(params.data, dataToAdd);\r\n\r\n            $.each(dataToRemove, function (key) {\r\n                delete params.data[key];\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Bind form submit.\r\n         */\r\n        bindFormSubmit: function () {\r\n            var self = this;\r\n\r\n            $('[data-action=\"add-to-wishlist\"]').on('click', function (event) {\r\n                var element, params, form, action;\r\n\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n\r\n                element = $('input[type=file]' + self.options.customOptionsInfo);\r\n                params = $(event.currentTarget).data('post');\r\n                form = $(element).closest('form');\r\n                action = params.action;\r\n\r\n                if (params.data.id) {\r\n                    $('<input>', {\r\n                        type: 'hidden',\r\n                        name: 'id',\r\n                        value: params.data.id\r\n                    }).appendTo(form);\r\n                }\r\n\r\n                if (params.data.uenc) {\r\n                    action += 'uenc/' + params.data.uenc;\r\n                }\r\n\r\n                $(form).attr('action', action).submit();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Validate product quantity before updating Wish List\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _validateWishlistQty: function (event) {\r\n            var element = $(this.options.qtyInfo);\r\n\r\n            if (!(element.validation() && element.validation('isValid'))) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                return;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.addToWishlist;\r\n});\r\n","Magento_Wishlist/js/search.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.wishlistSearch', {\r\n\r\n        /**\r\n         * Bind handlers to events\r\n         */\r\n        _create: function () {\r\n            this.element.on('change', $.proxy(this._toggleForm, this));\r\n        },\r\n\r\n        /**\r\n         * Toggle Form\r\n         * @private\r\n         */\r\n        _toggleForm: function () {\r\n            switch (this.element.val()) {\r\n                case 'name':\r\n                    $(this.options.emailFormSelector).hide();\r\n                    $(this.options.nameFormSelector).show();\r\n                    break;\r\n\r\n                case 'email':\r\n                    $(this.options.nameFormSelector).hide();\r\n                    $(this.options.emailFormSelector).show();\r\n                    break;\r\n                default:\r\n                    $(this.options.emailFormSelector).add(this.options.nameFormSelector).hide();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.wishlistSearch;\r\n});\r\n","Magento_Wishlist/js/wishlist.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery-ui-modules/widget',\r\n    'mage/validation/validation',\r\n    'mage/dataPost'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.wishlist', {\r\n        options: {\r\n            dataAttribute: 'item-id',\r\n            nameFormat: 'qty[{0}]',\r\n            btnRemoveSelector: '[data-role=remove]',\r\n            qtySelector: '[data-role=qty]',\r\n            addToCartSelector: '[data-role=tocart]',\r\n            addAllToCartSelector: '[data-role=all-tocart]',\r\n            commentInputType: 'textarea',\r\n            infoList: false\r\n        },\r\n\r\n        /**\r\n         * Bind handlers to events.\r\n         */\r\n        _create: function () {\r\n            var _this = this;\r\n\r\n            if (!this.options.infoList) {\r\n                this.element\r\n                    .on('addToCart', function (event, context) {\r\n                        var urlParams;\r\n\r\n                        event.stopPropagation(event);\r\n                        $(context).data('stop-processing', true);\r\n                        urlParams = _this._getItemsToCartParams(\r\n                            $(context).parents('[data-row=product-item]').find(_this.options.addToCartSelector)\r\n                        );\r\n                        $.mage.dataPost().postData(urlParams);\r\n\r\n                        return false;\r\n                    })\r\n                    .on('click', this.options.btnRemoveSelector, $.proxy(function (event) {\r\n                        event.preventDefault();\r\n                        $.mage.dataPost().postData($(event.currentTarget).data('post-remove'));\r\n                    }, this))\r\n                    .on('click', this.options.addToCartSelector, $.proxy(this._beforeAddToCart, this))\r\n                    .on('click', this.options.addAllToCartSelector, $.proxy(this._addAllWItemsToCart, this))\r\n                    .on('focusin focusout', this.options.commentInputType, $.proxy(this._focusComment, this));\r\n            }\r\n\r\n            // Setup validation for the form\r\n            this.element.mage('validation', {\r\n                /** @inheritdoc */\r\n                errorPlacement: function (error, element) {\r\n                    error.insertAfter(element.next());\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Process data before add to cart\r\n         *\r\n         * - update item's qty value.\r\n         *\r\n         * @param {Event} event\r\n         * @private\r\n         */\r\n        _beforeAddToCart: function (event) {\r\n            var elem = $(event.currentTarget),\r\n                itemId = elem.data(this.options.dataAttribute),\r\n                qtyName = $.validator.format(this.options.nameFormat, itemId),\r\n                qtyValue = elem.parents().find('[name=\"' + qtyName + '\"]').val(),\r\n                params = elem.data('post');\r\n\r\n            if (params) {\r\n                params.data = $.extend({}, params.data, {\r\n                    'qty': qtyValue\r\n                });\r\n                elem.data('post', params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add wish list items to cart.\r\n         * @private\r\n         * @param {jQuery} elem - clicked 'add to cart' button\r\n         */\r\n        _getItemsToCartParams: function (elem) {\r\n            var itemId, url, qtyName, qtyValue;\r\n\r\n            if (elem.data(this.options.dataAttribute)) {\r\n                itemId = elem.data(this.options.dataAttribute);\r\n                url = this.options.addToCartUrl;\r\n                qtyName = $.validator.format(this.options.nameFormat, itemId);\r\n                qtyValue = elem.parents().find('[name=\"' + qtyName + '\"]').val();\r\n                url.data.item = itemId;\r\n                url.data.qty = qtyValue;\r\n\r\n                return url;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add all wish list items to cart\r\n         * @private\r\n         */\r\n        _addAllWItemsToCart: function () {\r\n            var urlParams = this.options.addAllToCartUrl,\r\n                separator = urlParams.action.indexOf('?') >= 0 ? '&' : '?';\r\n\r\n            this.element.find(this.options.qtySelector).each(function (index, element) {\r\n                urlParams.action += separator + $(element).prop('name') + '=' + encodeURIComponent($(element).val());\r\n                separator = '&';\r\n            });\r\n            $.mage.dataPost().postData(urlParams);\r\n        },\r\n\r\n        /**\r\n         * Toggle comment string.\r\n         * @private\r\n         * @param {Event} e\r\n         */\r\n        _focusComment: function (e) {\r\n            var commentInput = e.currentTarget;\r\n\r\n            if (commentInput.value === '' || commentInput.value === this.options.commentString) {\r\n                commentInput.value = commentInput.value === this.options.commentString ?\r\n                    '' : this.options.commentString;\r\n            }\r\n        }\r\n    });\r\n\r\n    // Extension for mage.wishlist - Select All checkbox\r\n    $.widget('mage.wishlist', $.mage.wishlist, {\r\n        options: {\r\n            selectAllCheckbox: '#select-all',\r\n            parentContainer: '#wishlist-table'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var selectAllCheckboxParent, checkboxCount;\r\n\r\n            this._super();\r\n            selectAllCheckboxParent = $(this.options.selectAllCheckbox).parents(this.options.parentContainer);\r\n            checkboxCount = selectAllCheckboxParent\r\n                .find('input:checkbox:not(' + this.options.selectAllCheckbox + ')').length;\r\n            // If Select all checkbox is checked, check all item checkboxes, if unchecked, uncheck all item checkboxes\r\n            $(this.options.selectAllCheckbox).on('click', function () {\r\n                selectAllCheckboxParent.find('input:checkbox').attr('checked', $(this).is(':checked'));\r\n            });\r\n            // If all item checkboxes are checked, check select all checkbox,\r\n            // if not all item checkboxes are checked, uncheck select all checkbox\r\n            selectAllCheckboxParent.on(\r\n                'click',\r\n                'input:checkbox:not(' + this.options.selectAllCheckbox + ')',\r\n                $.proxy(function () {\r\n                    var checkedCount = selectAllCheckboxParent\r\n                        .find('input:checkbox:checked:not(' + this.options.selectAllCheckbox + ')').length;\r\n\r\n                    $(this.options.selectAllCheckbox).attr('checked', checkboxCount === checkedCount);\r\n                }, this)\r\n            );\r\n        }\r\n    });\r\n    // Extension for mage.wishlist info add to cart\r\n    $.widget('mage.wishlist', $.mage.wishlist, {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._super();\r\n\r\n            if (this.options.infoList) {\r\n                this.element.on('addToCart', $.proxy(function (event, context) {\r\n                    this.element.find('input:checkbox').attr('checked', false);\r\n                    $(context).closest('tr').find('input:checkbox').attr('checked', true);\r\n                    this.element.submit();\r\n                }, this));\r\n                this._checkBoxValidate();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * validate checkbox selection.\r\n         * @private\r\n         */\r\n        _checkBoxValidate: function () {\r\n            this.element.validation({\r\n                submitHandler: $.proxy(function (form) {\r\n                    if ($(form).find('input:checkbox:checked').length) {\r\n                        form.submit();\r\n                    } else {\r\n                        alert({\r\n                            content: this.options.checkBoxValidationMessage\r\n                        });\r\n                    }\r\n                }, this)\r\n            });\r\n        }\r\n    });\r\n\r\n    // Extension for mage.wishlist - Add Wishlist item to Gift Registry\r\n    $.widget('mage.wishlist', $.mage.wishlist, {\r\n        options: {\r\n            formTmplSelector: '#form-tmpl',\r\n            formTmplId: '#wishlist-hidden-form'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var _this = this;\r\n\r\n            this._super();\r\n            this.element.on('click', '[data-wishlist-to-giftregistry]', function () {\r\n                var json = $(this).data('wishlist-to-giftregistry'),\r\n                    tmplJson = {\r\n                        item: json.itemId,\r\n                        entity: json.entity,\r\n                        url: json.url\r\n                    },\r\n                    html = mageTemplate(_this.options.formTmplSelector, {\r\n                        data: tmplJson\r\n                    });\r\n\r\n                $(html).appendTo('body');\r\n                $(_this.options.formTmplId).submit();\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.wishlist;\r\n});\r\n","Magento_Wishlist/js/product/addtowishlist-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Element, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Get request POST data.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['extension_attributes']['wishlist_button'].url);\r\n        },\r\n\r\n        /**\r\n         * Check if component must be shown.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_wishlist', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Wishlist/js/view/wishlist.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Customer/js/customer-data'\r\n], function (Component, customerData) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.wishlist = customerData.get('wishlist');\r\n        }\r\n    });\r\n});\r\n","magnifier/magnifier.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n(function ($) {\r\n    $.fn.magnify = function (options) {\r\n        'use strict';\r\n\r\n        var magnify = new Magnify($(this), options);\r\n\r\n        /* events must be tracked here */\r\n\r\n        /**\r\n         * Return that from _init function\r\n         *\r\n         */\r\n        return magnify;\r\n    };\r\n\r\n    function Magnify(element, options) {\r\n        var customUserOptions = options || {},\r\n            $box = $(element),\r\n            $thumb,\r\n            that = this,\r\n            largeWrapper = options.largeWrapper || '.magnifier-preview',\r\n            $magnifierPreview = $(largeWrapper);\r\n\r\n        curThumb = null,\r\n        magnifierOptions = {\r\n            x: 0,\r\n            y: 0,\r\n            w: 0,\r\n            h: 0,\r\n            lensW: 0,\r\n            lensH: 0,\r\n            lensBgX: 0,\r\n            lensBgY: 0,\r\n            largeW: 0,\r\n            largeH: 0,\r\n            largeL: 0,\r\n            largeT: 0,\r\n            zoom: 2,\r\n            zoomMin: 1.1,\r\n            zoomMax: 5,\r\n            mode: 'outside',\r\n            eventType: 'click',\r\n            status: 0,\r\n            zoomAttached: false,\r\n            zoomable: customUserOptions.zoomable !== undefined ?\r\n                customUserOptions.zoomable\r\n                : false,\r\n            onthumbenter: customUserOptions.onthumbenter !== undefined ?\r\n                customUserOptions.onthumbenter\r\n                : null,\r\n            onthumbmove: customUserOptions.onthumbmove !== undefined ?\r\n                customUserOptions.onthumbmove\r\n                : null,\r\n            onthumbleave: customUserOptions.onthumbleave !== undefined ?\r\n                customUserOptions.onthumbleave\r\n                : null,\r\n            onzoom: customUserOptions.onzoom !== undefined ?\r\n                customUserOptions.onzoom\r\n                : null\r\n        },\r\n        pos = {\r\n            t: 0,\r\n            l: 0,\r\n            x: 0,\r\n            y: 0\r\n        },\r\n        gId = 0,\r\n        status = 0,\r\n        curIdx = '',\r\n        curLens = null,\r\n        curLarge = null,\r\n        lensbg = customUserOptions.bg !== undefined ?\r\n            customUserOptions.lensbg\r\n            : true,\r\n        gZoom = customUserOptions.zoom !== undefined ?\r\n            customUserOptions.zoom\r\n            : magnifierOptions.zoom,\r\n        gZoomMin = customUserOptions.zoomMin !== undefined ?\r\n            customUserOptions.zoomMin\r\n            : magnifierOptions.zoomMin,\r\n        gZoomMax = customUserOptions.zoomMax !== undefined ?\r\n            customUserOptions.zoomMax\r\n            : magnifierOptions.zoomMax,\r\n        gMode = customUserOptions.mode || magnifierOptions.mode,\r\n        gEventType = customUserOptions.eventType || magnifierOptions.eventType,\r\n        data = {},\r\n        inBounds = false,\r\n        isOverThumb = false,\r\n        rate = 1,\r\n        paddingX = 0,\r\n        paddingY = 0,\r\n        enabled = true,\r\n        showWrapper = true;\r\n\r\n        var MagnifyCls = {\r\n            magnifyHidden: 'magnify-hidden',\r\n            magnifyOpaque: 'magnify-opaque',\r\n            magnifyFull: 'magnify-fullimage'\r\n        };\r\n\r\n        /**\r\n         * Update Lens positon on.\r\n         *\r\n         */\r\n        that.update = function () {\r\n            updateLensOnLoad();\r\n        };\r\n\r\n        /**\r\n         * Init new Magnifier\r\n         *\r\n         */\r\n        that.init = function () {\r\n            _init($box, options);\r\n        };\r\n\r\n        function _toBoolean(str) {\r\n            if (typeof str === 'string') {\r\n                if (str === 'true') {\r\n                    return true;\r\n                } else if (str === 'false' || '') {\r\n                    return false;\r\n                }\r\n                console.warn('Wrong type: can\\'t be transformed to Boolean');\r\n\r\n            } else if (typeof str === 'boolean') {\r\n                return str;\r\n            }\r\n        }\r\n\r\n        function createLens(thumb) {\r\n            if ($(thumb).siblings('.magnify-lens').length) {\r\n                return false;\r\n            }\r\n            var lens = $('<div class=\"magnify-lens magnify-hidden\" data-gallery-role=\"magnifier-zoom\"></div>');\r\n\r\n            $(thumb).parent().append(lens);\r\n        }\r\n\r\n        function updateLensOnLoad(idSelectorMainImg, thumb, largeImgInMagnifyLens, largeWrapper) {\r\n            var magnifyLensElement= $box.find('.magnify-lens'),\r\n                textWrapper;\r\n\r\n            if (data[idSelectorMainImg].status === 1) {\r\n                textWrapper = $('<div class=\"magnifier-loader-text\"></div>');\r\n                magnifyLensElement.className = 'magnifier-loader magnify-hidden';\r\n                textWrapper.html('Loading...');\r\n                magnifyLensElement.html('').append(textWrapper);\r\n            } else if (data[idSelectorMainImg].status === 2) {\r\n                magnifyLensElement.addClass(MagnifyCls.magnifyHidden);\r\n                magnifyLensElement.html('');\r\n\r\n                largeImgInMagnifyLens.id = idSelectorMainImg + '-large';\r\n                largeImgInMagnifyLens.style.width = data[idSelectorMainImg].largeImgInMagnifyLensWidth + 'px';\r\n                largeImgInMagnifyLens.style.height = data[idSelectorMainImg].largeImgInMagnifyLensHeight + 'px';\r\n                largeImgInMagnifyLens.className = 'magnifier-large magnify-hidden';\r\n\r\n                if (data[idSelectorMainImg].mode === 'inside') {\r\n                    magnifyLensElement.append(largeImgInMagnifyLens);\r\n                } else {\r\n                    largeWrapper.html('').append(largeImgInMagnifyLens);\r\n                }\r\n            }\r\n\r\n            data[idSelectorMainImg].lensH = data[idSelectorMainImg].lensH > $thumb.height() ? $thumb.height() : data[idSelectorMainImg].lensH;\r\n\r\n            if (Math.round(data[idSelectorMainImg].lensW) === 0) {\r\n                magnifyLensElement.css('display', 'none');\r\n            } else {\r\n                magnifyLensElement.css({\r\n                    width: Math.round(data[idSelectorMainImg].lensW) + 'px',\r\n                    height: Math.round(data[idSelectorMainImg].lensH) + 'px',\r\n                    display: ''\r\n                });\r\n            }\r\n        }\r\n\r\n        function getMousePos() {\r\n            var xPos = pos.x - magnifierOptions.x,\r\n                yPos = pos.y - magnifierOptions.y,\r\n                t,\r\n                l;\r\n\r\n            inBounds =  xPos < 0 || yPos < 0 || xPos > magnifierOptions.w || yPos > magnifierOptions.h  ? false : true;\r\n\r\n            l = xPos - magnifierOptions.lensW / 2;\r\n            t = yPos - magnifierOptions.lensH / 2;\r\n\r\n            if (xPos < magnifierOptions.lensW / 2) {\r\n                l = 0;\r\n            }\r\n\r\n            if (yPos < magnifierOptions.lensH / 2) {\r\n                t = 0;\r\n            }\r\n\r\n            if (xPos - magnifierOptions.w + Math.ceil(magnifierOptions.lensW / 2) > 0) {\r\n                l = magnifierOptions.w - Math.ceil(magnifierOptions.lensW + 2);\r\n            }\r\n\r\n            if (yPos - magnifierOptions.h + Math.ceil(magnifierOptions.lensH / 2) > 0) {\r\n                t = magnifierOptions.h - Math.ceil(magnifierOptions.lensH);\r\n            }\r\n\r\n            pos.l = l;\r\n            pos.t = t;\r\n\r\n            magnifierOptions.lensBgX = pos.l;\r\n            magnifierOptions.lensBgY = pos.t;\r\n\r\n            if (magnifierOptions.mode === 'inside') {\r\n                magnifierOptions.largeL = Math.round(xPos * (magnifierOptions.zoom - magnifierOptions.lensW / magnifierOptions.w));\r\n                magnifierOptions.largeT = Math.round(yPos * (magnifierOptions.zoom - magnifierOptions.lensH / magnifierOptions.h));\r\n            } else {\r\n                magnifierOptions.largeL = Math.round(magnifierOptions.lensBgX * magnifierOptions.zoom * (magnifierOptions.largeWrapperW / magnifierOptions.w));\r\n                magnifierOptions.largeT = Math.round(magnifierOptions.lensBgY * magnifierOptions.zoom * (magnifierOptions.largeWrapperH / magnifierOptions.h));\r\n            }\r\n        }\r\n\r\n        function onThumbEnter() {\r\n            if (_toBoolean(enabled)) {\r\n                magnifierOptions = data[curIdx];\r\n                curLens = $box.find('.magnify-lens');\r\n\r\n                if (magnifierOptions.status === 2) {\r\n                    curLens.removeClass(MagnifyCls.magnifyOpaque);\r\n                    curLarge = $('#' + curIdx + '-large');\r\n                    curLarge.removeClass(MagnifyCls.magnifyHidden);\r\n                } else if (magnifierOptions.status === 1) {\r\n                    curLens.className = 'magnifier-loader';\r\n                }\r\n            }\r\n        }\r\n\r\n        function onThumbLeave() {\r\n            if (magnifierOptions.status > 0) {\r\n                var handler = magnifierOptions.onthumbleave;\r\n\r\n                if (handler !== null) {\r\n                    handler({\r\n                        thumb: curThumb,\r\n                        lens: curLens,\r\n                        large: curLarge,\r\n                        x: pos.x,\r\n                        y: pos.y\r\n                    });\r\n                }\r\n\r\n                if (!curLens.hasClass(MagnifyCls.magnifyHidden)) {\r\n                    curLens.addClass(MagnifyCls.magnifyHidden);\r\n\r\n                    //$curThumb.removeClass(MagnifyCls.magnifyOpaque);\r\n                    if (curLarge !== null) {\r\n                        curLarge.addClass(MagnifyCls.magnifyHidden);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function move() {\r\n            if (_toBoolean(enabled)) {\r\n                if (status !== magnifierOptions.status) {\r\n                    onThumbEnter();\r\n                }\r\n\r\n                if (magnifierOptions.status > 0) {\r\n                    curThumb.className = magnifierOptions.thumbCssClass + ' magnify-opaque';\r\n\r\n                    if (magnifierOptions.status === 1) {\r\n                        curLens.className = 'magnifier-loader';\r\n                    } else if (magnifierOptions.status === 2) {\r\n                        curLens.removeClass(MagnifyCls.magnifyHidden);\r\n                        curLarge.removeClass(MagnifyCls.magnifyHidden);\r\n                        curLarge.css({\r\n                            left: '-' + magnifierOptions.largeL + 'px',\r\n                            top: '-' + magnifierOptions.largeT + 'px'\r\n                        });\r\n                    }\r\n\r\n                    var borderOffset = 2; // Offset for magnify-lens border\r\n                    pos.t = pos.t <= 0 ? 0 : pos.t - borderOffset;\r\n\r\n                    curLens.css({\r\n                        left: pos.l + paddingX + 'px',\r\n                        top: pos.t + paddingY + 'px'\r\n                    });\r\n\r\n                    if (lensbg) {\r\n                        curLens.css({\r\n                            'background-color': 'rgba(f,f,f,.5)'\r\n                        });\r\n                    } else {\r\n                        curLens.get(0).style.backgroundPosition = '-' +\r\n                        magnifierOptions.lensBgX + 'px -' +\r\n                        magnifierOptions.lensBgY + 'px';\r\n                    }\r\n                    var handler = magnifierOptions.onthumbmove;\r\n\r\n                    if (handler !== null) {\r\n                        handler({\r\n                            thumb: curThumb,\r\n                            lens: curLens,\r\n                            large: curLarge,\r\n                            x: pos.x,\r\n                            y: pos.y\r\n                        });\r\n                    }\r\n                }\r\n\r\n                status = magnifierOptions.status;\r\n            }\r\n        }\r\n\r\n        function setThumbData(mainImage, mainImageData) {\r\n            var thumbBounds = mainImage.getBoundingClientRect(),\r\n                w = 0,\r\n                h = 0;\r\n\r\n            mainImageData.x = Math.round(thumbBounds.left);\r\n            mainImageData.y = Math.round(thumbBounds.top);\r\n            mainImageData.w = Math.round(thumbBounds.right - mainImageData.x);\r\n            mainImageData.h = Math.round(thumbBounds.bottom - mainImageData.y);\r\n\r\n            if (mainImageData.mode === 'inside') {\r\n                w = mainImageData.w;\r\n                h = mainImageData.h;\r\n            } else {\r\n                w = mainImageData.largeWrapperW;\r\n                h = mainImageData.largeWrapperH;\r\n            }\r\n\r\n            mainImageData.largeImgInMagnifyLensWidth = Math.round(mainImageData.zoom * w);\r\n            mainImageData.largeImgInMagnifyLensHeight = Math.round(mainImageData.zoom * h);\r\n\r\n            mainImageData.lensW = Math.round(mainImageData.w / mainImageData.zoom);\r\n            mainImageData.lensH = Math.round(mainImageData.h / mainImageData.zoom);\r\n        }\r\n\r\n        function _init($box, options) {\r\n            var opts = {};\r\n\r\n            if (options.thumb === undefined) {\r\n                return false;\r\n            }\r\n\r\n            $thumb = $box.find(options.thumb);\r\n\r\n            if ($thumb.length) {\r\n                for (var key in options) {\r\n                    opts[key] = options[key];\r\n                }\r\n\r\n                opts.thumb = $thumb;\r\n                enabled = opts.enabled;\r\n\r\n                if (_toBoolean(enabled)) {\r\n\r\n                    $magnifierPreview.show().css('display', '');\r\n                    $magnifierPreview.addClass(MagnifyCls.magnifyHidden);\r\n                    set(opts);\r\n                } else {\r\n                    $magnifierPreview.empty().hide();\r\n                }\r\n            }\r\n\r\n            return that;\r\n        }\r\n\r\n        function hoverEvents(thumb) {\r\n            $(thumb).on('mouseover', function (e) {\r\n\r\n                if (showWrapper) {\r\n\r\n                    if (magnifierOptions.status !== 0) {\r\n                        onThumbLeave();\r\n                    }\r\n                    handleEvents(e);\r\n                    isOverThumb = inBounds;\r\n                }\r\n            }).trigger('mouseover');\r\n        }\r\n\r\n        function clickEvents(thumb) {\r\n            $(thumb).on('click', function (e) {\r\n\r\n                if (showWrapper) {\r\n                    if (!isOverThumb) {\r\n                        if (magnifierOptions.status !== 0) {\r\n                            onThumbLeave();\r\n                        }\r\n                        handleEvents(e);\r\n                        isOverThumb = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        function bindEvents(eType, thumb) {\r\n            switch (eType) {\r\n                case 'hover':\r\n                    hoverEvents(thumb);\r\n                    break;\r\n\r\n                case 'click':\r\n                    clickEvents(thumb);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function handleEvents(e) {\r\n            var src = e.target;\r\n\r\n            curIdx = src.id;\r\n            curThumb = src;\r\n\r\n            onThumbEnter(src);\r\n\r\n            setThumbData(curThumb, magnifierOptions);\r\n\r\n            pos.x = e.clientX;\r\n            pos.y = e.clientY;\r\n\r\n            getMousePos();\r\n            move();\r\n\r\n            var handler = magnifierOptions.onthumbenter;\r\n\r\n            if (handler !== null) {\r\n                handler({\r\n                    thumb: curThumb,\r\n                    lens: curLens,\r\n                    large: curLarge,\r\n                    x: pos.x,\r\n                    y: pos.y\r\n                });\r\n            }\r\n        }\r\n\r\n        function set(options) {\r\n            if (data[options.thumb.id] !== undefined) {\r\n                curThumb = options.thumb;\r\n\r\n                return false;\r\n            }\r\n\r\n            var thumbObj = new Image(),\r\n                largeObj = new Image(),\r\n                $thumb = options.thumb,\r\n                thumb = $thumb.get(0),\r\n                idx = thumb.id,\r\n                largeUrl,\r\n                largeWrapper = $(options.largeWrapper),\r\n                zoom = options.zoom || thumb.getAttribute('data-zoom') || gZoom,\r\n                zoomMin = options.zoomMin || gZoomMin,\r\n                zoomMax = options.zoomMax || gZoomMax,\r\n                mode = options.mode || thumb.getAttribute('data-mode') || gMode,\r\n                eventType = options.eventType || thumb.getAttribute('data-eventType') || gEventType,\r\n                onthumbenter = options.onthumbenter !== undefined ?\r\n                    options.onthumbenter\r\n                    : magnifierOptions.onthumbenter,\r\n                onthumbleave = options.onthumbleave !== undefined ?\r\n                    options.onthumbleave\r\n                    : magnifierOptions.onthumbleave,\r\n                onthumbmove = options.onthumbmove !== undefined ?\r\n                    options.onthumbmove\r\n                    : magnifierOptions.onthumbmove;\r\n\r\n            largeUrl = $thumb.data('original') || customUserOptions.full || $thumb.attr('src');\r\n\r\n            if (thumb.id === '') {\r\n                idx = thumb.id = 'magnifier-item-' + gId;\r\n                gId += 1;\r\n            }\r\n\r\n            createLens(thumb, idx);\r\n\r\n            if (options.width) {\r\n                largeWrapper.width(options.width);\r\n            }\r\n\r\n            if (options.height) {\r\n                largeWrapper.height(options.height);\r\n            }\r\n\r\n            if (options.top) {\r\n                if (typeof options.top == 'function') {\r\n                    var top = options.top() + 'px';\r\n                } else {\r\n                    var top = options.top + 'px';\r\n                }\r\n\r\n                if (largeWrapper.length) {\r\n                    largeWrapper[0].style.top = top.replace('%px', '%');\r\n                }\r\n            }\r\n\r\n            if (options.left) {\r\n                if (typeof options.left == 'function') {\r\n                    var left = options.left() + 'px';\r\n                } else {\r\n                    var left = options.left + 'px';\r\n                }\r\n\r\n                if (largeWrapper.length) {\r\n                    largeWrapper[0].style.left = left.replace('%px', '%');\r\n                }\r\n            }\r\n\r\n            data[idx] = {\r\n                zoom: zoom,\r\n                zoomMin: zoomMin,\r\n                zoomMax: zoomMax,\r\n                mode: mode,\r\n                eventType: eventType,\r\n                thumbCssClass: thumb.className,\r\n                zoomAttached: false,\r\n                status: 0,\r\n                largeUrl: largeUrl,\r\n                largeWrapperId: mode === 'outside' ? largeWrapper.attr('id') : null,\r\n                largeWrapperW: mode === 'outside' ? largeWrapper.width() : null,\r\n                largeWrapperH: mode === 'outside' ? largeWrapper.height() : null,\r\n                onthumbenter: onthumbenter,\r\n                onthumbleave: onthumbleave,\r\n                onthumbmove: onthumbmove\r\n            };\r\n\r\n            paddingX = ($thumb.parent().width() - $thumb.width()) / 2;\r\n            paddingY = ($thumb.parent().height() - $thumb.height()) / 2;\r\n\r\n            showWrapper = false;\r\n            $(thumbObj).on('load', function () {\r\n                data[idx].status = 1;\r\n\r\n                $(largeObj).on('load', function () {\r\n\r\n                    if (largeObj.width > largeWrapper.width() || largeObj.height > largeWrapper.height()) {\r\n                        showWrapper = true;\r\n                        bindEvents(eventType, thumb);\r\n                        data[idx].status = 2;\r\n                        if (largeObj.width > largeObj.height) {\r\n                            data[idx].zoom = largeObj.width / largeWrapper.width();\r\n                        } else {\r\n                            data[idx].zoom = largeObj.height / largeWrapper.height();\r\n                        }\r\n                        setThumbData(thumb, data[idx]);\r\n                        updateLensOnLoad(idx, thumb, largeObj, largeWrapper);\r\n                    }\r\n                });\r\n\r\n                largeObj.src = data[idx].largeUrl;\r\n            });\r\n\r\n            thumbObj.src = thumb.src;\r\n        }\r\n\r\n        /**\r\n         * Hide magnifier when mouse exceeds image bounds.\r\n         */\r\n        function onMouseLeave() {\r\n            onThumbLeave();\r\n            isOverThumb = false;\r\n            $magnifierPreview.addClass(MagnifyCls.magnifyHidden);\r\n        }\r\n\r\n        function onMousemove(e) {\r\n            pos.x = e.clientX;\r\n            pos.y = e.clientY;\r\n\r\n            getMousePos();\r\n\r\n            if (gEventType === 'hover') {\r\n                isOverThumb = inBounds;\r\n            }\r\n\r\n            if (inBounds && isOverThumb) {\r\n                if (gMode === 'outside') {\r\n                    $magnifierPreview.removeClass(MagnifyCls.magnifyHidden);\r\n                }\r\n                move();\r\n            }\r\n        }\r\n\r\n        function onScroll() {\r\n            if (curThumb !== null) {\r\n                setThumbData(curThumb, magnifierOptions);\r\n            }\r\n        }\r\n\r\n        $(window).on('scroll', onScroll);\r\n        $(window).resize(function () {\r\n            _init($box, customUserOptions);\r\n        });\r\n\r\n        $box.on('mousemove', onMousemove);\r\n        $box.on('mouseleave', onMouseLeave);\r\n\r\n        _init($box, customUserOptions);\r\n    }\r\n}(jQuery));\r\n","magnifier/magnify.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'magnifier/magnifier'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n\r\n        var isTouchEnabled = 'ontouchstart' in document.documentElement,\r\n            gallerySelector = '[data-gallery-role=\"gallery\"]',\r\n            magnifierSelector = '[data-gallery-role=\"magnifier\"]',\r\n            magnifierZoomSelector = '[data-gallery-role=\"magnifier-zoom\"]',\r\n            zoomInButtonSelector = '[data-gallery-role=\"fotorama__zoom-in\"]',\r\n            zoomOutButtonSelector = '[data-gallery-role=\"fotorama__zoom-out\"]',\r\n            fullscreenImageSelector = '[data-gallery-role=\"stage-shaft\"] [data-active=\"true\"] .fotorama__img--full',\r\n            imageDraggableClass = 'fotorama__img--draggable',\r\n            imageZoommable = 'fotorama__img--zoommable',\r\n            zoomInLoaded = 'zoom-in-loaded',\r\n            zoomOutLoaded = 'zoom-out-loaded',\r\n            zoomInDisabled = 'fotorama__zoom-in--disabled',\r\n            zoomOutDisabled = 'fotorama__zoom-out--disabled',\r\n            keyboardNavigation,\r\n            videoContainerClass = 'fotorama-video-container',\r\n            hideMagnifier,\r\n            dragFlag,\r\n            endX,\r\n            transitionEnabled,\r\n            transitionActive = false,\r\n            tapFlag = 0,\r\n            allowZoomOut = false,\r\n            allowZoomIn = true;\r\n\r\n        (function () {\r\n            var style = document.documentElement.style,\r\n                transitionEnabled = style.transition !== undefined ||\r\n                style.WebkitTransition !== undefined ||\r\n                style.MozTransition !== undefined ||\r\n                style.MsTransition !== undefined ||\r\n                style.OTransition !== undefined;\r\n        })();\r\n\r\n        /**\r\n         * Return width and height of original image\r\n         * @param img original image node\r\n         * @returns {{rw: number, rh: number}}\r\n         */\r\n        function getImageSize(img) {\r\n            return {\r\n                rw: img.naturalWidth,\r\n                rh: img.naturalHeight\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Sets min-height and min-width for image to avoid transition bug\r\n         * @param $image - fullscreen image\r\n         */\r\n        function calculateMinSize($image) {\r\n\r\n            var minHeight,\r\n                minWidth,\r\n                height = $image.height(),\r\n                width = $image.width(),\r\n                parentHeight = $image.parent().height(),\r\n                parentWidth = $image.parent().width();\r\n\r\n            if (width > parentWidth || height > parentHeight) {\r\n\r\n                if (width / height < parentWidth / parentHeight) {\r\n                    minHeight = parentHeight;\r\n                    minWidth = width * (parentHeight / height);\r\n                } else {\r\n                    minWidth = parentWidth;\r\n                    minHeight = height * parentWidth / width;\r\n                }\r\n                $image.css({\r\n                    'min-width': minWidth,\r\n                    'min-height': minHeight\r\n                });\r\n            }\r\n        }\r\n\r\n        function toggleZoomable($image, flag) {\r\n            if (flag) {\r\n                $image.css({\r\n                    'min-width': $image.width(),\r\n                    'min-height': $image.height(),\r\n                    'width': $image.width(),\r\n                    'height': $image.height()\r\n                }).addClass(imageZoommable);\r\n            } else {\r\n                $image.css({\r\n                    width: '',\r\n                    height: '',\r\n                    top: '',\r\n                    left: '',\r\n                    right: '',\r\n                    bottom: ''\r\n                }).removeClass(imageZoommable);\r\n                calculateMinSize($image);\r\n            }\r\n        }\r\n\r\n        function resetVars($image) {\r\n            allowZoomIn = true;\r\n            allowZoomOut = dragFlag = transitionActive = false;\r\n            $image.hasClass(imageDraggableClass) && $image.removeClass(imageDraggableClass);\r\n            toggleZoomable($image, false);\r\n        }\r\n\r\n        /**\r\n         * Set state for zoom controls.\r\n         * If state is true, zoom controls will be visible.\r\n         * IF state is false, zoom controls will be hidden.\r\n         * @param isHide\r\n         */\r\n        function hideZoomControls(isHide) {\r\n            if (isHide) {\r\n                $(zoomInButtonSelector).addClass(zoomInDisabled);\r\n                $(zoomOutButtonSelector).addClass(zoomOutDisabled);\r\n            } else {\r\n                $(zoomInButtonSelector).removeClass(zoomInDisabled);\r\n                $(zoomOutButtonSelector).removeClass(zoomOutDisabled);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Asynchronus control visibility of zoom buttons.\r\n         * If image bigger than her wrapper. Zoom controls must visible.\r\n         * @param path - image source path\r\n         * @param $image\r\n         */\r\n        function asyncToggleZoomButtons(path, $image) {\r\n            var img = new Image();\r\n\r\n            img.onload = function () {\r\n                this.height > $image.parent().height() || this.width > $image.parent().width() ?\r\n                    hideZoomControls(false) : hideZoomControls(true);\r\n            };\r\n            img.src = path;\r\n        }\r\n\r\n        /**\r\n         * Control visibility of zoom buttons.\r\n         * Zoom controls must be invisible for video content and touch devices.\r\n         * On touch devices active pinchIn/pinchOut.\r\n         * @param $image\r\n         * @param isTouchScreen - true for touch devices\r\n         * @param isVideoActiveFrame - true for active video frame\r\n         */\r\n        function toggleZoomButtons($image, isTouchScreen, isVideoActiveFrame) {\r\n            var path = $image.attr('src');\r\n\r\n            if (path && !isTouchScreen && !isVideoActiveFrame) {\r\n                asyncToggleZoomButtons(path, $image);\r\n            } else {\r\n                hideZoomControls(true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handle resize event in fullscreen.\r\n         * @param $image - Fullscreen image.\r\n         * @param e - Event.\r\n         */\r\n        function resizeHandler(e, $image) {\r\n            var imageSize,\r\n                parentWidth,\r\n                parentHeight,\r\n                isImageSmall,\r\n                isImageFit;\r\n\r\n            if (!e.data.$image || !e.data.$image.length)\r\n                return;\r\n\r\n            imageSize = getImageSize($(fullscreenImageSelector)[0]);\r\n            parentWidth = e.data.$image.parent().width();\r\n            parentHeight = e.data.$image.parent().height();\r\n            isImageSmall = parentWidth >= imageSize.rw && parentHeight >= imageSize.rh;\r\n            isImageFit = parentWidth > e.data.$image.width() && parentHeight > e.data.$image.height();\r\n\r\n            toggleZoomButtons(e.data.$image, isTouchEnabled, checkForVideo(e.data.fotorama.activeFrame.$stageFrame));\r\n            calculateMinSize(e.data.$image);\r\n\r\n            if (e.data.$image.hasClass(imageZoommable) && !allowZoomOut || isImageSmall || isImageFit) {\r\n                resetVars(e.data.$image);\r\n            }\r\n\r\n            if (!isImageSmall) {\r\n                toggleStandartNavigation();\r\n            }\r\n        }\r\n\r\n        function getTopValue($image, topProp, step, height, containerHeight) {\r\n            var top;\r\n\r\n            if (parseInt($image.css('marginTop')) || parseInt($image.css('marginLeft'))) {\r\n                top = dragFlag ? topProp - step / 4 : 0;\r\n                top = top < containerHeight - height ? containerHeight - height : top;\r\n                top = top > height - containerHeight ? height - containerHeight : top;\r\n            } else {\r\n                top = topProp + step / 2;\r\n                top = top < containerHeight - height ? containerHeight - height : top;\r\n                top = top > 0 ? 0 : top;\r\n\r\n                if (!dragFlag && step < 0) {\r\n                    top = top < (containerHeight - height) / 2 ? (containerHeight - height) / 2 : top;\r\n                }\r\n            }\r\n\r\n            return top;\r\n        }\r\n\r\n        function getLeftValue(leftProp, step, width, containerWidth) {\r\n            var left;\r\n\r\n            left = leftProp + step / 2;\r\n            left = left < containerWidth - width ? containerWidth - width : left;\r\n            left = left > 0 ? 0 : left;\r\n\r\n            if (!dragFlag && step < 0) {\r\n                left = left < (containerWidth - width) / 2 ? (containerWidth - width) / 2 : left;\r\n            }\r\n\r\n            return left;\r\n        }\r\n\r\n        function checkFullscreenImagePosition($image, dimentions, widthStep, heightStep) {\r\n            var $imageContainer,\r\n                containerWidth,\r\n                containerHeight,\r\n                settings,\r\n                top,\r\n                left,\r\n                right,\r\n                bottom,\r\n                ratio;\r\n\r\n            if ($(gallerySelector).data('fotorama').fullScreen) {\r\n                transitionActive = true;\r\n                $imageContainer = $image.parent();\r\n                containerWidth = $imageContainer.width();\r\n                containerHeight = $imageContainer.height();\r\n                top = $image.position().top;\r\n                left = $image.position().left;\r\n                ratio = $image.width() / $image.height();\r\n                dimentions.height = isNaN(dimentions.height) ? dimentions.width / ratio : dimentions.height;\r\n                dimentions.width = isNaN(dimentions.width) ? dimentions.height * ratio : dimentions.width;\r\n\r\n                top = dimentions.height >= containerHeight ?\r\n                    getTopValue($image, top, heightStep, dimentions.height, containerHeight) : 0;\r\n\r\n                left = dimentions.width >= containerWidth ?\r\n                    getLeftValue(left, widthStep, dimentions.width, containerWidth) : 0;\r\n\r\n                right = dragFlag && left < (containerWidth - dimentions.width) / 2 ? 0 : left;\r\n                bottom = dragFlag ? 0 : top;\r\n\r\n                settings = $.extend(dimentions, {\r\n                    top: top,\r\n                    left: left,\r\n                    right: right\r\n                });\r\n\r\n                $image.css(settings);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles fotorama's keyboard and mouse/touch navigation.\r\n         */\r\n        function toggleStandartNavigation() {\r\n            var $selectable =\r\n                    $('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]')\r\n                    .not('[tabindex=-1], [disabled], :hidden'),\r\n                fotorama = $(gallerySelector).data('fotorama'),\r\n                $focus = $(':focus'),\r\n                index;\r\n\r\n            if (fotorama.fullScreen) {\r\n\r\n                $selectable.each(function (number) {\r\n\r\n                    if ($(this).is($focus)) {\r\n                        index = number;\r\n                    }\r\n                });\r\n\r\n                fotorama.setOptions({\r\n                    swipe: !allowZoomOut,\r\n                    keyboard: !allowZoomOut\r\n                });\r\n\r\n                if (_.isNumber(index)) {\r\n                    $selectable.eq(index).focus();\r\n                }\r\n            }\r\n        }\r\n\r\n        function zoomIn(e, xStep, yStep) {\r\n            var $image,\r\n                imgOriginalSize,\r\n                imageWidth,\r\n                imageHeight,\r\n                zoomWidthStep,\r\n                zoomHeightStep,\r\n                widthResult,\r\n                heightResult,\r\n                ratio,\r\n                dimentions = {};\r\n\r\n            if (allowZoomIn && (!transitionEnabled || !transitionActive) && (isTouchEnabled ||\r\n                !$(zoomInButtonSelector).hasClass(zoomInDisabled))) {\r\n                $image = $(fullscreenImageSelector);\r\n                imgOriginalSize = getImageSize($image[0]);\r\n                imageWidth = $image.width();\r\n                imageHeight = $image.height();\r\n                ratio = imageWidth / imageHeight;\r\n                allowZoomOut = true;\r\n                toggleStandartNavigation();\r\n\r\n                if (!$image.hasClass(imageZoommable)) {\r\n                    toggleZoomable($image, true);\r\n                }\r\n\r\n                e.preventDefault();\r\n\r\n                if (imageWidth >= imageHeight) {\r\n                    zoomWidthStep = xStep || Math.ceil(imageWidth * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    widthResult = imageWidth + zoomWidthStep;\r\n\r\n                    if (widthResult >= imgOriginalSize.rw) {\r\n                        widthResult = imgOriginalSize.rw;\r\n                        zoomWidthStep = xStep || widthResult - imageWidth;\r\n                        allowZoomIn = false;\r\n                    }\r\n                    heightResult = widthResult / ratio;\r\n                    zoomHeightStep = yStep || heightResult - imageHeight;\r\n                } else {\r\n                    zoomHeightStep = yStep || Math.ceil(imageHeight * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    heightResult = imageHeight + zoomHeightStep;\r\n\r\n                    if (heightResult >= imgOriginalSize.rh) {\r\n                        heightResult = imgOriginalSize.rh;\r\n                        zoomHeightStep = yStep || heightResult - imageHeight;\r\n                        allowZoomIn = false;\r\n                    }\r\n                    widthResult = heightResult * ratio;\r\n                    zoomWidthStep = xStep || widthResult - imageWidth;\r\n                }\r\n\r\n                if (imageWidth >= imageHeight && imageWidth !== imgOriginalSize.rw) {\r\n                    dimentions = $.extend(dimentions, {\r\n                        width: widthResult,\r\n                        height: 'auto'\r\n                    });\r\n                    checkFullscreenImagePosition($image, dimentions, -zoomWidthStep, -zoomHeightStep);\r\n\r\n                } else if (imageWidth < imageHeight && imageHeight !== imgOriginalSize.rh) {\r\n                    dimentions = $.extend(dimentions, {\r\n                        width: 'auto',\r\n                        height: heightResult\r\n                    });\r\n                    checkFullscreenImagePosition($image, dimentions, -zoomWidthStep, -zoomHeightStep);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function zoomOut(e, xStep, yStep) {\r\n            var $image,\r\n                widthResult,\r\n                heightResult,\r\n                dimentions,\r\n                parentWidth,\r\n                parentHeight,\r\n                imageWidth,\r\n                imageHeight,\r\n                zoomWidthStep,\r\n                zoomHeightStep,\r\n                ratio,\r\n                fitIntoParent;\r\n\r\n            if (allowZoomOut && (!transitionEnabled || !transitionActive) && (isTouchEnabled ||\r\n                !$(zoomOutButtonSelector).hasClass(zoomOutDisabled))) {\r\n                allowZoomIn = true;\r\n                $image = $(fullscreenImageSelector);\r\n                parentWidth = $image.parent().width();\r\n                parentHeight = $image.parent().height();\r\n                imageWidth = $image.width();\r\n                imageHeight = $image.height();\r\n                ratio = imageWidth / imageHeight;\r\n\r\n                e.preventDefault();\r\n\r\n                if (imageWidth >= imageHeight) {\r\n                    zoomWidthStep = xStep || Math.ceil(imageWidth * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    widthResult = imageWidth - zoomWidthStep;\r\n                    heightResult = widthResult / ratio;\r\n                    zoomHeightStep = yStep || imageHeight - heightResult;\r\n                } else {\r\n                    zoomHeightStep = yStep || Math.ceil(imageHeight * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    heightResult = imageHeight - zoomHeightStep;\r\n                    widthResult = heightResult * ratio;\r\n                    zoomWidthStep = xStep || imageWidth - widthResult;\r\n                }\r\n\r\n                fitIntoParent = function () {\r\n                    if (ratio > parentWidth / parentHeight) {\r\n                        widthResult = parentWidth;\r\n                        zoomWidthStep = imageWidth - widthResult;\r\n                        heightResult = widthResult / ratio;\r\n                        zoomHeightStep = imageHeight - heightResult;\r\n                        dimentions = {\r\n                            width: widthResult,\r\n                            height: 'auto'\r\n                        };\r\n                    } else {\r\n                        heightResult = parentHeight;\r\n                        zoomHeightStep = imageHeight - heightResult;\r\n                        widthResult = heightResult * ratio;\r\n                        zoomWidthStep = imageWidth - widthResult;\r\n                        dimentions = {\r\n                            width: 'auto',\r\n                            height: heightResult\r\n                        };\r\n                    }\r\n                    checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                };\r\n\r\n                if (imageWidth >= imageHeight) {\r\n                    if (widthResult > parentWidth) {\r\n                        dimentions = {\r\n                            width: widthResult,\r\n                            height: 'auto'\r\n                        };\r\n                        checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                    } else if (heightResult > parentHeight) {\r\n                        dimentions = {\r\n                            width: widthResult,\r\n                            height: 'auto'\r\n                        };\r\n                        checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                    } else {\r\n                        allowZoomOut = dragFlag = false;\r\n                        toggleStandartNavigation();\r\n                        fitIntoParent();\r\n                    }\r\n                } else if (heightResult > parentHeight) {\r\n                    dimentions = {\r\n                        width: 'auto',\r\n                        height: heightResult\r\n                    };\r\n                    checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                } else if (widthResult > parentWidth) {\r\n                    dimentions = {\r\n                        width: 'auto',\r\n                        height: heightResult\r\n                    };\r\n                    checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                } else {\r\n                    allowZoomOut = dragFlag = false;\r\n                    toggleStandartNavigation();\r\n                    fitIntoParent();\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Bind event on scroll on active item in fotorama\r\n         * @param e\r\n         * @param fotorama - object of fotorama\r\n         */\r\n        function mousewheel(e, fotorama, element) {\r\n            var $fotoramaStage = fotorama.activeFrame.$stageFrame,\r\n                fotoramaStage = $fotoramaStage.get(0);\r\n\r\n            function onWheel(e) {\r\n                var delta = e.deltaY || e.wheelDelta,\r\n                    ev = e || window.event;\r\n\r\n                if ($(gallerySelector).data('fotorama').fullScreen) {\r\n\r\n                    if (e.deltaY) {\r\n                        if (delta > 0) {\r\n                            zoomOut(ev);\r\n                        } else {\r\n                            zoomIn(ev);\r\n                        }\r\n                    } else if (delta > 0) {\r\n                        zoomIn(ev);\r\n                    } else {\r\n                        zoomOut(ev);\r\n                    }\r\n\r\n                    e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n                }\r\n            }\r\n\r\n            if (!$fotoramaStage.hasClass('magnify-wheel-loaded')) {\r\n                if (fotoramaStage && fotoramaStage.addEventListener) {\r\n                    if ('onwheel' in document) {\r\n                        fotoramaStage.addEventListener('wheel', onWheel);\r\n                    } else if ('onmousewheel' in document) {\r\n                        fotoramaStage.addEventListener('mousewheel', onWheel);\r\n                    } else {\r\n                        fotoramaStage.addEventListener('MozMousePixelScroll', onWheel);\r\n                    }\r\n                    $fotoramaStage.addClass('magnify-wheel-loaded');\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Method which makes draggable picture. Also work on touch devices.\r\n         */\r\n        function magnifierFullscreen(fotorama) {\r\n            var isDragActive = false,\r\n                startX,\r\n                startY,\r\n                imagePosX,\r\n                imagePosY,\r\n                touch,\r\n                swipeSlide,\r\n                $gallery = $(gallerySelector),\r\n                $image = $(fullscreenImageSelector, $gallery),\r\n                $imageContainer = $('[data-gallery-role=\"stage-shaft\"] [data-active=\"true\"]'),\r\n                gallery = $gallery.data('fotorama'),\r\n                pinchDimention;\r\n\r\n            swipeSlide = _.throttle(function (direction) {\r\n                $(gallerySelector).data('fotorama').show(direction);\r\n            }, 500, {\r\n                trailing: false\r\n            });\r\n\r\n            /**\r\n             * Returns top position value for passed jQuery object.\r\n             *\r\n             * @param $el\r\n             * @return {number}\r\n             */\r\n            function getTop($el) {\r\n                return parseInt($el.get(0).style.top);\r\n            }\r\n\r\n            function shiftImage(dx, dy, e) {\r\n                var top = +imagePosY + dy,\r\n                    left = +imagePosX + dx,\r\n                    swipeCondition = $image.width() / 10 + 20;\r\n\r\n                dragFlag = true;\r\n\r\n                if ($image.offset().left === $imageContainer.offset().left + $imageContainer.width() - $image.width() && e.keyCode === 39 ||\r\n                    endX - 1 < $imageContainer.offset().left + $imageContainer.width() - $image.width() && dx < 0 &&\r\n                    _.isNumber(endX) &&\r\n                    (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove')) {\r\n                    endX = null;\r\n                    swipeSlide('>');\r\n\r\n                    return;\r\n                }\r\n\r\n                if ($image.offset().left === $imageContainer.offset().left && dx !== 0 && e.keyCode === 37 ||\r\n                    endX === $imageContainer.offset().left && dx > 0 &&\r\n                    (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove')) {\r\n                    endX = null;\r\n                    swipeSlide('<');\r\n\r\n                    return;\r\n                }\r\n\r\n                if ($image.height() > $imageContainer.height()) {\r\n                    if ($imageContainer.height() > $image.height() + top) {\r\n                        $image.css('top', $imageContainer.height() - $image.height());\r\n                    } else {\r\n                        top = $image.height() - getTop($image) - $imageContainer.height();\r\n                        dy = dy < top ? dy : top;\r\n                        $image.css('top', getTop($image) + dy);\r\n                    }\r\n                }\r\n\r\n                if ($image.width() > $imageContainer.width()) {\r\n\r\n                    if ($imageContainer.offset().left + $imageContainer.width() > left + $image.width()) {\r\n                        left = $imageContainer.offset().left + $imageContainer.width() - $image.width();\r\n                    } else {\r\n                        left = $imageContainer.offset().left < left ? $imageContainer.offset().left : left;\r\n                    }\r\n                    $image.offset({\r\n                        'left': left\r\n                    });\r\n                    $image.css('right', '');\r\n                } else if (Math.abs(dy) < 1 && allowZoomOut &&\r\n                    !(e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove')) {\r\n                    dx < 0 ? $(gallerySelector).data('fotorama').show('>') : $(gallerySelector).data('fotorama').show('<');\r\n                }\r\n\r\n                if ($image.width() <= $imageContainer.width() && allowZoomOut &&\r\n                    (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove') &&\r\n                    Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > swipeCondition) {\r\n                    dx < 0 ? swipeSlide('>') : swipeSlide('<');\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Sets image size to original or fit in parent block\r\n             * @param e - event object\r\n             */\r\n            function dblClickHandler(e) {\r\n                var imgOriginalSize = getImageSize($image[0]),\r\n                    proportions;\r\n\r\n                if (imgOriginalSize.rh < $image.parent().height() && imgOriginalSize.rw < $image.parent().width()) {\r\n                    return;\r\n                }\r\n\r\n                proportions = imgOriginalSize.rw / imgOriginalSize.rh;\r\n\r\n                if (allowZoomIn) {\r\n                    zoomIn(e, imgOriginalSize.rw - $image.width(), imgOriginalSize.rh - $image.height());\r\n                } else if (proportions > $imageContainer.width() / $imageContainer.height()) {\r\n                    zoomOut(e, imgOriginalSize.rw - $imageContainer.width(), imgOriginalSize.rw / proportions);\r\n                } else {\r\n                    zoomOut(e, imgOriginalSize.rw * proportions, imgOriginalSize.rh - $imageContainer.height());\r\n                }\r\n            }\r\n\r\n            function detectDoubleTap(e) {\r\n                var now = new Date().getTime(),\r\n                    timesince = now - tapFlag;\r\n\r\n                if (timesince < 400 && timesince > 0) {\r\n                    transitionActive = false;\r\n                    tapFlag = 0;\r\n                    dblClickHandler(e);\r\n                } else {\r\n                    tapFlag = new Date().getTime();\r\n                }\r\n            }\r\n\r\n            if (isTouchEnabled) {\r\n                $image.off('tap');\r\n                $image.on('tap', function (e) {\r\n                    if (e.originalEvent.originalEvent.touches.length === 0) {\r\n                        detectDoubleTap(e);\r\n                    }\r\n                });\r\n            } else {\r\n                $image.unbind('dblclick');\r\n                $image.dblclick(dblClickHandler);\r\n            }\r\n\r\n            if (gallery.fullScreen) {\r\n                toggleZoomButtons($image, isTouchEnabled, checkForVideo(fotorama.activeFrame.$stageFrame));\r\n            }\r\n\r\n            function getDimention(event) {\r\n                return Math.sqrt(\r\n                    (event.touches[0].clientX - event.touches[1].clientX) * (event.touches[0].clientX - event.touches[1].clientX) +\r\n                    (event.touches[0].clientY - event.touches[1].clientY) * (event.touches[0].clientY - event.touches[1].clientY));\r\n            }\r\n\r\n            $image.off(isTouchEnabled ? 'touchstart' : 'pointerdown mousedown MSPointerDown');\r\n            $image.on(isTouchEnabled ? 'touchstart' : 'pointerdown mousedown MSPointerDown', function (e) {\r\n                if (e && e.originalEvent.touches && e.originalEvent.touches.length >= 2) {\r\n                    e.preventDefault();\r\n                    pinchDimention = getDimention(e.originalEvent);\r\n                    isDragActive = false;\r\n\r\n                    if ($image.hasClass(imageDraggableClass)) {\r\n                        $image.removeClass(imageDraggableClass);\r\n                    }\r\n                } else if (gallery.fullScreen && (!transitionEnabled || !transitionActive)) {\r\n                    imagePosY = getTop($image);\r\n                    imagePosX = $image.offset().left;\r\n\r\n                    if (isTouchEnabled) {\r\n                        touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\r\n                        e.clientX = touch.pageX;\r\n                        e.clientY = touch.pageY;\r\n                    }\r\n                    startX = e.clientX || e.originalEvent.clientX;\r\n                    startY = e.clientY || e.originalEvent.clientY;\r\n                    isDragActive = true;\r\n                }\r\n\r\n                if ($image.offset() && $image.width() > $imageContainer.width()) {\r\n                    endX = $image.offset().left;\r\n                }\r\n            });\r\n\r\n            $image.off(isTouchEnabled ? 'touchmove' : 'mousemove pointermove MSPointerMove');\r\n            $image.on(isTouchEnabled ? 'touchmove' : 'mousemove pointermove MSPointerMove', function (e) {\r\n                if (e && e.originalEvent.touches && e.originalEvent.touches.length >= 2) {\r\n                    e.preventDefault();\r\n                    var currentDimention = getDimention(e.originalEvent);\r\n\r\n                    if ($image.hasClass(imageDraggableClass)) {\r\n                        $image.removeClass(imageDraggableClass);\r\n                    }\r\n\r\n                    if (currentDimention < pinchDimention) {\r\n                        zoomOut(e);\r\n                        pinchDimention = currentDimention;\r\n                    } else if (currentDimention > pinchDimention) {\r\n                        zoomIn(e);\r\n                        pinchDimention = currentDimention;\r\n                    }\r\n                } else {\r\n                    var clientX,\r\n                        clientY;\r\n\r\n                    if (gallery.fullScreen && isDragActive && (!transitionEnabled || !transitionActive)) {\r\n\r\n                        if (allowZoomOut && !$image.hasClass(imageDraggableClass)) {\r\n                            $image.addClass(imageDraggableClass);\r\n                        }\r\n                        clientX = e.clientX || e.originalEvent.clientX;\r\n                        clientY = e.clientY || e.originalEvent.clientY;\r\n\r\n                        e.preventDefault();\r\n\r\n                        if (isTouchEnabled) {\r\n                            touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\r\n                            clientX = touch.pageX;\r\n                            clientY = touch.pageY;\r\n                        }\r\n\r\n                        if (allowZoomOut) {\r\n                            imagePosY = getTop($(fullscreenImageSelector, $gallery));\r\n                            shiftImage(clientX - startX, clientY - startY, e);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            $image.off('transitionend webkitTransitionEnd mozTransitionEnd msTransitionEnd ');\r\n            $image.on('transitionend webkitTransitionEnd mozTransitionEnd msTransitionEnd', function () {\r\n                transitionActive = false;\r\n            });\r\n\r\n            if (keyboardNavigation) {\r\n                $(document).unbind('keydown', keyboardNavigation);\r\n            }\r\n\r\n            /**\r\n             * Replaces original navigations with better one\r\n             * @param e - event object\r\n             */\r\n            keyboardNavigation = function (e) {\r\n                var step = 40,\r\n                    $focus = $(':focus'),\r\n                    isFullScreen = $(gallerySelector).data('fotorama').fullScreen,\r\n                    initVars = function () {\r\n                        imagePosX = $(fullscreenImageSelector, $gallery).offset().left;\r\n                        imagePosY = getTop($(fullscreenImageSelector, $gallery));\r\n                    };\r\n\r\n                if (($focus.attr('data-gallery-role') || !$focus.length) && allowZoomOut) {\r\n                    if (isFullScreen) {\r\n                        imagePosX = $(fullscreenImageSelector, $(gallerySelector)).offset().left;\r\n                        imagePosY = getTop($(fullscreenImageSelector, $(gallerySelector)));\r\n                    }\r\n\r\n                    if (e.keyCode === 39) {\r\n\r\n                        if (isFullScreen) {\r\n                            initVars();\r\n                            shiftImage(-step, 0, e);\r\n                        }\r\n                    }\r\n\r\n                    if (e.keyCode === 38) {\r\n\r\n                        if (isFullScreen) {\r\n                            initVars();\r\n                            shiftImage(0, step, e);\r\n                        }\r\n                    }\r\n\r\n                    if (e.keyCode === 37) {\r\n\r\n                        if (isFullScreen) {\r\n                            initVars();\r\n                            shiftImage(step, 0, e);\r\n                        }\r\n                    }\r\n\r\n                    if (e.keyCode === 40) {\r\n\r\n                        if (isFullScreen) {\r\n                            e.preventDefault();\r\n                            initVars();\r\n                            shiftImage(0, -step, e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (e.keyCode === 27 && isFullScreen && allowZoomOut) {\r\n                    $(gallerySelector).data('fotorama').cancelFullScreen();\r\n                }\r\n            };\r\n\r\n            /**\r\n             * @todo keyboard navigation through Fotorama Api.\r\n             */\r\n            $(document).keydown(keyboardNavigation);\r\n\r\n            $(document).on(isTouchEnabled ? 'touchend' : 'mouseup pointerup MSPointerUp', function (e) {\r\n                if (gallery.fullScreen) {\r\n\r\n                    if ($image.offset() && $image.width() > $imageContainer.width()) {\r\n                        endX = $image.offset().left;\r\n                    }\r\n\r\n                    isDragActive = false;\r\n                    $image.removeClass(imageDraggableClass);\r\n                }\r\n            });\r\n\r\n            $(window).off('resize', resizeHandler);\r\n            $(window).on('resize', {\r\n                $image: $image,\r\n                fotorama: fotorama\r\n            }, resizeHandler);\r\n        }\r\n\r\n        /**\r\n         * Hides magnifier preview and zoom blocks.\r\n         */\r\n        hideMagnifier = function () {\r\n            $(magnifierSelector).empty().hide();\r\n            $(magnifierZoomSelector).remove();\r\n        };\r\n\r\n        /**\r\n         * Check is active frame in gallery include video content.\r\n         * If true activeFrame contain video.\r\n         * @param $stageFrame - active frame in gallery\r\n         * @returns {*|Boolean}\r\n         */\r\n        function checkForVideo($stageFrame) {\r\n            return $stageFrame.hasClass(videoContainerClass);\r\n        }\r\n\r\n        /**\r\n         * Hides magnifier on drag and while arrow click.\r\n         */\r\n        function behaveOnDrag(e, initPos) {\r\n            var pos = [e.pageX, e.pageY],\r\n                isArrow = $(e.target).data('gallery-role') === 'arrow',\r\n                isClick = initPos[0] === pos[0] && initPos[1] === pos[1],\r\n                isImg = $(e.target).parent().data('active');\r\n\r\n            if (isArrow || isImg && !isClick) {\r\n                hideMagnifier();\r\n            }\r\n        }\r\n\r\n        if (config.magnifierOpts.enabled) {\r\n            $(element).on('pointerdown mousedown MSPointerDown', function (e) {\r\n                var pos = [e.pageX, e.pageY];\r\n\r\n                $(element).on('mousemove pointermove MSPointerMove', function (ev) {\r\n                    navigator.msPointerEnabled ? hideMagnifier() : behaveOnDrag(ev, pos);\r\n                });\r\n                $(document).on('mouseup pointerup MSPointerUp', function () {\r\n                    $(element).off('mousemove pointermove MSPointerMove');\r\n                });\r\n            });\r\n        }\r\n\r\n        $.extend(config.magnifierOpts, {\r\n            zoomable: false,\r\n            thumb: '.fotorama__img',\r\n            largeWrapper: '[data-gallery-role=\"magnifier\"]',\r\n            height: config.magnifierOpts.height || function () {\r\n                return $('[data-active=\"true\"]').height();\r\n            },\r\n            width: config.magnifierOpts.width || function () {\r\n                var productMedia = $(gallerySelector).parent().parent();\r\n\r\n                return productMedia.parent().width() - productMedia.width() - 20;\r\n            },\r\n            left: config.magnifierOpts.left || function () {\r\n                return $(gallerySelector).offset().left + $(gallerySelector).width() + 20;\r\n            },\r\n            top: config.magnifierOpts.top || function () {\r\n                return $(gallerySelector).offset().top;\r\n            }\r\n        });\r\n\r\n        $(element).on('fotorama:load fotorama:showend fotorama:fullscreenexit fotorama:ready', function (e, fotorama) {\r\n            var $activeStageFrame = $(gallerySelector).data('fotorama').activeFrame.$stageFrame;\r\n\r\n            if (!$activeStageFrame.find(magnifierZoomSelector).length) {\r\n                hideMagnifier();\r\n\r\n                if (config.magnifierOpts) {\r\n                    config.magnifierOpts.large = $(gallerySelector).data('fotorama').activeFrame.img;\r\n                    config.magnifierOpts.full = fotorama.data[fotorama.activeIndex].original;\r\n                    !checkForVideo($activeStageFrame) && $($activeStageFrame).magnify(config.magnifierOpts);\r\n                }\r\n            }\r\n        });\r\n\r\n        $(element).on('gallery:loaded', function (e) {\r\n            var $prevImage;\r\n\r\n            $(element).find(gallerySelector)\r\n                .on('fotorama:ready', function (e, fotorama) {\r\n                    var $zoomIn = $(zoomInButtonSelector),\r\n                        $zoomOut = $(zoomOutButtonSelector);\r\n\r\n                    if (!$zoomIn.hasClass(zoomInLoaded)) {\r\n                        $zoomIn.on('click touchstart', zoomIn);\r\n                        $zoomIn.on('mousedown', function (e) {\r\n                            e.stopPropagation();\r\n                        });\r\n\r\n                        $zoomIn.keyup(function (e) {\r\n\r\n                            if (e.keyCode === 13) {\r\n                                zoomIn(e);\r\n                            }\r\n                        });\r\n\r\n                        $(window).keyup(function (e) {\r\n\r\n                            if (e.keyCode === 107 || fotorama.fullscreen) {\r\n                                zoomIn(e);\r\n                            }\r\n                        });\r\n\r\n                        $zoomIn.addClass(zoomInLoaded);\r\n                    }\r\n\r\n                    if (!$zoomOut.hasClass(zoomOutLoaded)) {\r\n                        $zoomOut.on('click touchstart', zoomOut);\r\n                        $zoomOut.on('mousedown', function (e) {\r\n                            e.stopPropagation();\r\n                        });\r\n\r\n                        $zoomOut.keyup(function (e) {\r\n\r\n                            if (e.keyCode === 13) {\r\n                                zoomOut(e);\r\n                            }\r\n                        });\r\n\r\n                        $(window).keyup(function (e) {\r\n\r\n                            if (e.keyCode === 109 || fotorama.fullscreen) {\r\n                                zoomOut(e);\r\n                            }\r\n                        });\r\n\r\n                        $zoomOut.addClass(zoomOutLoaded);\r\n                    }\r\n                })\r\n                .on('fotorama:fullscreenenter fotorama:showend', function (e, fotorama) {\r\n                    hideMagnifier();\r\n\r\n                    if (!$(fullscreenImageSelector).is($prevImage)) {\r\n                        resetVars($(fullscreenImageSelector));\r\n                    }\r\n                    magnifierFullscreen(fotorama);\r\n                    mousewheel(e, fotorama, element);\r\n\r\n                    if ($prevImage) {\r\n                        calculateMinSize($prevImage);\r\n\r\n                        if (!$(fullscreenImageSelector).is($prevImage)) {\r\n                            resetVars($prevImage);\r\n                        }\r\n                    }\r\n\r\n                    toggleStandartNavigation();\r\n                })\r\n                .on('fotorama:load', function (e, fotorama) {\r\n                    if ($(gallerySelector).data('fotorama').fullScreen) {\r\n                        toggleZoomButtons($(fullscreenImageSelector), isTouchEnabled,\r\n                            checkForVideo(fotorama.activeFrame.$stageFrame));\r\n                    }\r\n                    magnifierFullscreen(fotorama);\r\n                })\r\n                .on('fotorama:show', function (e, fotorama) {\r\n                    $prevImage = _.clone($(fullscreenImageSelector));\r\n                    hideMagnifier();\r\n                })\r\n                .on('fotorama:fullscreenexit', function (e, fotorama) {\r\n                    resetVars($(fullscreenImageSelector));\r\n                    hideMagnifier();\r\n                    hideZoomControls(true);\r\n                });\r\n        });\r\n\r\n        return config;\r\n    };\r\n});\r\n","PayPal_Braintree/js/form-builder.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'underscore',\r\n        'mage/template'\r\n    ],\r\n    function ($, _, mageTemplate) {\r\n        'use strict';\r\n\r\n        return {\r\n\r\n            /**\r\n             * @param {Object} formData\r\n             * @returns {*|jQuery}\r\n             */\r\n            build: function (formData) {\r\n                var formTmpl = mageTemplate('<form action=\"<%= data.action %>\"' +\r\n                    ' method=\"POST\" hidden enctype=\"application/x-www-form-urlencoded\">' +\r\n                        '<% _.each(data.fields, function(val, key){ %>' +\r\n                            '<input value=\\'<%= val %>\\' name=\"<%= key %>\" type=\"hidden\">' +\r\n                        '<% }); %>' +\r\n                    '</form>');\r\n\r\n                return $(formTmpl({\r\n                    data: {\r\n                        action: formData.action,\r\n                        fields: formData.fields\r\n                    }\r\n                })).appendTo($('[data-container=\"body\"]'));\r\n            }\r\n        };\r\n    }\r\n);\r\n","PayPal_Braintree/js/validator.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return {\r\n        config: {},\r\n\r\n        /**\r\n         * Set configuration\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n        },\r\n\r\n        /**\r\n         * Get List of available card types\r\n         * @returns {*|exports.defaults.availableCardTypes|{}}\r\n         */\r\n        getAvailableCardTypes: function () {\r\n            return this.config.availableCardTypes;\r\n        },\r\n\r\n        /**\r\n         * Get list of card types\r\n         * @returns {Object}\r\n         */\r\n        getCcTypesMapper: function () {\r\n            return this.config.ccTypesMapper;\r\n        },\r\n\r\n        /**\r\n         * Find mage card type by Braintree type\r\n         * @param {String} type\r\n         * @param {Object} availableTypes\r\n         * @returns {*}\r\n         */\r\n        getMageCardType: function (type, availableTypes) {\r\n            var storedCardType = null,\r\n                mapper = this.getCcTypesMapper();\r\n\r\n            if (type && typeof mapper[type] !== 'undefined') {\r\n                storedCardType = mapper[type];\r\n\r\n                if (_.indexOf(availableTypes, storedCardType) !== -1) {\r\n                    return storedCardType;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Filter list of available card types\r\n         * @param {Object} availableTypes\r\n         * @param {Object} countrySpecificCardTypes\r\n         * @returns {Object}\r\n         */\r\n        collectTypes: function (availableTypes, countrySpecificCardTypes) {\r\n            var key,\r\n                filteredTypes = [];\r\n\r\n            for (key in availableTypes) {\r\n                if (_.indexOf(countrySpecificCardTypes, availableTypes[key]) !== -1) {\r\n                    filteredTypes.push(availableTypes[key]);\r\n                }\r\n            }\r\n\r\n            return filteredTypes;\r\n        },\r\n\r\n        /**\r\n         * Get list of card types for country\r\n         * @param {String} countryId\r\n         * @returns {*}\r\n         */\r\n        getCountrySpecificCardTypes: function (countryId) {\r\n            if (typeof this.config.countrySpecificCardTypes[countryId] !== 'undefined') {\r\n                return this.config.countrySpecificCardTypes[countryId];\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/applepay/api.js":"/**\r\n * Braintree Apple Pay button API\r\n *\r\n **/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        'mage/translate',\r\n        'mage/storage'\r\n    ],\r\n    function (\r\n        Component,\r\n        $t,\r\n        storage\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                clientToken: null,\r\n                quoteId: 0,\r\n                displayName: null,\r\n                actionSuccess: null,\r\n                grandTotalAmount: 0,\r\n                isLoggedIn: false,\r\n                storeCode: \"default\",\r\n                shippingAddress: {},\r\n                countryDirectory: null,\r\n                shippingMethods: {}\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n                if (!this.countryDirectory) {\r\n                    storage.get(\"rest/V1/directory/countries\").done(function (result) {\r\n                        this.countryDirectory = {};\r\n                        let i, data, x, region;\r\n                        for (i = 0; i < result.length; ++i) {\r\n                            data = result[i];\r\n                            this.countryDirectory[data.two_letter_abbreviation] = {};\r\n                            if (typeof data.available_regions !== 'undefined') {\r\n                                for (x = 0; x < data.available_regions.length; ++x) {\r\n                                    region = data.available_regions[x];\r\n                                    this.countryDirectory[data.two_letter_abbreviation][region.name.toLowerCase().replace(/[^A-Z0-9]/ig, '')] = region.id;\r\n                                }\r\n                            }\r\n                        }\r\n                    }.bind(this));\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Get region ID\r\n             */\r\n            getRegionId: function (countryCode, regionName) {\r\n                if (typeof regionName !== 'string') {\r\n                    return null;\r\n                }\r\n\r\n                regionName = regionName.toLowerCase().replace(/[^A-Z0-9]/ig, '');\r\n\r\n                if (typeof this.countryDirectory[countryCode] !== 'undefined' && typeof this.countryDirectory[countryCode][regionName] !== 'undefined') {\r\n                    return this.countryDirectory[countryCode][regionName];\r\n                }\r\n\r\n                return 0;\r\n            },\r\n\r\n            /**\r\n             * Set & get api token\r\n             */\r\n            setClientToken: function (value) {\r\n                this.clientToken = value;\r\n            },\r\n            getClientToken: function () {\r\n                return this.clientToken;\r\n            },\r\n\r\n            /**\r\n             * Set and get quote id\r\n             */\r\n            setQuoteId: function (value) {\r\n                this.quoteId = value;\r\n            },\r\n            getQuoteId: function () {\r\n                return this.quoteId;\r\n            },\r\n\r\n            /**\r\n             * Set and get display name\r\n             */\r\n            setDisplayName: function (value) {\r\n                this.displayName = value;\r\n            },\r\n            getDisplayName: function () {\r\n                return this.displayName;\r\n            },\r\n\r\n            /**\r\n             * Set and get success redirection url\r\n             */\r\n            setActionSuccess: function (value) {\r\n                this.actionSuccess = value;\r\n            },\r\n            getActionSuccess: function () {\r\n                return this.actionSuccess;\r\n            },\r\n\r\n            /**\r\n             * Set and get grand total\r\n             */\r\n            setGrandTotalAmount: function (value) {\r\n                this.grandTotalAmount = parseFloat(value).toFixed(2);\r\n            },\r\n            getGrandTotalAmount: function () {\r\n                return parseFloat(this.grandTotalAmount);\r\n            },\r\n\r\n            /**\r\n             * Set and get is logged in\r\n             */\r\n            setIsLoggedIn: function (value) {\r\n                this.isLoggedIn = value;\r\n            },\r\n            getIsLoggedIn: function () {\r\n                return this.isLoggedIn;\r\n            },\r\n\r\n            /**\r\n             * Set and get store code\r\n             */\r\n            setStoreCode: function (value) {\r\n                this.storeCode = value;\r\n            },\r\n            getStoreCode: function () {\r\n                return this.storeCode;\r\n            },\r\n\r\n            /**\r\n             * API Urls for logged in / guest\r\n             */\r\n            getApiUrl: function (uri) {\r\n                if (this.getIsLoggedIn() === true) {\r\n                    return \"rest/\" + this.getStoreCode() + \"/V1/carts/mine/\" + uri;\r\n                } else {\r\n                    return \"rest/\" + this.getStoreCode() + \"/V1/guest-carts/\" + this.getQuoteId() + \"/\" + uri;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Payment request info\r\n             */\r\n            getPaymentRequest: function () {\r\n                return {\r\n                    total: {\r\n                        label: this.getDisplayName(),\r\n                        amount: this.getGrandTotalAmount()\r\n                    },\r\n                    requiredShippingContactFields: ['postalAddress', 'name', 'email', 'phone'],\r\n                    requiredBillingContactFields: ['postalAddress', 'name']\r\n                };\r\n            },\r\n\r\n            /**\r\n             * Retrieve shipping methods based on address\r\n             */\r\n            onShippingContactSelect: function (event, session) {\r\n                // Get the address.\r\n                let address = event.shippingContact;\r\n\r\n                // Create a payload.\r\n                let payload = {\r\n                    address: {\r\n                        city: address.locality,\r\n                        region: address.administrativeArea,\r\n                        country_id: address.countryCode.toUpperCase(),\r\n                        postcode: address.postalCode,\r\n                        save_in_address_book: 0\r\n                    }\r\n                };\r\n\r\n                this.shippingAddress = payload.address;\r\n\r\n                // POST to endpoint for shipping methods.\r\n                storage.post(\r\n                    this.getApiUrl(\"estimate-shipping-methods\"),\r\n                    JSON.stringify(payload)\r\n                ).done(function (result) {\r\n                    // Stop if no shipping methods.\r\n                    if (result.length === 0) {\r\n                        session.abort();\r\n                        alert($t(\"There are no shipping methods available for you right now. Please try again or use an alternative payment method.\"));\r\n                        return false;\r\n                    }\r\n\r\n                    let shippingMethods = [];\r\n                    this.shippingMethods = {};\r\n\r\n                    // Format shipping methods array.\r\n                    for (let i = 0; i < result.length; i++) {\r\n                        if (typeof result[i].method_code !== 'string') {\r\n                            continue;\r\n                        }\r\n\r\n                        let method = {\r\n                            identifier: result[i].method_code,\r\n                            label: result[i].method_title,\r\n                            detail: result[i].carrier_title ? result[i].carrier_title : \"\",\r\n                            amount: parseFloat(result[i].amount).toFixed(2)\r\n                        };\r\n\r\n                        // Add method object to array.\r\n                        shippingMethods.push(method);\r\n\r\n                        this.shippingMethods[result[i].method_code] = result[i];\r\n\r\n                        if (!this.shippingMethod) {\r\n                            this.shippingMethod = result[i].method_code;\r\n                        }\r\n                    }\r\n\r\n                    // Create payload to get totals\r\n                    let totalsPayload = {\r\n                        \"addressInformation\": {\r\n                            \"address\": {\r\n                                \"countryId\": this.shippingAddress.country_id,\r\n                                \"region\": this.shippingAddress.region,\r\n                                \"regionId\": this.getRegionId(this.shippingAddress.country_id, this.shippingAddress.region),\r\n                                \"postcode\": this.shippingAddress.postcode\r\n                            },\r\n                            \"shipping_method_code\": this.shippingMethods[shippingMethods[0].identifier].method_code,\r\n                            \"shipping_carrier_code\": this.shippingMethods[shippingMethods[0].identifier].carrier_code\r\n                        }\r\n                    };\r\n\r\n                    // POST to endpoint to get totals, using 1st shipping method\r\n                    storage.post(\r\n                        this.getApiUrl(\"totals-information\"),\r\n                        JSON.stringify(totalsPayload)\r\n                    ).done(function (result) {\r\n                        // Set total\r\n                        this.setGrandTotalAmount(result.base_grand_total);\r\n\r\n                        // Pass shipping methods back\r\n                        session.completeShippingContactSelection(\r\n                            ApplePaySession.STATUS_SUCCESS,\r\n                            shippingMethods,\r\n                            {\r\n                                label: this.getDisplayName(),\r\n                                amount: this.getGrandTotalAmount()\r\n                            },\r\n                            [{\r\n                                type: 'final',\r\n                                label: $t('Shipping'),\r\n                                amount: shippingMethods[0].amount\r\n                            }]\r\n                        );\r\n                    }.bind(this)).fail(function (result) {\r\n                        session.abort();\r\n                        alert($t(\"We're unable to fetch the cart totals for you. Please try an alternative payment method.\"));\r\n                        console.error(\"Braintree ApplePay: Unable to get totals\", result);\r\n                        return false;\r\n                    });\r\n\r\n                }.bind(this)).fail(function (result) {\r\n                    session.abort();\r\n                    alert($t(\"We're unable to find any shipping methods for you. Please try an alternative payment method.\"));\r\n                    console.error(\"Braintree ApplePay: Unable to find shipping methods for estimate-shipping-methods\", result);\r\n                    return false;\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Record which shipping method has been selected & Updated totals\r\n             */\r\n            onShippingMethodSelect: function (event, session) {\r\n                let shippingMethod = event.shippingMethod;\r\n                this.shippingMethod = shippingMethod.identifier;\r\n\r\n                let payload = {\r\n                    \"addressInformation\": {\r\n                        \"address\": {\r\n                            \"countryId\": this.shippingAddress.country_id,\r\n                            \"region\": this.shippingAddress.region,\r\n                            \"regionId\": this.getRegionId(this.shippingAddress.country_id, this.shippingAddress.region),\r\n                            \"postcode\": this.shippingAddress.postcode\r\n                        },\r\n                        \"shipping_method_code\": this.shippingMethods[this.shippingMethod].method_code,\r\n                        \"shipping_carrier_code\": this.shippingMethods[this.shippingMethod].carrier_code\r\n                    }\r\n                };\r\n\r\n                storage.post(\r\n                    this.getApiUrl(\"totals-information\"),\r\n                    JSON.stringify(payload)\r\n                ).done(function (r) {\r\n                    this.setGrandTotalAmount(r.base_grand_total);\r\n\r\n                    session.completeShippingMethodSelection(\r\n                        ApplePaySession.STATUS_SUCCESS,\r\n                        {\r\n                            label: this.getDisplayName(),\r\n                            amount: this.getGrandTotalAmount()\r\n                        },\r\n                        [{\r\n                            type: 'final',\r\n                            label: $t('Shipping'),\r\n                            amount: shippingMethod.amount\r\n                        }]\r\n                    );\r\n                }.bind(this));\r\n            },\r\n\r\n            /**\r\n             * Place the order\r\n             */\r\n            startPlaceOrder: function (nonce, event, session) {\r\n                let shippingContact = event.payment.shippingContact,\r\n                    billingContact = event.payment.billingContact,\r\n                    payload = {\r\n                        \"addressInformation\": {\r\n                            \"shipping_address\": {\r\n                                \"email\": shippingContact.emailAddress,\r\n                                \"telephone\": shippingContact.phoneNumber,\r\n                                \"firstname\": shippingContact.givenName,\r\n                                \"lastname\": shippingContact.familyName,\r\n                                \"street\": shippingContact.addressLines,\r\n                                \"city\": shippingContact.locality,\r\n                                \"region\": shippingContact.administrativeArea,\r\n                                \"region_id\": this.getRegionId(shippingContact.countryCode.toUpperCase(), shippingContact.administrativeArea),\r\n                                \"region_code\": null,\r\n                                \"country_id\": shippingContact.countryCode.toUpperCase(),\r\n                                \"postcode\": shippingContact.postalCode,\r\n                                \"same_as_billing\": 0,\r\n                                \"customer_address_id\": 0,\r\n                                \"save_in_address_book\": 0\r\n                            },\r\n                            \"billing_address\": {\r\n                                \"email\": shippingContact.emailAddress,\r\n                                \"telephone\": '0000000000',\r\n                                \"firstname\": billingContact.givenName,\r\n                                \"lastname\": billingContact.familyName,\r\n                                \"street\": billingContact.addressLines,\r\n                                \"city\": billingContact.locality,\r\n                                \"region\": billingContact.administrativeArea,\r\n                                \"region_id\": this.getRegionId(billingContact.countryCode.toUpperCase(), billingContact.administrativeArea),\r\n                                \"region_code\": null,\r\n                                \"country_id\": billingContact.countryCode.toUpperCase(),\r\n                                \"postcode\": billingContact.postalCode,\r\n                                \"same_as_billing\": 0,\r\n                                \"customer_address_id\": 0,\r\n                                \"save_in_address_book\": 0\r\n                            },\r\n                            \"shipping_method_code\": this.shippingMethods[this.shippingMethod].method_code,\r\n                            \"shipping_carrier_code\": this.shippingMethods[this.shippingMethod].carrier_code\r\n                        }\r\n                    };\r\n\r\n                // Set addresses\r\n                storage.post(\r\n                    this.getApiUrl(\"shipping-information\"),\r\n                    JSON.stringify(payload)\r\n                ).done(function () {\r\n                    // Submit payment information\r\n                    storage.post(\r\n                        this.getApiUrl(\"payment-information\"),\r\n                        JSON.stringify(\r\n                            {\r\n                                \"email\": shippingContact.emailAddress,\r\n                                \"paymentMethod\": {\r\n                                    \"method\": \"braintree_applepay\",\r\n                                    \"additional_data\": {\r\n                                        \"payment_method_nonce\": nonce\r\n                                    },\r\n                                    \"extension_attributes\": {\r\n                                        \"agreement_ids\": [1]\r\n                                    }\r\n                                }\r\n                            }\r\n                        )\r\n                    ).done(function (r) {\r\n                        document.location = this.getActionSuccess();\r\n                        session.completePayment(ApplePaySession.STATUS_SUCCESS);\r\n                    }.bind(this)).fail(function (r) {\r\n                        session.completePayment(ApplePaySession.STATUS_FAILURE);\r\n                        session.abort();\r\n                        alert($t(\"We're unable to take your payment through Apple Pay. Please try an again or use an alternative payment method.\"));\r\n                        console.error(\"Braintree ApplePay Unable to take payment\", r);\r\n                        return false;\r\n                    });\r\n\r\n                }.bind(this)).fail(function (r) {\r\n                    console.error(\"Braintree ApplePay Unable to set shipping information\", r);\r\n                    session.completePayment(ApplePaySession.STATUS_INVALID_BILLING_POSTAL_ADDRESS);\r\n                });\r\n            }\r\n        });\r\n    });\r\n","PayPal_Braintree/js/applepay/button.js":"/**\r\n * Braintree Apple Pay button\r\n **/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        \"knockout\",\r\n        \"jquery\",\r\n        'braintree',\r\n        'braintreeApplePay',\r\n        'mage/translate'\r\n        ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        jQuery,\r\n        braintree,\r\n        applePay,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        var that;\r\n\r\n        return {\r\n            init: function (element, context) {\r\n                // No element or context\r\n                if (!element || !context) {\r\n                    return;\r\n                }\r\n\r\n                // Context must implement these methods\r\n                if (typeof context.getClientToken !== 'function') {\r\n                    console.error(\"Braintree ApplePay Context passed does not provide a getClientToken method\", context);\r\n                    return;\r\n                }\r\n                if (typeof context.getPaymentRequest !== 'function') {\r\n                    console.error(\"Braintree ApplePay Context passed does not provide a getPaymentRequest method\", context);\r\n                    return;\r\n                }\r\n                if (typeof context.startPlaceOrder !== 'function') {\r\n                    console.error(\"Braintree ApplePay Context passed does not provide a startPlaceOrder method\", context);\r\n                    return;\r\n                }\r\n\r\n                if (this.deviceSupported() === false) {\r\n                    return;\r\n                }\r\n\r\n                // init braintree api\r\n                braintree.create({\r\n                    authorization: context.getClientToken()\r\n                }, function (clientErr, clientInstance) {\r\n                    if (clientErr) {\r\n                        console.error('Error creating client:', clientErr);\r\n                        return;\r\n                    }\r\n\r\n                    applePay.create({\r\n                        client: clientInstance\r\n                    }, function (applePayErr, applePayInstance) {\r\n                        // No instance\r\n                        if (applePayErr) {\r\n                            console.error('Braintree ApplePay Error creating applePayInstance:', applePayErr);\r\n                            return;\r\n                        }\r\n\r\n                        // Create a button within the KO element, as apple pay can only be instantiated through\r\n                        // a valid on click event (ko onclick bind interferes with this).\r\n                        var el = document.createElement('div');\r\n                        el.className = \"braintree-apple-pay-button\";\r\n                        el.title = $t(\"Pay with Apple Pay\");\r\n                        el.alt = $t(\"Pay with Apple Pay\");\r\n                        el.addEventListener('click', function (e) {\r\n                            e.preventDefault();\r\n\r\n                            // Payment request object\r\n                            var paymentRequest = applePayInstance.createPaymentRequest(context.getPaymentRequest());\r\n                            if (!paymentRequest) {\r\n                                alert($t(\"We're unable to take payments through Apple Pay at the moment. Please try an alternative payment method.\"));\r\n                                console.error('Braintree ApplePay Unable to create paymentRequest', paymentRequest);\r\n                                return;\r\n                            }\r\n\r\n                            // Show the loader\r\n                            jQuery(\"body\").loader('show');\r\n\r\n                            // Init apple pay session\r\n                            try {\r\n                                var session = new ApplePaySession(1, paymentRequest);\r\n                            } catch (err) {\r\n                                jQuery(\"body\").loader('hide');\r\n                                console.error('Braintree ApplePay Unable to create ApplePaySession', err);\r\n                                alert($t(\"We're unable to take payments through Apple Pay at the moment. Please try an alternative payment method.\"));\r\n                                return false;\r\n                            }\r\n\r\n                            // Handle invalid merchant\r\n                            session.onvalidatemerchant = function (event) {\r\n                                applePayInstance.performValidation({\r\n                                    validationURL: event.validationURL,\r\n                                    displayName: context.getDisplayName()\r\n                                }, function (validationErr, merchantSession) {\r\n                                    if (validationErr) {\r\n                                        session.abort();\r\n                                        console.error('Braintree ApplePay Error validating merchant:', validationErr);\r\n                                        alert($t(\"We're unable to take payments through Apple Pay at the moment. Please try an alternative payment method.\"));\r\n                                        return;\r\n                                    }\r\n\r\n                                    session.completeMerchantValidation(merchantSession);\r\n                                });\r\n                            };\r\n\r\n                            // Attach payment auth event\r\n                            session.onpaymentauthorized = function (event) {\r\n                                applePayInstance.tokenize({\r\n                                    token: event.payment.token\r\n                                }, function (tokenizeErr, payload) {\r\n                                    if (tokenizeErr) {\r\n                                        console.error('Error tokenizing Apple Pay:', tokenizeErr);\r\n                                        session.completePayment(ApplePaySession.STATUS_FAILURE);\r\n                                        return;\r\n                                    }\r\n\r\n                                    // Pass the nonce back to the payment method\r\n                                    context.startPlaceOrder(payload.nonce, event, session);\r\n                                });\r\n                            };\r\n\r\n                            // Attach onShippingContactSelect method\r\n                            if (typeof context.onShippingContactSelect === 'function') {\r\n                                session.onshippingcontactselected = function (event) {\r\n                                    return context.onShippingContactSelect(event, session);\r\n                                };\r\n                            }\r\n\r\n                            // Attach onShippingMethodSelect method\r\n                            if (typeof context.onShippingMethodSelect === 'function') {\r\n                                session.onshippingmethodselected = function (event) {\r\n                                    return context.onShippingMethodSelect(event, session);\r\n                                };\r\n                            }\r\n\r\n                            // Hook\r\n                            if (typeof context.onButtonClick === 'function') {\r\n                                context.onButtonClick(session, this, e);\r\n                            } else {\r\n                                jQuery(\"body\").loader('hide');\r\n                                session.begin();\r\n                            }\r\n                        });\r\n                        element.appendChild(el);\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Check the site is using HTTPS & apple pay is supported on this device.\r\n             * @return boolean\r\n             */\r\n            deviceSupported: function () {\r\n                if (location.protocol != 'https:') {\r\n                    console.warn(\"Braintree Apple Pay requires your checkout be served over HTTPS\");\r\n                    return false;\r\n                }\r\n\r\n                if ((window.ApplePaySession && ApplePaySession.canMakePayments()) !== true) {\r\n                    console.warn(\"Braintree Apple Pay is not supported on this device/browser\");\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n);","PayPal_Braintree/js/applepay/implementations/shortcut.js":"/**\r\n * Braintree Apple Pay mini cart payment method integration.\r\n **/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        'PayPal_Braintree/js/applepay/button',\r\n        'PayPal_Braintree/js/applepay/api',\r\n        'mage/translate',\r\n        'domReady!'\r\n    ],\r\n    function (\r\n        Component,\r\n        button,\r\n        buttonApi,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n\r\n            defaults: {\r\n                id: null,\r\n                clientToken: null,\r\n                quoteId: 0,\r\n                displayName: null,\r\n                actionSuccess: null,\r\n                grandTotalAmount: 0,\r\n                isLoggedIn: false,\r\n                storeCode: \"default\"\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n                if (!this.displayName) {\r\n                    this.displayName = $t('Store');\r\n                }\r\n\r\n                var api = new buttonApi();\r\n                api.setGrandTotalAmount(parseFloat(this.grandTotalAmount).toFixed(2));\r\n                api.setClientToken(this.clientToken);\r\n                api.setDisplayName(this.displayName);\r\n                api.setQuoteId(this.quoteId);\r\n                api.setActionSuccess(this.actionSuccess);\r\n                api.setIsLoggedIn(this.isLoggedIn);\r\n                api.setStoreCode(this.storeCode);\r\n\r\n                // Attach the button\r\n                button.init(\r\n                    document.getElementById(this.id),\r\n                    api\r\n                );\r\n\r\n                return this;\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/applepay/implementations/core-checkout/method-applepay.js":"define(\r\n    ['uiComponent', 'Magento_Checkout/js/model/payment/renderer-list'],\r\n    function (Component, rendererList) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_applepay',\r\n                component: 'PayPal_Braintree/js/applepay/implementations/core-checkout/method-renderer/applepay'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);","PayPal_Braintree/js/applepay/implementations/core-checkout/method-renderer/applepay.js":"/**\r\n * Braintree Apple Pay payment method integration.\r\n **/\r\ndefine([\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'Magento_Checkout/js/model/quote',\r\n    'PayPal_Braintree/js/applepay/button'\r\n], function (\r\n    Component,\r\n    quote,\r\n    button\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/applepay/core-checkout',\r\n            paymentMethodNonce: null,\r\n            grandTotalAmount: 0,\r\n            deviceSupported: button.deviceSupported()\r\n        },\r\n\r\n        /**\r\n         * Inject the apple pay button into the target element\r\n         */\r\n        getApplePayBtn: function (id) {\r\n            button.init(\r\n                document.getElementById(id),\r\n                this\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Subscribe to grand totals\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\r\n\r\n            quote.totals.subscribe(function () {\r\n                if (this.grandTotalAmount !== quote.totals()['base_grand_total']) {\r\n                    this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\r\n                }\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Apple pay place order method\r\n         */\r\n        startPlaceOrder: function (nonce, event, session) {\r\n            this.setPaymentMethodNonce(nonce);\r\n            this.placeOrder();\r\n\r\n            session.completePayment(ApplePaySession.STATUS_SUCCESS);\r\n        },\r\n\r\n        /**\r\n         * Save nonce\r\n         */\r\n        setPaymentMethodNonce: function (nonce) {\r\n            this.paymentMethodNonce = nonce;\r\n        },\r\n\r\n        /**\r\n         * Retrieve the client token\r\n         * @returns null|string\r\n         */\r\n        getClientToken: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n        },\r\n\r\n        /**\r\n         * Payment request data\r\n         */\r\n        getPaymentRequest: function () {\r\n            return {\r\n                total: {\r\n                    label: this.getDisplayName(),\r\n                    amount: this.grandTotalAmount\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Merchant display name\r\n         */\r\n        getDisplayName: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].merchantName;\r\n        },\r\n\r\n        /**\r\n         * Get data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = {\r\n                'method': this.getCode(),\r\n                'additional_data': {\r\n                    'payment_method_nonce': this.paymentMethodNonce\r\n                }\r\n            };\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Return image url for the apple pay mark\r\n         */\r\n        getPaymentMarkSrc: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\r\n        }\r\n    });\r\n});","PayPal_Braintree/js/googlepay/api.js":"/**\r\n * Braintree Google Pay button api\r\n **/\r\ndefine([\r\n    'uiComponent',\r\n    'mage/translate',\r\n    'mage/storage',\r\n    'jquery',\r\n    'PayPal_Braintree/js/form-builder'\r\n], function (Component, $t, storage, jQuery, formBuilder) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            clientToken: null,\r\n            merchantId: null,\r\n            currencyCode: null,\r\n            actionSuccess: null,\r\n            amount: null,\r\n            cardTypes: [],\r\n            btnColor: 0\r\n        },\r\n\r\n        /**\r\n         * Set & get environment\r\n         * \"PRODUCTION\" or \"TEST\"\r\n         */\r\n        setEnvironment: function (value) {\r\n            this.environment = value;\r\n        },\r\n        getEnvironment: function () {\r\n            return this.environment;\r\n        },\r\n\r\n        /**\r\n         * Set & get api token\r\n         */\r\n        setClientToken: function (value) {\r\n            this.clientToken = value;\r\n        },\r\n        getClientToken: function () {\r\n            return this.clientToken;\r\n        },\r\n\r\n        /**\r\n         * Set and get display name\r\n         */\r\n        setMerchantId: function (value) {\r\n            this.merchantId = value;\r\n        },\r\n        getMerchantId: function () {\r\n            return this.merchantId;\r\n        },\r\n\r\n        /**\r\n         * Set and get currency code\r\n         */\r\n        setAmount: function (value) {\r\n            this.amount = parseFloat(value).toFixed(2);\r\n        },\r\n        getAmount: function () {\r\n            return this.amount;\r\n        },\r\n\r\n        /**\r\n         * Set and get currency code\r\n         */\r\n        setCurrencyCode: function (value) {\r\n            this.currencyCode = value;\r\n        },\r\n        getCurrencyCode: function () {\r\n            return this.currencyCode;\r\n        },\r\n\r\n        /**\r\n         * Set and get success redirection url\r\n         */\r\n        setActionSuccess: function (value) {\r\n            this.actionSuccess = value;\r\n        },\r\n        getActionSuccess: function () {\r\n            return this.actionSuccess;\r\n        },\r\n\r\n        /**\r\n         * Set and get success redirection url\r\n         */\r\n        setCardTypes: function (value) {\r\n            this.cardTypes = value;\r\n        },\r\n        getCardTypes: function () {\r\n            return this.cardTypes;\r\n        },\r\n\r\n        /**\r\n         * BTN Color\r\n         */\r\n        setBtnColor: function (value) {\r\n            this.btnColor = value;\r\n        },\r\n        getBtnColor: function () {\r\n            return this.btnColor;\r\n        },\r\n\r\n        /**\r\n         * Payment request info\r\n         */\r\n        getPaymentRequest: function () {\r\n            var result = {\r\n                transactionInfo: {\r\n                    totalPriceStatus: 'ESTIMATED',\r\n                    totalPrice: this.getAmount(),\r\n                    currencyCode: this.getCurrencyCode()\r\n                },\r\n                allowedPaymentMethods: ['CARD'],\r\n                phoneNumberRequired: true,\r\n                emailRequired: true,\r\n                shippingAddressRequired: true,\r\n                cardRequirements: {\r\n                    billingAddressRequired: true,\r\n                    billingAddressFormat: 'FULL',\r\n                    allowedCardNetworks: this.getCardTypes()\r\n                }\r\n            };\r\n\r\n            if (this.getEnvironment() !== \"TEST\") {\r\n                result['merchantId'] = this.getMerchantId();\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Place the order\r\n         */\r\n        startPlaceOrder: function (nonce, paymentData) {\r\n            var payload = {\r\n                details: {\r\n                    shippingAddress: {\r\n                        streetAddress: paymentData.shippingAddress.address1 + \"\\n\"\r\n                        + paymentData.shippingAddress.address2,\r\n                        locality: paymentData.shippingAddress.locality,\r\n                        postalCode: paymentData.shippingAddress.postalCode,\r\n                        countryCodeAlpha2: paymentData.shippingAddress.countryCode,\r\n                        email: paymentData.email,\r\n                        name: paymentData.shippingAddress.name,\r\n                        telephone: typeof paymentData.shippingAddress.phoneNumber !== 'undefined' ? paymentData.shippingAddress.phoneNumber : '',\r\n                        region: typeof paymentData.shippingAddress.administrativeArea !== 'undefined' ? paymentData.shippingAddress.administrativeArea : ''\r\n                    },\r\n                    billingAddress: {\r\n                        streetAddress: paymentData.cardInfo.billingAddress.address1 + \"\\n\"\r\n                        + paymentData.cardInfo.billingAddress.address2,\r\n                        locality: paymentData.cardInfo.billingAddress.locality,\r\n                        postalCode: paymentData.cardInfo.billingAddress.postalCode,\r\n                        countryCodeAlpha2: paymentData.cardInfo.billingAddress.countryCode,\r\n                        email: paymentData.email,\r\n                        name: paymentData.cardInfo.billingAddress.name,\r\n                        telephone: typeof paymentData.cardInfo.billingAddress.phoneNumber !== 'undefined' ? paymentData.cardInfo.billingAddress.phoneNumber : '',\r\n                        region: typeof paymentData.cardInfo.billingAddress.administrativeArea !== 'undefined' ? paymentData.cardInfo.billingAddress.administrativeArea : ''\r\n                    }\r\n                },\r\n                nonce: nonce\r\n            };\r\n\r\n            formBuilder.build({\r\n                action: this.getActionSuccess(),\r\n                fields: {\r\n                    result: JSON.stringify(payload)\r\n                }\r\n            }).submit();\r\n        }\r\n    });\r\n});","PayPal_Braintree/js/googlepay/button.js":"/**\r\n * Braintree Google Pay button\r\n **/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        \"knockout\",\r\n        \"jquery\",\r\n        'braintree',\r\n        'braintreeGooglePay',\r\n        'mage/translate',\r\n        'googlePayLibrary'\r\n        ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        jQuery,\r\n        braintree,\r\n        googlePay,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return {\r\n            init: function (element, context) {\r\n                // No element or context\r\n                if (!element || !context || !this.deviceSupported()) {\r\n                    return;\r\n                }\r\n\r\n                // Context must implement these methods\r\n                if (typeof context.getClientToken !== 'function') {\r\n                    console.error(\"Braintree GooglePay Context passed does not provide a getClientToken method\", context);\r\n                    return;\r\n                }\r\n                if (typeof context.getPaymentRequest !== 'function') {\r\n                    console.error(\"Braintree GooglePay Context passed does not provide a getPaymentRequest method\", context);\r\n                    return;\r\n                }\r\n                if (typeof context.startPlaceOrder !== 'function') {\r\n                    console.error(\"Braintree GooglePay Context passed does not provide a startPlaceOrder method\", context);\r\n                    return;\r\n                }\r\n\r\n                // init google pay object\r\n                var paymentsClient = new google.payments.api.PaymentsClient({\r\n                    environment: context.getEnvironment()\r\n                });\r\n\r\n                // Create a button within the KO element, as google pay can only be instantiated through\r\n                // a valid on click event (ko onclick bind interferes with this).\r\n                var button = document.createElement('button');\r\n                button.className = \"braintree-googlepay-button long \" + (context.getBtnColor() == 1 ? 'black' : 'white');\r\n                button.title = $t(\"Buy with Google Pay\");\r\n\r\n                // init braintree api\r\n                braintree.create({\r\n                    authorization: context.getClientToken()\r\n                }, function (clientErr, clientInstance) {\r\n                    if (clientErr) {\r\n                        console.error('Error creating client:', clientErr);\r\n                        return;\r\n                    }\r\n\r\n                    googlePay.create({\r\n                        client: clientInstance\r\n                    }, function (googlePayErr, googlePaymentInstance) {\r\n                        // No instance\r\n                        if (googlePayErr) {\r\n                            console.error('Braintree GooglePay Error creating googlePayInstance:', googlePayErr);\r\n                            return;\r\n                        }\r\n\r\n                        paymentsClient.isReadyToPay({\r\n                            allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods\r\n                        }).then(function(response) {\r\n                            if (response.result) {\r\n                                button.addEventListener('click', function (event) {\r\n                                    event.preventDefault();\r\n                                    jQuery(\"body\").loader('show');\r\n                                    var responseData;\r\n\r\n                                    var paymentDataRequest = googlePaymentInstance.createPaymentDataRequest(context.getPaymentRequest());\r\n                                    paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {\r\n                                        // Persist the paymentData (shipping address etc)\r\n                                        responseData = paymentData;\r\n                                        // Return the braintree nonce promise\r\n                                        return googlePaymentInstance.parseResponse(paymentData);\r\n                                    }).then(function (result) {\r\n                                        context.startPlaceOrder(result.nonce, responseData);\r\n                                    }).catch(function (err) {\r\n                                        // Handle errors\r\n                                        // err = {statusCode: \"CANCELED\"}\r\n                                        console.error(err);\r\n                                        jQuery(\"body\").loader('hide');\r\n                                    });\r\n                                });\r\n\r\n                                element.appendChild(button);\r\n                            }\r\n                        }).catch(function (err) {\r\n                            console.error(err);\r\n                            jQuery(\"body\").loader('hide');\r\n                        });\r\n                    });\r\n                });\r\n            },\r\n\r\n            deviceSupported: function() {\r\n                return !!(window.PaymentRequest);\r\n            }\r\n        };\r\n    }\r\n);","PayPal_Braintree/js/googlepay/implementations/shortcut.js":"/**\r\n * Braintree Google Pay mini cart payment method integration.\r\n **/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        'PayPal_Braintree/js/googlepay/button',\r\n        'PayPal_Braintree/js/googlepay/api',\r\n        'mage/translate',\r\n        'domReady!'\r\n    ],\r\n    function (\r\n        Component,\r\n        button,\r\n        buttonApi,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n\r\n            defaults: {\r\n                id: null,\r\n                clientToken: null,\r\n                merchantId: null,\r\n                currencyCode: null,\r\n                actionSuccess: null,\r\n                amount: null,\r\n                environment: \"TEST\",\r\n                cardType: [],\r\n                btnColor: 0\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                var api = new buttonApi();\r\n                api.setEnvironment(this.environment);\r\n                api.setCurrencyCode(this.currencyCode);\r\n                api.setClientToken(this.clientToken);\r\n                api.setMerchantId(this.merchantId);\r\n                api.setActionSuccess(this.actionSuccess);\r\n                api.setAmount(this.amount);\r\n                api.setCardTypes(this.cardTypes)\r\n                api.setBtnColor(this.btnColor);\r\n\r\n                // Attach the button\r\n                button.init(\r\n                    document.getElementById(this.id),\r\n                    api\r\n                );\r\n\r\n                return this;\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/googlepay/implementations/core-checkout/method-googlepay.js":"define(\r\n    ['uiComponent', 'Magento_Checkout/js/model/payment/renderer-list'],\r\n    function (Component, rendererList) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_googlepay',\r\n                component: 'PayPal_Braintree/js/googlepay/implementations/core-checkout/method-renderer/googlepay'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);","PayPal_Braintree/js/googlepay/implementations/core-checkout/method-renderer/googlepay.js":"/**\r\n * Braintree Google Pay payment method integration.\r\n **/\r\ndefine([\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'Magento_Checkout/js/model/quote',\r\n    'PayPal_Braintree/js/googlepay/button'\r\n], function (\r\n    Component,\r\n    quote,\r\n    button\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/googlepay/core-checkout',\r\n            paymentMethodNonce: null,\r\n            deviceSupported: button.deviceSupported(),\r\n            grandTotalAmount: 0\r\n        },\r\n\r\n        /**\r\n         * Inject the google pay button into the target element\r\n         */\r\n        getGooglePayBtn: function (id) {\r\n            button.init(\r\n                document.getElementById(id),\r\n                this\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Subscribe to grand totals\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\r\n            this.currencyCode = quote.totals()['base_currency_code'];\r\n\r\n            quote.totals.subscribe(function () {\r\n                if (this.grandTotalAmount !== quote.totals()['base_grand_total']) {\r\n                    this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\r\n                }\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Google pay place order method\r\n         */\r\n        startPlaceOrder: function (nonce, paymentData) {\r\n            this.setPaymentMethodNonce(nonce);\r\n            this.placeOrder();\r\n        },\r\n\r\n        /**\r\n         * Save nonce\r\n         */\r\n        setPaymentMethodNonce: function (nonce) {\r\n            this.paymentMethodNonce = nonce;\r\n        },\r\n\r\n        /**\r\n         * Retrieve the client token\r\n         * @returns null|string\r\n         */\r\n        getClientToken: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n        },\r\n\r\n        /**\r\n         * Payment request info\r\n         */\r\n        getPaymentRequest: function () {\r\n           var result = {\r\n                transactionInfo: {\r\n                    totalPriceStatus: 'FINAL',\r\n                    totalPrice: this.grandTotalAmount,\r\n                    currencyCode: this.currencyCode\r\n                },\r\n                allowedPaymentMethods: ['CARD'],\r\n                phoneNumberRequired: false,\r\n                emailRequired: false,\r\n                shippingAddressRequired: false,\r\n                cardRequirements: {\r\n                    billingAddressRequired: false,\r\n                    allowedCardNetworks: this.getCardTypes()\r\n                }\r\n            };\r\n\r\n           if (this.getEnvironment() !== \"TEST\") {\r\n               result['merchantId'] = this.getMerchantId();\r\n           }\r\n\r\n           return result;\r\n        },\r\n\r\n        /**\r\n         * Merchant display name\r\n         */\r\n        getMerchantId: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].merchantId;\r\n        },\r\n\r\n        /**\r\n         * Environment\r\n         */\r\n        getEnvironment: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].environment;\r\n        },\r\n\r\n        /**\r\n         * Card Types\r\n         */\r\n        getCardTypes: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].cardTypes;\r\n        },\r\n\r\n        /**\r\n         * BTN Color\r\n         */\r\n        getBtnColor: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].btnColor;\r\n        },\r\n\r\n        /**\r\n         * Get data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            return {\r\n                'method': this.getCode(),\r\n                'additional_data': {\r\n                    'payment_method_nonce': this.paymentMethodNonce\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Return image url for the google pay mark\r\n         */\r\n        getPaymentMarkSrc: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\r\n        }\r\n    });\r\n});","PayPal_Braintree/js/model/step-navigator-mixin.js":"define([\r\n    'mage/utils/wrapper',\r\n    'jquery'\r\n], function (wrapper, $) {\r\n    'use strict';\r\n\r\n    let mixin = {\r\n        handleHash: function (originalFn) {\r\n            var hashString = window.location.hash.replace('#', '');\r\n            return (hashString.includes('venmo')) ? false : originalFn();\r\n        }\r\n    };\r\n\r\n    return function (target) {\r\n        return wrapper.extend(target, mixin);\r\n    };\r\n});\r\n","PayPal_Braintree/js/paypal/button.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(\r\n    [\r\n        'rjsResolver',\r\n        'uiRegistry',\r\n        'uiComponent',\r\n        'underscore',\r\n        'jquery',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreePayPalCheckout',\r\n        'braintreeCheckoutPayPalAdapter',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'domReady!',\r\n        'https://www.paypalobjects.com/api/checkout.js'\r\n    ],\r\n    function (\r\n        resolver,\r\n        registry,\r\n        Component,\r\n        _,\r\n        $,\r\n        braintree,\r\n        dataCollector,\r\n        paypalCheckout,\r\n        paypalAdapter,\r\n        formBuilder\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n\r\n            defaults: {\r\n\r\n                integrationName: 'braintreePaypal.currentIntegration',\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                displayName: null,\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                environment: 'sandbox',\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                clientToken: null,\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                color: null,\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                shape: null,\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                size: null,\r\n\r\n                /**\r\n                 * {Bool}\r\n                 */\r\n                fundingicons: null,\r\n\r\n                /**\r\n                 * {Bool}\r\n                 */\r\n                branding: null,\r\n\r\n                /**\r\n                 * {Bool}\r\n                 */\r\n                tagline: null,\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                label: null,\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                offerCredit: false,\r\n\r\n                /**\r\n                 * {Object}\r\n                 */\r\n                disabledFunding: {\r\n                    card: false,\r\n                    elv: false\r\n                },\r\n\r\n                /**\r\n                 * {Object}\r\n                 */\r\n                events: {\r\n                    onClick: null,\r\n                    onCancel: null,\r\n                    onError: null\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super()\r\n                    .initComponent();\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initComponent: function () {\r\n                var $this = $('#' + this.id),\r\n                    data = {\r\n                        amount: $this.data('amount'),\r\n                        locale: $this.data('locale'),\r\n                        currency: $this.data('currency'),\r\n                        flow: 'checkout',\r\n                        enableShippingAddress: true,\r\n                        displayName: this.displayName,\r\n                        offerCredit: this.offerCredit\r\n                    };\r\n\r\n                this.initCallback(data);\r\n                return this;\r\n            },\r\n\r\n            initCallback: function (data) {\r\n                braintree.create({\r\n                    authorization: this.clientToken,\r\n                }, function (clientErr, clientInstance) {\r\n                    if (clientErr) {\r\n                        console.error('paypalCheckout error', clientErr);\r\n                        return this.showError(\"PayPal Checkout could not be initialized. Please contact the store owner.\");\r\n                    }\r\n\r\n                    dataCollector.create({\r\n                        client: clientInstance,\r\n                        paypal: true\r\n                    }, function (err, dataCollectorInstance) {\r\n                        if (err) {\r\n                            return console.log(err);\r\n                        }\r\n                    });\r\n\r\n                    paypalCheckout.create({\r\n                        client: clientInstance\r\n                    }, function (createErr, paypalCheckoutInstance) {\r\n                        if (createErr) {\r\n                            console.error('paypalCheckout instantiation error', createErr);\r\n                            return;\r\n                        }\r\n\r\n                        let style = {\r\n                            color: this.color,\r\n                            shape: this.shape,\r\n                            size: this.size\r\n                        };\r\n\r\n                        if (typeof this.fundingicons === 'boolean') {\r\n                            style.fundingicons = this.fundingicons;\r\n                        }\r\n                        if (typeof this.branding === 'boolean') {\r\n                            style.branding = this.branding;\r\n                        }\r\n                        if (typeof this.label === 'string') {\r\n                            style.label = this.label;\r\n                        }\r\n                        if (typeof this.tagline === 'boolean') {\r\n                            style.tagline = this.tagline;\r\n                        }\r\n\r\n                        // PayPal Credit funding options\r\n                        var funding = {\r\n                            allowed: [],\r\n                            disallowed: []\r\n                        };\r\n                        if (this.offerCredit === true) {\r\n                            //funding.allowed.push(paypal.FUNDING.CREDIT);\r\n                            style.label = 'credit'\r\n                        } else {\r\n                            //funding.disallowed.push(paypal.FUNDING.CREDIT);\r\n                        }\r\n\r\n                        // Disabled function options\r\n                        var disabledFunding = this.disabledFunding;\r\n                        if (true === disabledFunding.card) {\r\n                            //funding.disallowed.push(paypal.FUNDING.CARD);\r\n                        }\r\n                        if (true === disabledFunding.elv) {\r\n                            funding.disallowed.push(paypal.FUNDING.ELV);\r\n                        }\r\n\r\n                        // Render\r\n                        var actionSuccess = this.actionSuccess,\r\n                            beforeSubmit = this.beforeSubmit,\r\n                            events = this.events;\r\n\r\n                        paypal.Button.render({\r\n                            env: this.environment,\r\n                            style: style,\r\n                            funding: funding,\r\n                            locale: data.locale,\r\n\r\n                            payment: function () {\r\n                                return paypalCheckoutInstance.createPayment(data);\r\n                            },\r\n\r\n                            onCancel: function (data) {\r\n                                jQuery(\"#maincontent\").trigger('processStop');\r\n\r\n                                if (typeof events.onCancel === 'function') {\r\n                                    events.onCancel();\r\n                                }\r\n                            },\r\n\r\n                            onError: function (err) {\r\n                                console.error('paypalCheckout button render error', err);\r\n                                jQuery(\"#maincontent\").trigger('processStop');\r\n\r\n\r\n                                if (typeof events.onError === 'function') {\r\n                                    events.onError(err);\r\n                                }\r\n                            },\r\n\r\n                            onClick: function(data) {\r\n                                if (typeof events.onClick === 'function') {\r\n                                    events.onClick(data);\r\n                                }\r\n                            },\r\n\r\n                            /**\r\n                             * Pass the payload (and payload.nonce) through to the implementation's onPaymentMethodReceived method\r\n                             * @param data\r\n                             * @param actions\r\n                             */\r\n                            onAuthorize: function (data, actions) {\r\n                                return paypalCheckoutInstance.tokenizePayment(data)\r\n                                    .then(function (payload) {\r\n                                        if (typeof beforeSubmit === 'function') {\r\n                                            if (!beforeSubmit(payload)) {\r\n                                                return false;\r\n                                            }\r\n                                        }\r\n\r\n                                        jQuery(\"#maincontent\").trigger('processStart');\r\n\r\n                                        // Map the shipping address correctly\r\n                                        var address = payload.details.shippingAddress;\r\n                                        var recipientName = address.recipientName.split(\" \");\r\n                                        payload.details.shippingAddress = {\r\n                                            streetAddress: typeof address.line2 !== 'undefined' ? address.line1.replace(/'/g, \"&apos;\") + \" \" + address.line2.replace(/'/g, \"&apos;\") : address.line1.replace(/'/g, \"&apos;\"),\r\n                                            locality: address.city.replace(/'/g, \"&apos;\"),\r\n                                            postalCode: address.postalCode,\r\n                                            countryCodeAlpha2: address.countryCode,\r\n                                            email: payload.details.email.replace(/'/g, \"&apos;\"),\r\n                                            firstname: recipientName[0].replace(/'/g, \"&apos;\"),\r\n                                            lastname: recipientName[1].replace(/'/g, \"&apos;\"),\r\n                                            telephone: typeof payload.details.phone !== 'undefined' ? payload.details.phone : '',\r\n                                            region: typeof address.state !== 'undefined' ? address.state.replace(/'/g, \"&apos;\") : ''\r\n                                        };\r\n\r\n                                        formBuilder.build(\r\n                                            {\r\n                                                action: actionSuccess,\r\n                                                fields: {\r\n                                                    result: JSON.stringify(payload)\r\n                                                }\r\n                                            }\r\n                                        ).submit();\r\n                                    });\r\n                            }\r\n                        }, '#' + this.id).then(function (data) {\r\n                            if (typeof events.onRender === 'function') {\r\n                                events.onRender(data);\r\n                            }\r\n                        });\r\n                    }.bind(this));\r\n                }.bind(this));\r\n            },\r\n\r\n            beforeSubmit: function () {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\n","PayPal_Braintree/js/paypal/form-builder.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'underscore',\r\n        'mage/template'\r\n    ],\r\n    function ($, _, mageTemplate) {\r\n        'use strict';\r\n\r\n        return {\r\n\r\n            /**\r\n             * @param {Object} formData\r\n             * @returns {*|jQuery}\r\n             */\r\n            build: function (formData) {\r\n                var formTmpl = mageTemplate('<form action=\"<%= data.action %>\"' +\r\n                    ' method=\"POST\" hidden enctype=\"application/x-www-form-urlencoded\">' +\r\n                        '<% _.each(data.fields, function(val, key){ %>' +\r\n                            '<input value=\\'<%= val %>\\' name=\"<%= key %>\" type=\"hidden\">' +\r\n                        '<% }); %>' +\r\n                    '</form>');\r\n\r\n                return $(formTmpl({\r\n                    data: {\r\n                        action: formData.action,\r\n                        fields: formData.fields\r\n                    }\r\n                })).appendTo($('[data-container=\"body\"]'));\r\n            }\r\n        };\r\n    }\r\n);\r\n","PayPal_Braintree/js/paypal/product-page.js":"define(\r\n    ['PayPal_Braintree/js/paypal/button', 'jquery'],\r\n    function (button, $) {\r\n        'use strict';\r\n\r\n        return button.extend({\r\n\r\n            defaults: {\r\n                label: 'buynow',\r\n                branding: true,\r\n            },\r\n\r\n            /**\r\n             * The validation on the add-to-cart form is done after the PayPal window has opened.\r\n             * This is because the validate method exposed by the PP Button requires an event to disable/enable the button.\r\n             * We can't fire an event due to the way the mage.validation widget works and we can't do something gross like\r\n             * an interval because the validation() method shows the error messages and focuses the user's input on the\r\n             * first erroring input field.\r\n             * @param payload\r\n             * @returns {*}\r\n             */\r\n            beforeSubmit: function (payload) {\r\n                var form = $(\"#product_addtocart_form\");\r\n\r\n                if (!(form.validation() && form.validation('isValid'))) {\r\n                    return false;\r\n                }\r\n\r\n                payload.additionalData = form.serialize();\r\n\r\n                return payload;\r\n            }\r\n        });\r\n    }\r\n);","PayPal_Braintree/js/paypal/credit/calculator.js":"define([\r\n    'underscore',\r\n    'uiComponent',\r\n    'jquery'\r\n], function (_, Component, $) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: \"PayPal_Braintree/credit/calculator\",\r\n            displaySummary: true, // \"From X per month\"\r\n            displayInterestDetails: false, // Display the more in-depth summary of interest rates\r\n            instalmentsFrom: 0,\r\n            currentInstalment: {\r\n                term: 0,\r\n                monthlyPayment: 0,\r\n                apr: 0,\r\n                cost: 0,\r\n                costIncInterest: 0\r\n            },\r\n            endpoint: null,\r\n            instalments: [],\r\n            visible: false,\r\n            merchantName: ''\r\n        },\r\n\r\n        initObservable: function () {\r\n            this._super();\r\n            if (this.instalments.length > 0) {\r\n                this.currentInstalment = this.instalments[0];\r\n                this.instalmentsFrom = this.instalments[this.instalments.length-1].monthlyPayment;\r\n                this.visible = true;\r\n            } else {\r\n                this.loadInstalments();\r\n            }\r\n\r\n            this.observe(['instalments', 'currentInstalment', 'instalmentsFrom', 'visible']);\r\n            return this;\r\n        },\r\n\r\n        isCurrentInstalment: function (term) {\r\n            return (this.currentInstalment().term === term);\r\n        },\r\n\r\n        setCurrentInstalment: function (instalment) {\r\n            this.currentInstalment(instalment);\r\n        },\r\n\r\n        loadInstalments: function () {\r\n            if (!this.endpoint) {\r\n                return false;\r\n            }\r\n\r\n            var self = this;\r\n            require(['Magento_Checkout/js/model/quote', 'jquery'], function (quote, $) {\r\n                if (typeof quote.totals().base_grand_total === 'undefined') {\r\n                    return false;\r\n                }\r\n\r\n                $.getJSON(self.endpoint, {amount: quote.totals().base_grand_total}, function (response) {\r\n                    self.instalments(response);\r\n                    self.setCurrentInstalment(response[0]);\r\n                    self.visible(true);\r\n                });\r\n            });\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/product-page.js":"define(\r\n    ['uiComponent'],\r\n    function (Component) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n\r\n        });\r\n    }\r\n);","PayPal_Braintree/js/view/payment/3d-secure.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/adapter',\r\n    'Magento_Checkout/js/model/quote',\r\n    'mage/translate',\r\n    'braintreeThreeDSecure',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function ($, braintree, quote, $t, threeDSecure, fullScreenLoader) {\r\n    'use strict';\r\n\r\n    return {\r\n        config: null,\r\n\r\n        /**\r\n         * Set 3d secure config\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n            this.config.thresholdAmount = parseFloat(config.thresholdAmount);\r\n        },\r\n\r\n        /**\r\n         * Get code\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return 'three_d_secure';\r\n        },\r\n\r\n        /**\r\n         * convert Non-ASCII characters into unicode\r\n         * @param str\r\n         * @returns {string}\r\n         */\r\n        escapeNonAsciiCharacters: function (str) {\r\n            return [...str].map(c => /^[\\x00-\\x7F]$/.test(c) ? c : c.split(\"\").map(a => \"\\\\u\" + a.charCodeAt().toString(16).padStart(4, \"0\")).join(\"\")).join(\"\");\r\n        },\r\n\r\n        /**\r\n         * Validate Braintree payment nonce\r\n         * @param {Object} context\r\n         * @returns {Object}\r\n         */\r\n        validate: function (context) {\r\n            var clientInstance = braintree.getApiClient(),\r\n                state = $.Deferred(),\r\n                totalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2),\r\n                billingAddress = quote.billingAddress();\r\n\r\n            // No 3d secure if using CVV verification on vaulted cards\r\n            if (quote.paymentMethod().method.indexOf('braintree_cc_vault_') !== -1) {\r\n                if (this.config.useCvvVault === true) {\r\n                    state.resolve();\r\n                    return state.promise();\r\n                }\r\n            }\r\n\r\n            if (!this.isAmountAvailable(totalAmount) || !this.isCountryAvailable(billingAddress.countryId)) {\r\n                state.resolve();\r\n                return state.promise();\r\n            }\r\n\r\n            var firstName = this.escapeNonAsciiCharacters(billingAddress.firstname);\r\n            var lastName = this.escapeNonAsciiCharacters(billingAddress.lastname);\r\n\r\n            fullScreenLoader.startLoader();\r\n\r\n            var setup3d = function(clientInstance) {\r\n                threeDSecure.create({\r\n                    version: 2,\r\n                    client: clientInstance\r\n                }, function (threeDSecureErr, threeDSecureInstance) {\r\n                    if (threeDSecureErr) {\r\n                        fullScreenLoader.stopLoader();\r\n                        return state.reject($t('Please try again with another form of payment.'));\r\n                    }\r\n\r\n                    var threeDSContainer = document.createElement('div'),\r\n                        tdmask = document.createElement('div'),\r\n                        tdframe = document.createElement('div'),\r\n                        tdbody = document.createElement('div');\r\n\r\n                    threeDSContainer.id = 'braintree-three-d-modal';\r\n                    tdmask.className =\"bt-mask\";\r\n                    tdframe.className =\"bt-modal-frame\";\r\n                    tdbody.className =\"bt-modal-body\";\r\n\r\n                    tdframe.appendChild(tdbody);\r\n                    threeDSContainer.appendChild(tdmask);\r\n                    threeDSContainer.appendChild(tdframe);\r\n\r\n                    threeDSecureInstance.verifyCard({\r\n                        amount: totalAmount,\r\n                        nonce: context.paymentMethodNonce,\r\n                        billingAddress: {\r\n                            givenName: firstName,\r\n                            surname: lastName,\r\n                            phoneNumber: billingAddress.telephone,\r\n                            streetAddress: billingAddress.street[0],\r\n                            extendedAddress: billingAddress.street[1],\r\n                            locality: billingAddress.city,\r\n                            region: billingAddress.region,\r\n                            postalCode: billingAddress.postcode,\r\n                            countryCodeAlpha2: billingAddress.countryId\r\n                        },\r\n                        onLookupComplete: function (data, next) {\r\n                            next();\r\n                        },\r\n                        addFrame: function (err, iframe) {\r\n                            fullScreenLoader.stopLoader();\r\n\r\n                            if (err) {\r\n                                console.log(\"Unable to verify card over 3D Secure\", err);\r\n                                return state.reject($t('Please try again with another form of payment.'));\r\n                            }\r\n\r\n                            tdbody.appendChild(iframe);\r\n                            document.body.appendChild(threeDSContainer);\r\n                        },\r\n                        removeFrame: function () {\r\n                            fullScreenLoader.startLoader();\r\n                            document.body.removeChild(threeDSContainer);\r\n                        }\r\n                    }, function (err, response) {\r\n                        fullScreenLoader.stopLoader();\r\n\r\n                        if (err) {\r\n                            console.error(\"3dsecure validation failed\", err);\r\n                            return state.reject($t('Please try again with another form of payment.'));\r\n                        }\r\n\r\n                        var liability = {\r\n                            shifted: response.liabilityShifted,\r\n                            shiftPossible: response.liabilityShiftPossible\r\n                        };\r\n\r\n                        if (liability.shifted || !liability.shifted && !liability.shiftPossible) {\r\n                            context.paymentMethodNonce = response.nonce;\r\n                            state.resolve();\r\n                        } else {\r\n                            state.reject($t('Please try again with another form of payment.'));\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n\r\n            if (!clientInstance) {\r\n                require(['PayPal_Braintree/js/view/payment/method-renderer/cc-form'], function(c) {\r\n                    var config = c.extend({\r\n                        defaults: {\r\n                            clientConfig: {\r\n                                onReady: function() {}\r\n                            }\r\n                        }\r\n                    });\r\n                    braintree.setConfig(config.defaults.clientConfig);\r\n                    braintree.setup(setup3d);\r\n                });\r\n            } else {\r\n                setup3d(clientInstance);\r\n            }\r\n\r\n            return state.promise();\r\n        },\r\n\r\n        /**\r\n         * Check minimal amount for 3d secure activation\r\n         * @param {Number} amount\r\n         * @returns {Boolean}\r\n         */\r\n        isAmountAvailable: function (amount) {\r\n            amount = parseFloat(amount);\r\n\r\n            return amount >= this.config.thresholdAmount;\r\n        },\r\n\r\n        /**\r\n         * Check if current country is available for 3d secure\r\n         * @param {String} countryId\r\n         * @returns {Boolean}\r\n         */\r\n        isCountryAvailable: function (countryId) {\r\n            var key,\r\n                specificCountries = this.config.specificCountries;\r\n\r\n            // all countries are available\r\n            if (!specificCountries.length) {\r\n                return true;\r\n            }\r\n\r\n            for (key in specificCountries) {\r\n                if (countryId === specificCountries[key]) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/view/payment/ach.js":"define(\r\n    [\r\n        'uiComponent',\r\n        'Magento_Checkout/js/model/payment/renderer-list'\r\n    ],\r\n    function (\r\n        Component,\r\n        rendererList\r\n    ) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_ach_direct_debit',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/ach'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/adapter.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'braintree',\r\n    'braintreeDataCollector',\r\n    'braintreeHostedFields',\r\n    'braintreePayPalCheckout',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Ui/js/model/messageList',\r\n    'mage/translate',\r\n    'https://www.paypalobjects.com/api/checkout.js'\r\n], function ($, client, dataCollector, hostedFields, paypalCheckout, fullScreenLoader, globalMessageList, $t) {\r\n    'use strict';\r\n\r\n    return {\r\n        apiClient: null,\r\n        config: {},\r\n        checkout: null,\r\n        deviceData: null,\r\n        clientInstance: null,\r\n        hostedFieldsInstance: null,\r\n        paypalInstance: null,\r\n        code: 'braintree',\r\n\r\n        /**\r\n         * {Object}\r\n         */\r\n        events: {\r\n            onClick: null,\r\n            onCancel: null,\r\n            onError: null\r\n        },\r\n\r\n        /**\r\n         * Get Braintree api client\r\n         * @returns {Object}\r\n         */\r\n        getApiClient: function () {\r\n            return this.clientInstance;\r\n        },\r\n\r\n        /**\r\n         * Set configuration\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n        },\r\n\r\n        /**\r\n         * Get payment name\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Get client token\r\n         * @returns {String|*}\r\n         */\r\n        getClientToken: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getEnvironment: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].environment;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getColor: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].style.color;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getShape: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].style.shape;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getLayout: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].style.layout;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getSize: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].style.size;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getLabel: function () {\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getBranding: function () {\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getFundingIcons: function () {\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getDisabledFunding: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].disabledFunding;\r\n        },\r\n\r\n        /**\r\n         * Show error message\r\n         *\r\n         * @param {String} errorMessage\r\n         */\r\n        showError: function (errorMessage) {\r\n            globalMessageList.addErrorMessage({\r\n                message: errorMessage\r\n            });\r\n            fullScreenLoader.stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Disable submit button\r\n         */\r\n        disableButton: function () {\r\n            // stop any previous shown loaders\r\n            fullScreenLoader.stopLoader(true);\r\n            fullScreenLoader.startLoader();\r\n            $('[data-button=\"place\"]').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Enable submit button\r\n         */\r\n        enableButton: function () {\r\n            $('[data-button=\"place\"]').removeAttr('disabled');\r\n            fullScreenLoader.stopLoader();\r\n        },\r\n\r\n        /**\r\n         * Has PayPal been init'd already\r\n         */\r\n        getPayPalInstance: function() {\r\n            if (typeof this.config.paypalInstance !== 'undefined' && this.config.paypalInstance) {\r\n                return this.config.paypalInstance;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        setPayPalInstance: function(val) {\r\n            this.config.paypalInstance = val;\r\n        },\r\n\r\n        /**\r\n         * Setup Braintree SDK\r\n         */\r\n        setup: function (callback) {\r\n            if (!this.getClientToken()) {\r\n                this.showError($t('Sorry, but something went wrong.'));\r\n                return;\r\n            }\r\n\r\n            if (this.clientInstance) {\r\n                if (typeof this.config.onReady === 'function') {\r\n                    this.config.onReady(this);\r\n                }\r\n\r\n                if (typeof callback === \"function\") {\r\n                    callback(this.clientInstance);\r\n                }\r\n                return;\r\n            }\r\n\r\n            client.create({\r\n                authorization: this.getClientToken()\r\n            }, function (clientErr, clientInstance) {\r\n                if (clientErr) {\r\n                    console.error('Braintree Setup Error', clientErr);\r\n                    return this.showError(\"Sorry, but something went wrong. Please contact the store owner.\");\r\n                }\r\n\r\n                var options = {\r\n                    client: clientInstance\r\n                };\r\n\r\n                if (typeof this.config.dataCollector === 'object' && typeof this.config.dataCollector.paypal === 'boolean') {\r\n                    options.paypal = true;\r\n                } else {\r\n                    options.kount = true;\r\n                }\r\n\r\n                dataCollector.create(options, function (err, dataCollectorInstance) {\r\n                    if (err) {\r\n                        return console.log(err);\r\n                    }\r\n\r\n                    this.deviceData = dataCollectorInstance.deviceData;\r\n                    this.config.onDeviceDataRecieved(this.deviceData);\r\n                }.bind(this));\r\n\r\n                this.clientInstance = clientInstance;\r\n\r\n                if (typeof this.config.onReady === 'function') {\r\n                    this.config.onReady(this);\r\n                }\r\n\r\n                if (typeof callback === \"function\") {\r\n                    callback(this.clientInstance);\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Setup hosted fields instance\r\n         */\r\n        setupHostedFields: function () {\r\n            var self = this;\r\n\r\n            if (this.hostedFieldsInstance) {\r\n                this.hostedFieldsInstance.teardown(function () {\r\n                    this.hostedFieldsInstance = null;\r\n                    this.setupHostedFields();\r\n                }.bind(this));\r\n                return;\r\n            }\r\n\r\n            hostedFields.create({\r\n                client: this.clientInstance,\r\n                fields: this.config.hostedFields,\r\n                styles: {\r\n                    \"input\": {\r\n                        \"font-size\": \"14pt\",\r\n                        \"color\": \"#3A3A3A\"\r\n                    },\r\n                    \":focus\": {\r\n                        \"color\": \"black\"\r\n                    },\r\n                    \".valid\": {\r\n                        \"color\": \"green\"\r\n                    },\r\n                    \".invalid\": {\r\n                        \"color\": \"red\"\r\n                    }\r\n                }\r\n            }, function (createErr, hostedFieldsInstance) {\r\n                if (createErr) {\r\n                    self.showError($t(\"Braintree hosted fields could not be initialized. Please contact the store owner.\"));\r\n                    console.error('Braintree hosted fields error', createErr);\r\n                    return;\r\n                }\r\n\r\n                this.config.onInstanceReady(hostedFieldsInstance);\r\n                this.hostedFieldsInstance = hostedFieldsInstance;\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Setup pyapal instance\r\n         */\r\n        setupPaypal: function () {\r\n            var self = this;\r\n\r\n            if (this.config.paypalInstance) {\r\n                fullScreenLoader.stopLoader(true);\r\n                return;\r\n            }\r\n\r\n            paypalCheckout.create({\r\n                client: this.clientInstance\r\n            }, function (createErr, paypalCheckoutInstance) {\r\n                if (createErr) {\r\n                    self.showError($t(\"PayPal Checkout could not be initialized. Please contact the store owner.\"));\r\n                    console.error('paypalCheckout error', createErr);\r\n                    return;\r\n                }\r\n\r\n                var paypalPayment = this.config.paypal,\r\n                    onPaymentMethodReceived = this.config.onPaymentMethodReceived,\r\n                    style = {\r\n                        color: this.getColor(),\r\n                        shape: this.getShape(),\r\n                        layout: this.getLayout(),\r\n                        size: this.getSize()\r\n                    },\r\n                    funding = {\r\n                        allowed: [],\r\n                        disallowed: []\r\n                    };\r\n\r\n                if (this.getLabel()) {\r\n                    style.label = this.getLabel();\r\n                }\r\n                if (this.getBranding()) {\r\n                    style.branding = this.getBranding();\r\n                }\r\n                if (this.getFundingIcons()) {\r\n                    style.fundingicons = this.getFundingIcons();\r\n                }\r\n\r\n                if (this.config.offerCredit === true) {\r\n                    paypalPayment.offerCredit = true;\r\n                    style.label = \"credit\";\r\n                    style.color = \"darkblue\";\r\n                    style.layout = \"horizontal\";\r\n                    funding.allowed.push(paypal.FUNDING.CREDIT);\r\n                } else {\r\n                    paypalPayment.offerCredit = false;\r\n                    funding.disallowed.push(paypal.FUNDING.CREDIT);\r\n                }\r\n\r\n                // Disabled function options\r\n                var disabledFunding = this.getDisabledFunding();\r\n                if (true === disabledFunding.card) {\r\n                    funding.disallowed.push(paypal.FUNDING.CARD);\r\n                }\r\n                if (true === disabledFunding.elv) {\r\n                    funding.disallowed.push(paypal.FUNDING.ELV);\r\n                }\r\n\r\n                // Render\r\n                this.config.paypalInstance = paypalCheckoutInstance;\r\n                var events = this.events;\r\n\r\n                $('#' + this.config.buttonId).html('');\r\n                paypal.Button.render({\r\n                    env: this.getEnvironment(),\r\n                    style: style,\r\n                    commit: true,\r\n                    funding: funding,\r\n                    locale: this.config.paypal.locale,\r\n\r\n                    payment: function () {\r\n                        return paypalCheckoutInstance.createPayment(paypalPayment);\r\n                    },\r\n\r\n                    onCancel: function (data) {\r\n                        console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));\r\n\r\n                        if (typeof events.onCancel === 'function') {\r\n                            events.onCancel();\r\n                        }\r\n                    },\r\n\r\n                    onError: function (err) {\r\n                        self.showError($t(\"PayPal Checkout could not be initialized. Please contact the store owner.\"));\r\n                        this.config.paypalInstance = null;\r\n                        console.error('Paypal checkout.js error', err);\r\n\r\n                        if (typeof events.onError === 'function') {\r\n                            events.onError(err);\r\n                        }\r\n                    }.bind(this),\r\n\r\n                    onClick: function(data) {\r\n                        if (typeof events.onClick === 'function') {\r\n                            events.onClick(data);\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Pass the payload (and payload.nonce) through to the implementation's onPaymentMethodReceived method\r\n                     * @param data\r\n                     * @param actions\r\n                     */\r\n                    onAuthorize: function (data, actions) {\r\n                        return paypalCheckoutInstance.tokenizePayment(data)\r\n                            .then(function (payload) {\r\n                                onPaymentMethodReceived(payload);\r\n                            });\r\n                    }\r\n                }, '#' + this.config.buttonId).then(function () {\r\n                    this.enableButton();\r\n                    if (typeof this.config.onPaymentMethodError === 'function') {\r\n                        this.config.onPaymentMethodError();\r\n                    }\r\n                }.bind(this)).then(function (data) {\r\n                    if (typeof events.onRender === 'function') {\r\n                        events.onRender(data);\r\n                    }\r\n                });\r\n            }.bind(this));\r\n        },\r\n\r\n        tokenizeHostedFields: function () {\r\n            this.hostedFieldsInstance.tokenize({}, function (tokenizeErr, payload) {\r\n                if (tokenizeErr) {\r\n                    switch (tokenizeErr.code) {\r\n                        case 'HOSTED_FIELDS_FIELDS_EMPTY':\r\n                            // occurs when none of the fields are filled in\r\n                            console.error('All fields are empty! Please fill out the form.');\r\n                            break;\r\n                        case 'HOSTED_FIELDS_FIELDS_INVALID':\r\n                            // occurs when certain fields do not pass client side validation\r\n                            console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);\r\n                            break;\r\n                        case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':\r\n                            // occurs when:\r\n                            //   * the client token used for client authorization was generated\r\n                            //     with a customer ID and the fail on duplicate payment method\r\n                            //     option is set to true\r\n                            //   * the card being tokenized has previously been vaulted (with any customer)\r\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.fail_on_duplicate_payment_method\r\n                            console.error('This payment method already exists in your vault.');\r\n                            break;\r\n                        case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':\r\n                            // occurs when:\r\n                            //   * the client token used for client authorization was generated\r\n                            //     with a customer ID and the verify card option is set to true\r\n                            //     and you have credit card verification turned on in the Braintree\r\n                            //     control panel\r\n                            //   * the cvv does not pass verfication (https://developers.braintreepayments.com/reference/general/testing/#avs-and-cvv/cid-responses)\r\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.verify_card\r\n                            console.error('CVV did not pass verification');\r\n                            break;\r\n                        case 'HOSTED_FIELDS_FAILED_TOKENIZATION':\r\n                            // occurs for any other tokenization error on the server\r\n                            console.error('Tokenization failed server side. Is the card valid?');\r\n                            break;\r\n                        case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':\r\n                            // occurs when the Braintree gateway cannot be contacted\r\n                            console.error('Network error occurred when tokenizing.');\r\n                            break;\r\n                        default:\r\n                            console.error('Something bad happened!', tokenizeErr);\r\n                    }\r\n                } else {\r\n                    this.config.onPaymentMethodReceived(payload);\r\n                }\r\n            }.bind(this));\r\n        }\r\n    };\r\n});\r\n\r\n","PayPal_Braintree/js/view/payment/braintree.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        'Magento_Checkout/js/model/payment/renderer-list'\r\n    ],\r\n    function (\r\n        Component,\r\n        rendererList\r\n    ) {\r\n        'use strict';\r\n\r\n        let config = window.checkoutConfig.payment,\r\n            braintreeType = 'braintree',\r\n            payPalType = 'braintree_paypal',\r\n            payPalCreditType = 'braintree_paypal_credit',\r\n            braintreeAchDirectDebit = 'braintree_ach_direct_debit';\r\n\r\n        if (config[braintreeType].isActive) {\r\n            rendererList.push(\r\n                {\r\n                    type: braintreeType,\r\n                    component: 'PayPal_Braintree/js/view/payment/method-renderer/hosted-fields'\r\n                }\r\n            );\r\n        }\r\n\r\n        if (config[payPalType].isActive) {\r\n            rendererList.push(\r\n                {\r\n                    type: payPalType,\r\n                    component: 'PayPal_Braintree/js/view/payment/method-renderer/paypal'\r\n                }\r\n            );\r\n        }\r\n\r\n        if (config[payPalCreditType].isActive) {\r\n            rendererList.push(\r\n                {\r\n                    type: payPalCreditType,\r\n                    component: 'PayPal_Braintree/js/view/payment/method-renderer/paypal-credit'\r\n                }\r\n            );\r\n        }\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_venmo',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/venmo'\r\n            }\r\n        );\r\n\r\n        if (config[braintreeAchDirectDebit].isActive) {\r\n            rendererList.push(\r\n                {\r\n                    type: braintreeAchDirectDebit,\r\n                    component: 'PayPal_Braintree/js/view/payment/method-renderer/ach'\r\n                }\r\n            );\r\n        }\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_local_payment',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/lpm'\r\n            }\r\n        );\r\n\r\n        /** Add view logic here if needed */\r\n        return Component.extend({});\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/lpm.js":"define(\r\n    [\r\n        'uiComponent',\r\n        'Magento_Checkout/js/model/payment/renderer-list'\r\n    ],\r\n    function (\r\n        Component,\r\n        rendererList\r\n    ) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_local_payment',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/lpm'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/validator-handler.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/3d-secure',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function ($, globalMessageList, verify3DSecure, fullScreenLoader) {\r\n    'use strict';\r\n\r\n    return {\r\n        validators: [],\r\n\r\n        /**\r\n         * Get payment config\r\n         * @returns {Object}\r\n         */\r\n        getConfig: function () {\r\n            return window.checkoutConfig.payment;\r\n        },\r\n\r\n        /**\r\n         * Init list of validators\r\n         */\r\n        initialize: function () {\r\n            var config = this.getConfig();\r\n\r\n            if (config[verify3DSecure.getCode()].enabled) {\r\n                verify3DSecure.setConfig(config[verify3DSecure.getCode()]);\r\n                this.add(verify3DSecure);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add new validator\r\n         * @param {Object} validator\r\n         */\r\n        add: function (validator) {\r\n            this.validators.push(validator);\r\n        },\r\n\r\n        /**\r\n         * Run pull of validators\r\n         * @param {Object} context\r\n         * @param {Function} callback\r\n         */\r\n        validate: function (context, callback, errorCallback) {\r\n            var self = this,\r\n                deferred;\r\n\r\n            // no available validators\r\n            if (!self.validators.length) {\r\n                callback();\r\n\r\n                return;\r\n            }\r\n\r\n            // get list of deferred validators\r\n            deferred = $.map(self.validators, function (current) {\r\n                return current.validate(context);\r\n            });\r\n\r\n            $.when.apply($, deferred)\r\n                .done(function () {\r\n                    callback();\r\n                }).fail(function (error) {\r\n                    errorCallback();\r\n                    self.showError(error);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Show error message\r\n         * @param {String} errorMessage\r\n         */\r\n        showError: function (errorMessage) {\r\n            globalMessageList.addErrorMessage({\r\n                message: errorMessage\r\n            });\r\n            fullScreenLoader.stopLoader(true);\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/view/payment/venmo.js":"define(\r\n    [\r\n        'uiComponent',\r\n        'Magento_Checkout/js/model/payment/renderer-list'\r\n    ],\r\n    function (\r\n        Component,\r\n        rendererList\r\n    ) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_venmo',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/venmo'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/ach.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'ko',\r\n        'jquery',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreeAch',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/action/select-billing-address',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/model/quote',\r\n        'mage/translate'\r\n    ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        $,\r\n        braintree,\r\n        dataCollector,\r\n        ach,\r\n        formBuilder,\r\n        messageList,\r\n        selectBillingAddress,\r\n        fullScreenLoader,\r\n        quote,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                deviceData: null,\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/ach',\r\n                achInstance: null,\r\n                routingNumber: ko.observable(\"\"),\r\n                accountNumber: ko.observable(\"\"),\r\n                accountType: ko.observable(\"checking\"),\r\n                ownershipType: ko.observable(\"personal\"),\r\n                firstName: ko.observable(\"\"),\r\n                lastName: ko.observable(\"\"),\r\n                businessName: ko.observable(\"\"),\r\n                hasAuthorization: ko.observable(false),\r\n                business: ko.observable(false), // for ownership type\r\n                personal: ko.observable(true) // for ownership type\r\n            },\r\n\r\n            clickAchBtn: function () {\r\n                if (!this.validateForm('#' + this.getCode() + '-form')) {\r\n                    return;\r\n                }\r\n\r\n                fullScreenLoader.startLoader();\r\n\r\n                var self = this;\r\n\r\n                var billingAddress = quote.billingAddress();\r\n\r\n                let regionCode;\r\n\r\n                let bankDetails = {\r\n                    routingNumber: self.routingNumber(),\r\n                    accountNumber: self.accountNumber(),\r\n                    accountType: self.accountType(),\r\n                    ownershipType: self.ownershipType(),\r\n                    billingAddress: {\r\n                        streetAddress: billingAddress.street[0],\r\n                        extendedAddress: billingAddress.street[1],\r\n                        locality: billingAddress.city,\r\n                        region: billingAddress.regionCode,\r\n                        postalCode: billingAddress.postcode,\r\n                    }\r\n                };\r\n\r\n                if (bankDetails.ownershipType === 'personal') {\r\n                    bankDetails.firstName = self.firstName();\r\n                    bankDetails.lastName = self.lastName();\r\n                } else {\r\n                    bankDetails.businessName = self.businessName();\r\n                }\r\n\r\n                var mandateText = document.getElementById('braintree-ach-mandate').textContent;\r\n\r\n                // if no region code is available, lets find one!\r\n                if (typeof billingAddress.regionCode === 'undefined') {\r\n                    $.get('/rest/V1/directory/countries/' + billingAddress.countryId).done(function (data) {\r\n                        if (typeof data.available_regions !== 'undefined') {\r\n                            for (var i = 0; i < data.available_regions.length; ++i) {\r\n                                if (data.available_regions[i].id === billingAddress.regionId) {\r\n                                    regionCode = data.available_regions[i].code;\r\n                                    bankDetails.billingAddress.region = regionCode;\r\n                                    self.tokenizeAch(bankDetails, mandateText);\r\n                                }\r\n                            }\r\n                        }\r\n                    }).fail(function() {\r\n                        fullScreenLoader.stopLoader();\r\n                    });\r\n                } else {\r\n                    self.tokenizeAch(bankDetails, mandateText);\r\n                }\r\n            },\r\n\r\n            tokenizeAch: function (bankDetails, mandateText) {\r\n                var self = this;\r\n                this.achInstance.tokenize({\r\n                    bankDetails: bankDetails,\r\n                    mandateText: mandateText\r\n                }, function (tokenizeErr, tokenizedPayload) {\r\n                    if (tokenizeErr) {\r\n                        self.setErrorMsg($t('There was an error with the provided bank details. Please check and try again.'));\r\n                        self.hasAuthorization(false);\r\n                    } else {\r\n                        fullScreenLoader.stopLoader();\r\n                        self.handleAchSuccess(tokenizedPayload);\r\n                    }\r\n                });\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function () {\r\n                return 'braintree_ach_direct_debit';\r\n            },\r\n\r\n            getStoreName: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].storeName;\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            getTitle: function() {\r\n                return 'ACH Direct Debit';\r\n            },\r\n\r\n            handleAchSuccess: function (payload) {\r\n                this.setPaymentMethodNonce(payload.nonce);\r\n                this.placeOrder();\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                var self = this;\r\n\r\n                braintree.create({\r\n                    authorization: self.getClientToken()\r\n                }, function (clientError, clientInstance) {\r\n                    if (clientError) {\r\n                        this.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                        return;\r\n                    }\r\n\r\n                    ach.create({\r\n                        client: clientInstance\r\n                    }, function (achErr, achInstance) {\r\n                        if (achErr) {\r\n                            self.setErrorMsg($t('Error initializing ACH: %1').replace('%1', achErr));\r\n                            return;\r\n                        }\r\n\r\n                        self.setAchInstance(achInstance);\r\n                    });\r\n                });\r\n\r\n                return this;\r\n            },\r\n\r\n            isAllowed: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].isAllowed;\r\n            },\r\n\r\n            changeOwnershipType: function (data, event) {\r\n                var self = this;\r\n                if (event.currentTarget.value === 'business') {\r\n                    self.business(true);\r\n                    self.personal(false);\r\n                } else {\r\n                    self.business(false);\r\n                    self.personal(true);\r\n                }\r\n            },\r\n\r\n            isBusiness: function () {\r\n                return this.business;\r\n            },\r\n\r\n            isPersonal: function () {\r\n                return this.personal;\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            setAchInstance: function (instance) {\r\n                this.achInstance = instance;\r\n            },\r\n\r\n            validateForm: function (form) {\r\n                return $(form).validation() && $(form).validation('isValid');\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/cc-form.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine(\r\n    [\r\n        'underscore',\r\n        'jquery',\r\n        'Magento_Payment/js/view/payment/cc-form',\r\n        'Magento_Checkout/js/model/quote',\r\n        'PayPal_Braintree/js/view/payment/adapter',\r\n        'mage/translate',\r\n        'PayPal_Braintree/js/validator',\r\n        'PayPal_Braintree/js/view/payment/validator-handler',\r\n        'Magento_Checkout/js/model/full-screen-loader'\r\n    ],\r\n    function (\r\n        _,\r\n        $,\r\n        Component,\r\n        quote,\r\n        braintree,\r\n        $t,\r\n        validator,\r\n        validatorManager,\r\n        fullScreenLoader\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                active: false,\r\n                braintreeClient: null,\r\n                braintreeDeviceData: null,\r\n                paymentMethodNonce: null,\r\n                lastBillingAddress: null,\r\n                validatorManager: validatorManager,\r\n                code: 'braintree',\r\n                isProcessing: false,\r\n\r\n                /**\r\n                 * Additional payment data\r\n                 *\r\n                 * {Object}\r\n                 */\r\n                additionalData: {},\r\n\r\n                /**\r\n                 * Braintree client configuration\r\n                 *\r\n                 * {Object}\r\n                 */\r\n                clientConfig: {\r\n                    dataCollector: {\r\n                        kount: true\r\n                    },\r\n\r\n                    onReady: function (context) {\r\n                        context.setupHostedFields();\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers on payment nonce receive\r\n                     * @param {Object} response\r\n                     */\r\n                    onPaymentMethodReceived: function (response) {\r\n                        this.handleNonce(response);\r\n                        this.isProcessing = false;\r\n                    },\r\n\r\n                    /**\r\n                     * Allow a new nonce to be generated\r\n                     */\r\n                    onPaymentMethodError: function() {\r\n                        this.isProcessing = false;\r\n                    },\r\n\r\n                    /**\r\n                     * Device data initialization\r\n                     * @param {String} deviceData\r\n                     */\r\n                    onDeviceDataRecieved: function (deviceData) {\r\n                        this.additionalData['device_data'] = deviceData;\r\n                    },\r\n\r\n                    /**\r\n                     * After Braintree instance initialization\r\n                     */\r\n                    onInstanceReady: function () {},\r\n\r\n                    /**\r\n                     * Triggers on any Braintree error\r\n                     * @param {Object} response\r\n                     */\r\n                    onError: function (response) {\r\n                        this.isProcessing = false;\r\n                        braintree.showError($t('Payment ' + this.getTitle() + ' can\\'t be initialized'));\r\n                        throw response.message;\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers when customer click \"Cancel\"\r\n                     */\r\n                    onCancelled: function () {\r\n                        this.paymentMethodNonce = null;\r\n                        this.isProcessing = false;\r\n                    }\r\n                },\r\n                imports: {\r\n                    onActiveChange: 'active'\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Set list of observable attributes\r\n             *\r\n             * @returns {exports.initObservable}\r\n             */\r\n            initObservable: function () {\r\n                validator.setConfig(window.checkoutConfig.payment[this.getCode()]);\r\n                this._super()\r\n                    .observe(['active']);\r\n                this.validatorManager.initialize();\r\n                this.initClientConfig();\r\n\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Get payment name\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getCode: function () {\r\n                return this.code;\r\n            },\r\n\r\n            /**\r\n             * Check if payment is active\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isActive: function () {\r\n                var active = this.getCode() === this.isChecked();\r\n\r\n                this.active(active);\r\n\r\n                return active;\r\n            },\r\n\r\n            /**\r\n             * Triggers when payment method change\r\n             * @param {Boolean} isActive\r\n             */\r\n            onActiveChange: function (isActive) {\r\n                if (!isActive) {\r\n                    return;\r\n                }\r\n\r\n                this.initBraintree();\r\n            },\r\n\r\n            /**\r\n             * Init config\r\n             */\r\n            initClientConfig: function () {\r\n                // Advanced fraud tools settings\r\n                if (this.hasFraudProtection()) {\r\n                    this.clientConfig = _.extend(this.clientConfig, this.kountConfig());\r\n                }\r\n\r\n                _.each(this.clientConfig, function (fn, name) {\r\n                    if (typeof fn === 'function') {\r\n                        this.clientConfig[name] = fn.bind(this);\r\n                    }\r\n                }, this);\r\n            },\r\n\r\n            /**\r\n             * Init Braintree configuration\r\n             */\r\n            initBraintree: function () {\r\n                var intervalId = setInterval(function () {\r\n                    // stop loader when frame will be loaded\r\n                    if ($('#braintree-hosted-field-number').length) {\r\n                        clearInterval(intervalId);\r\n                        fullScreenLoader.stopLoader(true);\r\n                    }\r\n                }, 500);\r\n\r\n                if (braintree.checkout) {\r\n                    braintree.checkout.teardown(function () {\r\n                        braintree.checkout = null;\r\n                    });\r\n                }\r\n\r\n                fullScreenLoader.startLoader();\r\n                braintree.setConfig(this.clientConfig);\r\n                braintree.setup();\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            kountConfig: function () {\r\n                var config = {\r\n                    dataCollector: {\r\n                        kount: {\r\n                            environment: this.getEnvironment()\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Device data initialization\r\n                     *\r\n                     * @param {Object} checkout\r\n                     */\r\n                    onReady: function (context) {\r\n                        this.additionalData['device_data'] = context.deviceData;\r\n                        context.setupHostedFields();\r\n                    }\r\n                };\r\n\r\n                if (this.getKountMerchantId()) {\r\n                    config.dataCollector.kount.merchantId = this.getKountMerchantId();\r\n                }\r\n\r\n                return config;\r\n            },\r\n\r\n            /**\r\n             * Get full selector name\r\n             *\r\n             * @param {String} field\r\n             * @returns {String}\r\n             */\r\n            getSelector: function (field) {\r\n                return '#' + this.getCode() + '_' + field;\r\n            },\r\n\r\n            /**\r\n             * Get list of available CC types\r\n             *\r\n             * @returns {Object}\r\n             */\r\n            getCcAvailableTypes: function () {\r\n                var availableTypes = validator.getAvailableCardTypes(),\r\n                    billingAddress = quote.billingAddress(),\r\n                    billingCountryId;\r\n\r\n                this.lastBillingAddress = quote.shippingAddress();\r\n\r\n                if (!billingAddress) {\r\n                    billingAddress = this.lastBillingAddress;\r\n                }\r\n\r\n                billingCountryId = billingAddress.countryId;\r\n\r\n                if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\r\n                    return validator.collectTypes(\r\n                        availableTypes,\r\n                        validator.getCountrySpecificCardTypes(billingCountryId)\r\n                    );\r\n                }\r\n\r\n                return availableTypes;\r\n            },\r\n\r\n            /**\r\n             * @returns {Boolean}\r\n             */\r\n            hasFraudProtection: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].hasFraudProtection;\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getEnvironment: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].environment;\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getKountMerchantId: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].kountMerchantId;\r\n            },\r\n\r\n            /**\r\n             * Get data\r\n             *\r\n             * @returns {Object}\r\n             */\r\n            getData: function () {\r\n                var data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            /**\r\n             * Set payment nonce\r\n             * @param {String} paymentMethodNonce\r\n             */\r\n            setPaymentMethodNonce: function (paymentMethodNonce) {\r\n                this.paymentMethodNonce = paymentMethodNonce;\r\n            },\r\n\r\n            /**\r\n             * Prepare data to place order\r\n             * @param {Object} data\r\n             */\r\n            handleNonce: function (data) {\r\n                var self = this;\r\n\r\n                this.setPaymentMethodNonce(data.nonce);\r\n\r\n                // place order on success validation\r\n                self.validatorManager.validate(self, function () {\r\n                    return self.placeOrder('parent');\r\n                }, function() {\r\n                    self.isProcessing = false;\r\n                    self.paymentMethodNonce = null;\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Action to place order\r\n             * @param {String} key\r\n             */\r\n            placeOrder: function (key) {\r\n                if (key) {\r\n                    return this._super();\r\n                }\r\n\r\n                if (this.isProcessing) {\r\n                    return false;\r\n                } else {\r\n                    this.isProcessing = true;\r\n                }\r\n\r\n                braintree.tokenizeHostedFields();\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * Get payment icons\r\n             * @param {String} type\r\n             * @returns {Boolean}\r\n             */\r\n            getIcons: function (type) {\r\n                return window.checkoutConfig.payment.braintree.icons.hasOwnProperty(type) ?\r\n                    window.checkoutConfig.payment.braintree.icons[type]\r\n                    : false;\r\n            },\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/hosted-fields.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/cc-form',\r\n    'PayPal_Braintree/js/validator',\r\n    'Magento_Vault/js/view/payment/vault-enabler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'mage/translate'\r\n], function ($, Component, validator, VaultEnabler, additionalValidators, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/form',\r\n            clientConfig: {\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                id: 'co-transparent-form-braintree'\r\n            },\r\n            isValidCardNumber: false,\r\n            isValidExpirationDate: false,\r\n            isValidCvvNumber: false,\r\n\r\n            onInstanceReady: function (instance) {\r\n                instance.on('validityChange', this.onValidityChange.bind(this));\r\n                instance.on('cardTypeChange', this.onCardTypeChange.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.vaultEnabler = new VaultEnabler();\r\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            this._super();\r\n\r\n            this.clientConfig.hostedFields = this.getHostedFields();\r\n            this.clientConfig.onInstanceReady = this.onInstanceReady.bind(this);\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = this._super();\r\n\r\n            this.vaultEnabler.visitAdditionalData(data);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @returns {Bool}\r\n         */\r\n        isVaultEnabled: function () {\r\n            return this.vaultEnabler.isVaultEnabled();\r\n        },\r\n\r\n        /**\r\n         * Get Braintree Hosted Fields\r\n         * @returns {Object}\r\n         */\r\n        getHostedFields: function () {\r\n            var self = this,\r\n                fields = {\r\n                    number: {\r\n                        selector: self.getSelector('cc_number'),\r\n                        placeholder: $t('4111 1111 1111 1111')\r\n                    },\r\n                    expirationDate: {\r\n                        selector: self.getSelector('expirationDate'),\r\n                        placeholder: $t('MM/YYYY')\r\n                    }\r\n                };\r\n\r\n            if (self.hasVerification()) {\r\n                fields.cvv = {\r\n                    selector: self.getSelector('cc_cid'),\r\n                    placeholder: $t('123')\r\n                };\r\n            }\r\n\r\n            return fields;\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onValidityChange: function (event) {\r\n            // Handle a change in validation or card type\r\n            if (event.emittedBy === 'number') {\r\n                this.selectedCardType(null);\r\n\r\n                if (event.cards.length === 1) {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.selectedCardType(\r\n                        validator.getMageCardType(event.cards[0].type, this.getCcAvailableTypes())\r\n                    );\r\n                    this.validateCardType();\r\n                } else {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.validateCardType();\r\n                }\r\n            }\r\n\r\n            // Other field validations\r\n            if (event.emittedBy === 'expirationDate') {\r\n                this.isValidExpirationDate = event.fields.expirationDate.isValid;\r\n            }\r\n            if (event.emittedBy === 'cvv') {\r\n                this.isValidCvvNumber = event.fields.cvv.isValid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field card type changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onCardTypeChange: function (event) {\r\n            if (event.cards.length === 1) {\r\n                this.selectedCardType(\r\n                    validator.getMageCardType(event.cards[0].type, this.getCcAvailableTypes())\r\n                );\r\n            } else {\r\n                this.selectedCardType(null);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle invalid class on selector\r\n         * @param selector\r\n         * @param state\r\n         * @returns {boolean}\r\n         */\r\n        validateField: function (selector, state) {\r\n            var $selector = $(this.getSelector(selector)),\r\n                invalidClass = 'braintree-hosted-fields-invalid';\r\n\r\n            if (state === true) {\r\n                $selector.removeClass(invalidClass);\r\n                return true;\r\n            }\r\n\r\n            $selector.addClass(invalidClass);\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate current credit card type\r\n         * @returns {Boolean}\r\n         */\r\n        validateCardType: function () {\r\n            return this.validateField(\r\n                'cc_number',\r\n                (this.isValidCardNumber)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current expiry date\r\n         * @returns {boolean}\r\n         */\r\n        validateExpirationDate: function () {\r\n            return this.validateField(\r\n                'expirationDate',\r\n                (this.isValidExpirationDate === true)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current CVV field\r\n         * @returns {boolean}\r\n         */\r\n        validateCvvNumber: function () {\r\n            var self = this;\r\n            \r\n            if (self.hasVerification() === false) {\r\n                return true;\r\n            }\r\n            \r\n            return this.validateField(\r\n                'cc_cid',\r\n                (this.isValidCvvNumber === true)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate all fields\r\n         * @returns {boolean}\r\n         */\r\n        validateFormFields: function () {\r\n            return (this.validateCardType() && this.validateExpirationDate() && this.validateCvvNumber()) === true;\r\n        },\r\n\r\n        /**\r\n         * Trigger order placing\r\n         */\r\n        placeOrderClick: function () {\r\n            if (this.validateFormFields() && additionalValidators.validate()) {\r\n                this.placeOrder();\r\n            }\r\n        },\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getVaultCode: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].ccVaultCode;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/lpm.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'ko',\r\n        'jquery',\r\n        'braintree',\r\n        'braintreeLpm',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/action/select-billing-address',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/model/quote',\r\n        'Magento_Checkout/js/model/payment/additional-validators',\r\n        'mage/url',\r\n        'mage/translate'\r\n    ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        $,\r\n        braintree,\r\n        lpm,\r\n        formBuilder,\r\n        messageList,\r\n        selectBillingAddress,\r\n        fullScreenLoader,\r\n        quote,\r\n        additionalValidators,\r\n        url,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                code: 'braintree_local_payment',\r\n                paymentMethodsAvailable: ko.observable(false),\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/lpm'\r\n            },\r\n\r\n            clickPaymentBtn: function (method) {\r\n                var self = this;\r\n\r\n                if (additionalValidators.validate()) {\r\n                    fullScreenLoader.startLoader();\r\n\r\n                    braintree.create({\r\n                        authorization: self.getClientToken()\r\n                    }, function (clientError, clientInstance) {\r\n                        if (clientError) {\r\n                            self.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                            fullScreenLoader.stopLoader();\r\n                            return;\r\n                        }\r\n\r\n                        lpm.create({\r\n                            client: clientInstance\r\n                        }, function (lpmError, lpmInstance) {\r\n                            if (lpmError) {\r\n                                self.setErrorMsg(lpmError);\r\n                                fullScreenLoader.stopLoader();\r\n                                return;\r\n                            }\r\n\r\n                            lpmInstance.startPayment({\r\n                                amount: self.getAmount(),\r\n                                currencyCode: self.getCurrencyCode(),\r\n                                email: self.getCustomerDetails().email,\r\n                                phone: self.getCustomerDetails().phone,\r\n                                givenName: self.getCustomerDetails().firstName,\r\n                                surname: self.getCustomerDetails().lastName,\r\n                                shippingAddressRequired: !quote.isVirtual(),\r\n                                address: self.getAddress(),\r\n                                paymentType: method,\r\n                                onPaymentStart: function (data, start) {\r\n                                    start();\r\n                                },\r\n                                // This is a required option, however it will apparently never be used in the current payment flow.\r\n                                // Therefore, both values are set to allow the payment flow to continute, rather than erroring out.\r\n                                fallback: {\r\n                                    url: 'N/A',\r\n                                    buttonText: 'N/A'\r\n                                }\r\n                            }, function (startPaymentError, payload) {\r\n                                fullScreenLoader.stopLoader();\r\n                                if (startPaymentError) {\r\n                                    switch (startPaymentError.code) {\r\n                                        case 'LOCAL_PAYMENT_POPUP_CLOSED':\r\n                                            self.setErrorMsg($t('Local Payment popup was closed unexpectedly.'));\r\n                                            break;\r\n                                        case 'LOCAL_PAYMENT_WINDOW_OPEN_FAILED':\r\n                                            self.setErrorMsg($t('Local Payment popup failed to open.'));\r\n                                            break;\r\n                                        case 'LOCAL_PAYMENT_WINDOW_CLOSED':\r\n                                            self.setErrorMsg($t('Local Payment popup was closed. Payment cancelled.'));\r\n                                            break;\r\n                                        default:\r\n                                            self.setErrorMsg('Error! ' + startPaymentError);\r\n                                            break;\r\n                                    }\r\n                                } else {\r\n                                    // Send the nonce to your server to create a transaction\r\n                                    self.setPaymentMethodNonce(payload.nonce);\r\n                                    self.placeOrder();\r\n                                }\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n\r\n            getAddress: function () {\r\n                var shippingAddress = quote.shippingAddress();\r\n\r\n                if (quote.isVirtual()) {\r\n                    return {\r\n                        countryCode: shippingAddress.countryId\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    streetAddress: shippingAddress.street[0],\r\n                    extendedAddress: shippingAddress.street[1],\r\n                    locality: shippingAddress.city,\r\n                    postalCode: shippingAddress.postcode,\r\n                    region: shippingAddress.region,\r\n                    countryCode: shippingAddress.countryId\r\n                }\r\n            },\r\n\r\n            getAmount: function () {\r\n                return quote.totals()['base_grand_total'].toString();\r\n            },\r\n\r\n            getBillingAddress: function () {\r\n                return quote.billingAddress();\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function () {\r\n                return this.code;\r\n            },\r\n\r\n            getCurrencyCode: function () {\r\n                return quote.totals()['base_currency_code'];\r\n            },\r\n\r\n            getCustomerDetails: function() {\r\n                var billingAddress = quote.billingAddress();\r\n                return {\r\n                    firstName: billingAddress.firstname,\r\n                    lastName: billingAddress.lastname,\r\n                    phone: billingAddress.telephone,\r\n                    email: typeof quote.guestEmail === 'string' ? quote.guestEmail : billingAddress.email\r\n                }\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            getMerchantId: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].merchantId;\r\n            },\r\n\r\n            getPaymentMethod: function(method) {\r\n                var methods = this.getPaymentMethods();\r\n\r\n                for (var i = 0; i < methods.length; i++) {\r\n                    if (methods[i].method === method) {\r\n                        return methods[i]\r\n                    }\r\n                }\r\n            },\r\n\r\n            getPaymentMethods: function() {\r\n                return window.checkoutConfig.payment[this.getCode()].allowedMethods;\r\n            },\r\n\r\n            getPaymentMarkSrc: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].paymentIcons;\r\n            },\r\n\r\n            getTitle: function() {\r\n                return window.checkoutConfig.payment[this.getCode()].title;\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n                return this;\r\n            },\r\n\r\n            isActive: function() {\r\n                var address = quote.billingAddress() || quote.shippingAddress();\r\n                var methods = this.getPaymentMethods();\r\n\r\n                for (var i = 0; i < methods.length; i++) {\r\n                    if (methods[i].countries.includes(address.countryId)) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            isValidCountryAndCurrency: function (method) {\r\n                var address = quote.billingAddress();\r\n\r\n                if (!address) {\r\n                    this.paymentMethodsAvailable(false);\r\n                    return false;\r\n                }\r\n\r\n                var countryId = address.countryId;\r\n                var quoteCurrency = quote.totals()['base_currency_code'];\r\n                var paymentMethodDetails = this.getPaymentMethod(method);\r\n\r\n                if (paymentMethodDetails.countries.includes(countryId) && quoteCurrency === 'EUR') {\r\n                    this.paymentMethodsAvailable(true);\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            validateForm: function (form) {\r\n                return $(form).validation() && $(form).validation('isValid');\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/paypal-credit.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/paypal'\r\n], function (\r\n    $,\r\n    _,\r\n    Component\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal-credit',\r\n            code: 'braintree_paypal_credit',\r\n\r\n            /**\r\n             * PayPal client configuration\r\n             * {Object}\r\n             */\r\n            clientConfig: {\r\n                offerCredit: true,\r\n                buttonId: 'braintree_paypal_credit_placeholder'\r\n            }\r\n        }\r\n    });\r\n});","PayPal_Braintree/js/view/payment/method-renderer/paypal-vault.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function ($, _, VaultComponent, globalMessageList, fullScreenLoader) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal/vault',\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * Get PayPal payer email\r\n         * @returns {String}\r\n         */\r\n        getPayerEmail: function () {\r\n            return this.details.payerEmail;\r\n        },\r\n\r\n        /**\r\n         * Get type of payment\r\n         * @returns {String}\r\n         */\r\n        getPaymentIcon: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].paymentIcon;\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        beforePlaceOrder: function () {\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            var self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            })\r\n                .done(function (response) {\r\n                    fullScreenLoader.stopLoader();\r\n                    self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\r\n                    self.placeOrder();\r\n                })\r\n                .fail(function (response) {\r\n                    var error = JSON.parse(response.responseText);\r\n\r\n                    fullScreenLoader.stopLoader();\r\n                    globalMessageList.addErrorMessage({\r\n                        message: error.message\r\n                    });\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Get payment method data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/paypal.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'braintreeCheckoutPayPalAdapter',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/step-navigator',\r\n    'Magento_Vault/js/view/payment/vault-enabler',\r\n    'Magento_Checkout/js/action/create-billing-address',\r\n    'Magento_Checkout/js/action/select-billing-address',\r\n], function (\r\n    $,\r\n    _,\r\n    Component,\r\n    Braintree,\r\n    quote,\r\n    fullScreenLoader,\r\n    additionalValidators,\r\n    stepNavigator,\r\n    VaultEnabler,\r\n    createBillingAddress,\r\n    selectBillingAddress\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal',\r\n            code: 'braintree_paypal',\r\n            active: false,\r\n            paypalInstance: null,\r\n            paymentMethodNonce: null,\r\n            grandTotalAmount: null,\r\n            isReviewRequired: false,\r\n            customerEmail: null,\r\n\r\n            /**\r\n             * Additional payment data\r\n             *\r\n             * {Object}\r\n             */\r\n            additionalData: {},\r\n\r\n            /**\r\n             * PayPal client configuration\r\n             * {Object}\r\n             */\r\n            clientConfig: {\r\n                offerCredit: false,\r\n                offerCreditOnly: false,\r\n                dataCollector: {\r\n                    paypal: true\r\n                },\r\n\r\n                buttonId: 'braintree_paypal_placeholder',\r\n\r\n                onDeviceDataRecieved: function (deviceData) {\r\n                    this.additionalData['device_data'] = deviceData;\r\n                },\r\n\r\n                /**\r\n                 * Triggers when widget is loaded\r\n                 * @param {Object} context\r\n                 */\r\n                onReady: function (context) {\r\n                    context.setupPaypal();\r\n                },\r\n\r\n                /**\r\n                 * Triggers on payment nonce receive\r\n                 * @param {Object} response\r\n                 */\r\n                onPaymentMethodReceived: function (response) {\r\n                    this.beforePlaceOrder(response);\r\n                }\r\n            },\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            this._super()\r\n                .observe(['active', 'isReviewRequired', 'customerEmail']);\r\n\r\n            window.addEventListener('hashchange', function (e) {\r\n                var methodCode = quote.paymentMethod();\r\n\r\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                    if (e.newURL.indexOf('payment') > 0 && self.grandTotalAmount !== null) {\r\n                        self.reInitPayPal();\r\n                    }\r\n                }\r\n            });\r\n\r\n            quote.paymentMethod.subscribe(function (value) {\r\n                var methodCode = value;\r\n\r\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                    self.reInitPayPal();\r\n                }\r\n            });\r\n\r\n            this.vaultEnabler = new VaultEnabler();\r\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n            this.vaultEnabler.isActivePaymentTokenEnabler.subscribe(function () {\r\n                self.onVaultPaymentTokenEnablerChange();\r\n            });\r\n\r\n            this.grandTotalAmount = quote.totals()['base_grand_total'];\r\n\r\n            quote.totals.subscribe(function () {\r\n                if (self.grandTotalAmount !== quote.totals()['base_grand_total']) {\r\n                    self.grandTotalAmount = quote.totals()['base_grand_total'];\r\n                    var methodCode = quote.paymentMethod();\r\n\r\n                    if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                        self.reInitPayPal();\r\n                    }\r\n                }\r\n            });\r\n\r\n            // for each component initialization need update property\r\n            this.isReviewRequired(false);\r\n            this.initClientConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get payment name\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Get payment title\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTitle: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].title;\r\n        },\r\n\r\n        /**\r\n         * Check if payment is active\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function () {\r\n            var active = this.getCode() === this.isChecked();\r\n\r\n            this.active(active);\r\n\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Triggers when payment method change\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n                return;\r\n            }\r\n\r\n            // need always re-init Braintree with PayPal configuration\r\n            this.reInitPayPal();\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\r\n\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set payment nonce\r\n         * @param {String} paymentMethodNonce\r\n         */\r\n        setPaymentMethodNonce: function (paymentMethodNonce) {\r\n            this.paymentMethodNonce = paymentMethodNonce;\r\n        },\r\n\r\n        /**\r\n         * Update quote billing address\r\n         * @param {Object}customer\r\n         * @param {Object}address\r\n         */\r\n        setBillingAddress: function (customer, address) {\r\n            var billingAddress = {\r\n                street: [address.line1],\r\n                city: address.city,\r\n                postcode: address.postalCode,\r\n                countryId: address.countryCode,\r\n                email: customer.email,\r\n                firstname: customer.firstName,\r\n                lastname: customer.lastName,\r\n                telephone: typeof customer.phone !== 'undefined' ? customer.phone : '00000000000'\r\n            };\r\n\r\n            billingAddress['region_code'] = typeof address.state === 'string' ? address.state : '';\r\n            billingAddress = createBillingAddress(billingAddress);\r\n            quote.billingAddress(billingAddress);\r\n        },\r\n\r\n        /**\r\n         * Prepare data to place order\r\n         * @param {Object} data\r\n         */\r\n        beforePlaceOrder: function (data) {\r\n            this.setPaymentMethodNonce(data.nonce);\r\n\r\n            if (quote.shippingAddress() === quote.billingAddress()) {\r\n                selectBillingAddress(quote.shippingAddress());\r\n            } else {\r\n                selectBillingAddress(quote.billingAddress());\r\n            }\r\n\r\n            this.customerEmail(data.details.email);\r\n            this.placeOrder();\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth Flow\r\n         */\r\n        reInitPayPal: function () {\r\n            this.disableButton();\r\n            this.clientConfig.paypal.amount = parseFloat(this.grandTotalAmount).toFixed(2);\r\n\r\n            if (!quote.isVirtual()) {\r\n                this.clientConfig.paypal.enableShippingAddress = true;\r\n                this.clientConfig.paypal.shippingAddressEditable = false;\r\n                this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n\r\n            Braintree.setConfig(this.clientConfig);\r\n\r\n            if (Braintree.getPayPalInstance()) {\r\n                Braintree.getPayPalInstance().teardown(function () {\r\n                    Braintree.setup();\r\n                }.bind(this));\r\n                Braintree.setPayPalInstance(null);\r\n            } else {\r\n                Braintree.setup();\r\n                this.enableButton();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get locale\r\n         * @returns {String}\r\n         */\r\n        getLocale: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].locale;\r\n        },\r\n\r\n        /**\r\n         * Get configuration for PayPal\r\n         * @returns {Object}\r\n         */\r\n        getPayPalConfig: function () {\r\n            var totals = quote.totals(),\r\n                config = {},\r\n                isActiveVaultEnabler = this.isActiveVault();\r\n\r\n            config.paypal = {\r\n                flow: isActiveVaultEnabler ? 'vault' : 'checkout',\r\n                amount: parseFloat(this.grandTotalAmount).toFixed(2),\r\n                currency: totals['base_currency_code'],\r\n                locale: this.getLocale(),\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 */\r\n                onError: function () {\r\n                    this.paymentMethodNonce = null;\r\n                },\r\n\r\n                /**\r\n                 * Triggers if browser doesn't support PayPal Checkout\r\n                 */\r\n                onUnsupported: function () {\r\n                    this.paymentMethodNonce = null;\r\n                }\r\n            };\r\n\r\n            if (!quote.isVirtual()) {\r\n                config.paypal.enableShippingAddress = true;\r\n                config.paypal.shippingAddressEditable = false;\r\n                config.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n\r\n            if (this.getMerchantName()) {\r\n                config.paypal.displayName = this.getMerchantName();\r\n            }\r\n\r\n            return config;\r\n        },\r\n\r\n        /**\r\n         * Get shipping address\r\n         * @returns {Object}\r\n         */\r\n        getShippingAddress: function () {\r\n            var address = quote.shippingAddress();\r\n\r\n            return {\r\n                recipientName: address.firstname + ' ' + address.lastname,\r\n                line1: address.street[0],\r\n                line2: typeof address.street[2] === 'undefined' ? address.street[1] : address.street[1] + ' ' + address.street[2],\r\n                city: address.city,\r\n                countryCode: address.countryId,\r\n                postalCode: address.postcode,\r\n                state: address.region\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Get merchant name\r\n         * @returns {String}\r\n         */\r\n        getMerchantName: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].merchantName;\r\n        },\r\n\r\n        /**\r\n         * Get data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = {\r\n                'method': this.getCode(),\r\n                'additional_data': {\r\n                    'payment_method_nonce': this.paymentMethodNonce\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            this.vaultEnabler.visitAdditionalData(data);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Returns payment acceptance mark image path\r\n         * @returns {String}\r\n         */\r\n        getPaymentAcceptanceMarkSrc: function () {\r\n\r\n            return window.checkoutConfig.payment[this.getCode()].paymentAcceptanceMarkSrc;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getVaultCode: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].vaultCode;\r\n        },\r\n\r\n        /**\r\n         * Check if need to skip order review\r\n         * @returns {Boolean}\r\n         */\r\n        isSkipOrderReview: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].skipOrderReview;\r\n        },\r\n\r\n        /**\r\n         * Checks if vault is active\r\n         * @returns {Boolean}\r\n         */\r\n        isActiveVault: function () {\r\n            return this.vaultEnabler.isVaultEnabled() && this.vaultEnabler.isActivePaymentTokenEnabler();\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth flow to use Vault\r\n         */\r\n        onVaultPaymentTokenEnablerChange: function () {\r\n            this.clientConfig.paypal.singleUse = !this.isActiveVault();\r\n            this.reInitPayPal();\r\n        },\r\n\r\n        /**\r\n         * Disable submit button\r\n         */\r\n        disableButton: function () {\r\n            // stop any previous shown loaders\r\n            fullScreenLoader.stopLoader(true);\r\n            fullScreenLoader.startLoader();\r\n            $('[data-button=\"place\"]').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Enable submit button\r\n         */\r\n        enableButton: function () {\r\n            $('[data-button=\"place\"]').removeAttr('disabled');\r\n            fullScreenLoader.stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Triggers when customer click \"Continue to PayPal\" button\r\n         */\r\n        payWithPayPal: function () {\r\n            if (additionalValidators.validate()) {\r\n                Braintree.checkout.paypal.initAuthFlow();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get button id\r\n         * @returns {String}\r\n         */\r\n        getButtonId: function () {\r\n            return this.clientConfig.buttonId;\r\n        }\r\n    });\r\n});\r\n\r\n","PayPal_Braintree/js/view/payment/method-renderer/vault.js":"/**\r\n * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'PayPal_Braintree/js/view/payment/adapter',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/validator-handler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'braintree',\r\n    'braintreeHostedFields',\r\n    'mage/url'\r\n], function (\r\n    ko,\r\n    $,\r\n    VaultComponent,\r\n    Braintree,\r\n    globalMessageList,\r\n    validatorManager,\r\n    additionalValidators,\r\n    fullScreenLoader,\r\n    client,\r\n    hostedFields,\r\n    url\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            active: false,\r\n            hostedFieldsInstance: null,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            modules: {\r\n                hostedFields: '${ $.parentName }.braintree'\r\n            },\r\n            template: 'PayPal_Braintree/payment/cc/vault',\r\n            updatePaymentUrl: url.build('braintree/payment/updatepaymentmethod'),\r\n            vaultedCVV: ko.observable(\"\"),\r\n            validatorManager: validatorManager,\r\n            isValidCvv: false,\r\n            onInstanceReady: function (instance) {\r\n                instance.on('validityChange', this.onValidityChange.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Event fired by Braintree SDK whenever input value length matches the validation length.\r\n         * In the case of a CVV, this is 3, or 4 for AMEX.\r\n         * @param event\r\n         */\r\n        onValidityChange: function (event) {\r\n            if (event.emittedBy === 'cvv') {\r\n                this.isValidCvv = event.fields.cvv.isValid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['active']);\r\n            this.validatorManager.initialize();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is payment option active?\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function () {\r\n            var active = this.getId() === this.isChecked();\r\n            this.active(active);\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Fired whenever a payment option is changed.\r\n         * @param isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            var self = this;\r\n\r\n            if (!isActive) {\r\n                return;\r\n            }\r\n\r\n            if (self.showCvvVerify()) {\r\n                if (self.hostedFieldsInstance) {\r\n                    self.hostedFieldsInstance.teardown(function (teardownError) {\r\n                        if (teardownError) {\r\n                            globalMessageList.addErrorMessage({\r\n                                message: teardownError.message\r\n                            });\r\n                        }\r\n                        self.hostedFieldsInstance = null;\r\n                        self.initHostedCvvField();\r\n                    });\r\n                    return;\r\n                }\r\n                self.initHostedCvvField();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize the CVV input field with the Braintree Hosted Fields SDK.\r\n         */\r\n        initHostedCvvField: function () {\r\n            var self = this;\r\n            client.create({\r\n                authorization: Braintree.getClientToken()\r\n            }, function (clientError, clientInstance) {\r\n                if (clientError) {\r\n                    globalMessageList.addErrorMessage({\r\n                        message: clientError.message\r\n                    });\r\n                }\r\n                hostedFields.create({\r\n                    client: clientInstance,\r\n                    fields: {\r\n                        cvv: {\r\n                            selector: '#' + self.getId() + '_cid',\r\n                            placeholder: '123'\r\n                        }\r\n                    }\r\n                }, function (hostedError, hostedFieldsInstance) {\r\n                    if (hostedError) {\r\n                        globalMessageList.addErrorMessage({\r\n                            message: hostedError.message\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    self.hostedFieldsInstance = hostedFieldsInstance;\r\n                    self.onInstanceReady(self.hostedFieldsInstance);\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return the payment method code.\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return 'braintree_cc_vault';\r\n        },\r\n\r\n        /**\r\n         * Get last 4 digits of card\r\n         * @returns {String}\r\n         */\r\n        getMaskedCard: function () {\r\n            return this.details.maskedCC;\r\n        },\r\n\r\n        /**\r\n         * Get expiration date\r\n         * @returns {String}\r\n         */\r\n        getExpirationDate: function () {\r\n            return this.details.expirationDate;\r\n        },\r\n\r\n        /**\r\n         * Get card type\r\n         * @returns {String}\r\n         */\r\n        getCardType: function () {\r\n            return this.details.type;\r\n        },\r\n\r\n        /**\r\n         * Get show CVV Field\r\n         * @returns {Boolean}\r\n         */\r\n        showCvvVerify: function () {\r\n            return window.checkoutConfig.payment[this.code].cvvVerify;\r\n        },\r\n\r\n        /**\r\n         * Show or hide the error message.\r\n         * @param selector\r\n         * @param state\r\n         * @returns {boolean}\r\n         */\r\n        validateCvv: function (selector, state) {\r\n            var $selector = $(selector),\r\n                invalidClass = 'braintree-hosted-fields-invalid';\r\n\r\n            if (state === true) {\r\n                $selector.removeClass(invalidClass);\r\n                return true;\r\n            }\r\n\r\n            $selector.addClass(invalidClass);\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            var self = this;\r\n\r\n            if (self.showCvvVerify()) {\r\n                if (!self.validateCvv('#' + self.getId() + '_cid', self.isValidCvv) || !additionalValidators.validate()) {\r\n                    return;\r\n                }\r\n            } else {\r\n                if (!additionalValidators.validate()) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            fullScreenLoader.startLoader();\r\n\r\n            if (self.showCvvVerify() && typeof self.hostedFieldsInstance !== 'undefined') {\r\n                self.hostedFieldsInstance.tokenize({}, function (error, payload) {\r\n                    if (error) {\r\n                        fullScreenLoader.stopLoader();\r\n                        globalMessageList.addErrorMessage({\r\n                            message: error.message\r\n                        });\r\n                        return;\r\n                    }\r\n                    $.getJSON(\r\n                        self.updatePaymentUrl,\r\n                        {\r\n                            'nonce': payload.nonce,\r\n                            'public_hash': self.publicHash\r\n                        }\r\n                    ).done(function (response) {\r\n                        if (response.success === false) {\r\n                            fullScreenLoader.stopLoader();\r\n                            globalMessageList.addErrorMessage({\r\n                                message: 'CVV verification failed.'\r\n                            });\r\n                            return;\r\n                        }\r\n                        self.getPaymentMethodNonce();\r\n                    })\r\n                });\r\n            } else {\r\n                self.getPaymentMethodNonce();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            var self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash,\r\n                'cvv': self.vaultedCVV()\r\n            }).done(function (response) {\r\n                fullScreenLoader.stopLoader();\r\n                self.hostedFields(function (formComponent) {\r\n                    formComponent.setPaymentMethodNonce(response.paymentMethodNonce);\r\n                    formComponent.additionalData['public_hash'] = self.publicHash;\r\n                    formComponent.code = self.code;\r\n                    if (self.vaultedCVV()) {\r\n                        formComponent.additionalData['cvv'] = self.vaultedCVV();\r\n                    }\r\n\r\n                    self.validatorManager.validate(formComponent, function () {\r\n                        fullScreenLoader.stopLoader();\r\n                        return formComponent.placeOrder('parent');\r\n                    }, function() {\r\n                        // No teardown actions required.\r\n                        fullScreenLoader.stopLoader();\r\n                        formComponent.setPaymentMethodNonce(null);\r\n                    });\r\n\r\n                });\r\n            }).fail(function (response) {\r\n                var error = JSON.parse(response.responseText);\r\n\r\n                fullScreenLoader.stopLoader();\r\n                globalMessageList.addErrorMessage({\r\n                    message: error.message\r\n                });\r\n            });\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/venmo.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreeVenmo',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'mage/translate'\r\n    ],\r\n    function (\r\n        Component,\r\n        braintree,\r\n        dataCollector,\r\n        venmo,\r\n        formBuilder,\r\n        messageList,\r\n        fullScreenLoader,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                deviceData: null,\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/venmo',\r\n                venmoInstance: null\r\n            },\r\n\r\n            clickVenmoBtn: function () {\r\n                var self = this;\r\n\r\n                if (!this.venmoInstance) {\r\n                    this.setErrorMsg($t('Venmo not initialized, please try reloading.'));\r\n                    return;\r\n                }\r\n\r\n                this.venmoInstance.tokenize(function (tokenizeErr, payload) {\r\n                    if (tokenizeErr) {\r\n                        if (tokenizeErr.code === 'VENMO_CANCELED') {\r\n                            self.setErrorMsg($t('Venmo app is not available or the payment flow was cancelled.'));\r\n                        } else if (tokenizeErr.code === 'VENMO_APP_CANCELED') {\r\n                            self.setErrorMsg($t('Venmo payment flow cancelled.'));\r\n                        } else {\r\n                            self.setErrorMsg(tokenizeErr.message);\r\n                        }\r\n                    } else {\r\n                        self.handleVenmoSuccess(payload);\r\n                    }\r\n                });\r\n            },\r\n\r\n            collectDeviceData: function (clientInstance, callback) {\r\n                var self = this;\r\n                dataCollector.create({\r\n                    client: clientInstance,\r\n                    paypal: true\r\n                }, function (dataCollectorErr, dataCollectorInstance) {\r\n                    if (dataCollectorErr) {\r\n                        return;\r\n                    }\r\n                    self.deviceData = dataCollectorInstance.deviceData;\r\n                    callback();\r\n                });\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function() {\r\n                return 'braintree_venmo';\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                        'device_data': this.deviceData\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            getPaymentMarkSrc: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\r\n            },\r\n\r\n            getTitle: function() {\r\n                return 'Venmo';\r\n            },\r\n\r\n            handleVenmoSuccess: function (payload) {\r\n                this.setPaymentMethodNonce(payload.nonce);\r\n                this.placeOrder();\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                var self = this;\r\n\r\n                braintree.create({\r\n                    authorization: self.getClientToken()\r\n                }, function (clientError, clientInstance) {\r\n                    if (clientError) {\r\n                        this.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                        return;\r\n                    }\r\n\r\n                    // Collect device data\r\n                    self.collectDeviceData(clientInstance, function () {\r\n                        // callback from collectDeviceData\r\n                        venmo.create({\r\n                            client: clientInstance,\r\n                            allowNewBrowserTab: false\r\n                        }, function (venmoErr, venmoInstance) {\r\n                            if (!venmoInstance.isBrowserSupported()) {\r\n                                return;\r\n                            }\r\n\r\n                            if (venmoErr) {\r\n                                self.setErrorMsg($t('Error initializing Venmo: %1').replace('%1', venmoErr));\r\n                                return;\r\n                            }\r\n\r\n                            self.setVenmoInstance(venmoInstance);\r\n                        });\r\n                    });\r\n                });\r\n\r\n                return this;\r\n            },\r\n\r\n            isAllowed: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].isAllowed;\r\n            },\r\n\r\n            isBrowserSupported: function () {\r\n                return venmo.isBrowserSupported();\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            setVenmoInstance: function (instance) {\r\n                this.venmoInstance = instance;\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/hosted-fields.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/hosted-fields',\r\n    'PayPal_Braintree/js/validator',\r\n    'Magento_Ui/js/model/messageList',\r\n    'mage/translate',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/action/set-payment-information',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'PayPal_Braintree/js/view/payment/adapter'\r\n], function (\r\n    $,\r\n    Component,\r\n    validator,\r\n    messageList,\r\n    $t,\r\n    fullScreenLoader,\r\n    setPaymentInformationAction,\r\n    additionalValidators,\r\n    braintree\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/multishipping/form'\r\n        },\r\n\r\n        /**\r\n         * Get list of available CC types\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getCcAvailableTypes: function () {\r\n            var availableTypes = validator.getAvailableCardTypes(),\r\n                billingCountryId;\r\n\r\n            billingCountryId = $('#multishipping_billing_country_id').val();\r\n\r\n            if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\r\n                return validator.collectTypes(\r\n                    availableTypes, validator.getCountrySpecificCardTypes(billingCountryId)\r\n                );\r\n            }\r\n\r\n            return availableTypes;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        handleNonce: function (data) {\r\n            var self = this;\r\n            this.setPaymentMethodNonce(data.nonce);\r\n\r\n            // place order on success validation\r\n            self.validatorManager.validate(self, function () {\r\n                return self.setPaymentInformation();\r\n            }, function() {\r\n                self.isProcessing = false;\r\n                self.paymentMethodNonce = null;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        placeOrder: function () {\r\n            var self = this;\r\n\r\n            if (this.isProcessing) {\r\n                return false;\r\n            } else {\r\n                this.isProcessing = true;\r\n            }\r\n\r\n            braintree.tokenizeHostedFields();\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        setPaymentInformation: function () {\r\n            if (additionalValidators.validate()) {\r\n                fullScreenLoader.startLoader();\r\n                $.when(\r\n                    setPaymentInformationAction(\r\n                        this.messageContainer,\r\n                        this.getData()\r\n                    )\r\n                ).done(this.done.bind(this))\r\n                    .fail(this.fail.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        fail: function () {\r\n            fullScreenLoader.stopLoader();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        done: function () {\r\n            fullScreenLoader.stopLoader();\r\n            $('#multishipping-billing-form').submit();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/paypal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'braintreeCheckoutPayPalAdapter',\r\n    'Magento_Checkout/js/model/quote',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/paypal',\r\n    'Magento_Checkout/js/action/set-payment-information',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'mage/translate'\r\n], function (\r\n    $,\r\n    _,\r\n    Braintree,\r\n    quote,\r\n    Component,\r\n    setPaymentInformationAction,\r\n    additionalValidators,\r\n    fullScreenLoader,\r\n    $t\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/multishipping/paypal',\r\n            submitButtonSelector: '[id=\"parent-payment-continue\"]',\r\n            reviewButtonHtml: ''\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        initObservable: function () {\r\n            this.reviewButtonHtml = $(this.submitButtonSelector).html();\r\n            return this._super();\r\n        },\r\n\r\n        initClientConfig: function () {\r\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\r\n            this.clientConfig.paypal.enableShippingAddress = false;\r\n\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n            this.clientConfig.buttonId = 'payment-continue';\r\n\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            this.updateSubmitButtonHtml(isActive);\r\n            this._super(isActive);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        beforePlaceOrder: function (data) {\r\n            this._super(data);\r\n            this.updateSubmitButtonTitle(true);\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth Flow\r\n         */\r\n        reInitPayPal: function () {\r\n            this.disableButton();\r\n            this.clientConfig.paypal.amount = parseFloat(this.grandTotalAmount).toFixed(2);\r\n\r\n            if (!quote.isVirtual()) {\r\n                this.clientConfig.paypal.enableShippingAddress = false;\r\n                this.clientConfig.paypal.shippingAddressEditable = false;\r\n            }\r\n\r\n            Braintree.setConfig(this.clientConfig);\r\n\r\n            if (Braintree.getPayPalInstance()) {\r\n                Braintree.getPayPalInstance().teardown(function () {\r\n                    Braintree.setup();\r\n                }.bind(this));\r\n                Braintree.setPayPalInstance(null);\r\n            } else {\r\n                Braintree.setup();\r\n                this.enableButton();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get configuration for PayPal\r\n         * @returns {Object}\r\n         */\r\n        getPayPalConfig: function () {\r\n            var totals = quote.totals(),\r\n                config = {},\r\n                isActiveVaultEnabler = this.isActiveVault();\r\n\r\n            config.paypal = {\r\n                flow: isActiveVaultEnabler ? 'vault' : 'checkout',\r\n                amount: parseFloat(this.grandTotalAmount).toFixed(2),\r\n                currency: totals['base_currency_code'],\r\n                locale: this.getLocale(),\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 */\r\n                onError: function () {\r\n                    this.paymentMethodNonce = null;\r\n                },\r\n\r\n                /**\r\n                 * Triggers if browser doesn't support PayPal Checkout\r\n                 */\r\n                onUnsupported: function () {\r\n                    this.paymentMethodNonce = null;\r\n                }\r\n            };\r\n\r\n            if (!quote.isVirtual()) {\r\n                config.paypal.enableShippingAddress = false;\r\n                config.paypal.shippingAddressEditable = false;\r\n            }\r\n\r\n            if (this.getMerchantName()) {\r\n                config.paypal.displayName = this.getMerchantName();\r\n            }\r\n\r\n            return config;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        getData: function () {\r\n            var data = this._super();\r\n\r\n            data['additional_data']['is_active_payment_token_enabler'] = true;\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        isActiveVault: function () {\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Skipping order review step on checkout with multiple addresses is not allowed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isSkipOrderReview: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Checks if payment method nonce is already received.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isPaymentMethodNonceReceived: function () {\r\n            return this.paymentMethodNonce !== null;\r\n        },\r\n\r\n        /**\r\n         * Update submit button on multi-addresses checkout billing form.\r\n         *\r\n         * @param {Boolean} isActive\r\n         */\r\n        updateSubmitButtonHtml: function (isActive) {\r\n            if (this.isPaymentMethodNonceReceived() || !isActive) {\r\n                $(this.submitButtonSelector).html(this.reviewButtonHtml);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        placeOrder: function () {\r\n            if (!this.isPaymentMethodNonceReceived()) {\r\n                this.payWithPayPal();\r\n            } else {\r\n                fullScreenLoader.startLoader();\r\n\r\n                $.when(\r\n                    setPaymentInformationAction(\r\n                        this.messageContainer,\r\n                        this.getData()\r\n                    )\r\n                ).done(this.done.bind(this))\r\n                    .fail(this.fail.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        fail: function () {\r\n            fullScreenLoader.stopLoader();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        done: function () {\r\n            fullScreenLoader.stopLoader();\r\n            $('#multishipping-billing-form').submit();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","requirejs/domReady.js":"/**\r\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/domReady for details\r\n */\r\n/*jslint */\r\n/*global require: false, define: false, requirejs: false,\r\n  window: false, clearInterval: false, document: false,\r\n  self: false, setInterval: false */\r\n\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var isTop, testDiv, scrollIntervalId,\r\n        isBrowser = typeof window !== \"undefined\" && window.document,\r\n        isPageLoaded = !isBrowser,\r\n        doc = isBrowser ? document : null,\r\n        readyCalls = [];\r\n\r\n    function runCallbacks(callbacks) {\r\n        var i;\r\n        for (i = 0; i < callbacks.length; i += 1) {\r\n            callbacks[i](doc);\r\n        }\r\n    }\r\n\r\n    function callReady() {\r\n        var callbacks = readyCalls;\r\n\r\n        if (isPageLoaded) {\r\n            //Call the DOM ready callbacks\r\n            if (callbacks.length) {\r\n                readyCalls = [];\r\n                runCallbacks(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the page as loaded.\r\n     */\r\n    function pageLoaded() {\r\n        if (!isPageLoaded) {\r\n            isPageLoaded = true;\r\n            if (scrollIntervalId) {\r\n                clearInterval(scrollIntervalId);\r\n            }\r\n\r\n            callReady();\r\n        }\r\n    }\r\n\r\n    if (isBrowser) {\r\n        if (document.addEventListener) {\r\n            //Standards. Hooray! Assumption here that if standards based,\r\n            //it knows about DOMContentLoaded.\r\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\r\n            window.addEventListener(\"load\", pageLoaded, false);\r\n        } else if (window.attachEvent) {\r\n            window.attachEvent(\"onload\", pageLoaded);\r\n\r\n            testDiv = document.createElement('div');\r\n            try {\r\n                isTop = window.frameElement === null;\r\n            } catch (e) {}\r\n\r\n            //DOMContentLoaded approximation that uses a doScroll, as found by\r\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\r\n            //but modified by other contributors, including jdalton\r\n            if (testDiv.doScroll && isTop && window.external) {\r\n                scrollIntervalId = setInterval(function () {\r\n                    try {\r\n                        testDiv.doScroll();\r\n                        pageLoaded();\r\n                    } catch (e) {}\r\n                }, 30);\r\n            }\r\n        }\r\n\r\n        //Check if document is no longer loading, and if so, just trigger page load\r\n        //listeners. Latest webkit browsers also use \"interactive\", and\r\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\r\n        //entering \"interactive\" or \"complete\". More details:\r\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\r\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\r\n        //Hmm, this is more complicated on further use, see \"firing too early\"\r\n        //bug: https://github.com/requirejs/domReady/issues/1\r\n        //so removing the || document.readyState === \"interactive\" test.\r\n        //There is still a window.onload binding that should get fired if\r\n        //DOMContentLoaded is missed.\r\n        if (document.readyState !== \"loading\") {\r\n            // Handle it asynchronously to allow scripts the opportunity to delay ready\r\n            setTimeout(pageLoaded);\r\n        }\r\n    }\r\n\r\n    /** START OF PUBLIC API **/\r\n\r\n    /**\r\n     * Registers a callback for DOM ready. If DOM is already ready, the\r\n     * callback is called immediately.\r\n     * @param {Function} callback\r\n     */\r\n    function domReady(callback) {\r\n        if (isPageLoaded) {\r\n            callback(doc);\r\n        } else {\r\n            readyCalls.push(callback);\r\n        }\r\n        return domReady;\r\n    }\r\n\r\n    domReady.version = '2.0.1';\r\n\r\n    /**\r\n     * Loader Plugin API method\r\n     */\r\n    domReady.load = function (name, req, onLoad, config) {\r\n        if (config.isBuild) {\r\n            onLoad(null);\r\n        } else {\r\n            domReady(onLoad);\r\n        }\r\n    };\r\n\r\n    /** END OF PUBLIC API **/\r\n\r\n    return domReady;\r\n});\r\n","Solwin_Cpanel/js/home-slider.js":"require(['jquery', 'cpowlcarousel'], function ($) {\n    $(document).ready(function () {\n        $(\".hb-slider\").owlCarousel({\n            items: 1,\n            itemsDesktop: [1080, 1],\n            itemsDesktopSmall: [860, 1],\n            itemsTablet: [768, 1],\n            itemsTabletSmall: [639, 1],\n            itemsMobile: [360, 1],\n            pagination: true,\n            navigationText: [\"<i class='fa fa-angle-left'></i>\", \"<i class='fa fa-angle-right'>\"],\n            navigation: false,\n        });\n\n        $(\".hpb-slider\").owlCarousel({\n            items: 3,\n            itemsDesktop: [1080, 3],\n            itemsDesktopSmall: [860, 3],\n            itemsTablet: [768, 2],\n            itemsTabletSmall: [639, 2],\n            itemsMobile: [479, 1],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n        $(\".htb-slider\").owlCarousel({\n            items: 1,\n            itemsDesktop: [1080, 1],\n            itemsDesktopSmall: [860, 1],\n            itemsTablet: [768, 1],\n            itemsTabletSmall: [639, 1],\n            itemsMobile: [479, 1],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n        $(\".hbr-slider\").owlCarousel({\n            items: 5,\n            itemsDesktop: [1080, 4],\n            itemsDesktopSmall: [860, 3],\n            itemsTablet: [768, 3],\n            itemsTabletSmall: [639, 3],\n            itemsMobile: [479, 2],\n            pagination: false,\n            navigationText: ['<div class=\"lft-btn\"><i class=\"fa fa-angle-left\"></i></div>', '<div class=\"rgt-btn\"><i class=\"fa fa-angle-right\"></div>'],\n            navigation: true,\n        });\n    });\n});","Solwin_Cpanel/js/owl.carousel.js":"/*\n *  jQuery OwlCarousel v1.3.3\n *\n *  Copyright (c) 2013 Bartosz Wojciechowski\n *  http://www.owlgraphic.com/owlcarousel/\n *\n *  Licensed under MIT\n *\n */\n\n/*JS Lint helpers: */\n/*global dragMove: false, dragEnd: false, $, jQuery, alert, window, document */\n/*jslint nomen: true, continue:true */\ndefine([\n    'jquery'\n], function () {\n    if (typeof Object.create !== \"function\") {\n        Object.create = function (obj) {\n            function F() {\n            }\n            F.prototype = obj;\n            return new F();\n        };\n    }\n    (function ($, window, document) {\n\n        var Carousel = {\n            init: function (options, el) {\n                var base = this;\n\n                base.$elem = $(el);\n                base.options = $.extend({}, $.fn.owlCarousel.options, base.$elem.data(), options);\n\n                base.userOptions = options;\n                base.loadContent();\n            },\n            loadContent: function () {\n                var base = this, url;\n\n                function getData(data) {\n                    var i, content = \"\";\n                    if (typeof base.options.jsonSuccess === \"function\") {\n                        base.options.jsonSuccess.apply(this, [data]);\n                    } else {\n                        for (i in data.owl) {\n                            if (data.owl.hasOwnProperty(i)) {\n                                content += data.owl[i].item;\n                            }\n                        }\n                        base.$elem.html(content);\n                    }\n                    base.logIn();\n                }\n\n                if (typeof base.options.beforeInit === \"function\") {\n                    base.options.beforeInit.apply(this, [base.$elem]);\n                }\n\n                if (typeof base.options.jsonPath === \"string\") {\n                    url = base.options.jsonPath;\n                    $.getJSON(url, getData);\n                } else {\n                    base.logIn();\n                }\n            },\n            logIn: function () {\n                var base = this;\n\n                base.$elem.data(\"owl-originalStyles\", base.$elem.attr(\"style\"));\n                base.$elem.data(\"owl-originalClasses\", base.$elem.attr(\"class\"));\n\n                base.$elem.css({opacity: 0});\n                base.orignalItems = base.options.items;\n                base.checkBrowser();\n                base.wrapperWidth = 0;\n                base.checkVisible = null;\n                base.setVars();\n            },\n            setVars: function () {\n                var base = this;\n                if (base.$elem.children().length === 0) {\n                    return false;\n                }\n                base.baseClass();\n                base.eventTypes();\n                base.$userItems = base.$elem.children();\n                base.itemsAmount = base.$userItems.length;\n                base.wrapItems();\n                base.$owlItems = base.$elem.find(\".owl-item\");\n                base.$owlWrapper = base.$elem.find(\".owl-wrapper\");\n                base.playDirection = \"next\";\n                base.prevItem = 0;\n                base.prevArr = [0];\n                base.currentItem = 0;\n                base.customEvents();\n                base.onStartup();\n            },\n            onStartup: function () {\n                var base = this;\n                base.updateItems();\n                base.calculateAll();\n                base.buildControls();\n                base.updateControls();\n                base.response();\n                base.moveEvents();\n                base.stopOnHover();\n                base.owlStatus();\n\n                if (base.options.transitionStyle !== false) {\n                    base.transitionTypes(base.options.transitionStyle);\n                }\n                if (base.options.autoPlay === true) {\n                    base.options.autoPlay = 5000;\n                }\n                base.play();\n\n                base.$elem.find(\".owl-wrapper\").css(\"display\", \"block\");\n\n                if (!base.$elem.is(\":visible\")) {\n                    base.watchVisibility();\n                } else {\n                    base.$elem.css(\"opacity\", 1);\n                }\n                base.onstartup = false;\n                base.eachMoveUpdate();\n                if (typeof base.options.afterInit === \"function\") {\n                    base.options.afterInit.apply(this, [base.$elem]);\n                }\n            },\n            eachMoveUpdate: function () {\n                var base = this;\n\n                if (base.options.lazyLoad === true) {\n                    base.lazyLoad();\n                }\n                if (base.options.autoHeight === true) {\n                    base.autoHeight();\n                }\n                base.onVisibleItems();\n\n                if (typeof base.options.afterAction === \"function\") {\n                    base.options.afterAction.apply(this, [base.$elem]);\n                }\n            },\n            updateVars: function () {\n                var base = this;\n                if (typeof base.options.beforeUpdate === \"function\") {\n                    base.options.beforeUpdate.apply(this, [base.$elem]);\n                }\n                base.watchVisibility();\n                base.updateItems();\n                base.calculateAll();\n                base.updatePosition();\n                base.updateControls();\n                base.eachMoveUpdate();\n                if (typeof base.options.afterUpdate === \"function\") {\n                    base.options.afterUpdate.apply(this, [base.$elem]);\n                }\n            },\n            reload: function () {\n                var base = this;\n                window.setTimeout(function () {\n                    base.updateVars();\n                }, 0);\n            },\n            watchVisibility: function () {\n                var base = this;\n\n                if (base.$elem.is(\":visible\") === false) {\n                    base.$elem.css({opacity: 0});\n                    window.clearInterval(base.autoPlayInterval);\n                    window.clearInterval(base.checkVisible);\n                } else {\n                    return false;\n                }\n                base.checkVisible = window.setInterval(function () {\n                    if (base.$elem.is(\":visible\")) {\n                        base.reload();\n                        base.$elem.animate({opacity: 1}, 200);\n                        window.clearInterval(base.checkVisible);\n                    }\n                }, 500);\n            },\n            wrapItems: function () {\n                var base = this;\n                base.$userItems.wrapAll(\"<div class=\\\"owl-wrapper\\\">\").wrap(\"<div class=\\\"owl-item\\\"></div>\");\n                base.$elem.find(\".owl-wrapper\").wrap(\"<div class=\\\"owl-wrapper-outer\\\">\");\n                base.wrapperOuter = base.$elem.find(\".owl-wrapper-outer\");\n                base.$elem.css(\"display\", \"block\");\n            },\n            baseClass: function () {\n                var base = this,\n                        hasBaseClass = base.$elem.hasClass(base.options.baseClass),\n                        hasThemeClass = base.$elem.hasClass(base.options.theme);\n\n                if (!hasBaseClass) {\n                    base.$elem.addClass(base.options.baseClass);\n                }\n\n                if (!hasThemeClass) {\n                    base.$elem.addClass(base.options.theme);\n                }\n            },\n            updateItems: function () {\n                var base = this, width, i;\n\n                if (base.options.responsive === false) {\n                    return false;\n                }\n                if (base.options.singleItem === true) {\n                    base.options.items = base.orignalItems = 1;\n                    base.options.itemsCustom = false;\n                    base.options.itemsDesktop = false;\n                    base.options.itemsDesktopSmall = false;\n                    base.options.itemsTablet = false;\n                    base.options.itemsTabletSmall = false;\n                    base.options.itemsMobile = false;\n                    return false;\n                }\n\n                width = $(base.options.responsiveBaseWidth).width();\n\n                if (width > (base.options.itemsDesktop[0] || base.orignalItems)) {\n                    base.options.items = base.orignalItems;\n                }\n                if (base.options.itemsCustom !== false) {\n                    //Reorder array by screen size\n                    base.options.itemsCustom.sort(function (a, b) {\n                        return a[0] - b[0];\n                    });\n\n                    for (i = 0; i < base.options.itemsCustom.length; i += 1) {\n                        if (base.options.itemsCustom[i][0] <= width) {\n                            base.options.items = base.options.itemsCustom[i][1];\n                        }\n                    }\n\n                } else {\n\n                    if (width <= base.options.itemsDesktop[0] && base.options.itemsDesktop !== false) {\n                        base.options.items = base.options.itemsDesktop[1];\n                    }\n\n                    if (width <= base.options.itemsDesktopSmall[0] && base.options.itemsDesktopSmall !== false) {\n                        base.options.items = base.options.itemsDesktopSmall[1];\n                    }\n\n                    if (width <= base.options.itemsTablet[0] && base.options.itemsTablet !== false) {\n                        base.options.items = base.options.itemsTablet[1];\n                    }\n\n                    if (width <= base.options.itemsTabletSmall[0] && base.options.itemsTabletSmall !== false) {\n                        base.options.items = base.options.itemsTabletSmall[1];\n                    }\n\n                    if (width <= base.options.itemsMobile[0] && base.options.itemsMobile !== false) {\n                        base.options.items = base.options.itemsMobile[1];\n                    }\n                }\n\n                //if number of items is less than declared\n                if (base.options.items > base.itemsAmount && base.options.itemsScaleUp === true) {\n                    base.options.items = base.itemsAmount;\n                }\n            },\n            response: function () {\n                var base = this,\n                        smallDelay,\n                        lastWindowWidth;\n\n                if (base.options.responsive !== true) {\n                    return false;\n                }\n                lastWindowWidth = $(window).width();\n\n                base.resizer = function () {\n                    if ($(window).width() !== lastWindowWidth) {\n                        if (base.options.autoPlay !== false) {\n                            window.clearInterval(base.autoPlayInterval);\n                        }\n                        window.clearTimeout(smallDelay);\n                        smallDelay = window.setTimeout(function () {\n                            lastWindowWidth = $(window).width();\n                            base.updateVars();\n                        }, base.options.responsiveRefreshRate);\n                    }\n                };\n                $(window).resize(base.resizer);\n            },\n            updatePosition: function () {\n                var base = this;\n                base.jumpTo(base.currentItem);\n                if (base.options.autoPlay !== false) {\n                    base.checkAp();\n                }\n            },\n            appendItemsSizes: function () {\n                var base = this,\n                        roundPages = 0,\n                        lastItem = base.itemsAmount - base.options.items;\n\n                base.$owlItems.each(function (index) {\n                    var $this = $(this);\n                    $this\n                            .css({\"width\": base.itemWidth})\n                            .data(\"owl-item\", Number(index));\n\n                    if (index % base.options.items === 0 || index === lastItem) {\n                        if (!(index > lastItem)) {\n                            roundPages += 1;\n                        }\n                    }\n                    $this.data(\"owl-roundPages\", roundPages);\n                });\n            },\n            appendWrapperSizes: function () {\n                var base = this,\n                        width = base.$owlItems.length * base.itemWidth;\n\n                base.$owlWrapper.css({\n                    \"width\": width * 2,\n                    \"left\": 0\n                });\n                base.appendItemsSizes();\n            },\n            calculateAll: function () {\n                var base = this;\n                base.calculateWidth();\n                base.appendWrapperSizes();\n                base.loops();\n                base.max();\n            },\n            calculateWidth: function () {\n                var base = this;\n                base.itemWidth = Math.round(base.$elem.width() / base.options.items);\n            },\n            max: function () {\n                var base = this,\n                        maximum = ((base.itemsAmount * base.itemWidth) - base.options.items * base.itemWidth) * -1;\n                if (base.options.items > base.itemsAmount) {\n                    base.maximumItem = 0;\n                    maximum = 0;\n                    base.maximumPixels = 0;\n                } else {\n                    base.maximumItem = base.itemsAmount - base.options.items;\n                    base.maximumPixels = maximum;\n                }\n                return maximum;\n            },\n            min: function () {\n                return 0;\n            },\n            loops: function () {\n                var base = this,\n                        prev = 0,\n                        elWidth = 0,\n                        i,\n                        item,\n                        roundPageNum;\n\n                base.positionsInArray = [0];\n                base.pagesInArray = [];\n\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    elWidth += base.itemWidth;\n                    base.positionsInArray.push(-elWidth);\n\n                    if (base.options.scrollPerPage === true) {\n                        item = $(base.$owlItems[i]);\n                        roundPageNum = item.data(\"owl-roundPages\");\n                        if (roundPageNum !== prev) {\n                            base.pagesInArray[prev] = base.positionsInArray[i];\n                            prev = roundPageNum;\n                        }\n                    }\n                }\n            },\n            buildControls: function () {\n                var base = this;\n                if (base.options.navigation === true || base.options.pagination === true) {\n                    base.owlControls = $(\"<div class=\\\"owl-controls\\\"/>\").toggleClass(\"clickable\", !base.browser.isTouch).appendTo(base.$elem);\n                }\n                if (base.options.pagination === true) {\n                    base.buildPagination();\n                }\n                if (base.options.navigation === true) {\n                    base.buildButtons();\n                }\n            },\n            buildButtons: function () {\n                var base = this,\n                        buttonsWrapper = $(\"<div class=\\\"owl-buttons\\\"/>\");\n                base.owlControls.append(buttonsWrapper);\n\n                base.buttonPrev = $(\"<div/>\", {\n                    \"class\": \"owl-prev\",\n                    \"html\": base.options.navigationText[0] || \"\"\n                });\n\n                base.buttonNext = $(\"<div/>\", {\n                    \"class\": \"owl-next\",\n                    \"html\": base.options.navigationText[1] || \"\"\n                });\n\n                buttonsWrapper\n                        .append(base.buttonPrev)\n                        .append(base.buttonNext);\n\n                buttonsWrapper.on(\"touchstart.owlControls mousedown.owlControls\", \"div[class^=\\\"owl\\\"]\", function (event) {\n                    event.preventDefault();\n                });\n\n                buttonsWrapper.on(\"touchend.owlControls mouseup.owlControls\", \"div[class^=\\\"owl\\\"]\", function (event) {\n                    event.preventDefault();\n                    if ($(this).hasClass(\"owl-next\")) {\n                        base.next();\n                    } else {\n                        base.prev();\n                    }\n                });\n            },\n            buildPagination: function () {\n                var base = this;\n\n                base.paginationWrapper = $(\"<div class=\\\"owl-pagination\\\"/>\");\n                base.owlControls.append(base.paginationWrapper);\n\n                base.paginationWrapper.on(\"touchend.owlControls mouseup.owlControls\", \".owl-page\", function (event) {\n                    event.preventDefault();\n                    if (Number($(this).data(\"owl-page\")) !== base.currentItem) {\n                        base.goTo(Number($(this).data(\"owl-page\")), true);\n                    }\n                });\n            },\n            updatePagination: function () {\n                var base = this,\n                        counter,\n                        lastPage,\n                        lastItem,\n                        i,\n                        paginationButton,\n                        paginationButtonInner;\n\n                if (base.options.pagination === false) {\n                    return false;\n                }\n\n                base.paginationWrapper.html(\"\");\n\n                counter = 0;\n                lastPage = base.itemsAmount - base.itemsAmount % base.options.items;\n\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    if (i % base.options.items === 0) {\n                        counter += 1;\n                        if (lastPage === i) {\n                            lastItem = base.itemsAmount - base.options.items;\n                        }\n                        paginationButton = $(\"<div/>\", {\n                            \"class\": \"owl-page\"\n                        });\n                        paginationButtonInner = $(\"<span></span>\", {\n                            \"text\": base.options.paginationNumbers === true ? counter : \"\",\n                            \"class\": base.options.paginationNumbers === true ? \"owl-numbers\" : \"\"\n                        });\n                        paginationButton.append(paginationButtonInner);\n\n                        paginationButton.data(\"owl-page\", lastPage === i ? lastItem : i);\n                        paginationButton.data(\"owl-roundPages\", counter);\n\n                        base.paginationWrapper.append(paginationButton);\n                    }\n                }\n                base.checkPagination();\n            },\n            checkPagination: function () {\n                var base = this;\n                if (base.options.pagination === false) {\n                    return false;\n                }\n                base.paginationWrapper.find(\".owl-page\").each(function () {\n                    if ($(this).data(\"owl-roundPages\") === $(base.$owlItems[base.currentItem]).data(\"owl-roundPages\")) {\n                        base.paginationWrapper\n                                .find(\".owl-page\")\n                                .removeClass(\"active\");\n                        $(this).addClass(\"active\");\n                    }\n                });\n            },\n            checkNavigation: function () {\n                var base = this;\n\n                if (base.options.navigation === false) {\n                    return false;\n                }\n                if (base.options.rewindNav === false) {\n                    if (base.currentItem === 0 && base.maximumItem === 0) {\n                        base.buttonPrev.addClass(\"disabled\");\n                        base.buttonNext.addClass(\"disabled\");\n                    } else if (base.currentItem === 0 && base.maximumItem !== 0) {\n                        base.buttonPrev.addClass(\"disabled\");\n                        base.buttonNext.removeClass(\"disabled\");\n                    } else if (base.currentItem === base.maximumItem) {\n                        base.buttonPrev.removeClass(\"disabled\");\n                        base.buttonNext.addClass(\"disabled\");\n                    } else if (base.currentItem !== 0 && base.currentItem !== base.maximumItem) {\n                        base.buttonPrev.removeClass(\"disabled\");\n                        base.buttonNext.removeClass(\"disabled\");\n                    }\n                }\n            },\n            updateControls: function () {\n                var base = this;\n                base.updatePagination();\n                base.checkNavigation();\n                if (base.owlControls) {\n                    if (base.options.items >= base.itemsAmount) {\n                        base.owlControls.hide();\n                    } else {\n                        base.owlControls.show();\n                    }\n                }\n            },\n            destroyControls: function () {\n                var base = this;\n                if (base.owlControls) {\n                    base.owlControls.remove();\n                }\n            },\n            next: function (speed) {\n                var base = this;\n\n                if (base.isTransition) {\n                    return false;\n                }\n\n                base.currentItem += base.options.scrollPerPage === true ? base.options.items : 1;\n                if (base.currentItem > base.maximumItem + (base.options.scrollPerPage === true ? (base.options.items - 1) : 0)) {\n                    if (base.options.rewindNav === true) {\n                        base.currentItem = 0;\n                        speed = \"rewind\";\n                    } else {\n                        base.currentItem = base.maximumItem;\n                        return false;\n                    }\n                }\n                base.goTo(base.currentItem, speed);\n            },\n            prev: function (speed) {\n                var base = this;\n\n                if (base.isTransition) {\n                    return false;\n                }\n\n                if (base.options.scrollPerPage === true && base.currentItem > 0 && base.currentItem < base.options.items) {\n                    base.currentItem = 0;\n                } else {\n                    base.currentItem -= base.options.scrollPerPage === true ? base.options.items : 1;\n                }\n                if (base.currentItem < 0) {\n                    if (base.options.rewindNav === true) {\n                        base.currentItem = base.maximumItem;\n                        speed = \"rewind\";\n                    } else {\n                        base.currentItem = 0;\n                        return false;\n                    }\n                }\n                base.goTo(base.currentItem, speed);\n            },\n            goTo: function (position, speed, drag) {\n                var base = this,\n                        goToPixel;\n\n                if (base.isTransition) {\n                    return false;\n                }\n                if (typeof base.options.beforeMove === \"function\") {\n                    base.options.beforeMove.apply(this, [base.$elem]);\n                }\n                if (position >= base.maximumItem) {\n                    position = base.maximumItem;\n                } else if (position <= 0) {\n                    position = 0;\n                }\n\n                base.currentItem = base.owl.currentItem = position;\n                if (base.options.transitionStyle !== false && drag !== \"drag\" && base.options.items === 1 && base.browser.support3d === true) {\n                    base.swapSpeed(0);\n                    if (base.browser.support3d === true) {\n                        base.transition3d(base.positionsInArray[position]);\n                    } else {\n                        base.css2slide(base.positionsInArray[position], 1);\n                    }\n                    base.afterGo();\n                    base.singleItemTransition();\n                    return false;\n                }\n                goToPixel = base.positionsInArray[position];\n\n                if (base.browser.support3d === true) {\n                    base.isCss3Finish = false;\n\n                    if (speed === true) {\n                        base.swapSpeed(\"paginationSpeed\");\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.paginationSpeed);\n\n                    } else if (speed === \"rewind\") {\n                        base.swapSpeed(base.options.rewindSpeed);\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.rewindSpeed);\n\n                    } else {\n                        base.swapSpeed(\"slideSpeed\");\n                        window.setTimeout(function () {\n                            base.isCss3Finish = true;\n                        }, base.options.slideSpeed);\n                    }\n                    base.transition3d(goToPixel);\n                } else {\n                    if (speed === true) {\n                        base.css2slide(goToPixel, base.options.paginationSpeed);\n                    } else if (speed === \"rewind\") {\n                        base.css2slide(goToPixel, base.options.rewindSpeed);\n                    } else {\n                        base.css2slide(goToPixel, base.options.slideSpeed);\n                    }\n                }\n                base.afterGo();\n            },\n            jumpTo: function (position) {\n                var base = this;\n                if (typeof base.options.beforeMove === \"function\") {\n                    base.options.beforeMove.apply(this, [base.$elem]);\n                }\n                if (position >= base.maximumItem || position === -1) {\n                    position = base.maximumItem;\n                } else if (position <= 0) {\n                    position = 0;\n                }\n                base.swapSpeed(0);\n                if (base.browser.support3d === true) {\n                    base.transition3d(base.positionsInArray[position]);\n                } else {\n                    base.css2slide(base.positionsInArray[position], 1);\n                }\n                base.currentItem = base.owl.currentItem = position;\n                base.afterGo();\n            },\n            afterGo: function () {\n                var base = this;\n\n                base.prevArr.push(base.currentItem);\n                base.prevItem = base.owl.prevItem = base.prevArr[base.prevArr.length - 2];\n                base.prevArr.shift(0);\n\n                if (base.prevItem !== base.currentItem) {\n                    base.checkPagination();\n                    base.checkNavigation();\n                    base.eachMoveUpdate();\n\n                    if (base.options.autoPlay !== false) {\n                        base.checkAp();\n                    }\n                }\n                if (typeof base.options.afterMove === \"function\" && base.prevItem !== base.currentItem) {\n                    base.options.afterMove.apply(this, [base.$elem]);\n                }\n            },\n            stop: function () {\n                var base = this;\n                base.apStatus = \"stop\";\n                window.clearInterval(base.autoPlayInterval);\n            },\n            checkAp: function () {\n                var base = this;\n                if (base.apStatus !== \"stop\") {\n                    base.play();\n                }\n            },\n            play: function () {\n                var base = this;\n                base.apStatus = \"play\";\n                if (base.options.autoPlay === false) {\n                    return false;\n                }\n                window.clearInterval(base.autoPlayInterval);\n                base.autoPlayInterval = window.setInterval(function () {\n                    base.next(true);\n                }, base.options.autoPlay);\n            },\n            swapSpeed: function (action) {\n                var base = this;\n                if (action === \"slideSpeed\") {\n                    base.$owlWrapper.css(base.addCssSpeed(base.options.slideSpeed));\n                } else if (action === \"paginationSpeed\") {\n                    base.$owlWrapper.css(base.addCssSpeed(base.options.paginationSpeed));\n                } else if (typeof action !== \"string\") {\n                    base.$owlWrapper.css(base.addCssSpeed(action));\n                }\n            },\n            addCssSpeed: function (speed) {\n                return {\n                    \"-webkit-transition\": \"all \" + speed + \"ms ease\",\n                    \"-moz-transition\": \"all \" + speed + \"ms ease\",\n                    \"-o-transition\": \"all \" + speed + \"ms ease\",\n                    \"transition\": \"all \" + speed + \"ms ease\"\n                };\n            },\n            removeTransition: function () {\n                return {\n                    \"-webkit-transition\": \"\",\n                    \"-moz-transition\": \"\",\n                    \"-o-transition\": \"\",\n                    \"transition\": \"\"\n                };\n            },\n            doTranslate: function (pixels) {\n                return {\n                    \"-webkit-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-moz-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-o-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"-ms-transform\": \"translate3d(\" + pixels + \"px, 0px, 0px)\",\n                    \"transform\": \"translate3d(\" + pixels + \"px, 0px,0px)\"\n                };\n            },\n            transition3d: function (value) {\n                var base = this;\n                base.$owlWrapper.css(base.doTranslate(value));\n            },\n            css2move: function (value) {\n                var base = this;\n                base.$owlWrapper.css({\"left\": value});\n            },\n            css2slide: function (value, speed) {\n                var base = this;\n\n                base.isCssFinish = false;\n                base.$owlWrapper.stop(true, true).animate({\n                    \"left\": value\n                }, {\n                    duration: speed || base.options.slideSpeed,\n                    complete: function () {\n                        base.isCssFinish = true;\n                    }\n                });\n            },\n            checkBrowser: function () {\n                var base = this,\n                        translate3D = \"translate3d(0px, 0px, 0px)\",\n                        tempElem = document.createElement(\"div\"),\n                        regex,\n                        asSupport,\n                        support3d,\n                        isTouch;\n\n                tempElem.style.cssText = \"  -moz-transform:\" + translate3D +\n                        \"; -ms-transform:\" + translate3D +\n                        \"; -o-transform:\" + translate3D +\n                        \"; -webkit-transform:\" + translate3D +\n                        \"; transform:\" + translate3D;\n                regex = /translate3d\\(0px, 0px, 0px\\)/g;\n                asSupport = tempElem.style.cssText.match(regex);\n                support3d = (asSupport !== null && asSupport.length === 1);\n\n                isTouch = \"ontouchstart\" in window || window.navigator.msMaxTouchPoints;\n\n                base.browser = {\n                    \"support3d\": support3d,\n                    \"isTouch\": isTouch\n                };\n            },\n            moveEvents: function () {\n                var base = this;\n                if (base.options.mouseDrag !== false || base.options.touchDrag !== false) {\n                    base.gestures();\n                    base.disabledEvents();\n                }\n            },\n            eventTypes: function () {\n                var base = this,\n                        types = [\"s\", \"e\", \"x\"];\n\n                base.ev_types = {};\n\n                if (base.options.mouseDrag === true && base.options.touchDrag === true) {\n                    types = [\n                        \"touchstart.owl mousedown.owl\",\n                        \"touchmove.owl mousemove.owl\",\n                        \"touchend.owl touchcancel.owl mouseup.owl\"\n                    ];\n                } else if (base.options.mouseDrag === false && base.options.touchDrag === true) {\n                    types = [\n                        \"touchstart.owl\",\n                        \"touchmove.owl\",\n                        \"touchend.owl touchcancel.owl\"\n                    ];\n                } else if (base.options.mouseDrag === true && base.options.touchDrag === false) {\n                    types = [\n                        \"mousedown.owl\",\n                        \"mousemove.owl\",\n                        \"mouseup.owl\"\n                    ];\n                }\n\n                base.ev_types.start = types[0];\n                base.ev_types.move = types[1];\n                base.ev_types.end = types[2];\n            },\n            disabledEvents: function () {\n                var base = this;\n                base.$elem.on(\"dragstart.owl\", function (event) {\n                    event.preventDefault();\n                });\n                base.$elem.on(\"mousedown.disableTextSelect\", function (e) {\n                    return $(e.target).is('input, textarea, select, option');\n                });\n            },\n            gestures: function () {\n                /*jslint unparam: true*/\n                var base = this,\n                        locals = {\n                            offsetX: 0,\n                            offsetY: 0,\n                            baseElWidth: 0,\n                            relativePos: 0,\n                            position: null,\n                            minSwipe: null,\n                            maxSwipe: null,\n                            sliding: null,\n                            dargging: null,\n                            targetElement: null\n                        };\n\n                base.isCssFinish = true;\n\n                function getTouches(event) {\n                    if (event.touches !== undefined) {\n                        return {\n                            x: event.touches[0].pageX,\n                            y: event.touches[0].pageY\n                        };\n                    }\n\n                    if (event.touches === undefined) {\n                        if (event.pageX !== undefined) {\n                            return {\n                                x: event.pageX,\n                                y: event.pageY\n                            };\n                        }\n                        if (event.pageX === undefined) {\n                            return {\n                                x: event.clientX,\n                                y: event.clientY\n                            };\n                        }\n                    }\n                }\n\n                function swapEvents(type) {\n                    if (type === \"on\") {\n                        $(document).on(base.ev_types.move, dragMove);\n                        $(document).on(base.ev_types.end, dragEnd);\n                    } else if (type === \"off\") {\n                        $(document).off(base.ev_types.move);\n                        $(document).off(base.ev_types.end);\n                    }\n                }\n\n                function dragStart(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            position;\n\n                    if (ev.which === 3) {\n                        return false;\n                    }\n                    if (base.itemsAmount <= base.options.items) {\n                        return;\n                    }\n                    if (base.isCssFinish === false && !base.options.dragBeforeAnimFinish) {\n                        return false;\n                    }\n                    if (base.isCss3Finish === false && !base.options.dragBeforeAnimFinish) {\n                        return false;\n                    }\n\n                    if (base.options.autoPlay !== false) {\n                        window.clearInterval(base.autoPlayInterval);\n                    }\n\n                    if (base.browser.isTouch !== true && !base.$owlWrapper.hasClass(\"grabbing\")) {\n                        base.$owlWrapper.addClass(\"grabbing\");\n                    }\n\n                    base.newPosX = 0;\n                    base.newRelativeX = 0;\n\n                    $(this).css(base.removeTransition());\n\n                    position = $(this).position();\n                    locals.relativePos = position.left;\n\n                    locals.offsetX = getTouches(ev).x - position.left;\n                    locals.offsetY = getTouches(ev).y - position.top;\n\n                    swapEvents(\"on\");\n\n                    locals.sliding = false;\n                    locals.targetElement = ev.target || ev.srcElement;\n                }\n\n                function dragMove(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            minSwipe,\n                            maxSwipe;\n\n                    base.newPosX = getTouches(ev).x - locals.offsetX;\n                    base.newPosY = getTouches(ev).y - locals.offsetY;\n                    base.newRelativeX = base.newPosX - locals.relativePos;\n\n                    if (typeof base.options.startDragging === \"function\" && locals.dragging !== true && base.newRelativeX !== 0) {\n                        locals.dragging = true;\n                        base.options.startDragging.apply(base, [base.$elem]);\n                    }\n\n                    if ((base.newRelativeX > 8 || base.newRelativeX < -8) && (base.browser.isTouch === true)) {\n                        if (ev.preventDefault !== undefined) {\n                            ev.preventDefault();\n                        } else {\n                            ev.returnValue = false;\n                        }\n                        locals.sliding = true;\n                    }\n\n                    if ((base.newPosY > 10 || base.newPosY < -10) && locals.sliding === false) {\n                        $(document).off(\"touchmove.owl\");\n                    }\n\n                    minSwipe = function () {\n                        return base.newRelativeX / 5;\n                    };\n\n                    maxSwipe = function () {\n                        return base.maximumPixels + base.newRelativeX / 5;\n                    };\n\n                    base.newPosX = Math.max(Math.min(base.newPosX, minSwipe()), maxSwipe());\n                    if (base.browser.support3d === true) {\n                        base.transition3d(base.newPosX);\n                    } else {\n                        base.css2move(base.newPosX);\n                    }\n                }\n\n                function dragEnd(event) {\n                    var ev = event.originalEvent || event || window.event,\n                            newPosition,\n                            handlers,\n                            owlStopEvent;\n\n                    ev.target = ev.target || ev.srcElement;\n\n                    locals.dragging = false;\n\n                    if (base.browser.isTouch !== true) {\n                        base.$owlWrapper.removeClass(\"grabbing\");\n                    }\n\n                    if (base.newRelativeX < 0) {\n                        base.dragDirection = base.owl.dragDirection = \"left\";\n                    } else {\n                        base.dragDirection = base.owl.dragDirection = \"right\";\n                    }\n\n                    if (base.newRelativeX !== 0) {\n                        newPosition = base.getNewPosition();\n                        base.goTo(newPosition, false, \"drag\");\n                        if (locals.targetElement === ev.target && base.browser.isTouch !== true) {\n                            $(ev.target).on(\"click.disable\", function (ev) {\n                                ev.stopImmediatePropagation();\n                                ev.stopPropagation();\n                                ev.preventDefault();\n                                $(ev.target).off(\"click.disable\");\n                            });\n                            handlers = $._data(ev.target, \"events\").click;\n                            owlStopEvent = handlers.pop();\n                            handlers.splice(0, 0, owlStopEvent);\n                        }\n                    }\n                    swapEvents(\"off\");\n                }\n                base.$elem.on(base.ev_types.start, \".owl-wrapper\", dragStart);\n            },\n            getNewPosition: function () {\n                var base = this,\n                        newPosition = base.closestItem();\n\n                if (newPosition > base.maximumItem) {\n                    base.currentItem = base.maximumItem;\n                    newPosition = base.maximumItem;\n                } else if (base.newPosX >= 0) {\n                    newPosition = 0;\n                    base.currentItem = 0;\n                }\n                return newPosition;\n            },\n            closestItem: function () {\n                var base = this,\n                        array = base.options.scrollPerPage === true ? base.pagesInArray : base.positionsInArray,\n                        goal = base.newPosX,\n                        closest = null;\n\n                $.each(array, function (i, v) {\n                    if (goal - (base.itemWidth / 20) > array[i + 1] && goal - (base.itemWidth / 20) < v && base.moveDirection() === \"left\") {\n                        closest = v;\n                        if (base.options.scrollPerPage === true) {\n                            base.currentItem = $.inArray(closest, base.positionsInArray);\n                        } else {\n                            base.currentItem = i;\n                        }\n                    } else if (goal + (base.itemWidth / 20) < v && goal + (base.itemWidth / 20) > (array[i + 1] || array[i] - base.itemWidth) && base.moveDirection() === \"right\") {\n                        if (base.options.scrollPerPage === true) {\n                            closest = array[i + 1] || array[array.length - 1];\n                            base.currentItem = $.inArray(closest, base.positionsInArray);\n                        } else {\n                            closest = array[i + 1];\n                            base.currentItem = i + 1;\n                        }\n                    }\n                });\n                return base.currentItem;\n            },\n            moveDirection: function () {\n                var base = this,\n                        direction;\n                if (base.newRelativeX < 0) {\n                    direction = \"right\";\n                    base.playDirection = \"next\";\n                } else {\n                    direction = \"left\";\n                    base.playDirection = \"prev\";\n                }\n                return direction;\n            },\n            customEvents: function () {\n                /*jslint unparam: true*/\n                var base = this;\n                base.$elem.on(\"owl.next\", function () {\n                    base.next();\n                });\n                base.$elem.on(\"owl.prev\", function () {\n                    base.prev();\n                });\n                base.$elem.on(\"owl.play\", function (event, speed) {\n                    base.options.autoPlay = speed;\n                    base.play();\n                    base.hoverStatus = \"play\";\n                });\n                base.$elem.on(\"owl.stop\", function () {\n                    base.stop();\n                    base.hoverStatus = \"stop\";\n                });\n                base.$elem.on(\"owl.goTo\", function (event, item) {\n                    base.goTo(item);\n                });\n                base.$elem.on(\"owl.jumpTo\", function (event, item) {\n                    base.jumpTo(item);\n                });\n            },\n            stopOnHover: function () {\n                var base = this;\n                if (base.options.stopOnHover === true && base.browser.isTouch !== true && base.options.autoPlay !== false) {\n                    base.$elem.on(\"mouseover\", function () {\n                        base.stop();\n                    });\n                    base.$elem.on(\"mouseout\", function () {\n                        if (base.hoverStatus !== \"stop\") {\n                            base.play();\n                        }\n                    });\n                }\n            },\n            lazyLoad: function () {\n                var base = this,\n                        i,\n                        $item,\n                        itemNumber,\n                        $lazyImg,\n                        follow;\n\n                if (base.options.lazyLoad === false) {\n                    return false;\n                }\n                for (i = 0; i < base.itemsAmount; i += 1) {\n                    $item = $(base.$owlItems[i]);\n\n                    if ($item.data(\"owl-loaded\") === \"loaded\") {\n                        continue;\n                    }\n\n                    itemNumber = $item.data(\"owl-item\");\n                    $lazyImg = $item.find(\".lazyOwl\");\n\n                    if (typeof $lazyImg.data(\"src\") !== \"string\") {\n                        $item.data(\"owl-loaded\", \"loaded\");\n                        continue;\n                    }\n                    if ($item.data(\"owl-loaded\") === undefined) {\n                        $lazyImg.hide();\n                        $item.addClass(\"loading\").data(\"owl-loaded\", \"checked\");\n                    }\n                    if (base.options.lazyFollow === true) {\n                        follow = itemNumber >= base.currentItem;\n                    } else {\n                        follow = true;\n                    }\n                    if (follow && itemNumber < base.currentItem + base.options.items && $lazyImg.length) {\n                        base.lazyPreload($item, $lazyImg);\n                    }\n                }\n            },\n            lazyPreload: function ($item, $lazyImg) {\n                var base = this,\n                        iterations = 0,\n                        isBackgroundImg;\n\n                if ($lazyImg.prop(\"tagName\") === \"DIV\") {\n                    $lazyImg.css(\"background-image\", \"url(\" + $lazyImg.data(\"src\") + \")\");\n                    isBackgroundImg = true;\n                } else {\n                    $lazyImg[0].src = $lazyImg.data(\"src\");\n                }\n\n                function showImage() {\n                    $item.data(\"owl-loaded\", \"loaded\").removeClass(\"loading\");\n                    $lazyImg.removeAttr(\"data-src\");\n                    if (base.options.lazyEffect === \"fade\") {\n                        $lazyImg.fadeIn(400);\n                    } else {\n                        $lazyImg.show();\n                    }\n                    if (typeof base.options.afterLazyLoad === \"function\") {\n                        base.options.afterLazyLoad.apply(this, [base.$elem]);\n                    }\n                }\n\n                function checkLazyImage() {\n                    iterations += 1;\n                    if (base.completeImg($lazyImg.get(0)) || isBackgroundImg === true) {\n                        showImage();\n                    } else if (iterations <= 100) {//if image loads in less than 10 seconds \n                        window.setTimeout(checkLazyImage, 100);\n                    } else {\n                        showImage();\n                    }\n                }\n\n                checkLazyImage();\n            },\n            autoHeight: function () {\n                var base = this,\n                        $currentimg = $(base.$owlItems[base.currentItem]).find(\"img\"),\n                        iterations;\n\n                function addHeight() {\n                    var $currentItem = $(base.$owlItems[base.currentItem]).height();\n                    base.wrapperOuter.css(\"height\", $currentItem + \"px\");\n                    if (!base.wrapperOuter.hasClass(\"autoHeight\")) {\n                        window.setTimeout(function () {\n                            base.wrapperOuter.addClass(\"autoHeight\");\n                        }, 0);\n                    }\n                }\n\n                function checkImage() {\n                    iterations += 1;\n                    if (base.completeImg($currentimg.get(0))) {\n                        addHeight();\n                    } else if (iterations <= 100) { //if image loads in less than 10 seconds \n                        window.setTimeout(checkImage, 100);\n                    } else {\n                        base.wrapperOuter.css(\"height\", \"\"); //Else remove height attribute\n                    }\n                }\n\n                if ($currentimg.get(0) !== undefined) {\n                    iterations = 0;\n                    checkImage();\n                } else {\n                    addHeight();\n                }\n            },\n            completeImg: function (img) {\n                var naturalWidthType;\n\n                if (!img.complete) {\n                    return false;\n                }\n                naturalWidthType = typeof img.naturalWidth;\n                if (naturalWidthType !== \"undefined\" && img.naturalWidth === 0) {\n                    return false;\n                }\n                return true;\n            },\n            onVisibleItems: function () {\n                var base = this,\n                        i;\n\n                if (base.options.addClassActive === true) {\n                    base.$owlItems.removeClass(\"active\");\n                }\n                base.visibleItems = [];\n                for (i = base.currentItem; i < base.currentItem + base.options.items; i += 1) {\n                    base.visibleItems.push(i);\n\n                    if (base.options.addClassActive === true) {\n                        $(base.$owlItems[i]).addClass(\"active\");\n                    }\n                }\n                base.owl.visibleItems = base.visibleItems;\n            },\n            transitionTypes: function (className) {\n                var base = this;\n                //Currently available: \"fade\", \"backSlide\", \"goDown\", \"fadeUp\"\n                base.outClass = \"owl-\" + className + \"-out\";\n                base.inClass = \"owl-\" + className + \"-in\";\n            },\n            singleItemTransition: function () {\n                var base = this,\n                        outClass = base.outClass,\n                        inClass = base.inClass,\n                        $currentItem = base.$owlItems.eq(base.currentItem),\n                        $prevItem = base.$owlItems.eq(base.prevItem),\n                        prevPos = Math.abs(base.positionsInArray[base.currentItem]) + base.positionsInArray[base.prevItem],\n                        origin = Math.abs(base.positionsInArray[base.currentItem]) + base.itemWidth / 2,\n                        animEnd = 'webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend';\n\n                base.isTransition = true;\n\n                base.$owlWrapper\n                        .addClass('owl-origin')\n                        .css({\n                            \"-webkit-transform-origin\": origin + \"px\",\n                            \"-moz-perspective-origin\": origin + \"px\",\n                            \"perspective-origin\": origin + \"px\"\n                        });\n                function transStyles(prevPos) {\n                    return {\n                        \"position\": \"relative\",\n                        \"left\": prevPos + \"px\"\n                    };\n                }\n\n                $prevItem\n                        .css(transStyles(prevPos, 10))\n                        .addClass(outClass)\n                        .on(animEnd, function () {\n                            base.endPrev = true;\n                            $prevItem.off(animEnd);\n                            base.clearTransStyle($prevItem, outClass);\n                        });\n\n                $currentItem\n                        .addClass(inClass)\n                        .on(animEnd, function () {\n                            base.endCurrent = true;\n                            $currentItem.off(animEnd);\n                            base.clearTransStyle($currentItem, inClass);\n                        });\n            },\n            clearTransStyle: function (item, classToRemove) {\n                var base = this;\n                item.css({\n                    \"position\": \"\",\n                    \"left\": \"\"\n                }).removeClass(classToRemove);\n\n                if (base.endPrev && base.endCurrent) {\n                    base.$owlWrapper.removeClass('owl-origin');\n                    base.endPrev = false;\n                    base.endCurrent = false;\n                    base.isTransition = false;\n                }\n            },\n            owlStatus: function () {\n                var base = this;\n                base.owl = {\n                    \"userOptions\": base.userOptions,\n                    \"baseElement\": base.$elem,\n                    \"userItems\": base.$userItems,\n                    \"owlItems\": base.$owlItems,\n                    \"currentItem\": base.currentItem,\n                    \"prevItem\": base.prevItem,\n                    \"visibleItems\": base.visibleItems,\n                    \"isTouch\": base.browser.isTouch,\n                    \"browser\": base.browser,\n                    \"dragDirection\": base.dragDirection\n                };\n            },\n            clearEvents: function () {\n                var base = this;\n                base.$elem.off(\".owl owl mousedown.disableTextSelect\");\n                $(document).off(\".owl owl\");\n                $(window).off(\"resize\", base.resizer);\n            },\n            unWrap: function () {\n                var base = this;\n                if (base.$elem.children().length !== 0) {\n                    base.$owlWrapper.unwrap();\n                    base.$userItems.unwrap().unwrap();\n                    if (base.owlControls) {\n                        base.owlControls.remove();\n                    }\n                }\n                base.clearEvents();\n                base.$elem\n                        .attr(\"style\", base.$elem.data(\"owl-originalStyles\") || \"\")\n                        .attr(\"class\", base.$elem.data(\"owl-originalClasses\"));\n            },\n            destroy: function () {\n                var base = this;\n                base.stop();\n                window.clearInterval(base.checkVisible);\n                base.unWrap();\n                base.$elem.removeData();\n            },\n            reinit: function (newOptions) {\n                var base = this,\n                        options = $.extend({}, base.userOptions, newOptions);\n                base.unWrap();\n                base.init(options, base.$elem);\n            },\n            addItem: function (htmlString, targetPosition) {\n                var base = this,\n                        position;\n\n                if (!htmlString) {\n                    return false;\n                }\n\n                if (base.$elem.children().length === 0) {\n                    base.$elem.append(htmlString);\n                    base.setVars();\n                    return false;\n                }\n                base.unWrap();\n                if (targetPosition === undefined || targetPosition === -1) {\n                    position = -1;\n                } else {\n                    position = targetPosition;\n                }\n                if (position >= base.$userItems.length || position === -1) {\n                    base.$userItems.eq(-1).after(htmlString);\n                } else {\n                    base.$userItems.eq(position).before(htmlString);\n                }\n\n                base.setVars();\n            },\n            removeItem: function (targetPosition) {\n                var base = this,\n                        position;\n\n                if (base.$elem.children().length === 0) {\n                    return false;\n                }\n                if (targetPosition === undefined || targetPosition === -1) {\n                    position = -1;\n                } else {\n                    position = targetPosition;\n                }\n\n                base.unWrap();\n                base.$userItems.eq(position).remove();\n                base.setVars();\n            }\n\n        };\n\n        $.fn.owlCarousel = function (options) {\n            return this.each(function () {\n                if ($(this).data(\"owl-init\") === true) {\n                    return false;\n                }\n                $(this).data(\"owl-init\", true);\n                var carousel = Object.create(Carousel);\n                carousel.init(options, this);\n                $.data(this, \"owlCarousel\", carousel);\n            });\n        };\n\n        $.fn.owlCarousel.options = {\n            items: 5,\n            itemsCustom: false,\n            itemsDesktop: [1199, 4],\n            itemsDesktopSmall: [979, 3],\n            itemsTablet: [768, 2],\n            itemsTabletSmall: false,\n            itemsMobile: [479, 1],\n            singleItem: false,\n            itemsScaleUp: false,\n            slideSpeed: 200,\n            paginationSpeed: 800,\n            rewindSpeed: 1000,\n            autoPlay: false,\n            stopOnHover: false,\n            navigation: false,\n            navigationText: [\"prev\", \"next\"],\n            rewindNav: true,\n            scrollPerPage: false,\n            pagination: true,\n            paginationNumbers: false,\n            responsive: true,\n            responsiveRefreshRate: 200,\n            responsiveBaseWidth: window,\n            baseClass: \"owl-carousel\",\n            theme: \"owl-theme\",\n            lazyLoad: false,\n            lazyFollow: true,\n            lazyEffect: \"fade\",\n            autoHeight: false,\n            jsonPath: false,\n            jsonSuccess: false,\n            dragBeforeAnimFinish: true,\n            mouseDrag: true,\n            touchDrag: true,\n            addClassActive: false,\n            transitionStyle: false,\n            beforeUpdate: false,\n            afterUpdate: false,\n            beforeInit: false,\n            afterInit: false,\n            beforeMove: false,\n            afterMove: false,\n            afterAction: false,\n            startDragging: false,\n            afterLazyLoad: false\n        };\n    }(jQuery, window, document));\n});","Solwin_ScrolltoTop/js/scroll.js":"/**\n * Solwin Infotech\n * Solwin ScrolltoTop Extension\n *\n * @category   Solwin\n * @package    Solwin_ScrolltoTop\n * @copyright  Copyright \u00a9 2006-2016 Solwin (https://www.solwininfotech.com)\n * @license    https://www.solwininfotech.com/magento-extension-license/ \n */\n\nrequire(['jquery'], function () {\n    jQuery(document).ready(function () {\n    if (jQuery(\".scrollup\").length > 0) {\n        // scroll-to-top button show and hide\n        jQuery(document).ready(function () {\n            jQuery(window).scroll(function () {\n                if (jQuery(this).scrollTop() > 100) {\n                    jQuery('.scrollup').fadeIn();\n                } else {\n                    jQuery('.scrollup').fadeOut();\n                }\n            });\n            // scroll-to-top animate\n            jQuery('.scrollup').click(function () {\n                jQuery(\"html, body\").animate({scrollTop: 0}, 600);\n                return false;\n            });\n        });\n    }\n});\n});","Vertex_AddressValidation/js/billing-validation-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Magento_Checkout/js/checkout-data'\r\n], function ($, registry, checkoutData) {\r\n    'use strict';\r\n\r\n    return function (Component) {\r\n        return Component.extend({\r\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\r\n            addressValidator: null,\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                registry.get(\r\n                    'checkout.steps.billing-step.payment.payments-list' +\r\n                    '.before-place-order.billingAdditional' +\r\n                    '.address-validation-message.validator',\r\n                    function (validator) {\r\n                        this.addressValidator = validator;\r\n                    }.bind(this)\r\n                );\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * @returns {self}\r\n             */\r\n            updateAddress: function () {\r\n                this.registerAddressInvalidationTrigger();\r\n\r\n                var billingData = checkoutData.getBillingAddressFromData();\r\n\r\n                if (!this.validationConfig.isAddressValidationEnabled ||\r\n                    this.addressValidator.isAddressValid ||\r\n                    billingData === null ||\r\n                    this.selectedAddress() && !this.isAddressFormVisible() ||\r\n                    this.validationConfig.countryValidation.indexOf(billingData.country_id) === -1\r\n                ) {\r\n                    return this._super();\r\n                }\r\n\r\n                this.addressValidator.addressValidation().done(function () {\r\n                    if (!this.validationConfig.showValidationSuccessMessage) {\r\n                        return this.updateAddress();\r\n                    }\r\n                }.bind(this));\r\n            },\r\n\r\n            /**\r\n             * When called, register a single (mind the \"one\") address invalidation trigger,\r\n             * that sets the \"this.addressValidator.isAddressValid = false\" for any further billing address field change.\r\n             */\r\n            registerAddressInvalidationTrigger: function () {\r\n                let that = this;\r\n                $('fieldset')\r\n                    .find('[data-form=\"billing-new-address\"]')\r\n                    .one(\r\n                        'keyup change paste',\r\n                        'input[name^=\"street\"]' +\r\n                        ', input[name=\"postcode\"]' +\r\n                        ', input[name=\"city\"]' +\r\n                        ', input[name=\"country_id\"]' +\r\n                        ', select[name=\"region_id\"]',\r\n                        function () {\r\n                            that.addressValidator.isAddressValid = false;\r\n                        });\r\n            }\r\n        });\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/customer-validation-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Vertex_AddressValidation/js/view/customer/address-form',\r\n    'Vertex_AddressValidation/js/view/customer/address-validation'\r\n], function ($, registry, addressForm, addressValidator) {\r\n    'use strict';\r\n\r\n    var config = window.vertexAddressValidationConfig || {};\r\n\r\n    return function (addressValidation) {\r\n        if (!config.enabled) {\r\n            return addressValidation;\r\n        }\r\n\r\n        $.widget('mage.addressValidation', addressValidation, {\r\n            /**\r\n             * Initialize widget\r\n             *\r\n             * @returns {*}\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                var result = this._super(),\r\n                    button = $(this.options.selectors.button, this.element),\r\n                    validator = addressValidator();\r\n\r\n                addressForm.initialize(this.element, button);\r\n                addressForm.renameSubmitButton(config.validateButtonText);\r\n\r\n                this.element.data('validator').settings.submitHandler = function (form) {\r\n                    if (addressForm.isSaveAsIs) {\r\n                        addressForm.isSaveAsIs = false;\r\n                        return this.submitForm(form);\r\n                    }\r\n\r\n                    validator.addressValidation(addressForm.getAddress()).done(this.submitForm.bind(this, form));\r\n                }.bind(this);\r\n\r\n                return result;\r\n            },\r\n\r\n            /**\r\n             * Submit form\r\n             *\r\n             * @param {Object} form\r\n             */\r\n            submitForm: function (form) {\r\n                addressForm.disableSubmitButtons();\r\n                form.submit();\r\n            }\r\n        });\r\n        return $.mage.addressValidation;\r\n    }\r\n});\r\n","Vertex_AddressValidation/js/definitions.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\n/**\r\n * @typedef UncleanAddress\r\n * @api\r\n * @property {string[]} streetAddress\r\n * @property {string} city\r\n * @property {string} mainDivision - Region, State, or Province\r\n * @property {string} postalCode - ZIP or postal code\r\n * @property {string} country - 2 or 3 letter country code\r\n */\r\n\r\n/**\r\n * @typedef CleanAddress\r\n * @api\r\n * @property {string[]} streetAddress - street address lines\r\n * @property {?string} city - name of the city\r\n * @property {?string} subDivision - name of the sub-division (county, parish)\r\n * @property {?string} regionName - name of the region (state/province)\r\n * @property {?int} regionId - numeric (state/province) region identifier in the Magento database\r\n * @property {?string} postalCode - ZIP+4 or postal code\r\n * @property {?string} countryCode - 2 letter country code\r\n * @property {?string} countryName - name of the country\r\n */\r\n","Vertex_AddressValidation/js/shipping-invalidate-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'mage/utils/wrapper'\r\n], function (registry, wrapper) {\r\n    'use strict';\r\n\r\n    var config = window.checkoutConfig.vertexAddressValidationConfig || {};\r\n\r\n    return function (target) {\r\n        if (!config.isAddressValidationEnabled) {\r\n            return target;\r\n        }\r\n\r\n        var validationMessage = registry.get(\r\n            'checkout.steps.shipping-step.shippingAddress' +\r\n            '.before-shipping-method-form.shippingAdditional'\r\n        );\r\n\r\n        target.setSelectedShippingAddress = wrapper.wrap(target.setSelectedShippingAddress, function (original, args) {\r\n            var addressValidator = registry.get(\r\n                'checkout.steps.shipping-step.shippingAddress' +\r\n                '.before-shipping-method-form.shippingAdditional' +\r\n                '.address-validation-message.validator'\r\n            );\r\n\r\n            addressValidator.isAddressValid = false;\r\n            validationMessage.clear();\r\n\r\n            return original(args);\r\n        });\r\n\r\n        return target;\r\n    }\r\n});\r\n","Vertex_AddressValidation/js/shipping-validation-mixin.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'Magento_Checkout/js/model/quote'\r\n], function (registry, quote) {\r\n    'use strict';\r\n\r\n    return function (Component) {\r\n        return Component.extend({\r\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\r\n            shippingData: null,\r\n            addressValidator: null,\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                registry.get(\r\n                    'checkout.steps.shipping-step.shippingAddress' +\r\n                    '.before-shipping-method-form.shippingAdditional' +\r\n                    '.address-validation-message.validator',\r\n                    function (validator) {\r\n                        this.addressValidator = validator;\r\n                    }.bind(this)\r\n                );\r\n\r\n                this.shippingData = quote.shippingAddress();\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * @return {Boolean}\r\n             */\r\n            validateShippingInformation: function () {\r\n                var superResult = this._super();\r\n\r\n                // Proceed with saving the address\r\n                if (!this.validationConfig.isAddressValidationEnabled ||\r\n                    !superResult ||\r\n                    this.addressValidator.isAddressValid ||\r\n                    !quote.shippingAddress().isEditable() ||\r\n                    this.validationConfig.countryValidation.indexOf(this.shippingData.countryId) === -1\r\n                ) {\r\n                    this.addressValidator.message.clear();\r\n                    return superResult;\r\n                }\r\n\r\n                // Run address validation\r\n                if (superResult) {\r\n                    this.addressValidator.addressValidation().done(function () {\r\n                        if (!this.validationConfig.showValidationSuccessMessage) {\r\n                            this.setShippingInformation();\r\n                        }\r\n                    }.bind(this));\r\n\r\n                    return false;\r\n                }\r\n                return superResult;\r\n            }\r\n        });\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/validation-messages.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\ndefine(['mage/translate'], function ($t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Messages here may not be the final version.  Please check the module's\r\n     * i18n.csv file for final english versions.\r\n     *\r\n     * Messages are kept here as-is for backwards compatibility with translations\r\n     */\r\n    return {\r\n        noChangesNecessary: $t('The address is valid'),\r\n        noAddressFound: $t('We did not find a valid address'),\r\n        changesFound: $t('The address is not valid'),\r\n        adminChangesFound: $t('The intended address could be:'),\r\n        addressUpdated: $t('The address was updated'),\r\n        streetAddressUpdateWarning: $t('Warning: Updating the address will replace all street address fields.')\r\n    };\r\n})\r\n","Vertex_AddressValidation/js/action/address-validation-request.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'mage/storage',\r\n    'Vertex_AddressValidation/js/model/url-builder'\r\n], function (\r\n    storage,\r\n    urlBuilder\r\n) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Cleanse an Address\r\n     *\r\n     * @param {UncleanAddress} address\r\n     */\r\n    return function (address) {\r\n        let url = '/address/cleanse';\r\n        const params = {address: address};\r\n\r\n        if (window.checkoutConfig && window.checkoutConfig.isCustomerLoggedIn === false) {\r\n            url = '/guest-address/cleanse';\r\n            params.cartId = window.checkoutConfig.quoteId;\r\n        }\r\n\r\n        return storage.post(\r\n            urlBuilder.createUrl(url, {}),\r\n            JSON.stringify(params)\r\n        );\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/action/build-quote-address.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Convert a Cleansed Address to a Magento Quote Address object\r\n     *\r\n     * @param {CleanAddress} address\r\n     * @returns {Object} quoteAddress\r\n     */\r\n    return function (address) {\r\n        return {\r\n            street: address.street_address,\r\n            city: address.city,\r\n            region: address.region_name,\r\n            region_id: address.region_id,\r\n            postcode: address.postal_code,\r\n            country_id: address.country_code\r\n        }\r\n    }\r\n})\r\n","Vertex_AddressValidation/js/action/convert-quote-address.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['uiRegistry'], function (registry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Convert a Magento Quote or Customer Address to an unclean address\r\n     *\r\n     * In most instances, the caller will need to set the region property on the address object.\r\n     *\r\n     * @param {Object} address\r\n     * @returns {UncleanAddress}\r\n     */\r\n    return function (address) {\r\n        const streetAddress = [];\r\n\r\n        for (let i in address.street) {\r\n            if (!address.street.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            if (address.street[i].length > 0) {\r\n                streetAddress.push(address.street[i]);\r\n            }\r\n        }\r\n\r\n        let countryId;\r\n        if (typeof address.countryId !== 'undefined') {\r\n            countryId = address.countryId;\r\n        } else if (typeof address.country_id !== 'undefined') {\r\n            countryId = address.country_id;\r\n        }\r\n\r\n        return {\r\n            street_address: streetAddress,\r\n            city: address.city,\r\n            main_division: address.region,\r\n            postal_code: address.postcode,\r\n            country: countryId\r\n        };\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/model/address-difference-template-renderer.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['underscore', 'uiClass'], function (_, Component) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @typedef {Object} vertexDifferenceRendererObject\r\n     * @property {vertexDifferenceObject_Message} message\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} vertexDifferenceObject_Message\r\n     * @property {string} text - Informative message to end user\r\n     * @property {vertexDifferenceObject_Difference[]} differences - Array of differences\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} vertexDifferenceObject_Difference\r\n     * @property {string} name - Human readable name of field that has a difference\r\n     * @property {string} value - New value for the field\r\n     */\r\n\r\n    /**\r\n     * @api\r\n     */\r\n    return Component.extend({\r\n        /**\r\n         * @var {string} template - Location of file to render\r\n         */\r\n        template: 'Vertex_AddressValidation/template/validation-result.html',\r\n\r\n        /**\r\n         * @var {*} renderer - Underscore.js template object\r\n         */\r\n        renderer: null,\r\n\r\n        /**\r\n         * @constructor\r\n         * @param {string} template - File to render\r\n         * @returns {*}\r\n         */\r\n        initialize: function (template) {\r\n            if (typeof this.template !== 'undefined') {\r\n                this.template = template;\r\n            }\r\n\r\n            require(['text!' + this.template], function (templateContents) {\r\n                this.renderer = _.template(templateContents);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {vertexDifferenceRendererObject} message\r\n         * @returns {string} HTML\r\n         */\r\n        render: function (message) {\r\n            return this.renderer(message);\r\n        }\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/model/difference-determiner.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['mage/translate'], function ($t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @typedef VertexAddressReadableDifference\r\n     * @property {string} type - Type of difference (used for code)\r\n     * @property {string} name - Human readable name of the item that has changed\r\n     * @property {(string|string[])} value - Human readable value of the item that has changed\r\n     * @property {(string|string[])} rawValue - Script usable value of the item that has changed\r\n     */\r\n\r\n    /**\r\n     * @param {UncleanAddress} uncleanAddress\r\n     * @param {CleanAddress} cleanAddress\r\n     * @returns {boolean}\r\n     */\r\n    function streetAddressesAreDifferent(uncleanAddress, cleanAddress) {\r\n        uncleanAddress.street_address.filter(function (val) {\r\n            // Filter out empty strings\r\n            return val.length > 0;\r\n        });\r\n\r\n        if (uncleanAddress.street_address.length !== cleanAddress.street_address.length) {\r\n            return true;\r\n        }\r\n        for(let index = 0,length = uncleanAddress.street_address.length;index < length;++index) {\r\n            if (uncleanAddress.street_address[index] !== cleanAddress.street_address[index]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param {UncleanAddress} uncleanAddress\r\n     * @param {CleanAddress} cleanAddress\r\n     * @returns {VertexAddressReadableDifference[]}\r\n     */\r\n    return function (uncleanAddress, cleanAddress) {\r\n        const listedDifferences = [];\r\n        if (streetAddressesAreDifferent(uncleanAddress, cleanAddress)) {\r\n            listedDifferences.push({type: 'street', name: $t('Street Address'), value: cleanAddress.street_address, rawValue: cleanAddress.street_address});\r\n        }\r\n        if (uncleanAddress.city !== cleanAddress.city) {\r\n            listedDifferences.push({type: 'city', name: $t('City'), value: cleanAddress.city, rawValue: cleanAddress.city});\r\n        }\r\n        if (uncleanAddress.main_division !== cleanAddress.region_name) {\r\n            listedDifferences.push({type: 'region', name: $t('State/Province'), value: cleanAddress.region_name, rawValue: cleanAddress.region_id});\r\n        }\r\n        if (uncleanAddress.postal_code !== cleanAddress.postal_code) {\r\n            listedDifferences.push({type: 'postcode', name: $t('Zip/Postal Code'), value: cleanAddress.postal_code, rawValue: cleanAddress.postal_code});\r\n        }\r\n        if (uncleanAddress.country !== cleanAddress.country_code) {\r\n            listedDifferences.push({type: 'country', name: $t('Country'), value: cleanAddress.country_name, rawValue: cleanAddress.country_code});\r\n        }\r\n        return listedDifferences;\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/model/url-builder.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var config = window.checkoutConfig || window.vertexAddressValidationConfig || {};\r\n\r\n    return {\r\n        method: 'rest',\r\n        storeCode: config.storeCode,\r\n        version: 'V1',\r\n        serviceUrl: ':method/:storeCode/:version',\r\n\r\n        /**\r\n         * @param {String} url\r\n         * @param {Object} params\r\n         * @return {*}\r\n         */\r\n        createUrl: function (url, params) {\r\n            var completeUrl = this.serviceUrl + url;\r\n            return this.bindParams(completeUrl, params);\r\n        },\r\n\r\n        /**\r\n         * @param {String} url\r\n         * @param {Object} params\r\n         * @return {*}\r\n         */\r\n        bindParams: function (url, params) {\r\n            var urlParts;\r\n\r\n            params.method = this.method;\r\n            params.storeCode = this.storeCode;\r\n            params.version = this.version;\r\n\r\n            urlParts = url.split('/');\r\n            urlParts = urlParts.filter(Boolean);\r\n\r\n            $.each(urlParts, function (key, part) {\r\n                part = part.replace(':', '');\r\n\r\n                if (params[part] !== undefined) {\r\n                    urlParts[key] = params[part];\r\n                }\r\n            });\r\n\r\n            return urlParts.join('/');\r\n        }\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/model/checkout/billing/address-resolver.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Magento_Customer/js/model/address-list',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\r\n], function ($, registry, addressList, addressResolver) {\r\n    'use strict';\r\n\r\n    addressResolver = $.extend({}, addressResolver, {\r\n        updateFields: function (element, value) {\r\n            if (element.name === 'street') {\r\n                const streetInputs = $('.payment-method input[name^=\"street[\"]');\r\n                streetInputs.val('');\r\n                if (typeof value === 'string') {\r\n                    $(streetInputs[0]).val(value);\r\n                } else {\r\n                    for (let index = 0, length = value.length;index < length;++index) {\r\n                        $(streetInputs[index])\r\n                            .val(value[index]);\r\n                    }\r\n                }\r\n                streetInputs.trigger('change').trigger('blur');\r\n            } else {\r\n                $('.payment-method input[name=\"' + element.name + '\"]')\r\n                    .val(value)\r\n                    .trigger('change')\r\n                    .trigger('blur');\r\n            }\r\n        }\r\n    });\r\n    return addressResolver;\r\n});\r\n","Vertex_AddressValidation/js/model/checkout/shipping/address-resolver.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'Magento_Customer/js/model/address-list',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\r\n    'Magento_Checkout/js/action/create-shipping-address',\r\n    'Magento_Checkout/js/checkout-data'\r\n], function ($, registry, addressList, addressResolver, createShippingAddress, checkoutData) {\r\n    'use strict';\r\n\r\n    addressResolver = $.extend({}, addressResolver, {\r\n        checkoutProvider: registry.get('checkoutProvider'),\r\n\r\n        updateFields: function (element, value) {\r\n            var addressData = $.extend({}, this.checkoutProvider.get('shippingAddress'));\r\n\r\n            if (element.name === 'street') {\r\n                // Just updating the addressData element doesn't seem to work on street inputs\r\n                const streetInputs = $('.form-shipping-address input[name^=\"street[\"]');\r\n                streetInputs.val('');\r\n                for(let index = 0, length = addressData[element.name].length;index < length;++index) {\r\n                    addressData[element.name][index] = typeof value[index] !== 'undefined' ? value[index] : '';\r\n                    $(streetInputs[index])\r\n                        .val(addressData[element.name][index]);\r\n                }\r\n            } else {\r\n                addressData[element.name] = value;\r\n            }\r\n\r\n            this.checkoutProvider.set('shippingAddress', addressData);\r\n            this.checkoutProvider.trigger('shippingAddress', addressData);\r\n\r\n            // Update address list containers\r\n            createShippingAddress(addressData);\r\n            checkoutData.setNewCustomerShippingAddress($.extend(true, {}, addressData));\r\n        }\r\n    });\r\n    return addressResolver;\r\n});\r\n","Vertex_AddressValidation/js/model/customer/address-resolver.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    return {\r\n        addressFieldsForValidation: ['city', 'postcode', 'street'],\r\n        responseAddressData: {},\r\n        formAddressData: {},\r\n\r\n        /**\r\n         * Will check if the response is different, same or invalid\r\n         *\r\n         * @param {Object} responseAddressData\r\n         * @param {Object} formAddressData\r\n         * @returns {Boolean|Array}\r\n         */\r\n        resolveAddressDifference: function (responseAddressData, formAddressData) {\r\n            var differences = [],\r\n                valid = [];\r\n\r\n            this.responseAddressData = responseAddressData;\r\n            this.formAddressData = formAddressData;\r\n\r\n            if (this.invalidErrorResponse(responseAddressData)) {\r\n                return [];\r\n            }\r\n\r\n            _.each(this.addressFieldsForValidation, function (v, i) {\r\n                var responseValue, value, name, isComplex,\r\n                    complexValues = [],\r\n                    isDifferent = false;\r\n\r\n                isComplex = _.isObject(formAddressData[v]) || _.isArray(formAddressData[v]);\r\n\r\n                if (responseAddressData[v] !== formAddressData[v]) {\r\n                    if (isComplex) {\r\n                        _.each(formAddressData[v], function (val, index) {\r\n                            if (val && responseAddressData[v][index] && val !== responseAddressData[v][index]) {\r\n                                complexValues[index] = responseAddressData[v][index];\r\n                                isDifferent = true;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (!isDifferent && isComplex) {\r\n                        valid.push(v);\r\n                    }\r\n\r\n                    responseValue = responseAddressData[v];\r\n                    if (complexValues.length) {\r\n                        responseValue = complexValues.join(', ');\r\n                    }\r\n\r\n                    if (!complexValues.length && _.isArray(responseValue) || responseValue === null) {\r\n                        return;\r\n                    }\r\n\r\n                    value = responseValue.substr(0, 1).toUpperCase() + responseValue.substr(1);\r\n                    name = v.substr(0, 1).toUpperCase() + v.substr(1);\r\n                    differences.push({\r\n                        value: value,\r\n                        name: name\r\n                    });\r\n\r\n                    return;\r\n                }\r\n                valid[i] = v;\r\n            });\r\n\r\n            if (valid.length === this.addressFieldsForValidation.length && _.isEmpty(differences)) {\r\n                return true;\r\n            }\r\n            return differences;\r\n        },\r\n\r\n        /**\r\n         * Updates form inputs with the values from the API response\r\n         *\r\n         * @returns {*}\r\n         */\r\n        resolveAddressUpdate: function () {\r\n            var responseAddressData = this.responseAddressData,\r\n                formAddressData = this.formAddressData,\r\n                self = this;\r\n\r\n            _.each(this.addressFieldsForValidation, function (v) {\r\n                var fieldValue = responseAddressData[v],\r\n                    linesObj = {};\r\n\r\n                if (_.isObject(formAddressData[v])) {\r\n                    _.each(formAddressData[v], function (val, i) {\r\n                        if (fieldValue[i]) {\r\n                            linesObj[i] = fieldValue[i];\r\n                            self.updateFields({name: v, key: i}, fieldValue[i]);\r\n\r\n                            return;\r\n                        }\r\n                        linesObj[i] = val;\r\n                    });\r\n                    formAddressData[v] = linesObj;\r\n                    return;\r\n                }\r\n\r\n                formAddressData[v] = fieldValue;\r\n                self.updateFields({name: v}, fieldValue);\r\n            });\r\n\r\n            return formAddressData;\r\n        },\r\n\r\n        /**\r\n         * Update validated fields\r\n         *\r\n         * @param {Object} element\r\n         * @param {String} value\r\n         */\r\n        updateFields: function (element, value) {\r\n            if (element.key !== undefined) {\r\n                $('input[name=\"' + element.name + '[]\"]').eq(element.key).val(value).trigger('change');\r\n            } else {\r\n                $('input[name=\"' + element.name + '\"]').val(value).trigger('change');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Will check if the api response found a address\r\n         *\r\n         * @param {Object} responseData\r\n         * @returns {Boolean}\r\n         */\r\n        invalidErrorResponse: function (responseData) {\r\n            _.each(this.addressFieldsForValidation, function (v) {\r\n                if (_.isArray(responseData[v]) && responseData[v][0] === '') {\r\n                    return true;\r\n                }\r\n\r\n                if (responseData[v] === null) {\r\n                    return true;\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/view/validation-message.js":"define([\r\n    'ko',\r\n    'uiComponent',\r\n    'Vertex_AddressValidation/js/model/address-difference-template-renderer',\r\n    'Vertex_AddressValidation/js/validation-messages'\r\n], function (ko, Component, differenceRenderer, validationMessages) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Vertex_AddressValidation/validation-message',\r\n            cleanseAddressTemplate: 'Vertex_AddressValidation/template/validation-result.html',\r\n            showSuccessMessage: false,\r\n            message: {},\r\n            address: null,\r\n            hasMessage: false,\r\n            tracks: {\r\n                showSuccessMessage: true,\r\n                message: true\r\n            }\r\n        },\r\n\r\n        templateRenderer: null,\r\n\r\n        initialize: function () {\r\n            this._super();\r\n            this.templateRenderer = new differenceRenderer(this.cleanseAddressTemplate);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Model} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this.address = ko.observable();\r\n\r\n            this.hasMessage = ko.pureComputed(function() {\r\n                return this._objectHasEntries(this.message);\r\n            }.bind(this));\r\n\r\n            this.renderedTemplate = ko.pureComputed(function () {\r\n                const templateVariables = {\r\n                    message: {\r\n                        text: this.message.text,\r\n                        differences: this.message.differences\r\n                    },\r\n                    address: this.address()\r\n                };\r\n\r\n                for (let index = 0,length = this.message.differences.length;index < length;++index) {\r\n                    if (this.message.differences[index].type === 'street') {\r\n                        templateVariables.warning = validationMessages.streetAddressUpdateWarning;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                return this.templateRenderer.render(templateVariables);\r\n            }.bind(this));\r\n\r\n            return this._super();\r\n        },\r\n\r\n\r\n        /**\r\n         * Sets a success message\r\n         *\r\n         * @param {String} text\r\n         * @param {Object} differences\r\n         */\r\n        setSuccessMessage: function (text, differences) {\r\n            this.setMessage(0, 'message success', text, differences || []);\r\n        },\r\n\r\n        /**\r\n         * Sets a warning message\r\n         *\r\n         * @param {String} text\r\n         * @param {Object} differences\r\n         * @param {CleanAddress} address\r\n         */\r\n        setWarningMessage: function (text, differences, address) {\r\n            this.address(address || {});\r\n            this.setMessage(1, 'message warning', text, differences || []);\r\n        },\r\n\r\n        /**\r\n         * Sets a message\r\n         *\r\n         * @param {Integer} type\r\n         * @param {String} cssClass\r\n         * @param {String} text\r\n         * @param {Object} differences\r\n         */\r\n        setMessage: function (type, cssClass, text, differences) {\r\n            this.message = {\r\n                type: type,\r\n                text: text,\r\n                class: cssClass || '',\r\n                differences: differences || []\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Returns if message exists\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasMessage: function () {\r\n            return ko.computed(function () {\r\n                return this._objectHasEntries(this.message);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Returns message\r\n         *\r\n         * {Object}\r\n         */\r\n        clear: function () {\r\n            this.message = {};\r\n        },\r\n\r\n        /**\r\n         * Return whether or not the object has any entries\r\n         *\r\n         * Object.entries is not supported by IE11 or Opera Mini.\r\n         * Writing a quick method to serve the same purpose was easier than\r\n         * importing a shim.\r\n         *\r\n         * @param {Object} object\r\n         * @returns {boolean}\r\n         * @private\r\n         */\r\n        _objectHasEntries: function(object) {\r\n            if (typeof Object.entries !== 'undefined') {\r\n                return Object.entries(object).length !== 0;\r\n            }\r\n            for (let key in object) {\r\n                if (object.hasOwnProperty(key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        },\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/view/checkout/billing/address-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'Vertex_AddressValidation/js/view/checkout/shipping/address-validation',\r\n    'Vertex_AddressValidation/js/model/checkout/billing/address-resolver',\r\n    'Magento_Checkout/js/checkout-data',\r\n    'uiRegistry'\r\n], function (\r\n    Component,\r\n    addressResolver,\r\n    checkoutData,\r\n    registry\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        resolver: addressResolver,\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getFormData: function () {\r\n            const formData = checkoutData.getBillingAddressFromData(),\r\n                checkoutProvider = registry.get('checkoutProvider');\r\n\r\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\r\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\r\n                    return obj.value === formData.region_id;\r\n                });\r\n                if (region && region.label) {\r\n                    formData.region = region.label;\r\n                }\r\n            }\r\n\r\n            return formData;\r\n        }\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/view/checkout/shipping/address-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'Vertex_AddressValidation/js/action/address-validation-request',\r\n    'Vertex_AddressValidation/js/model/checkout/shipping/address-resolver',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/checkout-data',\r\n    'Magento_Checkout/js/model/error-processor',\r\n    'Magento_Ui/js/model/messageList',\r\n    'Vertex_AddressValidation/js/validation-messages',\r\n    'Vertex_AddressValidation/js/action/convert-quote-address',\r\n    'Vertex_AddressValidation/js/action/build-quote-address',\r\n    'Vertex_AddressValidation/js/model/difference-determiner'\r\n], function (\r\n    $,\r\n    registry,\r\n    Component,\r\n    addressValidationRequest,\r\n    addressResolver,\r\n    fullScreenLoader,\r\n    checkoutData,\r\n    errorProcessor,\r\n    messageContainer,\r\n    validationMessages,\r\n    convertQuoteAddress,\r\n    buildQuoteAddress,\r\n    differenceDeterminer\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        validationConfig: window.checkoutConfig.vertexAddressValidationConfig || {},\r\n        resolver: addressResolver,\r\n        isAddressValid: false,\r\n        message: null,\r\n        defaults: {\r\n            listens: {\r\n                addressData: 'addressUpdated'\r\n            },\r\n            imports: {\r\n                addressData: '${ $.provider }:shippingAddress'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reset validation after address update\r\n         */\r\n        addressUpdated: function () {\r\n            this.isAddressValid = false;\r\n            this.updateAddress = false;\r\n\r\n            if (this.message) {\r\n                this.message.clear();\r\n                this.message.showSuccessMessage = false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.message = registry.get(this.parentName);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getFormData: function () {\r\n            const formData = checkoutData.getShippingAddressFromData(),\r\n                checkoutProvider = registry.get('checkoutProvider');\r\n\r\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\r\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\r\n                    return obj.value === formData.region_id;\r\n                });\r\n                if (region && region.label) {\r\n                    formData.region = region.label;\r\n                }\r\n            }\r\n\r\n            return formData;\r\n        },\r\n\r\n        /**\r\n         * Triggers a request to the address validation builder and adds the response\r\n         */\r\n        addressValidation: function () {\r\n            var deferred = $.Deferred();\r\n            this.isAddressValid = false;\r\n            fullScreenLoader.startLoader();\r\n\r\n            addressValidationRequest(convertQuoteAddress(this.getFormData()))\r\n                .done(function (response) {\r\n                    this.isAddressValid = true;\r\n                    if (this.handleAddressDifferenceResponse(response) === true) {\r\n                        deferred.resolve();\r\n                    }\r\n                }.bind(this)).fail(function (response) {\r\n                errorProcessor.process(response, messageContainer);\r\n            }).always(function () {\r\n                fullScreenLoader.stopLoader();\r\n            });\r\n\r\n            return deferred;\r\n        },\r\n\r\n        /**\r\n         * Get the message with the differences\r\n         *\r\n         * @param {?CleanAddress} response\r\n         */\r\n        handleAddressDifferenceResponse: function (response) {\r\n            if (response === null || !Object.keys(response).length) {\r\n                this.message.setWarningMessage(validationMessages.noAddressFound);\r\n                return;\r\n            }\r\n\r\n            this.resolver.responseAddressData = buildQuoteAddress(response);\r\n\r\n            const differences = differenceDeterminer(convertQuoteAddress(this.getFormData()), response),\r\n                showSuccessMessage = this.validationConfig.showValidationSuccessMessage || false;\r\n\r\n            if (differences.length === 0 && showSuccessMessage) {\r\n                this.message.setSuccessMessage(validationMessages.noChangesNecessary);\r\n            } else if (differences.length > 0) {\r\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the update message\r\n         */\r\n        updateVertexAddress: function () {\r\n            this.resolver.resolveAddressUpdate();\r\n\r\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\r\n            this.isAddressValid = true;\r\n        }\r\n    });\r\n});\r\n","Vertex_AddressValidation/js/view/customer/address-form.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\r\n], function ($, ko, _, addressResolver) {\r\n    'use strict';\r\n\r\n    const config = window.vertexAddressValidationConfig || {};\r\n\r\n    return {\r\n        form: {},\r\n        button: {},\r\n        saveAsIsButton: {},\r\n        formUpdated: ko.observable(false),\r\n        isSaveAsIs: false,\r\n\r\n        /**\r\n         * Initialize address form object\r\n         *\r\n         * @param {Object} form\r\n         * @param {Object} button\r\n         */\r\n        initialize: function (form, button) {\r\n            var self = this,\r\n                fieldsToValidate = _.clone(addressResolver.addressFieldsForValidation);\r\n\r\n            this.form = form || {};\r\n            this.button = button || {};\r\n\r\n            fieldsToValidate.push('country_id');\r\n            fieldsToValidate.forEach(function (name) {\r\n                self.getFieldByName(name).on('input', function () {\r\n                    self.formUpdated(true);\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return jQuery object by name\r\n         *\r\n         * @param {String} name\r\n         */\r\n        getFieldByName: function (name) {\r\n            return this.form.find('[name=%s]'.replace('%s', name));\r\n        },\r\n\r\n        /**\r\n         * Rename form button value\r\n         *\r\n         * @param {String} value\r\n         */\r\n        renameSubmitButton: function (value, button) {\r\n            var button = button || this.button;\r\n            var buttonValue = $(button.html()).html(value);\r\n            button.html(buttonValue).attr('title', value);\r\n        },\r\n\r\n        /**\r\n         * Show 'Save As Is' button\r\n         */\r\n        showSaveAsIsButton: function () {\r\n            if (!_.isEmpty(this.saveAsIsButton)) {\r\n                this.saveAsIsButton.show();\r\n                return;\r\n            }\r\n\r\n            this.saveAsIsButton = $('<button/>', {\r\n                text: config.saveAsIsButtonText || '',\r\n                class: 'action save vertex-secondary',\r\n                'data-action': 'save-as-is-address',\r\n                click: function () {\r\n                    this.isSaveAsIs = true;\r\n                }.bind(this)\r\n            });\r\n\r\n            this.saveAsIsButton.insertAfter(this.button);\r\n        },\r\n\r\n        /**\r\n         * Hide 'Save As Is' button\r\n         */\r\n        hideSaveAsIsButton: function () {\r\n            if (!_.isEmpty(this.saveAsIsButton)) {\r\n                this.saveAsIsButton.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable form submit buttons\r\n         */\r\n        disableSubmitButtons: function () {\r\n            this.button.attr('disabled', true);\r\n\r\n            if (!_.isEmpty(this.saveAsIsButton)) {\r\n                this.saveAsIsButton.attr('disabled', true);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieves form address and converts it to customer address\r\n         *\r\n         * @returns {UncleanAddress}\r\n         */\r\n        getAddress: function () {\r\n            const address = {},\r\n                city = this.form.find('input[name=\"city\"]').val(),\r\n                streetAddress = this.form.find('input[name=\"street[]\"]')\r\n                    .map(function (index, element) {\r\n                        return $(element).val();\r\n                    })\r\n                    .toArray()\r\n                    .filter(function (value) {\r\n                        return value.length > 0;\r\n                    }),\r\n                mainDivisionValue = this.form.find('select[name=\"region_id\"]').val(),\r\n                mainDivision = this.form.find('select[name=\"region_id\"] option[value=\"' + mainDivisionValue + '\"]').text(),\r\n                postalCode = this.form.find('input[name=\"postcode\"]').val(),\r\n                country = this.form.find('select[name=\"country_id\"]').val();\r\n\r\n            address.street_address = streetAddress;\r\n            if (city.length > 0) {\r\n                address.city = city;\r\n            }\r\n            if (mainDivisionValue.length > 0) {\r\n                address.main_division = mainDivision;\r\n            }\r\n            if (postalCode.length > 0) {\r\n                address.postal_code = postalCode;\r\n            }\r\n            address.country = country;\r\n\r\n            return address;\r\n        },\r\n\r\n        updateAddress: function (differences) {\r\n            for (let index = 0, length = differences.length;index < length;++index) {\r\n                let difference = differences[index];\r\n                switch (difference.type) {\r\n                    case 'street':\r\n                        this.form.find('input[name=\"street[]\"]').val('');\r\n                        for (\r\n                            let streetIndex = 0, streetLength = difference.rawValue.length;\r\n                            streetIndex < streetLength;\r\n                            ++streetIndex\r\n                        ) {\r\n                            $(this.form.find('input[name=\"street[]\"]')[streetIndex])\r\n                                .val(difference.rawValue[streetIndex])\r\n                                .trigger('change')\r\n                                .trigger('blur');\r\n                        }\r\n                        break;\r\n                    case 'city':\r\n                        this.form.find('input[name=\"city\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                    case 'region':\r\n                        this.form.find('select[name=\"region_id\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                    case 'postcode':\r\n                        this.form.find('input[name=\"postcode\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                    case 'country':\r\n                        this.form.find('select[name=\"country_id\"]')\r\n                            .val(difference.rawValue)\r\n                            .trigger('change')\r\n                            .trigger('blur');\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Start loader\r\n         */\r\n        startLoader: function () {\r\n            $('body').trigger('processStart');\r\n        },\r\n\r\n        /**\r\n         * Stop loader\r\n         */\r\n        stopLoader: function () {\r\n            $('body').trigger('processStop');\r\n        }\r\n    };\r\n});\r\n","Vertex_AddressValidation/js/view/customer/address-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'Vertex_AddressValidation/js/validation-messages',\r\n    'Vertex_AddressValidation/js/action/address-validation-request',\r\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\r\n    'Vertex_AddressValidation/js/view/validation-message',\r\n    'Vertex_AddressValidation/js/view/customer/address-form',\r\n    'Vertex_AddressValidation/js/model/difference-determiner'\r\n], function (\r\n    $,\r\n    ko,\r\n    registry,\r\n    Component,\r\n    validationMessages,\r\n    addressValidationRequest,\r\n    addressResolver,\r\n    message,\r\n    addressForm,\r\n    differenceDeterminer\r\n) {\r\n    'use strict';\r\n\r\n    var config = window.vertexAddressValidationConfig || {};\r\n\r\n    return Component.extend({\r\n        message: null,\r\n        formAddressData: null,\r\n        isAddressValid: false,\r\n        updateAddress: false,\r\n        addressResolver: addressResolver,\r\n        correctAddress: null,\r\n\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.message = registry.get('addressValidationMessage');\r\n            addressForm.formUpdated.extend({notify: 'always'}).subscribe(this.addressUpdated.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset validation after address update\r\n         */\r\n        addressUpdated: function () {\r\n            addressForm.renameSubmitButton(config.validateButtonText);\r\n            addressForm.hideSaveAsIsButton();\r\n            this.isAddressValid = false;\r\n            this.updateAddress = false;\r\n            this.message.clear();\r\n            this.message.showSuccessMessage = false;\r\n        },\r\n\r\n        /**\r\n         * Triggers a request to the address validation builder and adds the response\r\n         *\r\n         * @param {Object} formAddressData\r\n         * @returns {Object}\r\n         */\r\n        addressValidation: function (formAddressData) {\r\n            var deferred = $.Deferred();\r\n\r\n            if (this.isAddressValid || !this.validateCountry()) {\r\n                if (this.updateAddress) {\r\n                    this.updateVertexAddress();\r\n                }\r\n                return deferred.resolve();\r\n            }\r\n\r\n            this.formAddressData = formAddressData;\r\n            addressForm.startLoader();\r\n\r\n            addressValidationRequest(formAddressData)\r\n                .done(function (response) {\r\n                    this.isAddressValid = true;\r\n                    this.correctAddress = response;\r\n                    if (this.handleAddressDifferenceResponse(response) === true) {\r\n                        deferred.resolve();\r\n                    } else {\r\n                        addressForm.stopLoader();\r\n                    }\r\n                }.bind(this)).fail(function () {\r\n                deferred.reject();\r\n            }).fail(function () {\r\n                addressForm.stopLoader();\r\n            });\r\n\r\n            return deferred;\r\n        },\r\n\r\n        /**\r\n         * Check if country is used in validation\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        validateCountry: function () {\r\n            var countryCode = addressForm.getFieldByName('country_id').val();\r\n\r\n            return countryCode !== undefined\r\n                ? config.countryValidation.includes(countryCode)\r\n                : true;\r\n        },\r\n\r\n        /**\r\n         * Get the message with the differences\r\n         *\r\n         * @param {?CleanAddress} response\r\n         */\r\n        handleAddressDifferenceResponse: function (response) {\r\n            if (response === null || !Object.keys(response).length) {\r\n                addressForm.renameSubmitButton(config.saveAsIsButtonText);\r\n                this.message.setWarningMessage(validationMessages.noAddressFound);\r\n                return;\r\n            }\r\n\r\n            const differences = differenceDeterminer(this.formAddressData, response);\r\n\r\n            if (differences.length === 0 && config.showSuccessMessage) {\r\n                this.message.showSuccessMessage = true;\r\n                return true;\r\n            } else if (differences.length > 0) {\r\n                this.updateAddress = true;\r\n                addressForm.renameSubmitButton(config.updateButtonText);\r\n                addressForm.showSaveAsIsButton();\r\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the update message\r\n         */\r\n        updateVertexAddress: function () {\r\n            addressForm.updateAddress(differenceDeterminer(this.formAddressData, this.correctAddress));\r\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\r\n\r\n            if (config.showSuccessMessage) {\r\n                this.message.showSuccessMessage = true;\r\n            }\r\n        }\r\n    });\r\n});\r\n","Vertex_Tax/js/form/depend-field-checker.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Makes sure a value is set if its depending field is also set.\r\n         *\r\n         * @param dependField\r\n         * @param valueCheck\r\n         * @returns {boolean}\r\n         */\r\n        validateValues : function (dependField, valueCheck) {\r\n            if ($(dependField).length) {\r\n                let dependValue = $(dependField).val();\r\n\r\n                return !(dependValue && !valueCheck);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    };\r\n});\r\n","Vertex_Tax/js/form/element/custom-option-flex-field-select.js":"/*\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(['underscore', 'Magento_Ui/js/form/element/select'], function (_, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        /**\r\n         * Overwrites the parent's filter to allow for checking if a value is\r\n         * in an array and for allowing the value of \"unmapped\" through all\r\n         * filters\r\n         *\r\n         * @param {String} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var source = this.initialOptions,\r\n                result;\r\n\r\n            field = field || this.filterBy.field;\r\n\r\n            result = _.filter(source, function (item) {\r\n                return Array.isArray(item[field]) && item[field].includes(value) ||\r\n                    item[field] === value ||\r\n                    item.value === '' ||\r\n                    item.value === 'unmapped';\r\n            });\r\n\r\n            this.setOptions(result);\r\n        }\r\n    });\r\n});\r\n","Vertex_Tax/js/model/customer-country-validation.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Vertex_Tax/js/form/depend-field-checker',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($, dependFieldChecker) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Validates if customer added a VAT number, then selecting a Country is required.\r\n     */\r\n    return function (config) {\r\n        $.validator.addMethod(\r\n            \"vertex-customer-country\",\r\n            function (value, element, dependField) {\r\n                return dependFieldChecker.validateValues(dependField, value);\r\n            },\r\n            $.mage.__(\"Please select a Country.\")\r\n        );\r\n    }\r\n});\r\n","Vertex_Tax/js/model/set-checkout-messages.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine(\r\n    [\r\n        'underscore',\r\n        'Magento_Customer/js/customer-data',\r\n        'Magento_Ui/js/model/messageList'\r\n    ],\r\n    function (_, customerData, messageContainer) {\r\n        'use strict';\r\n\r\n        /**\r\n         * A utility for observing message updates in session storage. It is designed to subscribe to\r\n         * customer data updates and forward messages to the appropriate messageList model.\r\n         */\r\n        return function () {\r\n            var typeMap = {\r\n                    'success': 'addSuccessMessage',\r\n                    'warning': 'addErrorMessage',\r\n                    'error': 'addErrorMessage'\r\n                },\r\n\r\n                /**\r\n                 * Observe message section data changes and forward to the error processor.\r\n                 * @param {Object} data - The observable payload.\r\n                 * @return void\r\n                 */\r\n                messageSubscriptionCallback = function (data) {\r\n                    if ('messages' in data) {\r\n                        _.each(data.messages, function (message) {\r\n                            if (message.type in typeMap) {\r\n                                messageContainer[typeMap[message.type]]({\r\n                                    'message': message.text\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n            customerData.get('messages').subscribe(messageSubscriptionCallback);\r\n        };\r\n    }\r\n);\r\n","Vertex_Tax/js/view/checkout/summary/tax-messages.js":"/**\r\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\r\n * @author     Mediotype                     https://www.mediotype.com/\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/totals'\r\n], function (_, ko, Component, totals) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            messages: []\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.subscribeTotals();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe('messages');\r\n            this.getMessages();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieve messages\r\n         */\r\n        getMessages: function () {\r\n            var taxSegment = totals.getSegment('tax');\r\n\r\n            this.messages([]);\r\n\r\n            if (taxSegment && taxSegment['extension_attributes']) {\r\n                this.messages(taxSegment['extension_attributes']['vertex_tax_calculation_messages']);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Subscribe totals observer\r\n         */\r\n        subscribeTotals: function () {\r\n            var self = this;\r\n\r\n            totals.totals.subscribe(\r\n                function () {\r\n                    self.getMessages();\r\n                },\r\n                null,\r\n                'change'\r\n            );\r\n        }\r\n    });\r\n});\r\n"}
}});
