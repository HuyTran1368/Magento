require.config({"config": {
        "jsbuild":{"Magento_Paypal/js/rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiClass',\r\n    'Magento_Ui/js/modal/alert'\r\n], function (Class, alert) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Check is solution enabled\r\n     *\r\n     * @param {*} solution\r\n     * @param {String} enabler\r\n     * @returns {Boolean}\r\n     */\r\n    var isSolutionEnabled = function (solution, enabler) {\r\n            return solution.find(enabler).val() === '1';\r\n        },\r\n\r\n        /**\r\n         * Check is solution has related solutions enabled\r\n         *\r\n         * @param {Object} data\r\n         * @returns {Boolean}\r\n         */\r\n        hasRelationsEnabled = function (data) {\r\n            var name;\r\n\r\n            for (name in data.argument) {\r\n                if (\r\n                    data.solutionsElements[name] &&\r\n                    isSolutionEnabled(data.solutionsElements[name], data.enableButton)\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set solution select-enabler to certain option\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionSelectEnabled = function (solution, enabler, enabled) {\r\n            enabled = !(enabled || typeof enabled === 'undefined') ? '0' : '1';\r\n\r\n            solution.find(enabler + ' option[value=' + enabled + ']')\r\n            .prop('selected', true);\r\n        },\r\n\r\n        /**\r\n         * Set solution property 'disabled' value\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionPropEnabled = function (solution, enabler, enabled) {\r\n            enabled = !(enabled || typeof enabled === 'undefined');\r\n\r\n            solution.find(enabler).prop('disabled', enabled);\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution select-enabler label\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionMarkEnabled = function (solution, enabler, enabled) {\r\n            var solutionEnabler = solution.find('label[for=\"' + solution.find(enabler).attr('id') + '\"]');\r\n\r\n            enabled || typeof enabled === 'undefined' ?\r\n                solutionEnabler.addClass('enabled') :\r\n                solutionEnabler.removeClass('enabled');\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution section label\r\n         *\r\n         * @param {*} solution\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionSectionMarkEnabled = function (solution, enabled) {\r\n            var solutionSection = solution.find('.section-config');\r\n\r\n            enabled || typeof enabled === 'undefined' ?\r\n                solutionSection.addClass('enabled') :\r\n                solutionSection.removeClass('enabled');\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution section inner labels\r\n         *\r\n         * @param {*} solution\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionLabelsMarkEnabled = function (solution, enabled) {\r\n            var solutionLabels = solution.find('label.enabled');\r\n\r\n            enabled || typeof enabled === 'undefined' ?\r\n                solutionLabels.addClass('enabled') :\r\n                solutionLabels.removeClass('enabled');\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution usedefault checkbox\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} checked\r\n         */\r\n        setSolutionUsedefaultEnabled = function (solution, enabler, checked) {\r\n            checked = !(checked || typeof checked === 'undefined');\r\n\r\n            solution.find('input[id=\"' + solution.find(enabler).attr('id') + '_inherit\"]')\r\n            .prop('checked', checked);\r\n        },\r\n\r\n        /**\r\n         * Set solution as disabled\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         */\r\n        disableSolution = function (solution, enabler) {\r\n            setSolutionUsedefaultEnabled(solution, enabler);\r\n            setSolutionMarkEnabled(solution, enabler, false);\r\n            setSolutionSelectEnabled(solution, enabler, false);\r\n            setSolutionPropEnabled(solution, enabler, false);\r\n        },\r\n\r\n        /**\r\n         * Set solution as enabled\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         */\r\n        enableSolution = function (solution, enabler) {\r\n            setSolutionUsedefaultEnabled(solution, enabler);\r\n            setSolutionPropEnabled(solution, enabler);\r\n            setSolutionSelectEnabled(solution, enabler);\r\n            setSolutionMarkEnabled(solution, enabler);\r\n        },\r\n\r\n        /**\r\n         * Lock/unlock solution configuration button\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} buttonConfiguration\r\n         * @param {Boolean} unlock\r\n         */\r\n        setSolutionConfigurationUnlock = function (solution, buttonConfiguration, unlock) {\r\n            var solutionConfiguration = solution.find(buttonConfiguration);\r\n\r\n            unlock || typeof unlock === 'undefined' ?\r\n                solutionConfiguration.removeClass('disabled').removeAttr('disabled') :\r\n                solutionConfiguration.addClass('disabled').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Forward solution select-enabler changes\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         */\r\n        forwardSolutionChange = function (solution, enabler) {\r\n            solution.find(enabler).change();\r\n        },\r\n\r\n        /**\r\n         * Show/hide dependent fields\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} identifier\r\n         * @param {Boolean} show\r\n         */\r\n        showDependsField = function (solution, identifier, show) {\r\n            show = show || typeof show === 'undefined';\r\n\r\n            solution.find(identifier).toggle(show);\r\n            solution.find(identifier).closest('tr').toggle(show);\r\n            solution.find(identifier).attr('disabled', !show);\r\n        };\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            /**\r\n             * Payment conflicts checker\r\n             */\r\n            executed: false\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        simpleDisable: function ($target, $owner, data) {\r\n            setSolutionSelectEnabled($target, data.enableButton, false);\r\n            setSolutionLabelsMarkEnabled($target, false);\r\n            setSolutionSectionMarkEnabled($target, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         */\r\n        simpleMarkEnable: function ($target) {\r\n            setSolutionSectionMarkEnabled($target);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        disable: function ($target, $owner, data) {\r\n            this.simpleDisable($target, $owner, data);\r\n            forwardSolutionChange($target, data.enableButton);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressDisable: function ($target, $owner, data) {\r\n            setSolutionSelectEnabled($target, data.enableButton, false);\r\n            setSolutionLabelsMarkEnabled($target, false);\r\n            forwardSolutionChange($target, data.enableButton);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressLockConfiguration: function ($target, $owner, data) {\r\n            setSolutionConfigurationUnlock($target, data.buttonConfiguration, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressLockConfigurationConditional: function ($target, $owner, data) {\r\n            if (\r\n                !isSolutionEnabled($target, data.enableInContextPayPal) &&\r\n                hasRelationsEnabled(data)\r\n            ) {\r\n                this.paypalExpressLockConfiguration($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressMarkDisable: function ($target, $owner, data) {\r\n            if (!hasRelationsEnabled(data)) {\r\n                this.simpleDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressUnlockConfiguration: function ($target, $owner, data) {\r\n            if (!hasRelationsEnabled(data)) {\r\n                setSolutionConfigurationUnlock($target, data.buttonConfiguration);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalBmlDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableBmlPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalBmlDisableConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                this.paypalBmlDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalBmlEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableBmlPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressDisableConditional: function ($target, $owner, data) {\r\n            if (\r\n                !isSolutionEnabled($target, data.enableButton) ||\r\n                hasRelationsEnabled(data)\r\n            ) {\r\n                this.payflowExpressDisable($target, $owner, data);\r\n                forwardSolutionChange($target, data.enableExpress);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableExpress);\r\n            forwardSolutionChange($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressEnableConditional: function ($target, $owner, data) {\r\n            if (hasRelationsEnabled(data)) {\r\n                setSolutionPropEnabled($target, data.enableExpress, false);\r\n                setSolutionSelectEnabled($target, data.enableExpress);\r\n                setSolutionMarkEnabled($target, data.enableExpress);\r\n            } else {\r\n                disableSolution($target, data.enableExpress);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressLockConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                setSolutionPropEnabled($target, data.enableExpress, false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressUsedefaultDisable: function ($target, $owner, data) {\r\n            setSolutionUsedefaultEnabled($target, data.enableExpress, false);\r\n            this.payflowExpressEnable($target, $owner, data);\r\n            forwardSolutionChange($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressUsedefaultEnable: function ($target, $owner, data) {\r\n            setSolutionUsedefaultEnabled($target, data.enableExpress);\r\n            this.payflowExpressDisable($target, $owner, data);\r\n            forwardSolutionChange($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableBml);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlDisableConditional: function ($target, $owner, data) {\r\n            if (\r\n                !isSolutionEnabled($target, data.enableButton) ||\r\n                hasRelationsEnabled(data)\r\n            ) {\r\n                this.payflowBmlDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlDisableConditionalExpress: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableExpress)) {\r\n                this.payflowBmlDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableBml);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlEnableConditional: function ($target, $owner, data) {\r\n            if (hasRelationsEnabled(data)) {\r\n                setSolutionPropEnabled($target, data.enableBml, false);\r\n                setSolutionSelectEnabled($target, data.enableBml);\r\n                setSolutionMarkEnabled($target, data.enableBml);\r\n            } else {\r\n                disableSolution($target, data.enableBml);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlLockConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                setSolutionPropEnabled($target, data.enableBml, false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableInContextPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableInContextPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextShowMerchantId: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsMerchantId);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextHideMerchantId: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsMerchantId, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowShowSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlSortOrder);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowHideSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlSortOrder, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalShowSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlApiSortOrder);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalHideSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlApiSortOrder, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextActivate: function ($target, $owner, data) {\r\n            setSolutionMarkEnabled($target, data.enableInContextPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextDeactivate: function ($target, $owner, data) {\r\n            setSolutionMarkEnabled($target, data.enableInContextPayPal, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextDisableConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                this.inContextDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        conflict: function ($target, $owner, data) {\r\n            var newLine = String.fromCharCode(10, 13);\r\n\r\n            if (\r\n                isSolutionEnabled($owner, data.enableButton) &&\r\n                hasRelationsEnabled(data) &&\r\n                !this.executed\r\n            ) {\r\n                this.executed = true;\r\n                alert({\r\n                    content: 'The following error(s) occurred:' +\r\n                    newLine +\r\n                    'Some PayPal solutions conflict.' +\r\n                    newLine +\r\n                    'Please re-enable the previously enabled payment solutions.'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        removeCreditOption: function ($target, $owner, data) {\r\n            if ($target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').length > 0) {\r\n                $target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').remove();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        addCreditOption: function ($target, $owner, data) {\r\n            if ($target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').length === 0) {\r\n                $target.find(data.dependsButtonLabel).append('<option value=\"credit\">Credit</option>');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        removeCreditOptionConditional: function ($target, $owner, data) {\r\n            if ($target.find(data.dependsDisableFundingOptions + ' option[value=\"CREDIT\"]').length === 0 ||\r\n                $target.find(data.dependsDisableFundingOptions + ' option[value=\"CREDIT\"]:selected').length > 0\r\n            ) {\r\n                this.removeCreditOption($target, $owner, data);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/solution.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiClass',\r\n    'Magento_Paypal/js/rule',\r\n    'mageUtils',\r\n    'underscore'\r\n], function ($, Class, Rule, utils, _) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n\r\n            /**\r\n             * The event corresponding to the state change\r\n             */\r\n            systemEvent: 'change',\r\n\r\n            /**\r\n             * The rules applied after the page is loaded\r\n             */\r\n            afterLoadRules: [],\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the payment method (data attribute)\r\n             */\r\n            enableButton:   '[data-enable=\"payment\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the Payflow Express (data attribute)\r\n             */\r\n            enableExpress:  '[data-enable=\"express\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the\r\n             * PayPal Express In-Context Checkout Experience (data attribute)\r\n             */\r\n            enableInContextPayPal: '[data-enable=\"in-context-api\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the Payflow Bml (data attribute)\r\n             */\r\n            enableBml:      '[data-enable=\"bml\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the PayPal Bml (data attribute)\r\n             */\r\n            enableBmlPayPal:      '[data-enable=\"bml-api\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the PayPal Merchant Id (data attribute)\r\n             */\r\n            dependsMerchantId:  '[data-enable=\"merchant-id\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the Payflow Bml Sort Order (data attribute)\r\n             */\r\n            dependsBmlSortOrder:    '[data-enable=\"bml-sort-order\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the PayPal Bml Sort Order (data attribute)\r\n             */\r\n            dependsBmlApiSortOrder:    '[data-enable=\"bml-api-sort-order\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the\r\n             * button Label credit option (data attribute)\r\n             */\r\n            dependsButtonLabel: '[data-enable=\"button-label\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the\r\n             * button Label credit option on load (data attribute)\r\n             */\r\n            dependsDisableFundingOptions: '[data-enable=\"disable-funding-options\"]',\r\n\r\n            /**\r\n             * Templates element selectors\r\n             */\r\n            templates: {\r\n                elementSelector: 'div.section-config tr[id$=\"${ $.identifier }\"]:first'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} identifier\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function (config, identifier) {\r\n            this.initConfig(config);\r\n            this.$self = this.createElement(identifier);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialization events\r\n         *\r\n         * @returns {exports.initEvents}\r\n         */\r\n        initEvents: function () {\r\n            _.each(this.config.events, function (elementEvents, selector) {\r\n\r\n                var solution = this,\r\n                    selectorButton = solution.$self.find(selector),\r\n                    $self = solution.$self,\r\n                    events = elementEvents;\r\n\r\n                selectorButton.on(solution.systemEvent, function () {\r\n                    _.each(events, function (elementEvent, name) {\r\n\r\n                        var predicate = elementEvent.predicate,\r\n                            result = true,\r\n\r\n                            /**\r\n                             * @param {Function} functionPredicate\r\n                             */\r\n                            predicateCallback = function (functionPredicate) {\r\n                                result = functionPredicate(solution, predicate.message, predicate.argument);\r\n\r\n                                if (result) {\r\n                                    $self.trigger(name);\r\n                                } else {\r\n                                    $self.trigger(predicate.event);\r\n                                }\r\n                            };\r\n\r\n                        if (solution.getValue($(this)) === elementEvent.value ||\r\n                            $(this).prop('multiple') && solution.checkMultiselectValue($(this), elementEvent)\r\n                        ) {\r\n                            if (predicate.name) {\r\n                                require([\r\n                                    'Magento_Paypal/js/predicate/' + predicate.name\r\n                                ], predicateCallback);\r\n                            } else {\r\n                                $self.trigger(name);\r\n                            }\r\n                        }\r\n                    }, this);\r\n                });\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} $element\r\n         * @returns {*}\r\n         */\r\n        getValue: function ($element) {\r\n            if ($element.is(':checkbox')) {\r\n                return $element.prop('checked') ? '1' : '0';\r\n            }\r\n\r\n            return $element.val();\r\n        },\r\n\r\n        /**\r\n         * Check multiselect value based on include value\r\n         *\r\n         * @param {Object} $element\r\n         * @param {Object} elementEvent\r\n         * @returns {Boolean}\r\n         */\r\n        checkMultiselectValue: function ($element, elementEvent) {\r\n            var isValueSelected = $.inArray(elementEvent.value, $element.val()) >= 0;\r\n\r\n            if (elementEvent.include) {\r\n                isValueSelected = (isValueSelected ? 'true' : 'false') === elementEvent.include;\r\n            }\r\n\r\n            return isValueSelected;\r\n        },\r\n\r\n        /**\r\n         * Adding event listeners\r\n         *\r\n         * @returns {exports.addListeners}\r\n         */\r\n        addListeners: function () {\r\n\r\n            _.each(this.config.relations, function (rules, targetName) {\r\n\r\n                var $target = this.createElement(targetName);\r\n\r\n                _.each(rules, function (instances, instanceName) {\r\n\r\n                    _.each(instances, function (instance) {\r\n                        var handler = new Rule({\r\n                            name: instanceName,\r\n                            $target: $target,\r\n                            $owner: this.$self,\r\n                            data: {\r\n                                buttonConfiguration: this.buttonConfiguration,\r\n                                enableButton: this.enableButton,\r\n                                enableExpress: this.enableExpress,\r\n                                enableInContextPayPal: this.enableInContextPayPal,\r\n                                enableBml: this.enableBml,\r\n                                enableBmlPayPal: this.enableBmlPayPal,\r\n                                dependsMerchantId: this.dependsMerchantId,\r\n                                dependsBmlSortOrder: this.dependsBmlSortOrder,\r\n                                dependsBmlApiSortOrder: this.dependsBmlApiSortOrder,\r\n                                dependsButtonLabel: this.dependsButtonLabel,\r\n                                dependsDisableFundingOptions: this.dependsDisableFundingOptions,\r\n                                solutionsElements: this.solutionsElements,\r\n                                argument: instance.argument\r\n                            }\r\n                        });\r\n\r\n                        if (instance.event === ':load') {\r\n                            this.afterLoadRules.push(handler);\r\n\r\n                            return;\r\n                        }\r\n\r\n                        this.$self.on(instance.event, _.bind(handler.apply, handler));\r\n                    }, this);\r\n                }, this);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Create a jQuery element according to selector\r\n         *\r\n         * @param {String} identifier\r\n         * @returns {*}\r\n         */\r\n        createElement: function (identifier) {\r\n            if (identifier === ':self') {\r\n                return this.$self;\r\n            }\r\n\r\n            return $(utils.template(this.templates.elementSelector, {\r\n                'identifier': identifier\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Assign solutions elements\r\n         *\r\n         * @param {Object} elements\r\n         * @returns {exports.setSolutionsElements}\r\n         */\r\n        setSolutionsElements: function (elements) {\r\n            this.solutionsElements = elements;\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/solutions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiClass',\r\n    'Magento_Paypal/js/solution',\r\n    'underscore'\r\n], function ($, Class, Solution, _) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n\r\n            /**\r\n             * Initialized solutions\r\n             */\r\n            solutions: {},\r\n\r\n            /**\r\n             * The elements of created solutions\r\n             */\r\n            solutionsElements: {},\r\n\r\n            /**\r\n             * The selector element responsible for configuration of payment method (CSS class)\r\n             */\r\n            buttonConfiguration: '.button.action-configure'\r\n        },\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {Object} config\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function (config) {\r\n            this.initConfig(config)\r\n                .initSolutions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialization and configuration solutions\r\n         *\r\n         * @returns {exports.initSolutions}\r\n         */\r\n        initSolutions: function () {\r\n            _.each(this.config.solutions, this.addSolution, this);\r\n            this.initializeSolutions()\r\n                .wipeButtonsConfiguration();\r\n            _.each(this.solutions, this.applicationRules);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * The creation and addition of the solution according to the configuration\r\n         *\r\n         * @param {Object} solution\r\n         * @param {String} identifier\r\n         */\r\n        addSolution: function (solution, identifier) {\r\n            this.solutions[identifier] = new Solution({\r\n                config: solution,\r\n                buttonConfiguration: this.buttonConfiguration\r\n            }, identifier);\r\n            this.solutionsElements[identifier] = this.solutions[identifier].$self;\r\n        },\r\n\r\n        /**\r\n         * Wiping buttons configuration of the payment method\r\n         */\r\n        wipeButtonsConfiguration: function () {\r\n            $(this.buttonConfiguration).removeClass('disabled')\r\n                .removeAttr('disabled');\r\n        },\r\n\r\n        /**\r\n         * Application of the rules\r\n         *\r\n         * @param {Object} solution\r\n         */\r\n        applicationRules: function (solution) {\r\n            _.each(solution.afterLoadRules, function (rule) {\r\n                rule.apply();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initialize solutions\r\n         *\r\n         * @returns {exports.initializeSolutions}\r\n         */\r\n        initializeSolutions: function () {\r\n            _.each(this.solutions, function (solution) {\r\n                solution.setSolutionsElements(this.solutionsElements)\r\n                    .initEvents()\r\n                    .addListeners();\r\n            }, this);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/payflowpro/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'uiComponent'\r\n], function ($, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            $selector: null,\r\n            selector: 'edit_form'\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            self.$selector = $('#' + self.selector);\r\n            this._super();\r\n\r\n            this.initEventHandlers();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get payment code\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return 'payflowpro';\r\n        },\r\n\r\n        /**\r\n         * Init event handlers\r\n         */\r\n        initEventHandlers: function () {\r\n            $('#' + this.container).find('[name=\"payment[token_switcher]\"]')\r\n                .on('click', this.setPaymentDetails.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Store payment details\r\n         */\r\n        setPaymentDetails: function () {\r\n            this.$selector.find('[name=\"payment[public_hash]\"]').val(this.publicHash);\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/predicate/confirm.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['underscore'], function (_) {\r\n    'use strict';\r\n\r\n    return function (solution, message, argument) {\r\n        var isConfirm = false;\r\n\r\n        _.every(argument, function (name) {\r\n            if (solution.solutionsElements[name] &&\r\n                solution.solutionsElements[name].find(solution.enableButton).val() == 1 //eslint-disable-line eqeqeq\r\n            ) {\r\n                isConfirm = true;\r\n\r\n                return !isConfirm;\r\n            }\r\n\r\n            return !isConfirm;\r\n        }, this);\r\n\r\n        if (isConfirm) {\r\n            return confirm(message); //eslint-disable-line no-alert\r\n        }\r\n\r\n        return true;\r\n    };\r\n});\r\n","Magento_ProductVideo/js/get-video-information.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, alert) {\r\n        'use strict';\r\n\r\n        var videoRegister = {\r\n            _register: {},\r\n\r\n            /**\r\n             * Checks, if api is already registered\r\n             *\r\n             * @param {String} api\r\n             * @returns {bool}\r\n             */\r\n            isRegistered: function (api) {\r\n                return this._register[api] !== undefined;\r\n            },\r\n\r\n            /**\r\n             * Checks, if api is loaded\r\n             *\r\n             * @param {String} api\r\n             * @returns {bool}\r\n             */\r\n            isLoaded: function (api) {\r\n                return this._register[api] !== undefined && this._register[api] === true;\r\n            },\r\n\r\n            /**\r\n             * Register new video api\r\n             * @param {String} api\r\n             * @param {bool} loaded\r\n             */\r\n            register: function (api, loaded) {\r\n                loaded = loaded || false;\r\n                this._register[api] = loaded;\r\n            }\r\n        };\r\n\r\n        $.widget('mage.productVideoLoader', {\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                switch (this.element.data('type')) {\r\n                    case 'youtube':\r\n                        this.element.videoYoutube();\r\n                        this._player = this.element.data('mageVideoYoutube');\r\n                        break;\r\n\r\n                    case 'vimeo':\r\n                        this.element.videoVimeo();\r\n                        this._player = this.element.data('mageVideoVimeo');\r\n                        break;\r\n                    default:\r\n                        throw {\r\n                            name: $.mage.__('Video Error'),\r\n                            message: $.mage.__('Unknown video type'),\r\n\r\n                            /**\r\n                             * Return string\r\n                             */\r\n                            toString: function () {\r\n                                return this.name + ': ' + this.message;\r\n                            }\r\n                        };\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Initializes variables\r\n             * @private\r\n             */\r\n            _initialize: function () {\r\n                this._params = this.element.data('params') || {};\r\n                this._code = this.element.data('code');\r\n                this._width = this.element.data('width');\r\n                this._height = this.element.data('height');\r\n                this._autoplay = !!this.element.data('autoplay');\r\n                this._playing = this._autoplay || false;\r\n                this.useYoutubeNocookie = this.element.data('youtubenocookie') || false;\r\n\r\n                this._responsive = this.element.data('responsive') !== false;\r\n\r\n                if (this._responsive === true) {\r\n                    this.element.addClass('responsive');\r\n                }\r\n\r\n                this._calculateRatio();\r\n            },\r\n\r\n            /**\r\n             * Abstract play command\r\n             */\r\n            play: function () {\r\n                this._player.play();\r\n            },\r\n\r\n            /**\r\n             * Abstract pause command\r\n             */\r\n            pause: function () {\r\n                this._player.pause();\r\n            },\r\n\r\n            /**\r\n             * Abstract stop command\r\n             */\r\n            stop: function () {\r\n                this._player.stop();\r\n            },\r\n\r\n            /**\r\n             * Abstract playing command\r\n             */\r\n            playing: function () {\r\n                return this._player.playing();\r\n            },\r\n\r\n            /**\r\n             * Abstract destroying command\r\n             */\r\n            destroy: function () {\r\n                if (this._player) {\r\n                    this._player.destroy();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Calculates ratio for responsive videos\r\n             * @private\r\n             */\r\n            _calculateRatio: function () {\r\n                if (!this._responsive) {\r\n                    return;\r\n                }\r\n                this.element.css('paddingBottom', this._height / this._width * 100 + '%');\r\n            }\r\n        });\r\n\r\n        $.widget('mage.videoYoutube', $.mage.productVideoLoader, {\r\n\r\n            /**\r\n             * Initialization of the Youtube widget\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                var self = this;\r\n\r\n                this._initialize();\r\n\r\n                this.element.append('<div/>');\r\n\r\n                this._on(window, {\r\n\r\n                    /**\r\n                     * Youtube state check\r\n                     * @private\r\n                     */\r\n                    'youtubeapiready': function () {\r\n                        var host = 'https://www.youtube.com';\r\n\r\n                        if (self.useYoutubeNocookie) {\r\n                            host = 'https://www.youtube-nocookie.com';\r\n                        }\r\n\r\n                        if (self._player !== undefined) {\r\n                            return;\r\n                        }\r\n\r\n                        if (self._autoplay) {\r\n                            self._params.autoplay = 1;\r\n                        }\r\n                        self._params.rel = 0;\r\n\r\n                        self._player = new window.YT.Player(self.element.children(':first')[0], {\r\n                            height: self._height,\r\n                            width: self._width,\r\n                            videoId: self._code,\r\n                            playerVars: self._params,\r\n                            host: host,\r\n                            events: {\r\n\r\n                                /**\r\n                                 * @private\r\n                                 */\r\n                                'onReady': function onPlayerReady() {\r\n                                    self._player.getDuration();\r\n                                },\r\n\r\n                                /**\r\n                                 * State change flag init\r\n                                 */\r\n                                onStateChange: function (data) {\r\n                                    switch (window.parseInt(data.data, 10)) {\r\n                                        case 1:\r\n                                            self._playing = true;\r\n                                            break;\r\n                                        default:\r\n                                            self._playing = false;\r\n                                            break;\r\n                                    }\r\n\r\n                                    self._trigger('statechange', {}, data);\r\n                                }\r\n                            }\r\n\r\n                        });\r\n                    }\r\n                });\r\n\r\n                this._loadApi();\r\n            },\r\n\r\n            /**\r\n             * Loads Youtube API and triggers event, when loaded\r\n             * @private\r\n             */\r\n            _loadApi: function () {\r\n                var element,\r\n                    scriptTag;\r\n\r\n                if (videoRegister.isRegistered('youtube')) {\r\n                    if (videoRegister.isLoaded('youtube')) {\r\n                        $(window).trigger('youtubeapiready');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n                videoRegister.register('youtube');\r\n\r\n                element = document.createElement('script');\r\n                scriptTag = document.getElementsByTagName('script')[0];\r\n\r\n                element.async = true;\r\n                element.src = 'https://www.youtube.com/iframe_api';\r\n                scriptTag.parentNode.insertBefore(element, scriptTag);\r\n\r\n                /**\r\n                 * Trigger youtube api ready event\r\n                 */\r\n                window.onYouTubeIframeAPIReady = function () {\r\n                    $(window).trigger('youtubeapiready');\r\n                    videoRegister.register('youtube', true);\r\n                };\r\n            },\r\n\r\n            /**\r\n             * Play command for Youtube\r\n             */\r\n            play: function () {\r\n                this._player.playVideo();\r\n                this._playing = true;\r\n            },\r\n\r\n            /**\r\n             * Pause command for Youtube\r\n             */\r\n            pause: function () {\r\n                this._player.pauseVideo();\r\n                this._playing = false;\r\n            },\r\n\r\n            /**\r\n             * Stop command for Youtube\r\n             */\r\n            stop: function () {\r\n                this._player.stopVideo();\r\n                this._playing = false;\r\n            },\r\n\r\n            /**\r\n             * Playing command for Youtube\r\n             */\r\n            playing: function () {\r\n                return this._playing;\r\n            },\r\n\r\n            /**\r\n             * stops and unloads player\r\n             * @private\r\n             */\r\n            destroy: function () {\r\n                this.stop();\r\n\r\n                if (this._player) {\r\n                    this._player.destroy();\r\n                }\r\n            }\r\n        });\r\n\r\n        $.widget('mage.videoVimeo', $.mage.productVideoLoader, {\r\n\r\n            /**\r\n             * Initialize the Vimeo widget\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                var timestamp,\r\n                    src,\r\n                    additionalParams;\r\n\r\n                this._initialize();\r\n                timestamp = new Date().getTime();\r\n\r\n                if (this._autoplay) {\r\n                    additionalParams += '&autoplay=1';\r\n                }\r\n\r\n                src = 'https://player.vimeo.com/video/' +\r\n                    this._code + '?api=1&player_id=vimeo' +\r\n                    this._code +\r\n                    timestamp +\r\n                    additionalParams;\r\n                this.element.append(\r\n                    $('<iframe/>')\r\n                        .attr('frameborder', 0)\r\n                        .attr('id', 'vimeo' + this._code + timestamp)\r\n                        .attr('width', this._width)\r\n                        .attr('height', this._height)\r\n                        .attr('src', src)\r\n                );\r\n\r\n            }\r\n        });\r\n\r\n        $.widget('mage.videoData', {\r\n            options: {\r\n                youtubeKey: '',\r\n                eventSource: '' //where is data going from - focus out or click on button\r\n            },\r\n\r\n            _REQUEST_VIDEO_INFORMATION_TRIGGER: 'request_video_information',\r\n\r\n            _UPDATE_VIDEO_INFORMATION_TRIGGER: 'updated_video_information',\r\n\r\n            _START_UPDATE_INFORMATION_TRIGGER: 'update_video_information',\r\n\r\n            _ERROR_UPDATE_INFORMATION_TRIGGER: 'error_updated_information',\r\n\r\n            _FINISH_UPDATE_INFORMATION_TRIGGER: 'finish_update_information',\r\n\r\n            _VIDEO_URL_VALIDATE_TRIGGER: 'validate_video_url',\r\n\r\n            _videoInformation: null,\r\n\r\n            _currentVideoUrl: null,\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _init: function () {\r\n                this.element.on(this._START_UPDATE_INFORMATION_TRIGGER, $.proxy(this._onRequestHandler, this));\r\n                this.element.on(this._ERROR_UPDATE_INFORMATION_TRIGGER, $.proxy(this._onVideoInvalid, this));\r\n                this.element.on(this._FINISH_UPDATE_INFORMATION_TRIGGER, $.proxy(\r\n                    function () {\r\n                        this._currentVideoUrl = null;\r\n                    }, this\r\n                ));\r\n                this.element.on(this._VIDEO_URL_VALIDATE_TRIGGER, $.proxy(this._onUrlValidateHandler, this));\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onUrlValidateHandler: function (event, callback, forceVideo) {\r\n                var url = this.element.val(),\r\n                    videoInfo;\r\n\r\n                videoInfo = this._validateURL(url, forceVideo);\r\n\r\n                if (videoInfo) {\r\n                    callback();\r\n                } else {\r\n                    this._onRequestError($.mage.__('Invalid video url'));\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onRequestHandler: function () {\r\n                var url = this.element.val(),\r\n                    self = this,\r\n                    videoInfo,\r\n                    type,\r\n                    id,\r\n                    googleapisUrl;\r\n\r\n                if (this._currentVideoUrl === url) {\r\n                    return;\r\n                }\r\n\r\n                this._currentVideoUrl = url;\r\n\r\n                this.element.trigger(this._REQUEST_VIDEO_INFORMATION_TRIGGER, {\r\n                    url: url\r\n                });\r\n\r\n                if (!url) {\r\n                    return;\r\n                }\r\n\r\n                videoInfo = this._validateURL(url);\r\n\r\n                if (!videoInfo) {\r\n                    this._onRequestError($.mage.__('Invalid video url'));\r\n\r\n                    return;\r\n                }\r\n\r\n                /**\r\n                 *\r\n                 * @param {Object} data\r\n                 * @private\r\n                 */\r\n                function _onYouTubeLoaded(data) {\r\n                    var tmp,\r\n                        uploadedFormatted,\r\n                        respData,\r\n                        createErrorMessage;\r\n\r\n                    /**\r\n                     * Create errors message\r\n                     *\r\n                     * @returns {String}\r\n                     */\r\n                    createErrorMessage = function () {\r\n                        var error = data.error,\r\n                            errors = error.errors,\r\n                            i,\r\n                            errLength = errors.length,\r\n                            tmpError,\r\n                            errReason,\r\n                            errorsMessage = [];\r\n\r\n                        for (i = 0; i < errLength; i++) {\r\n                            tmpError = errors[i];\r\n                            errReason = tmpError.reason;\r\n\r\n                            if (['keyInvalid'].indexOf(errReason) !== -1) {\r\n                                errorsMessage.push($.mage.__('Youtube API key is invalid'));\r\n\r\n                                break;\r\n                            }\r\n\r\n                            errorsMessage.push(tmpError.message);\r\n                        }\r\n\r\n                        return $.mage.__('Video cant be shown due to the following reason: ') +\r\n                            $.unique(errorsMessage).join(', ');\r\n                    };\r\n\r\n                    if (data.error && [400, 402, 403].indexOf(data.error.code) !== -1) {\r\n                        this._onRequestError(createErrorMessage());\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (!data.items || data.items.length < 1) {\r\n                        this._onRequestError($.mage.__('Video not found'));\r\n\r\n                        return;\r\n                    }\r\n\r\n                    tmp = data.items[0];\r\n                    uploadedFormatted = tmp.snippet.publishedAt.replace('T', ' ').replace(/\\..+/g, '');\r\n                    respData = {\r\n                        duration: this._formatYoutubeDuration(tmp.contentDetails.duration),\r\n                        channel: tmp.snippet.channelTitle,\r\n                        channelId: tmp.snippet.channelId,\r\n                        uploaded: uploadedFormatted,\r\n                        title: tmp.snippet.localized.title,\r\n                        description: tmp.snippet.description,\r\n                        thumbnail: tmp.snippet.thumbnails.high.url,\r\n                        videoId: videoInfo.id,\r\n                        videoProvider: videoInfo.type,\r\n                        useYoutubeNocookie: videoInfo.useYoutubeNocookie\r\n                    };\r\n                    this._videoInformation = respData;\r\n                    this.element.trigger(this._UPDATE_VIDEO_INFORMATION_TRIGGER, respData);\r\n                    this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, true);\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 */\r\n                function _onVimeoLoaded(data) {\r\n                    var tmp,\r\n                        respData;\r\n\r\n                    if (data.length < 1) {\r\n                        this._onRequestError($.mage.__('Video not found'));\r\n\r\n                        return null;\r\n                    }\r\n                    tmp = data[0];\r\n                    respData = {\r\n                        duration: this._formatVimeoDuration(tmp.duration),\r\n                        channel: tmp['user_name'],\r\n                        channelId: tmp['user_url'],\r\n                        uploaded: tmp['upload_date'],\r\n                        title: tmp.title,\r\n                        description: tmp.description.replace(/(&nbsp;|<([^>]+)>)/ig, ''),\r\n                        thumbnail: tmp['thumbnail_large'],\r\n                        videoId: videoInfo.id,\r\n                        videoProvider: videoInfo.type\r\n                    };\r\n                    this._videoInformation = respData;\r\n                    this.element.trigger(this._UPDATE_VIDEO_INFORMATION_TRIGGER, respData);\r\n                    this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, true);\r\n                }\r\n\r\n                type = videoInfo.type;\r\n                id = videoInfo.id;\r\n\r\n                if (type === 'youtube') {\r\n                    googleapisUrl = 'https://www.googleapis.com/youtube/v3/videos?id=' +\r\n                        id +\r\n                        '&part=snippet,contentDetails&key=' +\r\n                        this.options.youtubeKey + '&alt=json&callback=?';\r\n                    $.getJSON(googleapisUrl,\r\n                        {\r\n                            format: 'json'\r\n                        },\r\n                        $.proxy(_onYouTubeLoaded, self)\r\n                    ).fail(\r\n                        function () {\r\n                            self._onRequestError('Video not found');\r\n                        }\r\n                    );\r\n                } else if (type === 'vimeo') {\r\n                    $.ajax({\r\n                        url: 'https://www.vimeo.com/api/v2/video/' + id + '.json',\r\n                        dataType: 'jsonp',\r\n                        data: {\r\n                            format: 'json'\r\n                        },\r\n                        timeout: 5000,\r\n                        success:  $.proxy(_onVimeoLoaded, self),\r\n\r\n                        /**\r\n                         * @private\r\n                         */\r\n                        error: function () {\r\n                            self._onRequestError($.mage.__('Video not found'));\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onVideoInvalid: function (event, data) {\r\n                this._videoInformation = null;\r\n                this.element.val('');\r\n                alert({\r\n                    content: 'Error: \"' + data + '\"'\r\n                });\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onRequestError: function (error) {\r\n                this.element.trigger(this._ERROR_UPDATE_INFORMATION_TRIGGER, error);\r\n                this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, false);\r\n                this._currentVideoUrl = null;\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _formatYoutubeDuration: function (duration) {\r\n                var match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/),\r\n                    hours = parseInt(match[1], 10) || 0,\r\n                    minutes = parseInt(match[2], 10) || 0,\r\n                    seconds = parseInt(match[3], 10) || 0;\r\n\r\n                return this._formatVimeoDuration(hours * 3600 + minutes * 60 + seconds);\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _formatVimeoDuration: function (seconds) {\r\n                return (new Date(seconds * 1000)).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/)[0];\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _parseHref: function (href) {\r\n                var a = document.createElement('a');\r\n\r\n                a.href = href;\r\n\r\n                return a;\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _validateURL: function (href, forceVideo) {\r\n                var id,\r\n                    type,\r\n                    ampersandPosition,\r\n                    vimeoRegex,\r\n                    useYoutubeNocookie = false;\r\n\r\n                if (typeof href !== 'string') {\r\n                    return href;\r\n                }\r\n                href = this._parseHref(href);\r\n\r\n                if (href.host.match(/youtube\\.com/) && href.search) {\r\n\r\n                    id = href.search.split('v=')[1];\r\n\r\n                    if (id) {\r\n                        ampersandPosition = id.indexOf('&');\r\n                        type = 'youtube';\r\n                    }\r\n\r\n                    if (id && ampersandPosition !== -1) {\r\n                        id = id.substring(0, ampersandPosition);\r\n                    }\r\n\r\n                } else if (href.host.match(/youtube\\.com|youtu\\.be|youtube-nocookie.com/)) {\r\n                    id = href.pathname.replace(/^\\/(embed\\/|v\\/)?/, '').replace(/\\/.*/, '');\r\n                    type = 'youtube';\r\n\r\n                    if (href.host.match(/youtube-nocookie.com/)) {\r\n                        useYoutubeNocookie = true;\r\n                    }\r\n                } else if (href.host.match(/vimeo\\.com/)) {\r\n                    type = 'vimeo';\r\n                    vimeoRegex = new RegExp(['https?:\\\\/\\\\/(?:www\\\\.|player\\\\.)?vimeo.com\\\\/(?:channels\\\\/(?:\\\\w+\\\\/)',\r\n                        '?|groups\\\\/([^\\\\/]*)\\\\/videos\\\\/|album\\\\/(\\\\d+)\\\\/video\\\\/|video\\\\/|)(\\\\d+)(?:$|\\\\/|\\\\?)'\r\n                    ].join(''));\r\n\r\n                    if (href.href.match(vimeoRegex) != null) {\r\n                        id = href.href.match(vimeoRegex)[3];\r\n                    }\r\n                }\r\n\r\n                if ((!id || !type) && forceVideo) {\r\n                    id = href.href;\r\n                    type = 'custom';\r\n                }\r\n\r\n                return id ? {\r\n                    id: id, type: type, s: href.search.replace(/^\\?/, ''), useYoutubeNocookie: useYoutubeNocookie\r\n                } : false;\r\n            }\r\n        });\r\n    });\r\n","Magento_ProductVideo/js/new-video-dialog.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/backend/tree-suggest',\r\n    'mage/backend/validation',\r\n    'Magento_ProductVideo/js/get-video-information'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.createVideoPlayer', {\r\n        options: {\r\n            videoId: '',\r\n            videoProvider: '',\r\n            container: '.video-player-container',\r\n            videoClass: 'product-video',\r\n            reset: false,\r\n            useYoutubeNocookie: false,\r\n            metaData: {\r\n                DOM: {\r\n                    title: '.video-information.title span',\r\n                    uploaded: '.video-information.uploaded span',\r\n                    uploader: '.video-information.uploader span',\r\n                    duration: '.video-information.duration span',\r\n                    all: '.video-information span',\r\n                    wrapper: '.video-information'\r\n                },\r\n                data: {\r\n                    title: '',\r\n                    uploaded: '',\r\n                    uploader: '',\r\n                    uploaderUrl: '',\r\n                    duration: ''\r\n                }\r\n            }\r\n        },\r\n\r\n        _FINISH_CREATE_VIDEO_TRIGGER: 'finish_create_video',\r\n\r\n        _FINISH_UPDATE_VIDEO_TRIGGER: 'finish_update_video',\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            if (this.options.reset) {\r\n                this.reset();\r\n            } else {\r\n                this.update();\r\n            }\r\n\r\n            this.element.on('reset', $.proxy(this.reset, this));\r\n\r\n        },\r\n\r\n        /**\r\n         * @returns {Boolean}\r\n         */\r\n        update: function () {\r\n            var checkVideoID = this.element.find(this.options.container).find(\r\n                    '.' + this.options.videoClass\r\n                ).data('code'),\r\n                eventVideoData = {\r\n                    oldVideoId: checkVideoID ? checkVideoID.toString() : checkVideoID,\r\n                    newVideoId: this.options.videoId ? this.options.videoId.toString() : this.options.videoId\r\n                };\r\n\r\n            if (checkVideoID && checkVideoID !== this.options.videoId) {\r\n                this._doUpdate();\r\n                this.element.trigger(this._FINISH_UPDATE_VIDEO_TRIGGER, eventVideoData);\r\n            } else if (checkVideoID && checkVideoID === this.options.videoId) {\r\n                return false;\r\n            } else if (!checkVideoID) {\r\n                this._doUpdate();\r\n                this.element.trigger(this._FINISH_CREATE_VIDEO_TRIGGER, eventVideoData);\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _doUpdate: function () {\r\n            var uploaderLinkUrl,\r\n                uploaderLink;\r\n\r\n            this.reset();\r\n            this.element.find(this.options.container).append(\r\n                '<div class=\"' +\r\n                this.options.videoClass +\r\n                '\" data-type=\"' +\r\n                this.options.videoProvider +\r\n                '\" data-code=\"' +\r\n                this.options.videoId +\r\n                '\" data-youtubenocookie=\"' +\r\n                this.options.useYoutubeNocookie +\r\n                '\" data-width=\"100%\" data-height=\"100%\"></div>'\r\n            );\r\n            this.element.find(this.options.metaData.DOM.wrapper).show();\r\n            this.element.find(this.options.metaData.DOM.title).text(this.options.metaData.data.title);\r\n            this.element.find(this.options.metaData.DOM.uploaded).text(this.options.metaData.data.uploaded);\r\n            this.element.find(this.options.metaData.DOM.duration).text(this.options.metaData.data.duration);\r\n\r\n            if (this.options.videoProvider === 'youtube') {\r\n                uploaderLinkUrl = 'https://youtube.com/channel/' + this.options.metaData.data.uploaderUrl;\r\n            } else if (this.options.videoProvider === 'vimeo') {\r\n                uploaderLinkUrl = this.options.metaData.data.uploaderUrl;\r\n            }\r\n            uploaderLink = document.createElement('a');\r\n            uploaderLink.setAttribute('href', uploaderLinkUrl);\r\n            uploaderLink.setAttribute('target', '_blank');\r\n            uploaderLink.innerText = this.options.metaData.data.uploader;\r\n            this.element.find(this.options.metaData.DOM.uploader)[0].appendChild(uploaderLink);\r\n            this.element.find('.' + this.options.videoClass).productVideoLoader();\r\n\r\n        },\r\n\r\n        /**\r\n         * Reset\r\n         */\r\n        reset: function () {\r\n            this.element.find(this.options.container).find('.' + this.options.videoClass).remove();\r\n            this.element.find(this.options.metaData.DOM.wrapper).hide();\r\n            this.element.find(this.options.metaData.DOM.all).text('');\r\n\r\n        }\r\n    });\r\n\r\n    $.widget('mage.updateInputFields', {\r\n        options: {\r\n            reset: false,\r\n            DOM: {\r\n                urlField: 'input[name=\"video_url\"]',\r\n                titleField: 'input[name=\"video_title\"]',\r\n                fileField: '#file_name',\r\n                descriptionField: 'textarea[name=\"video_description\"]',\r\n                thumbnailLocation: '.field-new_video_screenshot_preview .admin__field-control'\r\n            },\r\n            data: {\r\n                url: '',\r\n                title: '',\r\n                description: '',\r\n                thumbnail: ''\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            if (this.options.reset) {\r\n                this.reset();\r\n            } else {\r\n                this.update();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update\r\n         */\r\n        update: function () {\r\n            $(this.options.DOM.titleField).val(this.options.data.title);\r\n            $(this.options.DOM.descriptionField).val(this.options.data.description);\r\n        },\r\n\r\n        /**\r\n         * Reset\r\n         */\r\n        reset: function () {\r\n            $(this.options.DOM.fileField).val('');\r\n            $(this.options.DOM.urlField).val('');\r\n            $(this.options.DOM.titleField).val('');\r\n            $(this.options.DOM.descriptionField).val('');\r\n        }\r\n    });\r\n\r\n    /**\r\n     */\r\n    $.widget('mage.newVideoDialog', {\r\n\r\n        _previewImage: null,\r\n\r\n        clickedElement: '',\r\n\r\n        _images: {},\r\n\r\n        _imageTypes: [\r\n            '.jpeg',\r\n            '.pjpeg',\r\n            '.jpeg',\r\n            '.jpg',\r\n            '.pjpeg',\r\n            '.png',\r\n            '.gif'\r\n        ],\r\n\r\n        _imageProductGalleryWrapperSelector: '#image-container',\r\n\r\n        _videoPreviewInputSelector: '#new_video_screenshot',\r\n\r\n        _videoPreviewRemoteSelector: '',\r\n\r\n        _videoDisableinputSelector: '#new_video_disabled',\r\n\r\n        _videoPreviewImagePointer: '#new_video_screenshot_preview',\r\n\r\n        _videoFormSelector: '#new_video_form',\r\n\r\n        _itemIdSelector: '#item_id',\r\n\r\n        _videoUrlSelector: '[name=\"video_url\"]',\r\n\r\n        _videoImageFilenameselector: '#file_name',\r\n\r\n        _videoUrlWidget: null,\r\n\r\n        _videoInformationBtnSelector: '[name=\"new_video_get\"]',\r\n\r\n        _editVideoBtnSelector: '.image',\r\n\r\n        _deleteGalleryVideoSelector: '[data-role=delete-button]',\r\n\r\n        _deleteGalleryVideoSelectorBtn: null,\r\n\r\n        _videoInformationGetBtn: null,\r\n\r\n        _videoInformationGetUrlField: null,\r\n\r\n        _videoInformationGetEditBtn: null,\r\n\r\n        _isEditPage: false,\r\n\r\n        _onlyVideoPlayer: false,\r\n\r\n        _tempPreviewImageData: null,\r\n\r\n        _videoPlayerSelector: '.mage-new-video-dialog',\r\n\r\n        _videoRequestComplete: null,\r\n\r\n        _gallery: null,\r\n\r\n        /**\r\n         * Bind events\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var events = {\r\n                'setImage': '_onSetImage'\r\n            };\r\n\r\n            this._on(events);\r\n\r\n            this._videoUrlWidget = this.element.find(this._videoUrlSelector).videoData({\r\n                youtubeKey: this.options.youTubeApiKey,\r\n                eventSource: 'focusout'\r\n            });\r\n\r\n            this._videoInformationGetBtn = this.element.find(this._videoInformationBtnSelector);\r\n            this._videoInformationGetUrlField = this.element.find(this._videoUrlSelector);\r\n            this._videoInformationGetEditBtn = this._gallery.find(this._editVideoBtnSelector);\r\n\r\n            this._videoInformationGetBtn.on('click', $.proxy(this._onGetVideoInformationClick, this));\r\n            this._videoInformationGetUrlField.on('focusout', $.proxy(this._onGetVideoInformationFocusOut, this));\r\n\r\n            this._videoUrlWidget.on('updated_video_information', $.proxy(this._onGetVideoInformationSuccess, this));\r\n            this._videoUrlWidget.on('error_updated_information', $.proxy(this._onGetVideoInformationError, this));\r\n            this._videoUrlWidget.on(\r\n                'request_video_information',\r\n                $.proxy(this._onGetVideoInformationStartRequest, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Fired when user click on button \"Get video information\"\r\n         * @private\r\n         */\r\n        _onGetVideoInformationClick: function () {\r\n            var videoForm = this.element.find(this._videoFormSelector);\r\n\r\n            videoForm.validation();\r\n\r\n            if (this.element.find(this._videoUrlSelector).valid()) {\r\n                this._onlyVideoPlayer = false;\r\n                this._isEditPage = false;\r\n                this._videoUrlWidget.trigger('update_video_information');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Fired when user do focus out from url field\r\n         * @private\r\n         */\r\n        _onGetVideoInformationFocusOut: function () {\r\n            this._videoUrlWidget.trigger('update_video_information');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _onGetVideoInformationStartRequest: function () {\r\n            var videoForm = this.element.find(this._videoFormSelector);\r\n\r\n            try {\r\n                videoForm.validation('clearError');\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n\r\n            this._videoRequestComplete = false;\r\n        },\r\n\r\n        /**\r\n         * Fired when user click Edit Video button\r\n         * @private\r\n         */\r\n        _onGetVideoInformationEditClick: function () {\r\n            this._onlyVideoPlayer = true;\r\n            this._isEditPage = true;\r\n            this._videoUrlWidget.trigger('update_video_information');\r\n        },\r\n\r\n        /**\r\n         * Fired when successfully received information about the video.\r\n         * @param {Object} e\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _onGetVideoInformationSuccess: function (e, data) {\r\n            var self = this;\r\n\r\n            self.element.on('finish_update_video finish_create_video', $.proxy(function (element, playerData) {\r\n                    if (!self._onlyVideoPlayer ||\r\n                        !self._isEditPage && playerData.oldVideoId !== playerData.newVideoId ||\r\n                        playerData.oldVideoId && playerData.oldVideoId !== playerData.newVideoId\r\n                    ) {\r\n                        self.element.updateInputFields({\r\n                            reset: false,\r\n                            data: {\r\n                                title: data.title,\r\n                                description: data.description\r\n                            }\r\n                        });\r\n                        this._loadRemotePreview(data.thumbnail);\r\n                    }\r\n                    self._onlyVideoPlayer = true;\r\n                }, this))\r\n                .createVideoPlayer({\r\n                    videoId: data.videoId,\r\n                    videoProvider: data.videoProvider,\r\n                    useYoutubeNocookie: data.useYoutubeNocookie,\r\n                    reset: false,\r\n                    metaData: {\r\n                        DOM: {\r\n                            title: '.video-information.title span',\r\n                            uploaded: '.video-information.uploaded span',\r\n                            uploader: '.video-information.uploader span',\r\n                            duration: '.video-information.duration span',\r\n                            all: '.video-information span',\r\n                            wrapper: '.video-information'\r\n                        },\r\n                        data: {\r\n                            title: data.title,\r\n                            uploaded: data.uploaded,\r\n                            uploader: data.channel,\r\n                            duration: data.duration,\r\n                            uploaderUrl: data.channelId\r\n                        }\r\n                    }\r\n                })\r\n                .off('finish_update_video finish_create_video');\r\n\r\n            this._videoRequestComplete = true;\r\n        },\r\n\r\n        /**\r\n         * Load preview from youtube/vimeo\r\n         * @param {String} sourceUrl\r\n         * @private\r\n         */\r\n        _loadRemotePreview: function (sourceUrl) {\r\n            var url = this.options.saveRemoteVideoUrl,\r\n                self = this;\r\n\r\n            this._getPreviewImage().attr('src', sourceUrl).hide();\r\n            this._blockActionButtons(true, true);\r\n            $.ajax({\r\n                url: url,\r\n                data: 'remote_image=' + sourceUrl,\r\n                type: 'post',\r\n                success: $.proxy(function (result) {\r\n                    this._tempPreviewImageData = result;\r\n                    this._getPreviewImage().attr('src', sourceUrl).show();\r\n                    this._blockActionButtons(false, true);\r\n                }, self)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Fired when receiving information about the video ended with error\r\n         * @private\r\n         */\r\n        _onGetVideoInformationError: function () {\r\n        },\r\n\r\n        /**\r\n         * Remove \".tmp\"\r\n         * @param {String} name\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        __prepareFilename: function (name) {\r\n            var tmppost = '.tmp';\r\n\r\n            if (!name) {\r\n                return name;\r\n            }\r\n\r\n            if (name.endsWith(tmppost)) {\r\n                name = name.slice(0, name.length - tmppost.length);\r\n            }\r\n\r\n            return name;\r\n        },\r\n\r\n        /**\r\n         * Set image data\r\n         * @param {String} file\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _setImage: function (file, imageData) {\r\n            file = this.__prepareFilename(file);\r\n            this._images[file] = imageData;\r\n            this._gallery.trigger('addItem', imageData);\r\n            this.element.trigger('setImage', imageData);\r\n            this._addVideoClass(imageData.url);\r\n        },\r\n\r\n        /**\r\n         * Get image data\r\n         *\r\n         * @param {String} file\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getImage: function (file) {\r\n            file = this.__prepareFilename(file);\r\n\r\n            return this._images[file];\r\n        },\r\n\r\n        /**\r\n         * Replace image (update)\r\n         * @param {String} oldFile\r\n         * @param {String} newFile\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _replaceImage: function (oldFile, newFile, imageData) {\r\n            var tmpNewFile = newFile,\r\n                tmpOldImage,\r\n                newImageId,\r\n                oldNewFilePosition,\r\n                fc,\r\n                suff,\r\n                searchsuff,\r\n                key,\r\n                oldValIdElem;\r\n\r\n            oldFile = this.__prepareFilename(oldFile);\r\n            newFile = this.__prepareFilename(newFile);\r\n            tmpOldImage = this._images[oldFile];\r\n\r\n            if (newFile === oldFile) {\r\n                this._images[newFile] = imageData;\r\n                this.saveImageRoles(imageData);\r\n                this._updateVisibility(imageData);\r\n                this._updateImageTitle(imageData);\r\n\r\n                return null;\r\n            }\r\n\r\n            this._removeImage(oldFile);\r\n            this._setImage(newFile, imageData);\r\n\r\n            if (!oldFile || !imageData.oldFile) {\r\n                return null;\r\n            }\r\n\r\n            newImageId = this.findElementId(tmpNewFile);\r\n            fc = this.element.find(this._itemIdSelector).val();\r\n\r\n            suff = 'product[media_gallery][images]' + fc;\r\n\r\n            searchsuff = 'input[name=\"' + suff + '[value_id]\"]';\r\n            key = this._gallery.find(searchsuff).val();\r\n\r\n            if (!key) {\r\n                return null;\r\n            }\r\n\r\n            oldValIdElem = document.createElement('input');\r\n            this._gallery.find('form[data-form=\"edit-product\"]').append(oldValIdElem);\r\n            $(oldValIdElem).attr({\r\n                type: 'hidden',\r\n                name: 'product[media_gallery][images][' + newImageId + '][save_data_from]'\r\n            }).val(key);\r\n\r\n            oldNewFilePosition = parseInt(tmpOldImage.position, 10);\r\n            imageData.position = oldNewFilePosition;\r\n\r\n            this._gallery.trigger('setPosition', {\r\n                imageData: imageData,\r\n                position: oldNewFilePosition\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Remove image data\r\n         * @param {String} file\r\n         * @private\r\n         */\r\n        _removeImage: function (file) {\r\n            var imageData = this._getImage(file);\r\n\r\n            if (!imageData) {\r\n                return null;\r\n            }\r\n\r\n            this._gallery.trigger('removeItem', imageData);\r\n            this.element.trigger('removeImage', imageData);\r\n            delete this._images[file];\r\n        },\r\n\r\n        /**\r\n         * Fired when image setted\r\n         * @param {Event} event\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _onSetImage: function (event, imageData) {\r\n            this.saveImageRoles(imageData);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Wrap _uploadFile\r\n         * @param {String} file\r\n         * @param {String} oldFile\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        _uploadImage: function (file, oldFile, callback) {\r\n            var url = this.options.saveVideoUrl,\r\n                data = {\r\n                    files: file,\r\n                    url: url\r\n                };\r\n\r\n            this._blockActionButtons(true, true);\r\n            this._uploadFile(data, $.proxy(function (result) {\r\n                this._onImageLoaded(result, file, oldFile, callback);\r\n                this._blockActionButtons(false);\r\n            }, this));\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {String} result\r\n         * @param {String} file\r\n         * @param {String} oldFile\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        _onImageLoaded: function (result, file, oldFile, callback) {\r\n            var data;\r\n\r\n            try {\r\n                data = JSON.parse(result);\r\n            } catch (e) {\r\n                data = result;\r\n            }\r\n\r\n            if (this.element.find('#video_url').parent().find('.image-upload-error').length > 0) {\r\n                this.element.find('.image-upload-error').remove();\r\n            }\r\n\r\n            if (data.errorcode || data.error) {\r\n                this.element.find('#video_url').parent().append('<div class=\"image-upload-error\">' +\r\n                '<div class=\"image-upload-error-cross\"></div><span>' + data.error + '</span></div>');\r\n\r\n                return;\r\n            }\r\n            $.each(this.element.find(this._videoFormSelector).serializeArray(), function (i, field) {\r\n                data[field.name] = field.value;\r\n            });\r\n            data.disabled = this.element.find(this._videoDisableinputSelector).attr('checked') ? 1 : 0;\r\n            data['media_type'] = 'external-video';\r\n            data.oldFile = oldFile;\r\n\r\n            oldFile ?\r\n                this._replaceImage(oldFile, data.file, data) :\r\n                this._setImage(data.file, data);\r\n            callback.call(0, data);\r\n        },\r\n\r\n        /**\r\n         * File uploader\r\n         * @private\r\n         */\r\n        _uploadFile: function (data, callback) {\r\n            var fu = this.element.find(this._videoPreviewInputSelector),\r\n                tmpInput = document.createElement('input'),\r\n                fileUploader = null;\r\n\r\n            $(tmpInput).attr({\r\n                'name': fu.attr('name'),\r\n                'value': fu.val(),\r\n                'type': 'file',\r\n                'data-ui-ud': fu.attr('data-ui-ud')\r\n            }).css('display', 'none');\r\n            fu.parent().append(tmpInput);\r\n            fileUploader = $(tmpInput).fileupload();\r\n            fileUploader.fileupload('send', data).success(function (result, textStatus, jqXHR) {\r\n                tmpInput.remove();\r\n                callback.call(null, result, textStatus, jqXHR);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update style\r\n         * @param {String} url\r\n         * @private\r\n         */\r\n        _addVideoClass: function (url) {\r\n            var classVideo = 'video-item';\r\n\r\n            this._gallery.find('img[src=\"' + url + '\"]').addClass(classVideo);\r\n        },\r\n\r\n        /**\r\n         * Build widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var imgs = _.values(this.element.closest(this.options.videoSelector).data('images')) || [],\r\n                widget,\r\n                uploader,\r\n                tmp,\r\n                i;\r\n\r\n            this._gallery =  this.element.closest(this.options.videoSelector);\r\n\r\n            for (i = 0; i < imgs.length; i++) {\r\n                tmp = imgs[i];\r\n                this._images[tmp.file] = tmp;\r\n\r\n                if (tmp['media_type'] === 'external-video') {\r\n                    tmp.subclass = 'video-item';\r\n                    this._addVideoClass(tmp.url);\r\n                }\r\n            }\r\n\r\n            this._gallery.on('openDialog', $.proxy(this._onOpenDialog, this));\r\n            this._bind();\r\n            this.createVideoItemIcons();\r\n            widget = this;\r\n            uploader = this.element.find(this._videoPreviewInputSelector);\r\n            uploader.on('change', this._onImageInputChange.bind(this));\r\n            uploader.attr('accept', this._imageTypes.join(','));\r\n\r\n            this.element.modal({\r\n                type: 'slide',\r\n                //appendTo: this._gallery,\r\n                modalClass: 'mage-new-video-dialog form-inline',\r\n                title: $.mage.__('New Video'),\r\n                buttons: [\r\n                    {\r\n                        text: $.mage.__('Save'),\r\n                        class: 'action-primary video-create-button',\r\n                        click: $.proxy(widget._onCreate, widget)\r\n                    },\r\n                    {\r\n                        text: $.mage.__('Cancel'),\r\n                        class: 'video-cancel-button',\r\n                        click: $.proxy(widget._onCancel, widget)\r\n                    },\r\n                    {\r\n                        text: $.mage.__('Delete'),\r\n                        class: 'video-delete-button',\r\n                        click: $.proxy(widget._onDelete, widget)\r\n                    },\r\n                    {\r\n                        text: $.mage.__('Save'),\r\n                        class: 'action-primary video-edit',\r\n                        click: $.proxy(widget._onUpdate, widget)\r\n                    }\r\n                ],\r\n\r\n                /**\r\n                 * @returns {null}\r\n                 */\r\n                opened: function () {\r\n                    var roles,\r\n                        file,\r\n                        modalTitleElement,\r\n                        imageData,\r\n                        modal = widget.element.closest('.mage-new-video-dialog');\r\n\r\n                    widget.element.find('#video_url').focus();\r\n                    roles = widget.element.find('.video_image_role');\r\n                    roles.prop('disabled', false);\r\n                    file = widget.element.find('#file_name').val();\r\n                    widget._onGetVideoInformationEditClick();\r\n                    modalTitleElement = modal.find('.modal-title');\r\n\r\n                    if (!file) {\r\n                        widget._blockActionButtons(true);\r\n\r\n                        modal.find('.video-delete-button').hide();\r\n                        modal.find('.video-edit').hide();\r\n                        modal.find('.video-create-button').show();\r\n                        roles.prop('checked', widget._gallery.find('.image.item:not(.removed)').length < 1);\r\n                        modalTitleElement.text($.mage.__('New Video'));\r\n                        widget._isEditPage = false;\r\n\r\n                        return null;\r\n                    }\r\n                    widget._blockActionButtons(false);\r\n                    modalTitleElement.text($.mage.__('Edit Video'));\r\n                    widget._isEditPage = true;\r\n                    imageData = widget._getImage(file);\r\n\r\n                    if (!imageData) {\r\n                        imageData = {\r\n                            url: _.find(widget._gallery.find('.product-image'), function (image) {\r\n                                return image.src.indexOf(file) > -1;\r\n                            }).src\r\n                        };\r\n                    }\r\n\r\n                    widget._onPreview(null, imageData.url, false);\r\n                },\r\n\r\n                /**\r\n                 * Closed\r\n                 */\r\n                closed: function () {\r\n                    widget._onClose();\r\n                    widget.createVideoItemIcons();\r\n                }\r\n            });\r\n            this.toggleButtons();\r\n        },\r\n\r\n        /**\r\n         * @param {String} status\r\n         * @private\r\n         */\r\n        _blockActionButtons: function (status) {\r\n            this.element\r\n                .closest('.mage-new-video-dialog')\r\n                .find('.page-actions-buttons button.video-create-button, .page-actions-buttons button.video-edit')\r\n                .attr('disabled', status);\r\n        },\r\n\r\n        /**\r\n         * Check form\r\n         * @param {Function} callback\r\n         */\r\n        isValid: function (callback) {\r\n            var videoForm = this.element.find(this._videoFormSelector),\r\n                videoLoaded = true;\r\n\r\n            this._blockActionButtons(true);\r\n\r\n            this._videoUrlWidget.trigger('validate_video_url', $.proxy(function () {\r\n\r\n                videoForm.mage('validation', {\r\n\r\n                    /**\r\n                     * @param {jQuery} error\r\n                     * @param {jQuery} element\r\n                     */\r\n                    errorPlacement: function (error, element) {\r\n                        error.insertAfter(element);\r\n                    }\r\n                }).on('highlight.validate', function () {\r\n                    $(this).validation('option');\r\n                });\r\n\r\n                videoForm.validation();\r\n\r\n                if (this._videoRequestComplete === false) {\r\n                    videoLoaded = false;\r\n                }\r\n\r\n                callback(videoForm.valid() && videoLoaded);\r\n            }, this));\r\n\r\n            this._blockActionButtons(false);\r\n        },\r\n\r\n        /**\r\n         * Create video item icons\r\n         */\r\n        createVideoItemIcons: function () {\r\n            var $imageWidget = this._gallery.find('.product-image.video-item'),\r\n                $productGalleryWrapper = $(this._imageProductGalleryWrapperSelector).find('.product-image.video-item');\r\n\r\n            $imageWidget.parent().addClass('video-item');\r\n            $productGalleryWrapper.parent().addClass('video-item');\r\n            $imageWidget.removeClass('video-item');\r\n            $productGalleryWrapper.removeClass('video-item');\r\n            $('.video-item .action-delete').attr('title', $.mage.__('Delete video'));\r\n            $('.video-item .action-delete span').html($.mage.__('Delete video'));\r\n        },\r\n\r\n        /**\r\n         * Fired when click on create video\r\n         * @private\r\n         */\r\n        _onCreate: function () {\r\n            var nvs = this.element.find(this._videoPreviewInputSelector),\r\n                file = nvs.get(0),\r\n                reqClass = 'required-entry _required';\r\n\r\n            if (file && file.files && file.files.length) {\r\n                file = file.files[0];\r\n            } else {\r\n                file = null;\r\n            }\r\n\r\n            if (!file && !this._tempPreviewImageData) {\r\n                nvs.addClass(reqClass);\r\n            }\r\n\r\n            this.isValid($.proxy(\r\n                function (videoValidStatus) {\r\n\r\n                    if (!videoValidStatus) {\r\n                        return;\r\n                    }\r\n\r\n                    if (this._tempPreviewImageData) {\r\n                        this._onImageLoaded(this._tempPreviewImageData, null, null, $.proxy(this.close, this));\r\n                    } else {\r\n                        this._uploadImage(file, null, $.proxy(function () {\r\n                            this.close();\r\n                        }, this));\r\n                    }\r\n\r\n                    nvs.removeClass(reqClass);\r\n                }, this\r\n            ));\r\n        },\r\n\r\n        /**\r\n         * Fired when click on update video\r\n         * @private\r\n         */\r\n        _onUpdate: function () {\r\n            var inputFile, itemId, _inputSelector, mediaFields, imageData, flagChecked, fileName, callback;\r\n\r\n            this.isValid($.proxy(\r\n                function (videoValidStatus) {\r\n\r\n                    if (!videoValidStatus) {\r\n                        return;\r\n                    }\r\n\r\n                    imageData = this.imageData || {};\r\n                    inputFile = this.element.find(this._videoPreviewInputSelector);\r\n                    itemId = this.element.find(this._itemIdSelector).val();\r\n                    itemId = itemId.slice(1, itemId.length - 1);\r\n                    _inputSelector = '[name*=\"[' + itemId + ']\"]';\r\n                    mediaFields = this._gallery.find('input' + _inputSelector);\r\n                    $.each(mediaFields, function (i, el) {\r\n                        var elName = el.name,\r\n                            start = elName.indexOf(itemId) + itemId.length + 2,\r\n                            fieldName = elName.substring(start, el.name.length - 1),\r\n                            _field = this.element.find('#' + fieldName),\r\n                            _tmp;\r\n\r\n                        if (_field.length > 0) {\r\n                            _tmp = _inputSelector.slice(0, _inputSelector.length - 2) + '[' + fieldName + ']\"]';\r\n                            this._gallery.find(_tmp).val(_field.val());\r\n                            imageData[fieldName] = _field.val();\r\n                        }\r\n                    }.bind(this));\r\n                    flagChecked = this.element.find(this._videoDisableinputSelector).attr('checked') ? 1 : 0;\r\n                    this._gallery.find('input[name*=\"' + itemId + '][disabled]\"]').val(flagChecked);\r\n                    this._gallery.find(_inputSelector).siblings('.image-fade').css(\r\n                        'visibility', flagChecked ? 'visible' : 'hidden'\r\n                    );\r\n                    imageData.disabled = flagChecked;\r\n\r\n                    if (this._tempPreviewImageData) {\r\n                        this._onImageLoaded(\r\n                            this._tempPreviewImageData,\r\n                            null,\r\n                            imageData.file,\r\n                            $.proxy(this.close, this)\r\n                        );\r\n\r\n                        return;\r\n                    }\r\n                    fileName = inputFile.get(0).files;\r\n\r\n                    if (!fileName || !fileName.length) {\r\n                        fileName = null;\r\n                    }\r\n                    inputFile.replaceWith(inputFile);\r\n\r\n                    callback = $.proxy(function () {\r\n                        this.close();\r\n                    }, this);\r\n\r\n                    if (fileName) {\r\n                        this._uploadImage(fileName, imageData.file, callback);\r\n                    } else {\r\n                        this._replaceImage(imageData.file, imageData.file, imageData);\r\n                        callback(0, imageData);\r\n                    }\r\n                }, this\r\n            ));\r\n        },\r\n\r\n        /**\r\n         * Delegates call to producwt gallery to update video visibility.\r\n         *\r\n         * @param {Object} imageData\r\n         */\r\n        _updateVisibility: function (imageData) {\r\n            this._gallery.trigger('updateVisibility', {\r\n                disabled: imageData.disabled,\r\n                imageData: imageData\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Delegates call to product gallery to update video title.\r\n         *\r\n         * @param {Object} imageData\r\n         */\r\n        _updateImageTitle: function (imageData) {\r\n            this._gallery.trigger('updateImageTitle', {\r\n                imageData: imageData\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Fired when clicked on cancel\r\n         * @private\r\n         */\r\n        _onCancel: function () {\r\n            this.close();\r\n        },\r\n\r\n        /**\r\n         * Fired when clicked on delete\r\n         * @private\r\n         */\r\n        _onDelete: function () {\r\n            var filename = this.element.find(this._videoImageFilenameselector).val();\r\n\r\n            this._removeImage(filename);\r\n            this.close();\r\n        },\r\n\r\n        /**\r\n         * @param {String} file\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        _readPreviewLocal: function (file, callback) {\r\n            var fr = new FileReader;\r\n\r\n            if (!window.FileReader) {\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * On load end\r\n             */\r\n            fr.onloadend = function () {\r\n                callback(fr.result);\r\n            };\r\n            fr.readAsDataURL(file);\r\n        },\r\n\r\n        /**\r\n         *  Image file input handler\r\n         * @private\r\n         */\r\n        _onImageInputChange: function () {\r\n            var jFile = this.element.find(this._videoPreviewInputSelector),\r\n                file = jFile[0],\r\n                val = jFile.val(),\r\n                prev = this._getPreviewImage(),\r\n                ext = '.' + val.split('.').pop();\r\n\r\n            if (!val) {\r\n                return;\r\n            }\r\n            ext = ext ? ext.toLowerCase() : '';\r\n\r\n            if (\r\n                ext.length < 2 ||\r\n                this._imageTypes.indexOf(ext.toLowerCase()) === -1 || !file.files || !file.files.length\r\n            ) {\r\n                prev.remove();\r\n                this._previewImage = null;\r\n                jFile.val('');\r\n\r\n                return;\r\n            } // end if\r\n            file = file.files[0];\r\n            this._tempPreviewImageData = null;\r\n            this._onPreview(null, file, true);\r\n        },\r\n\r\n        /**\r\n         * Change Preview\r\n         * @param {String} error\r\n         * @param {String} src\r\n         * @param {Boolean} local\r\n         * @private\r\n         */\r\n        _onPreview: function (error, src, local) {\r\n            var img, renderImage;\r\n\r\n            img = this._getPreviewImage();\r\n\r\n            /**\r\n             * Callback\r\n             * @param {String} source\r\n             */\r\n            renderImage = function (source) {\r\n                img.attr({\r\n                    'src': source\r\n                }).show();\r\n            };\r\n\r\n            if (error) {\r\n                return;\r\n            }\r\n\r\n            if (!local) {\r\n                renderImage(src);\r\n            } else {\r\n                this._readPreviewLocal(src, renderImage);\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Return preview image imstance\r\n         * @returns {null}\r\n         * @private\r\n         */\r\n        _getPreviewImage: function () {\r\n\r\n            if (!this._previewImage) {\r\n                this._previewImage = $(document.createElement('img')).css({\r\n                    'width': '100%',\r\n                    'display': 'none',\r\n                    'src': ''\r\n                });\r\n                $(this._previewImage).insertAfter(this.element.find(this._videoPreviewImagePointer));\r\n                $(this._previewImage).attr('data-role', 'video_preview_image');\r\n            }\r\n\r\n            return this._previewImage;\r\n        },\r\n\r\n        /**\r\n         * Close slideout dialog\r\n         */\r\n        close: function () {\r\n            this.element.modal('closeModal');\r\n        },\r\n\r\n        /**\r\n         * Close dialog wrap\r\n         * @private\r\n         */\r\n        _onClose: function () {\r\n            var newVideoForm;\r\n\r\n            this._isEditPage = true;\r\n            this.imageData = null;\r\n\r\n            if (this._previewImage) {\r\n                this._previewImage.remove();\r\n                this._previewImage = null;\r\n            }\r\n            this._tempPreviewImageData = null;\r\n            this.element.trigger('reset');\r\n            newVideoForm = this.element.find(this._videoFormSelector);\r\n\r\n            $(newVideoForm).find('input[type=\"hidden\"][name!=\"form_key\"]').val('');\r\n            this._gallery.find('input[name*=\"' + this.element.find(\r\n                    this._itemIdSelector).val() + '\"]'\r\n            ).parent().removeClass('active');\r\n\r\n            try {\r\n                newVideoForm.validation('clearError');\r\n            } catch (e) {\r\n\r\n            }\r\n            newVideoForm.trigger('reset');\r\n        },\r\n\r\n        /**\r\n         * Find element by fileName\r\n         * @param {String} file\r\n         */\r\n        findElementId: function (file) {\r\n            var elem = this._gallery.find('.image.item').find('input[value=\"' + file + '\"]');\r\n\r\n            if (!elem.length) {\r\n                return null;\r\n            }\r\n\r\n            return $(elem).attr('name').replace('product[media_gallery][images][', '').replace('][file]', '');\r\n        },\r\n\r\n        /**\r\n         * Save image roles\r\n         * @param {Object} imageData\r\n         */\r\n        saveImageRoles: function (imageData) {\r\n            var data = imageData.file,\r\n                self = this,\r\n                containers;\r\n\r\n            if (data && data.length > 0) {\r\n                containers = this._gallery.find('.image-placeholder').siblings('input');\r\n                $.each(containers, function (i, el) {\r\n                    var start = el.name.indexOf('[') + 1,\r\n                        end = el.name.indexOf(']'),\r\n                        imageType = el.name.substring(start, end),\r\n                        imageCheckbox = self.element.find(\r\n                            self._videoFormSelector + ' input[value=\"' + imageType + '\"]'\r\n                        );\r\n\r\n                    self._changeRole(imageType, imageCheckbox.attr('checked'), imageData);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change image role\r\n         * @param {String} imageType - role name\r\n         * @param {bool} isEnabled - role active status\r\n         * @param {Object} imageData - image data object\r\n         * @private\r\n         */\r\n        _changeRole: function (imageType, isEnabled, imageData) {\r\n            var needCheked = true;\r\n\r\n            if (!isEnabled) {\r\n                needCheked = this._gallery.find('input[name=\"product[' + imageType + ']\"]').val() === imageData.file;\r\n            }\r\n\r\n            if (!needCheked) {\r\n                return null;\r\n            }\r\n\r\n            this._gallery.trigger('setImageType', {\r\n                type: imageType,\r\n                imageData: isEnabled ? imageData : null\r\n            });\r\n        },\r\n\r\n        /**\r\n         * On open dialog\r\n         * @param {Object} e\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _onOpenDialog: function (e, imageData) {\r\n            var formFields, flagChecked, file,\r\n                modal = this.element.closest('.mage-new-video-dialog');\r\n\r\n            if (imageData['media_type'] === 'external-video') {\r\n                this.imageData = imageData;\r\n                modal.find('.video-create-button').hide();\r\n                modal.find('.video-delete-button').show();\r\n                modal.find('.video-edit').show();\r\n                modal.createVideoPlayer({\r\n                    reset: true\r\n                }).createVideoPlayer('reset');\r\n\r\n                formFields = modal.find(this._videoFormSelector).find('.edited-data');\r\n\r\n                $.each(formFields, function (i, field) {\r\n                    $(field).val(imageData[field.name]);\r\n                });\r\n\r\n                flagChecked = imageData.disabled > 0;\r\n                modal.find(this._videoDisableinputSelector).prop('checked', flagChecked);\r\n\r\n                file = modal.find('#file_name').val(imageData.file);\r\n\r\n                $.each(modal.find('.video_image_role'), function () {\r\n                    $(this).prop('checked', false).prop('disabled', false);\r\n                });\r\n\r\n                $.each(this._gallery.find('.image-placeholder').siblings('input:hidden'), function () {\r\n                    var start, end, imageRole;\r\n\r\n                    if ($(this).val() === file.val()) {\r\n                        start = this.name.indexOf('[') + 1;\r\n                        end = this.name.length - 1;\r\n                        imageRole = this.name.substring(start, end);\r\n                        modal.find('#new_video_form input[value=\"' + imageRole + '\"]').prop('checked', true);\r\n                    }\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Toggle buttons\r\n         */\r\n        toggleButtons: function () {\r\n            var self = this,\r\n                modal = this.element.closest('.mage-new-video-dialog');\r\n\r\n            modal.find('.video-placeholder, .add-video-button-container > button').click(function () {\r\n                modal.find('.video-create-button').show();\r\n                modal.find('.video-delete-button').hide();\r\n                modal.find('.video-edit').hide();\r\n                modal.createVideoPlayer({\r\n                    reset: true\r\n                }).createVideoPlayer('reset').updateInputFields({\r\n                    reset: true\r\n                }).updateInputFields('reset');\r\n            });\r\n            this._gallery.on('click', '.item.video-item', function () {\r\n                modal.find('.video-create-button').hide();\r\n                modal.find('.video-delete-button').show();\r\n                modal.find('.video-edit').show();\r\n                modal.find('.mage-new-video-dialog').createVideoPlayer({\r\n                    reset: true\r\n                }).createVideoPlayer('reset');\r\n            });\r\n            this._gallery.on('click', '.item.video-item:not(.removed)', function () {\r\n                var flagChecked,\r\n                    file,\r\n                    formFields = modal.find('.edited-data'),\r\n                    container = $(this);\r\n\r\n                $.each(formFields, function (i, field) {\r\n                    $(field).val(container.find('input[name*=\"' + field.name + '\"]').val());\r\n                });\r\n\r\n                flagChecked = container.find('input[name*=\"disabled\"]').val() > 0;\r\n                self._gallery.find(self._videoDisableinputSelector).attr('checked', flagChecked);\r\n\r\n                file = self._gallery.find('#file_name').val(container.find('input[name*=\"file\"]').val());\r\n\r\n                $.each(self._gallery.find('.video_image_role'), function () {\r\n                    $(this).prop('checked', false).prop('disabled', false);\r\n                });\r\n\r\n                $.each(self._gallery.find('.image-placeholder').siblings('input:hidden'), function () {\r\n                    var start, end, imageRole;\r\n\r\n                    if ($(this).val() !== file.val()) {\r\n                        return null;\r\n                    }\r\n\r\n                    start = this.name.indexOf('[') + 1;\r\n                    end = this.name.length - 1;\r\n                    imageRole = this.name.substring(start, end);\r\n                    self._gallery.find('input[value=\"' + imageRole + '\"]').prop('checked', true);\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    $('#group-fields-image-management > legend > span').text($.mage.__('Images and Videos'));\r\n\r\n    return $.mage.newVideoDialog;\r\n});\r\n","Magento_ProductVideo/js/video-modal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'productGallery',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/backend/tree-suggest',\r\n    'mage/backend/validation',\r\n    'newVideoDialog'\r\n], function ($, productGallery) {\r\n    'use strict';\r\n\r\n    $.widget('mage.productGallery', productGallery, {\r\n\r\n        /**\r\n         * Bind events\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var events = {},\r\n                itemId;\r\n\r\n            this._super();\r\n\r\n            /**\r\n             * Add item_id value to opened modal\r\n             * @param {Object} event\r\n             */\r\n            events['click ' + this.options.imageSelector] = function (event) {\r\n                if (!$(event.currentTarget).is('.ui-sortable-helper')) {\r\n                    itemId = $(event.currentTarget).find('input')[0].name.match(/\\[([^\\]]*)\\]/g)[2];\r\n                    this.videoDialog.find('#item_id').val(itemId);\r\n                }\r\n            };\r\n            this._on(events);\r\n            this.element.prev().find('[data-role=\"add-video-button\"]').on('click', this.showModal.bind(this));\r\n            this.element.on('openDialog', '.gallery.ui-sortable', $.proxy(this._onOpenDialog, this));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this.videoDialog = this.element.find('#new-video');\r\n            this.videoDialog.mage('newVideoDialog', this.videoDialog.data('modalInfo'));\r\n        },\r\n\r\n        /**\r\n         * Open dialog for external video\r\n         * @private\r\n         */\r\n        _onOpenDialog: function (e, imageData) {\r\n\r\n            if (imageData['media_type'] !== 'external-video') {\r\n                this._superApply(arguments);\r\n            } else {\r\n                this.showModal();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Fired on trigger \"openModal\"\r\n         */\r\n        showModal: function () {\r\n            this.videoDialog.modal('openModal');\r\n        }\r\n    });\r\n\r\n    return $.mage.productGallery;\r\n});\r\n","Magento_ReleaseNotification/js/modal/component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal-component',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate'\r\n], function ($, Modal, alert, $t) {\r\n    'use strict';\r\n\r\n    return Modal.extend({\r\n        defaults: {\r\n            imports: {\r\n                logAction:  '${ $.provider }:data.logAction'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Error handler.\r\n         *\r\n         * @param {Object} xhr - request result.\r\n         */\r\n        onError: function (xhr) {\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            alert({\r\n                content: xhr.message || $t('An error occurred while logging process.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Log release notes show\r\n         */\r\n        logReleaseNotesShow: function () {\r\n            var self = this,\r\n                data = {\r\n                    'form_key': window.FORM_KEY\r\n                };\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.logAction,\r\n                data: data,\r\n                showLoader: true\r\n            }).done(function (xhr) {\r\n                if (xhr.error) {\r\n                    self.onError(xhr);\r\n                }\r\n            }).fail(this.onError);\r\n        },\r\n\r\n        /**\r\n         * Close release notes\r\n         */\r\n        closeReleaseNotes: function () {\r\n            this.logReleaseNotesShow();\r\n            this.closeModal();\r\n        }\r\n    });\r\n});\r\n","Magento_Review/js/rating.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('marketing.ratingControl', {\r\n        options: {\r\n            colorFilled: '#333',\r\n            colorUnfilled: '#CCCCCC',\r\n            colorHover: '#f30'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._labels = this.element.find('label');\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._labels.on({\r\n                click: $.proxy(function (e) {\r\n                    $(e.currentTarget).prev().prop('checked', true);\r\n                    this._updateRating();\r\n                }, this),\r\n\r\n                hover: $.proxy(function (e) {\r\n                    this._updateHover($(e.currentTarget), this.options.colorHover);\r\n                }, this),\r\n\r\n                mouseleave: $.proxy(function (e) {\r\n                    this._updateHover($(e.currentTarget), this.options.colorUnfilled);\r\n                }, this)\r\n            });\r\n\r\n            this._updateRating();\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery} elem\r\n         * @param {String} color\r\n         * @private\r\n         */\r\n        _updateHover: function (elem, color) {\r\n            elem.nextAll('label').addBack().filter(function () {\r\n                return !$(this).data('checked');\r\n            }).css('color', color);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _updateRating: function () {\r\n            var checkedInputs = this.element.find('input[type=\"radio\"]:checked');\r\n\r\n            checkedInputs.nextAll('label').addBack().css('color', this.options.colorFilled).data('checked', true);\r\n            checkedInputs.prevAll('label').css('color', this.options.colorUnfilled).data('checked', false);\r\n        },\r\n\r\n        /**\r\n         * Remove rating when form reset\r\n         */\r\n        removeRating: function () {\r\n            var checkedInputs = this.element.find('input[type=\"radio\"]');\r\n\r\n            checkedInputs.nextAll('label').css('color', this.options.colorUnfilled).data('checked', false);\r\n        }\r\n    });\r\n\r\n});\r\n","Magento_Rule/conditions-data-normalizer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    var ConditionsDataNormalizer = function () {\r\n        this.patterns = {\r\n            validate: /^[a-z0-9_.-][a-z0-9_.-]*(?:\\[(?:\\d*|[a-z0-9_.-]+)\\])*$/i,\r\n            key: /[a-z0-9_.-]+|(?=\\[\\])/gi,\r\n            push: /^$/,\r\n            fixed: /^\\d+$/,\r\n            named: /^[a-z0-9_.-]+$/i\r\n        };\r\n    };\r\n\r\n    ConditionsDataNormalizer.prototype = {\r\n        /**\r\n         * Will convert an object:\r\n         * {\r\n         *   \"foo[bar][1][baz]\": 123,\r\n         *   \"foo[bar][1][blah]\": 321\r\n         *   \"foo[bar][1--1][ah]\": 456\r\n         * }\r\n         *\r\n         * to\r\n         * {\r\n         *   \"foo\": {\r\n         *     \"bar\": {\r\n         *       \"1\": {\r\n         *         \"baz\": 123,\r\n         *         \"blah\": 321\r\n         *       },\r\n         *       \"1--1\": {\r\n         *         \"ah\": 456\r\n         *       }\r\n         *     }\r\n         *   }\r\n         * }\r\n         */\r\n        normalize: function normalize(value) {\r\n            var el, _this = this;\r\n\r\n            this.pushes = {};\r\n            this.data = {};\r\n\r\n            _.each(value, function (e, i) {\r\n                el = {};\r\n                el[i] = e;\r\n\r\n                _this._addPair({\r\n                    name: i,\r\n                    value: e\r\n                });\r\n            });\r\n\r\n            return this.data;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} base\r\n         * @param {String} key\r\n         * @param {String} value\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _build: function build(base, key, value) {\r\n            base[key] = value;\r\n\r\n            return base;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} root\r\n         * @param {String} value\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _makeObject: function makeObject(root, value) {\r\n            var keys = root.match(this.patterns.key),\r\n                k, idx; // nest, nest, ..., nest\r\n\r\n            while ((k = keys.pop()) !== undefined) {\r\n                // foo[]\r\n                if (this.patterns.push.test(k)) {\r\n                    idx = this._incrementPush(root.replace(/\\[\\]$/, ''));\r\n                    value = this._build([], idx, value);\r\n                } // foo[n]\r\n                else if (this.patterns.fixed.test(k)) {\r\n                    value = this._build({}, k, value);\r\n                } // foo; foo[bar]\r\n                else if (this.patterns.named.test(k)) {\r\n                    value = this._build({}, k, value);\r\n                }\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _incrementPush: function incrementPush(key) {\r\n            if (this.pushes[key] === undefined) {\r\n                this.pushes[key] = 0;\r\n            }\r\n\r\n            return this.pushes[key]++;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} pair\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _addPair: function addPair(pair) {\r\n            var obj = this._makeObject(pair.name, pair.value);\r\n\r\n            if (!this.patterns.validate.test(pair.name)) {\r\n                return this;\r\n            }\r\n\r\n            this.data = $.extend(true, this.data, obj);\r\n\r\n            return this;\r\n        }\r\n    };\r\n\r\n    return ConditionsDataNormalizer;\r\n});\r\n","Magento_Rule/rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate',\r\n    'prototype'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    var VarienRulesForm = new Class.create();\r\n\r\n    VarienRulesForm.prototype = {\r\n        initialize: function (parent, newChildUrl) {\r\n            this.parent = $(parent);\r\n            this.newChildUrl  = newChildUrl;\r\n            this.shownElement = null;\r\n            this.updateElement = null;\r\n            this.chooserSelectedItems = $H({});\r\n            this.readOnly = false;\r\n\r\n            var elems = this.parent.getElementsByClassName('rule-param');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                this.initParam(elems[i]);\r\n            }\r\n        },\r\n\r\n        setReadonly: function (readonly) {\r\n            this.readOnly = readonly;\r\n            var elems = this.parent.getElementsByClassName('rule-param-remove');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                var element = elems[i];\r\n\r\n                if (this.readOnly) {\r\n                    element.hide();\r\n                } else {\r\n                    element.show();\r\n                }\r\n            }\r\n\r\n            var elems = this.parent.getElementsByClassName('rule-param-new-child');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                var element = elems[i];\r\n\r\n                if (this.readOnly) {\r\n                    element.hide();\r\n                } else {\r\n                    element.show();\r\n                }\r\n            }\r\n\r\n            var elems = this.parent.getElementsByClassName('rule-param');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                var container = elems[i];\r\n                var label = Element.down(container, '.label');\r\n\r\n                if (label) {\r\n                    if (this.readOnly) {\r\n                        label.addClassName('label-disabled');\r\n                    } else {\r\n                        label.removeClassName('label-disabled');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        initParam: function (container) {\r\n            container.rulesObject = this;\r\n            var label = Element.down(container, '.label');\r\n\r\n            if (label) {\r\n                Event.observe(label, 'click', this.showParamInputField.bind(this, container));\r\n            }\r\n\r\n            var elem = Element.down(container, '.element');\r\n\r\n            if (elem) {\r\n                var trig = elem.down('.rule-chooser-trigger');\r\n\r\n                if (trig) {\r\n                    Event.observe(trig, 'click', this.toggleChooser.bind(this, container));\r\n                }\r\n\r\n                var apply = elem.down('.rule-param-apply');\r\n\r\n                if (apply) {\r\n                    Event.observe(apply, 'click', this.hideParamInputField.bind(this, container));\r\n                } else {\r\n                    elem = elem.down('.element-value-changer');\r\n                    elem.container = container;\r\n\r\n                    if (!elem.multiple) {\r\n                        Event.observe(elem, 'change', this.hideParamInputField.bind(this, container));\r\n\r\n                        this.changeVisibilityForValueRuleParam(elem);\r\n\r\n                    }\r\n                    Event.observe(elem, 'blur', this.hideParamInputField.bind(this, container));\r\n                }\r\n            }\r\n\r\n            var remove = Element.down(container, '.rule-param-remove');\r\n\r\n            if (remove) {\r\n                Event.observe(remove, 'click', this.removeRuleEntry.bind(this, container));\r\n            }\r\n        },\r\n\r\n        showChooserElement: function (chooser) {\r\n            this.chooserSelectedItems = $H({});\r\n\r\n            if (chooser.hasClassName('no-split')) {\r\n                this.chooserSelectedItems.set(this.updateElement.value, 1);\r\n            } else {\r\n                var values = this.updateElement.value.split(','),\r\n s = '';\r\n\r\n                for (var i = 0; i < values.length; i++) {\r\n                    s = values[i].strip();\r\n\r\n                    if (s != '') {\r\n                        this.chooserSelectedItems.set(s, 1);\r\n                    }\r\n                }\r\n            }\r\n            new Ajax.Request(chooser.getAttribute('url'), {\r\n                evalScripts: true,\r\n                parameters: {\r\n                    'form_key': FORM_KEY, 'selected[]': this.chooserSelectedItems.keys()\r\n                },\r\n                onSuccess: function (transport) {\r\n                    if (this._processSuccess(transport)) {\r\n                        jQuery(chooser).html(transport.responseText);\r\n                        this.showChooserLoaded(chooser, transport);\r\n                        jQuery(chooser).trigger('contentUpdated');\r\n                    }\r\n                }.bind(this),\r\n                onFailure: this._processFailure.bind(this)\r\n            });\r\n        },\r\n\r\n        showChooserLoaded: function (chooser, transport) {\r\n            chooser.style.display = 'block';\r\n        },\r\n\r\n        showChooser: function (container, event) {\r\n            var chooser = container.up('li');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser = chooser.down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            this.showChooserElement(chooser);\r\n        },\r\n\r\n        hideChooser: function (container, event) {\r\n            var chooser = container.up('li');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser = chooser.down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser.style.display = 'none';\r\n        },\r\n\r\n        toggleChooser: function (container, event) {\r\n            if (this.readOnly) {\r\n                return false;\r\n            }\r\n\r\n            var chooser = container.up('li').down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n\r\n            if (chooser.style.display == 'block') {\r\n                chooser.style.display = 'none';\r\n                this.cleanChooser(container, event);\r\n            } else {\r\n                this.showChooserElement(chooser);\r\n            }\r\n        },\r\n\r\n        cleanChooser: function (container, event) {\r\n            var chooser = container.up('li').down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser.innerHTML = '';\r\n        },\r\n\r\n        showParamInputField: function (container, event) {\r\n            if (this.readOnly) {\r\n                return false;\r\n            }\r\n\r\n            if (this.shownElement) {\r\n                this.hideParamInputField(this.shownElement, event);\r\n            }\r\n\r\n            Element.addClassName(container, 'rule-param-edit');\r\n            var elemContainer = Element.down(container, '.element');\r\n\r\n            var elem = Element.down(elemContainer, 'input.input-text');\r\n\r\n            jQuery(elem).trigger('contentUpdated');\r\n\r\n            if (elem) {\r\n                elem.focus();\r\n\r\n                if (elem && elem.id && elem.id.match(/__value$/)) {\r\n                    this.updateElement = elem;\r\n                }\r\n\r\n            }\r\n\r\n            var elem = Element.down(elemContainer, '.element-value-changer');\r\n\r\n            if (elem) {\r\n                elem.focus();\r\n            }\r\n\r\n            this.shownElement = container;\r\n        },\r\n\r\n        hideParamInputField: function (container, event) {\r\n            Element.removeClassName(container, 'rule-param-edit');\r\n            var label = Element.down(container, '.label'),\r\n elem;\r\n\r\n            if (!container.hasClassName('rule-param-new-child')) {\r\n                elem = Element.down(container, '.element-value-changer');\r\n\r\n                if (elem && elem.options) {\r\n                    var selectedOptions = [];\r\n\r\n                    for (var i = 0; i < elem.options.length; i++) {\r\n                        if (elem.options[i].selected) {\r\n                            selectedOptions.push(elem.options[i].text);\r\n                        }\r\n                    }\r\n\r\n                    var str = selectedOptions.join(', ');\r\n\r\n                    label.innerHTML = str != '' ? str : '...';\r\n                }\r\n\r\n                this.changeVisibilityForValueRuleParam(elem);\r\n\r\n                elem = Element.down(container, 'input.input-text');\r\n\r\n                if (elem) {\r\n                    var str = elem.value.replace(/(^\\s+|\\s+$)/g, '');\r\n\r\n                    elem.value = str;\r\n\r\n                    if (str == '') {\r\n                        str = '...';\r\n                    } else if (str.length > 30) {\r\n                        str = str.substr(0, 30) + '...';\r\n                    }\r\n                    label.innerHTML = str.escapeHTML();\r\n                }\r\n            } else {\r\n                elem = container.down('.element-value-changer');\r\n\r\n                if (elem.value) {\r\n                    this.addRuleNewChild(elem);\r\n                }\r\n                elem.value = '';\r\n            }\r\n\r\n            if (elem && elem.id && elem.id.match(/__value$/)) {\r\n                this.hideChooser(container, event);\r\n                this.updateElement = null;\r\n            }\r\n\r\n            this.shownElement = null;\r\n        },\r\n\r\n        changeVisibilityForValueRuleParam: function(elem) {\r\n            var parsedElementId = elem.id.split('__');\r\n            if (parsedElementId[2] !== 'operator') {\r\n                return false;\r\n            }\r\n\r\n            var valueElement = jQuery('#' + parsedElementId[0] + '__' + parsedElementId[1] + '__value');\r\n\r\n            if(elem.value === '<=>') {\r\n                valueElement.closest('.rule-param').hide();\r\n            } else {\r\n                valueElement.closest('.rule-param').show();\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        addRuleNewChild: function (elem) {\r\n            var parent_id = elem.id.replace(/^.*__(.*)__.*$/, '$1');\r\n            var children_ul_id = elem.id.replace(/__/g, ':').replace(/[^:]*$/, 'children').replace(/:/g, '__');\r\n            var children_ul = $(this.parent).select('#' + children_ul_id)[0];\r\n            var max_id = 0,\r\n i;\r\n            var children_inputs = Selector.findChildElements(children_ul, $A(['input.hidden']));\r\n\r\n            if (children_inputs.length) {\r\n                children_inputs.each(function (el) {\r\n                    if (el.id.match(/__type$/)) {\r\n                        i = 1 * el.id.replace(/^.*__.*?([0-9]+)__.*$/, '$1');\r\n                        max_id = i > max_id ? i : max_id;\r\n                    }\r\n                });\r\n            }\r\n            var new_id = parent_id + '--' + (max_id + 1);\r\n            var new_type = elem.value;\r\n            var new_elem = document.createElement('LI');\r\n\r\n            new_elem.className = 'rule-param-wait';\r\n            new_elem.innerHTML = jQuery.mage.__('This won\\'t take long . . .');\r\n            children_ul.insertBefore(new_elem, $(elem).up('li'));\r\n\r\n            new Ajax.Request(this.newChildUrl, {\r\n                evalScripts: true,\r\n                parameters: {\r\n                    form_key: FORM_KEY, type: new_type.replace('/', '-'), id: new_id\r\n                },\r\n                onComplete: this.onAddNewChildComplete.bind(this, new_elem),\r\n                onSuccess: function (transport) {\r\n                    if (this._processSuccess(transport)) {\r\n                        $(new_elem).update(transport.responseText);\r\n                    }\r\n                }.bind(this),\r\n                onFailure: this._processFailure.bind(this)\r\n            });\r\n        },\r\n\r\n        _processSuccess: function (transport) {\r\n            if (transport.responseText.isJSON()) {\r\n                var response = transport.responseText.evalJSON();\r\n\r\n                if (response.error) {\r\n                    alert(response.message);\r\n                }\r\n\r\n                if (response.ajaxExpired && response.ajaxRedirect) {\r\n                    setLocation(response.ajaxRedirect);\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _processFailure: function (transport) {\r\n            location.href = BASE_URL;\r\n        },\r\n\r\n        onAddNewChildComplete: function (new_elem) {\r\n            if (this.readOnly) {\r\n                return false;\r\n            }\r\n\r\n            $(new_elem).removeClassName('rule-param-wait');\r\n            var elems = new_elem.getElementsByClassName('rule-param');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                this.initParam(elems[i]);\r\n            }\r\n        },\r\n\r\n        removeRuleEntry: function (container, event) {\r\n            var li = Element.up(container, 'li');\r\n\r\n            li.parentNode.removeChild(li);\r\n        },\r\n\r\n        chooserGridInit: function (grid) {\r\n            //grid.reloadParams = {'selected[]':this.chooserSelectedItems.keys()};\r\n        },\r\n\r\n        chooserGridRowInit: function (grid, row) {\r\n            if (!grid.reloadParams) {\r\n                grid.reloadParams = {\r\n                    'selected[]': this.chooserSelectedItems.keys()\r\n                };\r\n            }\r\n        },\r\n\r\n        chooserGridRowClick: function (grid, event) {\r\n            var trElement = Event.findElement(event, 'tr');\r\n            var isInput = Event.element(event).tagName == 'INPUT';\r\n\r\n            if (trElement) {\r\n                var checkbox = Element.select(trElement, 'input');\r\n\r\n                if (checkbox[0]) {\r\n                    var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n\r\n                    grid.setCheckboxChecked(checkbox[0], checked);\r\n\r\n                }\r\n            }\r\n        },\r\n\r\n        chooserGridCheckboxCheck: function (grid, element, checked) {\r\n            if (checked) {\r\n                if (!element.up('th')) {\r\n                    this.chooserSelectedItems.set(element.value, 1);\r\n                }\r\n            } else {\r\n                this.chooserSelectedItems.unset(element.value);\r\n            }\r\n            grid.reloadParams = {\r\n                'selected[]': this.chooserSelectedItems.keys()\r\n            };\r\n            this.updateElement.value = this.chooserSelectedItems.keys().join(', ');\r\n        }\r\n    };\r\n\r\n    return VarienRulesForm;\r\n});\r\n","Magento_Sales/js/bootstrap/order-create-index.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Sales/order/create/giftmessage'\r\n]);\r\n","Magento_Sales/js/bootstrap/order-post-action.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Sales/order/view/post-wrapper'\r\n]);\r\n","Magento_Sales/order/giftoptions_tooltip.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'prototype'\r\n], function () {\r\n    'use strict';\r\n\r\n    var GiftOptionsTooltip = Class.create();\r\n\r\n    GiftOptionsTooltip.prototype = {\r\n        _tooltipLines: [],\r\n        _tooltipWindow: null,\r\n        _tooltipWindowContent: null,\r\n        _targetLinks: [],\r\n        _eventMouseOver: null,\r\n        _eventMouseOut: null,\r\n        _styleOptions: null,\r\n        _tooltipContentLoaderFunction: null,\r\n\r\n        /**\r\n         * Initialize tooltip object\r\n         */\r\n        initialize: function () {\r\n            var options = Object.extend({\r\n                'delta_x': 30,\r\n                'delta_y': 0,\r\n                zindex: 1000\r\n            });\r\n\r\n            this._styleOptions = options;\r\n            this._eventMouseOver = this.showTooltip.bindAsEventListener(this);\r\n            this._eventMouseOut = this.hideTooltip.bindAsEventListener(this);\r\n        },\r\n\r\n        /**\r\n         * Set gift options tooltip window\r\n         *\r\n         * @param {String} windowId\r\n         * @param {String} contentId\r\n         *\r\n         * @return boolean success\r\n         */\r\n        setTooltipWindow: function (windowId, contentId) {\r\n            if (!$(windowId) || !$(contentId)) {\r\n                return false;\r\n            }\r\n            this._tooltipWindow = $(windowId);\r\n            this._tooltipWindowContent = $(contentId);\r\n            $(document.body).insert({\r\n                bottom: this._tooltipWindow\r\n            });\r\n            this.hideTooltip();\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Add tooltip to specified link\r\n         *\r\n         * @param {String} linkId\r\n         * @param {String} itemId - identifier of the item related to link\r\n         *\r\n         * @return boolean success\r\n         */\r\n        addTargetLink: function (linkId, itemId) {\r\n            if ($(linkId)) {\r\n                this._targetLinks[linkId] = [];\r\n                this._targetLinks[linkId].object = $(linkId);\r\n                this._targetLinks[linkId].itemId = itemId;\r\n                this._registerEvents(this._targetLinks[linkId].object);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Detach event listeners from target links when tooltip is destroyed\r\n         */\r\n        destroy: function () {\r\n            var linkId;\r\n\r\n            for (linkId in this._targetLinks) { //eslint-disable-line guard-for-in\r\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseover', this._eventMouseOver);\r\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseout', this._eventMouseOut);\r\n            }\r\n        },\r\n\r\n        /**\r\n         *  Register event listeners\r\n         *\r\n         *  @param {HTMLElement} element\r\n         */\r\n        _registerEvents: function (element) {\r\n            Event.observe(element, 'mouseover', this._eventMouseOver);\r\n            Event.observe(element, 'mouseout', this._eventMouseOut);\r\n        },\r\n\r\n        /**\r\n         * Move tooltip to mouse position\r\n         *\r\n         * @param {Prototype.Event} event\r\n         */\r\n        _moveTooltip: function (event) {\r\n            var mouseX, mouseY;\r\n\r\n            Event.stop(event);\r\n            mouseX = Event.pointerX(event);\r\n            mouseY = Event.pointerY(event);\r\n\r\n            this.setStyles(mouseX, mouseY);\r\n        },\r\n\r\n        /**\r\n         * Show tooltip\r\n         *\r\n         * @param {Object} event\r\n         *\r\n         * @return boolean success\r\n         */\r\n        showTooltip: function (event) {\r\n            var link, itemId, tooltipContent;\r\n\r\n            Event.stop(event);\r\n\r\n            if (this._tooltipWindow) {\r\n                link = Event.element(event);\r\n                itemId = this._targetLinks[link.id].itemId;\r\n                tooltipContent = '';\r\n\r\n                if (Object.isFunction(this._tooltipContentLoaderFunction)) {\r\n                    tooltipContent = this._tooltipContentLoaderFunction(itemId);\r\n                }\r\n\r\n                if (tooltipContent != '') { //eslint-disable-line eqeqeq\r\n                    this._updateTooltipWindowContent(tooltipContent);\r\n                    this._moveTooltip(event);\r\n                    new Element.show(this._tooltipWindow);\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set tooltip window styles\r\n         *\r\n         * @param {Number} x\r\n         * @param {Number} y\r\n         */\r\n        setStyles: function (x, y) {\r\n            Element.setStyle(this._tooltipWindow, {\r\n                position: 'absolute',\r\n                top: y + this._styleOptions['delta_y'] + 'px',\r\n                left: x + this._styleOptions['delta_x'] + 'px',\r\n                zindex: this._styleOptions.zindex\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Hide tooltip\r\n         */\r\n        hideTooltip: function () {\r\n            if (this._tooltipWindow) {\r\n                new Element.hide(this._tooltipWindow);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set gift options tooltip content loader function\r\n         * This function should accept at least one parameter that will serve as an item ID\r\n         *\r\n         * @param {Function} loaderFunction - loader function\r\n         */\r\n        setTooltipContentLoaderFunction: function (loaderFunction) {\r\n            this._tooltipContentLoaderFunction = loaderFunction;\r\n        },\r\n\r\n        /**\r\n         * Update tooltip window content\r\n         *\r\n         * @param {String} content\r\n         */\r\n        _updateTooltipWindowContent: function (content) {\r\n            this._tooltipWindowContent.update(content);\r\n        }\r\n    };\r\n\r\n    window.giftOptionsTooltip = new GiftOptionsTooltip();\r\n});\r\n","Magento_Sales/order/create/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global AdminOrder */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Sales/order/create/scripts'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    var $el = jQuery('#edit_form'),\r\n        config,\r\n        baseUrl,\r\n        order,\r\n        payment;\r\n\r\n    if (!$el.length || !$el.data('order-config')) {\r\n        return;\r\n    }\r\n\r\n    config = $el.data('order-config');\r\n    baseUrl = $el.data('load-base-url');\r\n\r\n    order = new AdminOrder(config);\r\n    order.setLoadBaseUrl(baseUrl);\r\n\r\n    payment = {\r\n        switchMethod: order.switchPaymentMethod.bind(order)\r\n    };\r\n\r\n    window.order = order;\r\n    window.payment = payment;\r\n});\r\n","Magento_Sales/order/create/giftmessage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/********************* GIFT OPTIONS POPUP ***********************/\r\n/********************* GIFT OPTIONS SET ***********************/\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'mage/validation',\r\n    'prototype'\r\n], function (jQuery) {\r\n\r\n    window.giftMessagesController = {\r\n        toogleRequired: function (source, objects) {\r\n            if (!$(source).value.blank()) {\r\n                objects.each(function (item) {\r\n                    $(item).addClassName('required-entry');\r\n                    var label = findFieldLabel($(item));\r\n\r\n                    if (label) {\r\n                        var span = label.down('span');\r\n\r\n                        if (!span) {\r\n                            Element.insert(label, {\r\n                                bottom: '&nbsp;<span class=\"required\">*</span>'\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                objects.each(function (item) {\r\n                    if ($(source).formObj && $(source).formObj.validator) {\r\n                        $(source).formObj.validator.reset(item);\r\n                    }\r\n                    $(item).removeClassName('required-entry');\r\n                    var label = findFieldLabel($(item));\r\n\r\n                    if (label) {\r\n                        var span = label.down('span');\r\n\r\n                        if (span) {\r\n                            Element.remove(span);\r\n                        }\r\n                    }\r\n                    // Hide validation advices if exist\r\n                    if ($(item) && $(item).advices) {\r\n                        $(item).advices.each(function (pair) {\r\n                            if (pair.value != null) pair.value.hide();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        toogleGiftMessage: function (container) {\r\n            if (!$(container).toogleGiftMessage) {\r\n                $(container).toogleGiftMessage = true;\r\n                $(this.getFieldId(container, 'edit')).show();\r\n                $(container).down('.action-link').addClassName('open');\r\n                $(container).down('.default-text').hide();\r\n                $(container).down('.close-text').show();\r\n            } else {\r\n                $(container).toogleGiftMessage = false;\r\n                $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\r\n                var form = jQuery('#' + this.getFieldId(container, 'form'));\r\n\r\n                jQuery('#' + this.getFieldId(container, 'form')).validate({\r\n                    errorClass: 'mage-error'\r\n                });\r\n\r\n                if (!form.valid()) {\r\n                    return false;\r\n                }\r\n\r\n                new Ajax.Request($(this.getFieldId(container, 'form')).action, {\r\n                    parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\r\n                    loaderArea: container,\r\n                    onComplete: function (transport) {\r\n\r\n                        $(container).down('.action-link').removeClassName('open');\r\n                        $(container).down('.default-text').show();\r\n                        $(container).down('.close-text').hide();\r\n                        $(this.getFieldId(container, 'edit')).hide();\r\n\r\n                        if (transport.responseText.match(/YES/g)) {\r\n                            $(container).down('.default-text').down('.edit').show();\r\n                            $(container).down('.default-text').down('.add').hide();\r\n                        } else {\r\n                            $(container).down('.default-text').down('.add').show();\r\n                            $(container).down('.default-text').down('.edit').hide();\r\n                        }\r\n\r\n                    }.bind(this)\r\n                });\r\n            }\r\n\r\n            return false;\r\n        },\r\n        saveGiftMessage: function (container) {\r\n            $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\r\n\r\n            var form = jQuery('#' + this.getFieldId(container, 'form'));\r\n\r\n            form.validate({\r\n                errorClass: 'mage-error'\r\n            });\r\n\r\n            if (!form.valid()) {\r\n                return;\r\n            }\r\n\r\n            new Ajax.Request($(this.getFieldId(container, 'form')).action, {\r\n                parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\r\n                loaderArea: container,\r\n                onSuccess: function (response) {\r\n                    var message = '<div class=\"messages\"><div class=\"message message-success success\">' +\r\n                        response.responseText +\r\n                        '<div data-ui-id=\"messages-message-success\"></div></div></div>';\r\n\r\n                    jQuery('#messages').html(message);\r\n                    jQuery(document).scrollTop(0);\r\n                }\r\n            });\r\n        },\r\n        getFieldId: function (container, name) {\r\n            return container + '_' + name;\r\n        }\r\n    };\r\n\r\n    function findFieldLabel(field) {\r\n        var tdField = $(field).up('td');\r\n\r\n        if (tdField) {\r\n            var tdLabel = tdField.previous('td');\r\n\r\n            if (tdLabel) {\r\n                var label = tdLabel.down('label');\r\n\r\n                if (label) {\r\n                    return label;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    window.findFieldLabel = findFieldLabel;\r\n\r\n    window.GiftOptionsPopup = Class.create();\r\n    GiftOptionsPopup.prototype = {\r\n        //giftOptionsWindowMask: null,\r\n        giftOptionsWindow: null,\r\n\r\n        initialize: function () {\r\n            $$('.action-link').each(function (el) {\r\n                Event.observe(el, 'click', this.showItemGiftOptions.bind(this));\r\n            }, this);\r\n\r\n            // Move gift options popup to start of body, because soon it will contain FORM tag that can break DOM layout if within other FORM\r\n            var oldPopupContainer = $('gift_options_configure');\r\n\r\n            if (oldPopupContainer) {\r\n                oldPopupContainer.remove();\r\n            }\r\n\r\n            var newPopupContainer = $('gift_options_configure_new');\r\n\r\n            $(document.body).insert({\r\n                top: newPopupContainer\r\n            });\r\n            newPopupContainer.id = 'gift_options_configure';\r\n\r\n            // Put controls container inside a FORM tag so we can use Validator\r\n            var form = new Element('form', {\r\n                action: '#', id: 'gift_options_configuration_form', method: 'post'\r\n            });\r\n            var formContents = $('gift_options_form_contents');\r\n\r\n            if (formContents) {\r\n                formContents.parentNode.appendChild(form);\r\n                form.appendChild(formContents);\r\n            }\r\n\r\n            this.giftOptionsWindow = $('gift_options_configure');\r\n\r\n            jQuery(this.giftOptionsWindow).dialog({\r\n                autoOpen:   false,\r\n                modal:      true,\r\n                resizable:  false,\r\n                dialogClass: 'gift-options-popup',\r\n                minWidth:   500,\r\n                width:      '75%',\r\n                position: {\r\n                    my: 'left+12.5% top',\r\n                    at: 'center top',\r\n                    of: 'body'\r\n                },\r\n                open: function () {\r\n                    jQuery(this).closest('.ui-dialog').addClass('ui-dialog-active');\r\n\r\n                    var topMargin = jQuery(this).closest('.ui-dialog').children('.ui-dialog-titlebar').outerHeight() + 30;\r\n\r\n                    jQuery(this).closest('.ui-dialog').css('margin-top', topMargin);\r\n                },\r\n                close: function () {\r\n                    jQuery(this).closest('.ui-dialog').removeClass('ui-dialog-active');\r\n                }\r\n            });\r\n        },\r\n\r\n        showItemGiftOptions: function (event) {\r\n            var element = Event.element(event).id;\r\n            var itemId = element.sub('gift_options_link_', '');\r\n\r\n            jQuery(this.giftOptionsWindow).dialog('open');\r\n\r\n            this.setTitle(itemId);\r\n\r\n            Event.observe($('gift_options_cancel_button'), 'click', this.onCloseButton.bind(this));\r\n            Event.observe($('gift_options_ok_button'), 'click', this.onOkButton.bind(this));\r\n            Event.stop(event);\r\n        },\r\n\r\n        setTitle: function (itemId) {\r\n            var productTitleElement = $('order_item_' + itemId + '_title');\r\n            var productTitle = '';\r\n\r\n            if (productTitleElement) {\r\n                productTitle = productTitleElement.innerHTML;\r\n            }\r\n            jQuery(this.giftOptionsWindow).dialog({\r\n                title: jQuery.mage.__('Gift Options for ') + productTitle\r\n            });\r\n        },\r\n\r\n        onOkButton: function () {\r\n            var giftOptionsForm = jQuery('#gift_options_configuration_form');\r\n\r\n            if (!giftOptionsForm.validate({\r\n                errorClass: 'mage-error'\r\n            }).valid()) {\r\n                return false;\r\n            }\r\n\r\n            if (jQuery.isFunction(giftOptionsForm[0].reset)) {\r\n                giftOptionsForm[0].reset();\r\n            }\r\n            this.closeWindow();\r\n\r\n            return true;\r\n        },\r\n\r\n        onCloseButton: function () {\r\n            this.closeWindow();\r\n        },\r\n\r\n        closeWindow: function () {\r\n            jQuery(this.giftOptionsWindow).dialog('close');\r\n        }\r\n    };\r\n\r\n    window.GiftMessageSet = Class.create();\r\n\r\n    GiftMessageSet.prototype = {\r\n        destPrefix: 'current_item_giftmessage_',\r\n        sourcePrefix: 'giftmessage_',\r\n        fields: ['sender', 'recipient', 'message'],\r\n        isObserved: false,\r\n        callback: null,\r\n\r\n        initialize: function () {\r\n            $$('.action-link').each(function (el) {\r\n                Event.observe(el, 'click', this.setData.bind(this));\r\n            }, this);\r\n        },\r\n\r\n        setData: function (event) {\r\n            var element = Event.element(event).id;\r\n\r\n            this.id = element.sub('gift_options_link_', '');\r\n\r\n            if ($('gift-message-form-data-' + this.id)) {\r\n                this.fields.each(function (el) {\r\n                    if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\r\n                        $(this.destPrefix + el).value = $(this.sourcePrefix + this.id + '_' + el).value;\r\n                    }\r\n                }, this);\r\n                $('gift_options_giftmessage').show();\r\n            } else if ($('gift_options_giftmessage')) {\r\n                $('gift_options_giftmessage').hide();\r\n            }\r\n\r\n            if (!this.isObserved) {\r\n                Event.observe('gift_options_ok_button', 'click', this.saveData.bind(this));\r\n                this.isObserved = true;\r\n            }\r\n        },\r\n\r\n        prepareSaveData: function () {\r\n            var hash = $H();\r\n\r\n            $$('div[id^=gift_options_data_]').each(function (el) {\r\n                var fields = el.select('input', 'select', 'textarea');\r\n                var data = Form.serializeElements(fields, true);\r\n\r\n                hash.update(data);\r\n            });\r\n\r\n            return hash;\r\n        },\r\n\r\n        setSaveCallback: function (callback) {\r\n            if (typeof callback == 'function') {\r\n                this.callback = callback;\r\n            }\r\n        },\r\n\r\n        saveData: function (event) {\r\n            this.fields.each(function (el) {\r\n                if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\r\n                    $(this.sourcePrefix + this.id + '_' + el).value = $(this.destPrefix + el).value;\r\n                }\r\n            }, this);\r\n\r\n            if ($(this.sourcePrefix + this.id + '_form')) {\r\n                $(this.sourcePrefix + this.id + '_form').request();\r\n            } else if (typeof order != 'undefined') {\r\n                var data = this.prepareSaveData();\r\n                var self = this;\r\n\r\n                jQuery.when(order.loadArea(['items'], true, data.toObject())).done(function () {\r\n                    if (self.callback !== null) {\r\n                        self.callback();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n});\r\n","Magento_Sales/order/create/scripts.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/template',\r\n    'text!Magento_Sales/templates/order/create/shipping/reload.html',\r\n    'text!Magento_Sales/templates/order/create/payment/reload.html',\r\n    'mage/translate',\r\n    'prototype',\r\n    'Magento_Catalog/catalog/product/composite/configure',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (jQuery, confirm, alert, template, shippingTemplate, paymentTemplate) {\r\n\r\n    window.AdminOrder = new Class.create();\r\n\r\n    AdminOrder.prototype = {\r\n        initialize: function (data) {\r\n            if (!data) data = {};\r\n            this.loadBaseUrl = false;\r\n            this.customerId = data.customer_id ? data.customer_id : false;\r\n            this.storeId = data.store_id ? data.store_id : false;\r\n            this.quoteId = data['quote_id'] ? data['quote_id'] : false;\r\n            this.currencyId = false;\r\n            this.currencySymbol = data.currency_symbol ? data.currency_symbol : '';\r\n            this.addresses = data.addresses ? data.addresses : $H({});\r\n            this.shippingAsBilling = data.shippingAsBilling ? data.shippingAsBilling : false;\r\n            this.gridProducts = $H({});\r\n            this.gridProductsGift = $H({});\r\n            this.billingAddressContainer = '';\r\n            this.shippingAddressContainer = '';\r\n            this.isShippingMethodReseted = data.shipping_method_reseted ? data.shipping_method_reseted : false;\r\n            this.overlayData = $H({});\r\n            this.giftMessageDataChanged = false;\r\n            this.productConfigureAddFields = {};\r\n            this.productPriceBase = {};\r\n            this.collectElementsValue = true;\r\n            this.isOnlyVirtualProduct = false;\r\n            this.excludedPaymentMethods = [];\r\n            this.summarizePrice = true;\r\n            this.selectAddressEvent = false;\r\n            this.shippingTemplate = template(shippingTemplate, {\r\n                data: {\r\n                    title: jQuery.mage.__('Shipping Method'),\r\n                    linkText: jQuery.mage.__('Get shipping methods and rates')\r\n                }\r\n            });\r\n            this.paymentTemplate = template(paymentTemplate, {\r\n                data: {\r\n                    title: jQuery.mage.__('Payment Method'),\r\n                    linkText: jQuery.mage.__('Get available payment methods')\r\n                }\r\n            });\r\n\r\n            jQuery.async('#order-items', (function () {\r\n                this.dataArea = new OrderFormArea('data', $(this.getAreaId('data')), this);\r\n                this.itemsArea = Object.extend(new OrderFormArea('items', $(this.getAreaId('items')), this), {\r\n                    addControlButton: function (button) {\r\n                        var controlButtonArea = $(this.node).select('.actions')[0];\r\n                        if (typeof controlButtonArea != 'undefined') {\r\n                            var buttons = controlButtonArea.childElements();\r\n                            for (var i = 0; i < buttons.length; i++) {\r\n                                if (buttons[i].innerHTML.include(button.getLabel())) {\r\n                                    return;\r\n                                }\r\n                            }\r\n                            button.insertIn(controlButtonArea, 'top');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var searchButtonId = 'add_products',\r\n                    searchButton = new ControlButton(jQuery.mage.__('Add Products'), searchButtonId),\r\n                    searchAreaId = this.getAreaId('search');\r\n                searchButton.onClick = function () {\r\n                    $(searchAreaId).show();\r\n                    var el = this;\r\n                    window.setTimeout(function () {\r\n                        el.remove();\r\n                    }, 10);\r\n                };\r\n\r\n                jQuery.async('#order-items .admin__page-section-title', (function () {\r\n                    this.dataArea.onLoad = this.dataArea.onLoad.wrap(function (proceed) {\r\n                        proceed();\r\n                        this._parent.itemsArea.setNode($(this._parent.getAreaId('items')));\r\n                        this._parent.itemsArea.onLoad();\r\n                    });\r\n\r\n                    this.itemsArea.onLoad = this.itemsArea.onLoad.wrap(function (proceed) {\r\n                        proceed();\r\n                        if ($(searchAreaId) && !jQuery('#' + searchAreaId).is(':visible') && !$(searchButtonId)) {\r\n                            this.addControlButton(searchButton);\r\n                        }\r\n                    });\r\n                    this.areasLoaded();\r\n                    this.itemsArea.onLoad();\r\n\r\n                }).bind(this));\r\n\r\n            }).bind(this));\r\n\r\n            jQuery('#edit_form')\r\n                .on('submitOrder', function () {\r\n                    jQuery(this).trigger('realOrder');\r\n                })\r\n                .on('realOrder', this._realSubmit.bind(this));\r\n        },\r\n\r\n        areasLoaded: function () {\r\n        },\r\n\r\n        itemsLoaded: function () {\r\n        },\r\n\r\n        dataLoaded: function () {\r\n            this.dataShow();\r\n        },\r\n\r\n        setLoadBaseUrl: function (url) {\r\n            this.loadBaseUrl = url;\r\n        },\r\n\r\n        setAddresses: function (addresses) {\r\n            this.addresses = addresses;\r\n        },\r\n\r\n        addExcludedPaymentMethod: function (method) {\r\n            this.excludedPaymentMethods.push(method);\r\n        },\r\n\r\n        setCustomerId: function (id) {\r\n            this.customerId = id;\r\n            this.loadArea('header', true);\r\n            $(this.getAreaId('header')).callback = 'setCustomerAfter';\r\n            $('back_order_top_button').hide();\r\n            $('reset_order_top_button').show();\r\n        },\r\n\r\n        setCustomerAfter: function () {\r\n            this.customerSelectorHide();\r\n            if (this.storeId) {\r\n                $(this.getAreaId('data')).callback = 'dataLoaded';\r\n                this.loadArea(['data'], true);\r\n            } else {\r\n                this.storeSelectorShow();\r\n            }\r\n        },\r\n\r\n        setStoreId: function (id) {\r\n            this.storeId = id;\r\n            this.storeSelectorHide();\r\n            this.sidebarShow();\r\n            //this.loadArea(['header', 'sidebar','data'], true);\r\n            this.dataShow();\r\n            this.loadArea(['header', 'data'], true);\r\n        },\r\n\r\n        setCurrencyId: function (id) {\r\n            this.currencyId = id;\r\n            //this.loadArea(['sidebar', 'data'], true);\r\n            this.loadArea(['data'], true);\r\n        },\r\n\r\n        setCurrencySymbol: function (symbol) {\r\n            this.currencySymbol = symbol;\r\n        },\r\n\r\n        selectAddress: function (el, container) {\r\n            var id = el.value;\r\n            if (id.length == 0) {\r\n                id = '0';\r\n            }\r\n\r\n            this.selectAddressEvent = true;\r\n            if (this.addresses[id]) {\r\n                this.fillAddressFields(container, this.addresses[id]);\r\n            } else {\r\n                this.fillAddressFields(container, {});\r\n            }\r\n            this.selectAddressEvent = false;\r\n\r\n            var data = this.serializeData(container);\r\n            data[el.name] = id;\r\n\r\n            this.resetPaymentMethod();\r\n            if (this.isShippingField(container) && !this.isShippingMethodReseted) {\r\n                this.resetShippingMethod(data);\r\n            } else {\r\n                this.saveData(data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Checks if the field belongs to the shipping address.\r\n         *\r\n         * @param {String} fieldId\r\n         * @return {Boolean}\r\n         */\r\n        isShippingField: function (fieldId) {\r\n            if (this.shippingAsBilling) {\r\n                return fieldId.include('billing');\r\n            }\r\n\r\n            return fieldId.include('shipping');\r\n        },\r\n\r\n        /**\r\n         * Checks if the field belongs to the billing address.\r\n         *\r\n         * @param {String} fieldId\r\n         * @return {Boolean}\r\n         */\r\n        isBillingField: function (fieldId) {\r\n            return fieldId.include('billing');\r\n        },\r\n\r\n        /**\r\n         * Binds events on container form fields.\r\n         *\r\n         * @param {String} container\r\n         */\r\n        bindAddressFields: function (container) {\r\n            var fields = $(container).select('input', 'select', 'textarea'),\r\n                i;\r\n\r\n            for (i = 0; i < fields.length; i++) {\r\n                jQuery(fields[i]).change(this.changeAddressField.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers on each form's element changes.\r\n         *\r\n         * @param {Event} event\r\n         */\r\n        changeAddressField: function (event) {\r\n            var field = Event.element(event),\r\n                re = /[^\\[]*\\[([^\\]]*)_address\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/,\r\n                matchRes = field.name.match(re),\r\n                type,\r\n                name,\r\n                data,\r\n                resetShipping = false;\r\n\r\n            if (!matchRes) {\r\n                return;\r\n            }\r\n\r\n            type = matchRes[1];\r\n            name = matchRes[2];\r\n\r\n            if (this.isBillingField(field.id)) {\r\n                data = this.serializeData(this.billingAddressContainer);\r\n            } else {\r\n                data = this.serializeData(this.shippingAddressContainer);\r\n            }\r\n            data = data.toObject();\r\n\r\n            if (type === 'billing' && this.shippingAsBilling) {\r\n                this.syncAddressField(this.shippingAddressContainer, field.name, field);\r\n                resetShipping = true;\r\n            }\r\n\r\n            if (type === 'shipping' && !this.shippingAsBilling) {\r\n                resetShipping = true;\r\n            }\r\n\r\n            if (resetShipping) {\r\n                data['reset_shipping'] = true;\r\n            }\r\n\r\n            data['order[' + type + '_address][customer_address_id]'] = null;\r\n            data['shipping_as_billing'] = +this.shippingAsBilling;\r\n\r\n            if (name === 'customer_address_id') {\r\n                data['order[' + type + '_address][customer_address_id]'] =\r\n                    $('order-' + type + '_address_customer_address_id').value;\r\n            }\r\n\r\n            if (name === 'country_id' && this.selectAddressEvent === false) {\r\n                $('order-' + type + '_address_customer_address_id').value = '';\r\n            }\r\n\r\n            this.resetPaymentMethod();\r\n\r\n            if (data['reset_shipping']) {\r\n                this.resetShippingMethod();\r\n            } else {\r\n                this.saveData(data);\r\n\r\n                if (name === 'country_id' || name === 'customer_address_id') {\r\n                    this.loadArea(['shipping_method', 'billing_method', 'totals', 'items'], true, data);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set address container form field value.\r\n         *\r\n         * @param {String} container - container ID\r\n         * @param {String} fieldName - form field name\r\n         * @param {*} fieldValue - form field value\r\n         */\r\n        syncAddressField: function (container, fieldName, fieldValue) {\r\n            var syncName;\r\n\r\n            if (this.isBillingField(fieldName)) {\r\n                syncName = fieldName.replace('billing', 'shipping');\r\n            }\r\n\r\n            $(container).select('[name=\"' + syncName + '\"]').each(function (element) {\r\n                if (~['input', 'textarea', 'select'].indexOf(element.tagName.toLowerCase())) {\r\n                    if (element.type === \"checkbox\") {\r\n                        element.checked = fieldValue.checked;\r\n                    } else {\r\n                        element.value = fieldValue.value;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        fillAddressFields: function (container, data) {\r\n            var regionIdElem = false;\r\n            var regionIdElemValue = false;\r\n\r\n            var fields = $(container).select('input', 'select', 'textarea');\r\n            var re = /[^\\[]*\\[[^\\]]*\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/;\r\n            for (var i = 0; i < fields.length; i++) {\r\n                // skip input type file @Security error code: 1000\r\n                if (fields[i].tagName.toLowerCase() == 'input' && fields[i].type.toLowerCase() == 'file') {\r\n                    continue;\r\n                }\r\n                var matchRes = fields[i].name.match(re);\r\n                if (matchRes === null) {\r\n                    continue;\r\n                }\r\n                var name = matchRes[1];\r\n                var index = matchRes[3];\r\n\r\n                if (index) {\r\n                    // multiply line\r\n                    if (data[name]) {\r\n                        var values = data[name].split(\"\\n\");\r\n                        fields[i].value = values[index] ? values[index] : '';\r\n                    } else {\r\n                        fields[i].value = '';\r\n                    }\r\n                } else if (fields[i].tagName.toLowerCase() == 'select' && fields[i].multiple) {\r\n                    // multiselect\r\n                    if (data[name]) {\r\n                        values = [''];\r\n                        if (Object.isString(data[name])) {\r\n                            values = data[name].split(',');\r\n                        } else if (Object.isArray(data[name])) {\r\n                            values = data[name];\r\n                        }\r\n                        fields[i].setValue(values);\r\n                    }\r\n                } else {\r\n                    fields[i].setValue(data[name] ? data[name] : '');\r\n                }\r\n\r\n                if (fields[i].changeUpdater) {\r\n                    fields[i].changeUpdater();\r\n                }\r\n\r\n                if (name == 'region' && data['region_id'] && !data['region']) {\r\n                    fields[i].value = data['region_id'];\r\n                }\r\n\r\n                jQuery(fields[i]).trigger('change');\r\n            }\r\n        },\r\n\r\n        disableShippingAddress: function (flag) {\r\n            this.shippingAsBilling = flag;\r\n            if ($('order-shipping_address_customer_address_id')) {\r\n                $('order-shipping_address_customer_address_id').disabled = flag;\r\n            }\r\n            if ($(this.shippingAddressContainer)) {\r\n                var dataFields = $(this.shippingAddressContainer).select('input', 'select', 'textarea');\r\n                for (var i = 0; i < dataFields.length; i++) {\r\n                    dataFields[i].disabled = flag;\r\n\r\n                    if (this.isOnlyVirtualProduct) {\r\n                        dataFields[i].setValue('');\r\n                    }\r\n                }\r\n                var buttons = $(this.shippingAddressContainer).select('button');\r\n                // Add corresponding class to buttons while disabling them\r\n                for (i = 0; i < buttons.length; i++) {\r\n                    buttons[i].disabled = flag;\r\n                    if (flag) {\r\n                        buttons[i].addClassName('disabled');\r\n                    } else {\r\n                        buttons[i].removeClassName('disabled');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Equals shipping and billing addresses.\r\n         *\r\n         * @param {Boolean} flag\r\n         */\r\n        setShippingAsBilling: function (flag) {\r\n            var data,\r\n                areasToLoad = ['billing_method', 'shipping_address', 'shipping_method', 'totals', 'giftmessage'];\r\n\r\n            this.disableShippingAddress(flag);\r\n            data = this.serializeData(flag ? this.billingAddressContainer : this.shippingAddressContainer);\r\n            data = data.toObject();\r\n            data['shipping_as_billing'] = flag ? 1 : 0;\r\n            data['reset_shipping'] = 1;\r\n            this.loadArea(areasToLoad, true, data);\r\n        },\r\n\r\n        /**\r\n         * Replace shipping method area.\r\n         */\r\n        resetShippingMethod: function () {\r\n            if (!this.isOnlyVirtualProduct) {\r\n                $(this.getAreaId('shipping_method')).update(this.shippingTemplate);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Replace payment method area.\r\n         */\r\n        resetPaymentMethod: function () {\r\n            $(this.getAreaId('billing_method')).update(this.paymentTemplate);\r\n        },\r\n\r\n        /**\r\n         * Loads shipping options according to address data.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        loadShippingRates: function () {\r\n            var addressContainer = this.shippingAsBilling ?\r\n                'billingAddressContainer' :\r\n                'shippingAddressContainer',\r\n                data = this.serializeData(this[addressContainer]).toObject();\r\n\r\n            data['collect_shipping_rates'] = 1;\r\n            this.isShippingMethodReseted = false;\r\n            this.loadArea(['shipping_method', 'totals'], true, data);\r\n\r\n            return false;\r\n        },\r\n\r\n        setShippingMethod: function (method) {\r\n            var data = {};\r\n\r\n            data['order[shipping_method]'] = method;\r\n            this.loadArea([\r\n                'shipping_method',\r\n                'totals',\r\n                'billing_method'\r\n            ], true, data);\r\n        },\r\n\r\n        /**\r\n         * Updates available payment\r\n         * methods list according to order data.\r\n         *\r\n         * @return boolean\r\n         */\r\n        loadPaymentMethods: function () {\r\n            var data = this.serializeData(this.billingAddressContainer).toObject();\r\n\r\n            this.loadArea(['billing_method', 'totals'], true, data);\r\n\r\n            return false;\r\n        },\r\n\r\n        switchPaymentMethod: function(method){\r\n            jQuery('#edit_form').trigger('changePaymentMethod', [method]);\r\n            this.setPaymentMethod(method);\r\n            var data = {};\r\n            data['order[payment_method]'] = method;\r\n            this.loadArea(['card_validation'], true, data);\r\n        },\r\n\r\n        setPaymentMethod: function (method) {\r\n            if (this.paymentMethod && $('payment_form_' + this.paymentMethod)) {\r\n                var form = 'payment_form_' + this.paymentMethod;\r\n                [form + '_before', form, form + '_after'].each(function (el) {\r\n                    var block = $(el);\r\n                    if (block) {\r\n                        block.hide();\r\n                        block.select('input', 'select', 'textarea').each(function (field) {\r\n                            field.disabled = true;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (!this.paymentMethod || method) {\r\n                $('order-billing_method_form').select('input', 'select', 'textarea').each(function (elem) {\r\n                    if (elem.type != 'radio') elem.disabled = true;\r\n                })\r\n            }\r\n\r\n            if ($('payment_form_' + method)) {\r\n                jQuery('#' + this.getAreaId('billing_method')).trigger('contentUpdated');\r\n                this.paymentMethod = method;\r\n                var form = 'payment_form_' + method;\r\n                [form + '_before', form, form + '_after'].each(function (el) {\r\n                    var block = $(el);\r\n                    if (block) {\r\n                        block.show();\r\n                        block.select('input', 'select', 'textarea').each(function (field) {\r\n                            field.disabled = false;\r\n                            if (!el.include('_before') && !el.include('_after') && !field.bindChange) {\r\n                                field.bindChange = true;\r\n                                field.paymentContainer = form;\r\n                                field.method = method;\r\n                                field.observe('change', this.changePaymentData.bind(this))\r\n                            }\r\n                        }, this);\r\n                    }\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        changePaymentData: function (event) {\r\n            var elem = Event.element(event);\r\n            if (elem && elem.method) {\r\n                var data = this.getPaymentData(elem.method);\r\n                if (data) {\r\n                    this.loadArea(['card_validation'], true, data);\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n\r\n        getPaymentData: function (currentMethod) {\r\n            if (typeof (currentMethod) == 'undefined') {\r\n                if (this.paymentMethod) {\r\n                    currentMethod = this.paymentMethod;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            if (this.isPaymentValidationAvailable() == false) {\r\n                return false;\r\n            }\r\n            var data = {};\r\n            var fields = $('payment_form_' + currentMethod).select('input', 'select');\r\n            for (var i = 0; i < fields.length; i++) {\r\n                data[fields[i].name] = fields[i].getValue();\r\n            }\r\n            if ((typeof data['payment[cc_type]']) != 'undefined' && (!data['payment[cc_type]'] || !data['payment[cc_number]'])) {\r\n                return false;\r\n            }\r\n            return data;\r\n        },\r\n\r\n        applyCoupon: function (code) {\r\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {\r\n                'order[coupon][code]': code,\r\n                reset_shipping: 0\r\n            });\r\n            this.orderItemChanged = false;\r\n            jQuery('html, body').animate({\r\n                scrollTop: 0\r\n            });\r\n        },\r\n\r\n        addProduct: function (id) {\r\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {\r\n                add_product: id,\r\n                reset_shipping: true\r\n            });\r\n        },\r\n\r\n        removeQuoteItem: function (id) {\r\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true,\r\n                {remove_item: id, from: 'quote', reset_shipping: true});\r\n        },\r\n\r\n        moveQuoteItem: function (id, to) {\r\n            this.loadArea(['sidebar_' + to, 'items', 'shipping_method', 'totals', 'billing_method'], this.getAreaId('items'),\r\n                {move_item: id, to: to, reset_shipping: true});\r\n        },\r\n\r\n        productGridShow: function (buttonElement) {\r\n            this.productGridShowButton = buttonElement;\r\n            Element.hide(buttonElement);\r\n            this.showArea('search');\r\n        },\r\n\r\n        productGridRowInit: function (grid, row) {\r\n            var checkbox = $(row).select('.checkbox')[0];\r\n            var inputs = $(row).select('.input-text');\r\n            if (checkbox && inputs.length > 0) {\r\n                checkbox.inputElements = inputs;\r\n                for (var i = 0; i < inputs.length; i++) {\r\n                    var input = inputs[i];\r\n                    input.checkboxElement = checkbox;\r\n\r\n                    var product = this.gridProducts.get(checkbox.value);\r\n                    if (product) {\r\n                        var defaultValue = product[input.name];\r\n                        if (defaultValue) {\r\n                            if (input.name == 'giftmessage') {\r\n                                input.checked = true;\r\n                            } else {\r\n                                input.value = defaultValue;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    input.disabled = !checkbox.checked || input.hasClassName('input-inactive');\r\n\r\n                    Event.observe(input, 'keyup', this.productGridRowInputChange.bind(this));\r\n                    Event.observe(input, 'change', this.productGridRowInputChange.bind(this));\r\n                }\r\n            }\r\n        },\r\n\r\n        productGridRowInputChange: function (event) {\r\n            var element = Event.element(event);\r\n            if (element && element.checkboxElement && element.checkboxElement.checked) {\r\n                if (element.name != 'giftmessage' || element.checked) {\r\n                    this.gridProducts.get(element.checkboxElement.value)[element.name] = element.value;\r\n                } else if (element.name == 'giftmessage' && this.gridProducts.get(element.checkboxElement.value)[element.name]) {\r\n                    delete (this.gridProducts.get(element.checkboxElement.value)[element.name]);\r\n                }\r\n            }\r\n        },\r\n\r\n        productGridRowClick: function (grid, event) {\r\n            var trElement = Event.findElement(event, 'tr');\r\n            var qtyElement = trElement.select('input[name=\"qty\"]')[0];\r\n            var eventElement = Event.element(event);\r\n\r\n            if (eventElement.tagName === 'LABEL'\r\n                && trElement.querySelector('#' + eventElement.htmlFor)\r\n                && trElement.querySelector('#' + eventElement.htmlFor).type === 'checkbox'\r\n            ) {\r\n                event.stopPropagation();\r\n                trElement.querySelector('#' + eventElement.htmlFor).trigger('click');\r\n                return;\r\n            }\r\n\r\n            var isInputCheckbox = (eventElement.tagName === 'INPUT' && eventElement.type === 'checkbox');\r\n            var isInputQty = grid.targetElement && grid.targetElement.tagName === 'INPUT' && grid.targetElement.name === 'qty';\r\n            if (trElement && !isInputQty) {\r\n                var checkbox = Element.select(trElement, 'input[type=\"checkbox\"]')[0];\r\n                var confLink = Element.select(trElement, 'a')[0];\r\n                var priceColl = Element.select(trElement, '.price')[0];\r\n                if (checkbox) {\r\n                    // processing non composite product\r\n                    if (confLink.readAttribute('disabled')) {\r\n                        var checked = isInputCheckbox ? checkbox.checked : !checkbox.checked;\r\n                        grid.setCheckboxChecked(checkbox, checked);\r\n                        // processing composite product\r\n                    } else if (isInputCheckbox && !checkbox.checked) {\r\n                        grid.setCheckboxChecked(checkbox, false);\r\n                        // processing composite product\r\n                    } else if (!isInputCheckbox || (isInputCheckbox && checkbox.checked)) {\r\n                        var listType = confLink.readAttribute('list_type');\r\n                        var productId = confLink.readAttribute('product_id');\r\n                        if (typeof this.productPriceBase[productId] == 'undefined') {\r\n                            var priceBase = priceColl.innerHTML.match(/.*?([\\d,]+\\.?\\d*)/);\r\n                            if (!priceBase) {\r\n                                this.productPriceBase[productId] = 0;\r\n                            } else {\r\n                                this.productPriceBase[productId] = parseFloat(priceBase[1].replace(/,/g, ''));\r\n                            }\r\n                        }\r\n                        productConfigure.setConfirmCallback(listType, function () {\r\n                            // sync qty of popup and qty of grid\r\n                            var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\r\n                            if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\r\n                                qtyElement.value = confirmedCurrentQty.value;\r\n                            }\r\n                            // calc and set product price\r\n                            var productPrice = this._calcProductPrice();\r\n                            if (this._isSummarizePrice()) {\r\n                                productPrice += this.productPriceBase[productId];\r\n                            }\r\n                            productPrice = parseFloat(Math.round(productPrice + \"e+2\") + \"e-2\");\r\n                            priceColl.innerHTML = this.currencySymbol + productPrice.toFixed(2);\r\n                            // and set checkbox checked\r\n                            grid.setCheckboxChecked(checkbox, true);\r\n                        }.bind(this));\r\n                        productConfigure.setCancelCallback(listType, function () {\r\n                            if (!$(productConfigure.confirmedCurrentId) || !$(productConfigure.confirmedCurrentId).innerHTML) {\r\n                                grid.setCheckboxChecked(checkbox, false);\r\n                            }\r\n                        });\r\n                        productConfigure.setShowWindowCallback(listType, function () {\r\n                            // sync qty of grid and qty of popup\r\n                            var formCurrentQty = productConfigure.getCurrentFormQtyElement();\r\n                            if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\r\n                                formCurrentQty.value = qtyElement.value;\r\n                            }\r\n                        }.bind(this));\r\n                        productConfigure.showItemConfiguration(listType, productId);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is need to summarize price\r\n         */\r\n        _isSummarizePrice: function (elm) {\r\n            if (elm && elm.hasAttribute('summarizePrice')) {\r\n                this.summarizePrice = parseInt(elm.readAttribute('summarizePrice'));\r\n            }\r\n            return this.summarizePrice;\r\n        },\r\n        /**\r\n         * Calc product price through its options\r\n         */\r\n        _calcProductPrice: function () {\r\n            var productPrice = 0;\r\n            var getPriceFields = function (elms) {\r\n                var productPrice = 0;\r\n                var getPrice = function (elm) {\r\n                    var optQty = 1;\r\n                    if (elm.hasAttribute('qtyId')) {\r\n                        if (!$(elm.getAttribute('qtyId')).value) {\r\n                            return 0;\r\n                        } else {\r\n                            optQty = parseFloat($(elm.getAttribute('qtyId')).value);\r\n                        }\r\n                    }\r\n                    if (elm.hasAttribute('price') && !elm.disabled) {\r\n                        return parseFloat(elm.readAttribute('price')) * optQty;\r\n                    }\r\n                    return 0;\r\n                };\r\n                for (var i = 0; i < elms.length; i++) {\r\n                    if (elms[i].type == 'select-one' || elms[i].type == 'select-multiple') {\r\n                        for (var ii = 0; ii < elms[i].options.length; ii++) {\r\n                            if (elms[i].options[ii].selected) {\r\n                                if (this._isSummarizePrice(elms[i].options[ii])) {\r\n                                    productPrice += getPrice(elms[i].options[ii]);\r\n                                } else {\r\n                                    productPrice = getPrice(elms[i].options[ii]);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (((elms[i].type == 'checkbox' || elms[i].type == 'radio') && elms[i].checked)\r\n                        || ((elms[i].type == 'file' || elms[i].type == 'text' || elms[i].type == 'textarea' || elms[i].type == 'hidden')\r\n                            && Form.Element.getValue(elms[i]))\r\n                    ) {\r\n                        if (this._isSummarizePrice(elms[i])) {\r\n                            productPrice += getPrice(elms[i]);\r\n                        } else {\r\n                            productPrice = getPrice(elms[i]);\r\n                        }\r\n                    }\r\n                }\r\n                return productPrice;\r\n            }.bind(this);\r\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('input'));\r\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('select'));\r\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('textarea'));\r\n            return productPrice;\r\n        },\r\n\r\n        productGridCheckboxCheck: function (grid, element, checked) {\r\n            if (checked) {\r\n                if (element.inputElements) {\r\n                    this.gridProducts.set(element.value, {});\r\n                    var product = this.gridProducts.get(element.value);\r\n                    for (var i = 0; i < element.inputElements.length; i++) {\r\n                        var input = element.inputElements[i];\r\n                        if (!input.hasClassName('input-inactive')) {\r\n                            input.disabled = false;\r\n                            if (input.name == 'qty' && !input.value) {\r\n                                input.value = 1;\r\n                            }\r\n                        }\r\n\r\n                        if (input.checked || input.name != 'giftmessage') {\r\n                            product[input.name] = input.value;\r\n                        } else if (product[input.name]) {\r\n                            delete (product[input.name]);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (element.inputElements) {\r\n                    for (var i = 0; i < element.inputElements.length; i++) {\r\n                        element.inputElements[i].disabled = true;\r\n                    }\r\n                }\r\n                this.gridProducts.unset(element.value);\r\n            }\r\n            grid.reloadParams = {'products[]': this.gridProducts.keys()};\r\n        },\r\n\r\n        productGridFilterKeyPress: function (grid, event) {\r\n            var returnKey = parseInt(Event.KEY_RETURN || 13, 10);\r\n\r\n            if (event.keyCode === returnKey) {\r\n                if (typeof event.stopPropagation === 'function') {\r\n                    event.stopPropagation();\r\n                }\r\n\r\n                if (typeof event.preventDefault === 'function') {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Submit configured products to quote\r\n         */\r\n        productGridAddSelected: function () {\r\n            if (this.productGridShowButton) Element.show(this.productGridShowButton);\r\n            var area = ['search', 'items', 'shipping_method', 'totals', 'giftmessage', 'billing_method'];\r\n            // prepare additional fields and filtered items of products\r\n            var fieldsPrepare = {};\r\n            var itemsFilter = [];\r\n            var products = this.gridProducts.toObject();\r\n            for (var productId in products) {\r\n                itemsFilter.push(productId);\r\n                var paramKey = 'item[' + productId + ']';\r\n                for (var productParamKey in products[productId]) {\r\n                    paramKey += '[' + productParamKey + ']';\r\n                    fieldsPrepare[paramKey] = products[productId][productParamKey];\r\n                }\r\n            }\r\n            this.productConfigureSubmit('product_to_add', area, fieldsPrepare, itemsFilter);\r\n            productConfigure.clean('quote_items');\r\n            this.hideArea('search');\r\n            this.gridProducts = $H({});\r\n        },\r\n\r\n        selectCustomer: function (grid, event) {\r\n            var element = Event.findElement(event, 'tr');\r\n            if (element.title) {\r\n                this.setCustomerId(element.title);\r\n            }\r\n        },\r\n\r\n        customerSelectorHide: function () {\r\n            this.hideArea('customer-selector');\r\n        },\r\n\r\n        customerSelectorShow: function () {\r\n            this.showArea('customer-selector');\r\n        },\r\n\r\n        storeSelectorHide: function () {\r\n            this.hideArea('store-selector');\r\n        },\r\n\r\n        storeSelectorShow: function () {\r\n            this.showArea('store-selector');\r\n        },\r\n\r\n        dataHide: function () {\r\n            this.hideArea('data');\r\n        },\r\n\r\n        dataShow: function () {\r\n            if ($('submit_order_top_button')) {\r\n                $('submit_order_top_button').show();\r\n            }\r\n            this.showArea('data');\r\n        },\r\n\r\n        clearShoppingCart: function (confirmMessage) {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: confirmMessage,\r\n                actions: {\r\n                    confirm: function () {\r\n                        self.collectElementsValue = false;\r\n                        order.sidebarApplyChanges({'sidebar[empty_customer_cart]': 1});\r\n                        self.collectElementsValue = true;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        sidebarApplyChanges: function (auxiliaryParams) {\r\n            if ($(this.getAreaId('sidebar'))) {\r\n                var data = {};\r\n                if (this.collectElementsValue) {\r\n                    var elems = $(this.getAreaId('sidebar')).select('input');\r\n                    for (var i = 0; i < elems.length; i++) {\r\n                        if (elems[i].getValue()) {\r\n                            data[elems[i].name] = elems[i].getValue();\r\n                        }\r\n                    }\r\n                }\r\n                if (auxiliaryParams instanceof Object) {\r\n                    for (var paramName in auxiliaryParams) {\r\n                        data[paramName] = String(auxiliaryParams[paramName]);\r\n                    }\r\n                }\r\n                data.reset_shipping = true;\r\n                this.loadArea(['sidebar', 'items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'], true, data);\r\n            }\r\n        },\r\n\r\n        sidebarHide: function () {\r\n            if (this.storeId === false && $('page:left') && $('page:container')) {\r\n                $('page:left').hide();\r\n                $('page:container').removeClassName('container');\r\n                $('page:container').addClassName('container-collapsed');\r\n            }\r\n        },\r\n\r\n        sidebarShow: function () {\r\n            if ($('page:left') && $('page:container')) {\r\n                $('page:left').show();\r\n                $('page:container').removeClassName('container-collapsed');\r\n                $('page:container').addClassName('container');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show configuration of product and add handlers on submit form\r\n         *\r\n         * @param productId\r\n         */\r\n        sidebarConfigureProduct: function (listType, productId, itemId) {\r\n            // create additional fields\r\n            var params = {};\r\n            params.reset_shipping = true;\r\n            params.add_product = productId;\r\n            this.prepareParams(params);\r\n            for (var i in params) {\r\n                if (params[i] === null) {\r\n                    unset(params[i]);\r\n                } else if (typeof (params[i]) == 'boolean') {\r\n                    params[i] = params[i] ? 1 : 0;\r\n                }\r\n            }\r\n            var fields = [];\r\n            for (var name in params) {\r\n                fields.push(new Element('input', {type: 'hidden', name: name, value: params[name]}));\r\n            }\r\n            // add additional fields before triggered submit\r\n            productConfigure.setBeforeSubmitCallback(listType, function () {\r\n                productConfigure.addFields(fields);\r\n            }.bind(this));\r\n            // response handler\r\n            productConfigure.setOnLoadIFrameCallback(listType, function (response) {\r\n                if (!response.ok) {\r\n                    return;\r\n                }\r\n                this.loadArea(['items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'], true);\r\n            }.bind(this));\r\n            // show item configuration\r\n            itemId = itemId ? itemId : productId;\r\n            productConfigure.showItemConfiguration(listType, itemId);\r\n            return false;\r\n        },\r\n\r\n        removeSidebarItem: function (id, from) {\r\n            this.loadArea(['sidebar_' + from], 'sidebar_data_' + from, {remove_item: id, from: from});\r\n        },\r\n\r\n        itemsUpdate: function () {\r\n            var area = ['sidebar', 'items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'];\r\n            // prepare additional fields\r\n            var fieldsPrepare = {update_items: 1};\r\n            var info = $('order-items_grid').select('input', 'select', 'textarea');\r\n            for (var i = 0; i < info.length; i++) {\r\n                if (!info[i].disabled && (info[i].type != 'checkbox' || info[i].checked)) {\r\n                    fieldsPrepare[info[i].name] = info[i].getValue();\r\n                }\r\n            }\r\n            fieldsPrepare = Object.extend(fieldsPrepare, this.productConfigureAddFields);\r\n            this.productConfigureSubmit('quote_items', area, fieldsPrepare);\r\n            this.orderItemChanged = false;\r\n        },\r\n\r\n        itemsOnchangeBind: function () {\r\n            var elems = $('order-items_grid').select('input', 'select', 'textarea');\r\n            for (var i = 0; i < elems.length; i++) {\r\n                if (!elems[i].bindOnchange) {\r\n                    elems[i].bindOnchange = true;\r\n                    elems[i].observe('change', this.itemChange.bind(this))\r\n                }\r\n            }\r\n        },\r\n\r\n        itemChange: function (event) {\r\n            this.giftmessageOnItemChange(event);\r\n            this.orderItemChanged = true;\r\n        },\r\n\r\n        /**\r\n         * Submit batch of configured products\r\n         *\r\n         * @param listType\r\n         * @param area\r\n         * @param fieldsPrepare\r\n         * @param itemsFilter\r\n         */\r\n        productConfigureSubmit: function (listType, area, fieldsPrepare, itemsFilter) {\r\n            // prepare loading areas and build url\r\n            area = this.prepareArea(area);\r\n            this.loadingAreas = area;\r\n            var url = this.loadBaseUrl + 'block/' + area + '?isAjax=true';\r\n\r\n            // prepare additional fields\r\n            fieldsPrepare = this.prepareParams(fieldsPrepare);\r\n            fieldsPrepare.reset_shipping = 1;\r\n            fieldsPrepare.json = 1;\r\n\r\n            // create fields\r\n            var fields = [];\r\n            for (var name in fieldsPrepare) {\r\n                fields.push(new Element('input', {type: 'hidden', name: name, value: fieldsPrepare[name]}));\r\n            }\r\n            productConfigure.addFields(fields);\r\n\r\n            // filter items\r\n            if (itemsFilter) {\r\n                productConfigure.addItemsFilter(listType, itemsFilter);\r\n            }\r\n\r\n            // prepare and do submit\r\n            productConfigure.addListType(listType, {urlSubmit: url});\r\n            productConfigure.setOnLoadIFrameCallback(listType, function (response) {\r\n                this.loadAreaResponseHandler(response);\r\n            }.bind(this));\r\n            productConfigure.submit(listType);\r\n            // clean\r\n            this.productConfigureAddFields = {};\r\n        },\r\n\r\n        /**\r\n         * Show configuration of quote item\r\n         *\r\n         * @param itemId\r\n         */\r\n        showQuoteItemConfiguration: function (itemId) {\r\n            var listType = 'quote_items';\r\n            var qtyElement = $('order-items_grid').select('input[name=\"item\\[' + itemId + '\\]\\[qty\\]\"]')[0];\r\n            productConfigure.setConfirmCallback(listType, function () {\r\n                // sync qty of popup and qty of grid\r\n                var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\r\n                if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\r\n                    qtyElement.value = confirmedCurrentQty.value;\r\n                }\r\n                this.productConfigureAddFields['item[' + itemId + '][configured]'] = 1;\r\n                this.itemsUpdate();\r\n\r\n            }.bind(this));\r\n            productConfigure.setShowWindowCallback(listType, function () {\r\n                // sync qty of grid and qty of popup\r\n                var formCurrentQty = productConfigure.getCurrentFormQtyElement();\r\n                if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\r\n                    formCurrentQty.value = qtyElement.value;\r\n                }\r\n            }.bind(this));\r\n            productConfigure.showItemConfiguration(listType, itemId);\r\n        },\r\n\r\n        accountFieldsBind: function (container) {\r\n            if ($(container)) {\r\n                var fields = $(container).select('input', 'select', 'textarea');\r\n                for (var i = 0; i < fields.length; i++) {\r\n                    if (fields[i].id == 'group_id') {\r\n                        fields[i].observe('change', this.accountGroupChange.bind(this))\r\n                    } else {\r\n                        fields[i].observe('change', this.accountFieldChange.bind(this))\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        accountGroupChange: function () {\r\n            this.loadArea(['data'], true, this.serializeData('order-form_account').toObject());\r\n        },\r\n\r\n        accountFieldChange: function () {\r\n            this.saveData(this.serializeData('order-form_account'));\r\n        },\r\n\r\n        commentFieldsBind: function (container) {\r\n            if ($(container)) {\r\n                var fields = $(container).select('input', 'textarea');\r\n                for (var i = 0; i < fields.length; i++)\r\n                    fields[i].observe('change', this.commentFieldChange.bind(this))\r\n            }\r\n        },\r\n\r\n        commentFieldChange: function () {\r\n            this.saveData(this.serializeData('order-comment'));\r\n        },\r\n\r\n        giftmessageFieldsBind: function (container) {\r\n            if ($(container)) {\r\n                var fields = $(container).select('input', 'textarea');\r\n                for (var i = 0; i < fields.length; i++)\r\n                    fields[i].observe('change', this.giftmessageFieldChange.bind(this))\r\n            }\r\n        },\r\n\r\n        giftmessageFieldChange: function () {\r\n            this.giftMessageDataChanged = true;\r\n        },\r\n\r\n        giftmessageOnItemChange: function (event) {\r\n            var element = Event.element(event);\r\n            if (element.name.indexOf(\"giftmessage\") != -1 && element.type == \"checkbox\" && !element.checked) {\r\n                var messages = $(\"order-giftmessage\").select('textarea');\r\n                var name;\r\n                for (var i = 0; i < messages.length; i++) {\r\n                    name = messages[i].id.split(\"_\");\r\n                    if (name.length < 2) continue;\r\n                    if (element.name.indexOf(\"[\" + name[1] + \"]\") != -1 && messages[i].value != \"\") {\r\n                        alert({\r\n                            content: \"First, clean the Message field in Gift Message form\"\r\n                        });\r\n                        element.checked = true;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        loadArea: function (area, indicator, params) {\r\n            var deferred = new jQuery.Deferred();\r\n            var url = this.loadBaseUrl;\r\n            if (area) {\r\n                area = this.prepareArea(area);\r\n                url += 'block/' + area;\r\n            }\r\n            if (indicator === true) indicator = 'html-body';\r\n            params = this.prepareParams(params);\r\n            params.json = true;\r\n            if (!this.loadingAreas) this.loadingAreas = [];\r\n            if (indicator) {\r\n                this.loadingAreas = area;\r\n                new Ajax.Request(url, {\r\n                    parameters: params,\r\n                    loaderArea: indicator,\r\n                    onSuccess: function (transport) {\r\n                        var response = transport.responseText.evalJSON();\r\n                        this.loadAreaResponseHandler(response);\r\n                        deferred.resolve();\r\n                    }.bind(this)\r\n                });\r\n            } else {\r\n                new Ajax.Request(url, {\r\n                    parameters: params,\r\n                    loaderArea: indicator,\r\n                    onSuccess: function (transport) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n            }\r\n            if (typeof productConfigure != 'undefined' && area instanceof Array && area.indexOf('items') != -1) {\r\n                productConfigure.clean('quote_items');\r\n            }\r\n            return deferred.promise();\r\n        },\r\n\r\n        loadAreaResponseHandler: function (response) {\r\n            if (response.error) {\r\n                alert({\r\n                    content: response.message\r\n                });\r\n            }\r\n            if (response.ajaxExpired && response.ajaxRedirect) {\r\n                setLocation(response.ajaxRedirect);\r\n            }\r\n            if (!this.loadingAreas) {\r\n                this.loadingAreas = [];\r\n            }\r\n            if (typeof this.loadingAreas == 'string') {\r\n                this.loadingAreas = [this.loadingAreas];\r\n            }\r\n            if (this.loadingAreas.indexOf('message') == -1) {\r\n                this.loadingAreas.push('message');\r\n            }\r\n            if (response.header) {\r\n                jQuery('.page-actions-inner').attr('data-title', response.header);\r\n            }\r\n\r\n            for (var i = 0; i < this.loadingAreas.length; i++) {\r\n                var id = this.loadingAreas[i];\r\n                if ($(this.getAreaId(id))) {\r\n                    if ('message' != id || response[id]) {\r\n                        $(this.getAreaId(id)).update(response[id]);\r\n                    }\r\n                    if ($(this.getAreaId(id)).callback) {\r\n                        this[$(this.getAreaId(id)).callback]();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        prepareArea: function (area) {\r\n            if (this.giftMessageDataChanged) {\r\n                return area.without('giftmessage');\r\n            }\r\n            return area;\r\n        },\r\n\r\n        saveData: function (data) {\r\n            this.loadArea(false, false, data);\r\n        },\r\n\r\n        showArea: function (area) {\r\n            var id = this.getAreaId(area);\r\n            if ($(id)) {\r\n                $(id).show();\r\n                this.areaOverlay();\r\n            }\r\n        },\r\n\r\n        hideArea: function (area) {\r\n            var id = this.getAreaId(area);\r\n            if ($(id)) {\r\n                $(id).hide();\r\n                this.areaOverlay();\r\n            }\r\n        },\r\n\r\n        areaOverlay: function () {\r\n            $H(order.overlayData).each(function (e) {\r\n                e.value.fx();\r\n            });\r\n        },\r\n\r\n        getAreaId: function (area) {\r\n            return 'order-' + area;\r\n        },\r\n\r\n        prepareParams: function (params) {\r\n            if (!params) {\r\n                params = {};\r\n            }\r\n            if (!params.customer_id) {\r\n                params.customer_id = this.customerId;\r\n            }\r\n            if (!params.store_id) {\r\n                params.store_id = this.storeId;\r\n            }\r\n            if (!params.currency_id) {\r\n                params.currency_id = this.currencyId;\r\n            }\r\n            if (!params.form_key) {\r\n                params.form_key = FORM_KEY;\r\n            }\r\n\r\n            if (this.isPaymentValidationAvailable()) {\r\n                var data = this.serializeData('order-billing_method');\r\n                if (data) {\r\n                    data.each(function (value) {\r\n                        params[value[0]] = value[1];\r\n                    });\r\n                }\r\n            } else {\r\n                params['payment[method]'] = this.paymentMethod;\r\n            }\r\n            return params;\r\n        },\r\n\r\n        /**\r\n         * Prevent from sending credit card information to server for some payment methods\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isPaymentValidationAvailable: function () {\r\n            return ((typeof this.paymentMethod) == 'undefined'\r\n                || this.excludedPaymentMethods.indexOf(this.paymentMethod) == -1);\r\n        },\r\n\r\n        /**\r\n         * Serializes container form elements data.\r\n         *\r\n         * @param {String} container\r\n         * @return {Object}\r\n         */\r\n        serializeData: function (container) {\r\n            var fields = $(container).select('input', 'select', 'textarea'),\r\n                data = Form.serializeElements(fields, true);\r\n\r\n            return $H(data);\r\n        },\r\n\r\n        toggleCustomPrice: function (checkbox, elemId, tierBlock) {\r\n            if (checkbox.checked) {\r\n                $(elemId).disabled = false;\r\n                $(elemId).show();\r\n                if ($(tierBlock)) $(tierBlock).hide();\r\n            } else {\r\n                $(elemId).disabled = true;\r\n                $(elemId).hide();\r\n                if ($(tierBlock)) $(tierBlock).show();\r\n            }\r\n        },\r\n\r\n        submit: function () {\r\n            var $editForm = jQuery('#edit_form');\r\n\r\n            if ($editForm.valid()) {\r\n                $editForm.trigger('processStart');\r\n                $editForm.trigger('submitOrder');\r\n            }\r\n        },\r\n\r\n        _realSubmit: function () {\r\n            var disableAndSave = function () {\r\n                disableElements('save');\r\n                jQuery('#edit_form').on('invalid-form.validate', function () {\r\n                    enableElements('save');\r\n                    jQuery('#edit_form').trigger('processStop');\r\n                    jQuery('#edit_form').off('invalid-form.validate');\r\n                });\r\n                jQuery('#edit_form').triggerHandler('save');\r\n            }\r\n            if (this.orderItemChanged) {\r\n                var self = this;\r\n\r\n                jQuery('#edit_form').trigger('processStop');\r\n\r\n                confirm({\r\n                    content: jQuery.mage.__('You have item changes'),\r\n                    actions: {\r\n                        confirm: function () {\r\n                            jQuery('#edit_form').trigger('processStart');\r\n                            disableAndSave();\r\n                        },\r\n                        cancel: function () {\r\n                            self.itemsUpdate();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                disableAndSave();\r\n            }\r\n        },\r\n\r\n        overlay: function (elId, show, observe) {\r\n            if (typeof (show) == 'undefined') {\r\n                show = true;\r\n            }\r\n\r\n            var orderObj = this;\r\n            var obj = this.overlayData.get(elId);\r\n            if (!obj) {\r\n                obj = {\r\n                    show: show,\r\n                    el: elId,\r\n                    order: orderObj,\r\n                    fx: function (event) {\r\n                        this.order.processOverlay(this.el, this.show);\r\n                    }\r\n                };\r\n                obj.bfx = obj.fx.bindAsEventListener(obj);\r\n                this.overlayData.set(elId, obj);\r\n            } else {\r\n                obj.show = show;\r\n                Event.stopObserving(window, 'resize', obj.bfx);\r\n            }\r\n\r\n            Event.observe(window, 'resize', obj.bfx);\r\n\r\n            this.processOverlay(elId, show);\r\n        },\r\n\r\n        processOverlay: function (elId, show) {\r\n            var el = $(elId);\r\n\r\n            if (!el) {\r\n                return;\r\n            }\r\n\r\n            var parentEl = el.up(1);\r\n            if (show) {\r\n                parentEl.removeClassName('ignore-validate');\r\n            } else {\r\n                parentEl.addClassName('ignore-validate');\r\n            }\r\n\r\n            if (Prototype.Browser.IE) {\r\n                parentEl.select('select').each(function (elem) {\r\n                    if (show) {\r\n                        elem.needShowOnSuccess = false;\r\n                        elem.style.visibility = '';\r\n                    } else {\r\n                        elem.style.visibility = 'hidden';\r\n                        elem.needShowOnSuccess = true;\r\n                    }\r\n                });\r\n            }\r\n\r\n            parentEl.setStyle({position: 'relative'});\r\n            el.setStyle({\r\n                display: show ? 'none' : ''\r\n            });\r\n        },\r\n\r\n        validateVat: function (parameters) {\r\n            var params = {\r\n                country: $(parameters.countryElementId).value,\r\n                vat: $(parameters.vatElementId).value\r\n            };\r\n\r\n            if (this.storeId !== false) {\r\n                params.store_id = this.storeId;\r\n            }\r\n\r\n            var currentCustomerGroupId = $(parameters.groupIdHtmlId)\r\n                ? $(parameters.groupIdHtmlId).value : '';\r\n\r\n            new Ajax.Request(parameters.validateUrl, {\r\n                parameters: params,\r\n                onSuccess: function (response) {\r\n                    var message = '';\r\n                    var groupActionRequired = null;\r\n                    try {\r\n                        response = response.responseText.evalJSON();\r\n\r\n                        if (null === response.group) {\r\n                            if (true === response.valid) {\r\n                                message = parameters.vatValidMessage;\r\n                            } else if (true === response.success) {\r\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\r\n                            } else {\r\n                                message = parameters.vatValidationFailedMessage;\r\n                            }\r\n                        } else {\r\n                            if (true === response.valid) {\r\n                                message = parameters.vatValidAndGroupValidMessage;\r\n                                if (0 === response.group) {\r\n                                    message = parameters.vatValidAndGroupInvalidMessage;\r\n                                    groupActionRequired = 'inform';\r\n                                } else if (currentCustomerGroupId != response.group) {\r\n                                    message = parameters.vatValidAndGroupChangeMessage;\r\n                                    groupActionRequired = 'change';\r\n                                }\r\n                            } else if (response.success) {\r\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\r\n                                groupActionRequired = 'inform';\r\n                            } else {\r\n                                message = parameters.vatValidationFailedMessage;\r\n                                groupActionRequired = 'inform';\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        message = parameters.vatValidationFailedMessage;\r\n                    }\r\n                    if (null === groupActionRequired) {\r\n                        alert({\r\n                            content: message\r\n                        });\r\n                    } else {\r\n                        this.processCustomerGroupChange(\r\n                            parameters.groupIdHtmlId,\r\n                            message,\r\n                            parameters.vatCustomerGroupMessage,\r\n                            parameters.vatGroupErrorMessage,\r\n                            response.group,\r\n                            groupActionRequired\r\n                        );\r\n                    }\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        processCustomerGroupChange: function (groupIdHtmlId, message, customerGroupMessage, errorMessage, groupId, action) {\r\n            var groupMessage = '';\r\n            try {\r\n                var currentCustomerGroupId = $(groupIdHtmlId).value;\r\n                var currentCustomerGroupTitle =\r\n                    $$('#' + groupIdHtmlId + ' > option[value=' + currentCustomerGroupId + ']')[0].text;\r\n                var customerGroupOption = $$('#' + groupIdHtmlId + ' > option[value=' + groupId + ']')[0];\r\n                groupMessage = customerGroupMessage.replace(/%s/, customerGroupOption.text);\r\n            } catch (e) {\r\n                groupMessage = errorMessage;\r\n                if (action === 'change') {\r\n                    message = '';\r\n                    action = 'inform';\r\n                }\r\n            }\r\n\r\n            if (action === 'change') {\r\n                var confirmText = message.replace(/%s/, customerGroupOption.text);\r\n                confirmText = confirmText.replace(/%s/, currentCustomerGroupTitle);\r\n                if (confirm(confirmText)) {\r\n                    $$('#' + groupIdHtmlId + ' option').each(function (o) {\r\n                        o.selected = o.readAttribute('value') == groupId;\r\n                    });\r\n                    this.accountGroupChange();\r\n                }\r\n            } else if (action === 'inform') {\r\n                alert({\r\n                    content: message + '\\n' + groupMessage\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    window.OrderFormArea = Class.create();\r\n    OrderFormArea.prototype = {\r\n        _name: null,\r\n        _node: null,\r\n        _parent: null,\r\n        _callbackName: null,\r\n\r\n        initialize: function (name, node, parent) {\r\n            if (!node)\r\n                return;\r\n            this._name = name;\r\n            this._parent = parent;\r\n            this._callbackName = node.callback;\r\n            if (typeof this._callbackName == 'undefined') {\r\n                this._callbackName = name + 'Loaded';\r\n                node.callback = this._callbackName;\r\n            }\r\n            parent[this._callbackName] = parent[this._callbackName].wrap((function (proceed) {\r\n                proceed();\r\n                this.onLoad();\r\n            }).bind(this));\r\n\r\n            this.setNode(node);\r\n        },\r\n\r\n        setNode: function (node) {\r\n            if (!node.callback) {\r\n                node.callback = this._callbackName;\r\n            }\r\n            this.node = node;\r\n        },\r\n\r\n        onLoad: function () {\r\n        }\r\n    };\r\n\r\n    window.ControlButton = Class.create();\r\n\r\n    ControlButton.prototype = {\r\n        _label: '',\r\n        _node: null,\r\n\r\n        initialize: function (label, id) {\r\n            this._label = label;\r\n            this._node = new Element('button', {\r\n                'class': 'action-secondary action-add',\r\n                'type': 'button'\r\n            });\r\n            if (typeof id !== 'undefined') {\r\n                this._node.setAttribute('id', id)\r\n            }\r\n        },\r\n\r\n        onClick: function () {\r\n        },\r\n\r\n        insertIn: function (element, position) {\r\n            var node = Object.extend(this._node),\r\n                content = {};\r\n            node.observe('click', this.onClick);\r\n            node.update('<span>' + this._label + '</span>');\r\n            content[position] = node;\r\n            Element.insert(element, content);\r\n        },\r\n\r\n        getLabel: function () {\r\n            return this._label;\r\n        }\r\n    };\r\n});\r\n","Magento_Sales/order/edit/message.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.orderEditDialog', {\r\n        options: {\r\n            url:     null,\r\n            message: null,\r\n            modal:  null\r\n        },\r\n\r\n        /**\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._prepareDialog();\r\n        },\r\n\r\n        /**\r\n         * Show modal\r\n         */\r\n        showDialog: function () {\r\n            this.options.dialog.html(this.options.message).modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Redirect to edit page\r\n         */\r\n        redirect: function () {\r\n            window.location = this.options.url;\r\n        },\r\n\r\n        /**\r\n         * Prepare modal\r\n         * @protected\r\n         */\r\n        _prepareDialog: function () {\r\n            var self = this;\r\n\r\n            this.options.dialog = $('<div class=\"ui-dialog-content ui-widget-content\"></div>').modal({\r\n                type: 'popup',\r\n                modalClass: 'edit-order-popup',\r\n                title: $.mage.__('Edit Order'),\r\n                buttons: [{\r\n                    text: $.mage.__('Ok'),\r\n                    'class': 'action-primary',\r\n\r\n                    /** @inheritdoc */\r\n                    click: function () {\r\n                        self.redirect();\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.orderEditDialog;\r\n});\r\n","Magento_Sales/order/edit/address/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Currently Magento App stores both  region_id and region (as text) values.\r\n     * To prevent missing region (as text) we need to copy it in hidden field.\r\n     * @param {Array} config\r\n     * @param {String} element\r\n     */\r\n    return function (config, element) {\r\n        var form = $(element),\r\n            regionId = form.find('#region_id'),\r\n\r\n            /**\r\n             * Set region callback\r\n             */\r\n            setRegion = function () {\r\n                form.find('#region').val(regionId.filter(':visible').find(':selected').text());\r\n            };\r\n\r\n        if (regionId.is('visible')) {\r\n            setRegion();\r\n        }\r\n\r\n        regionId.on('change', setRegion);\r\n        form.find('#country_id').on('change', setRegion);\r\n    };\r\n});\r\n","Magento_Sales/order/view/post-wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} url\r\n     * @returns {Object}\r\n     */\r\n    function getForm(url) {\r\n        return $('<form>', {\r\n            'action': url,\r\n            'method': 'POST'\r\n        }).append($('<input>', {\r\n            'name': 'form_key',\r\n            'value': window.FORM_KEY,\r\n            'type': 'hidden'\r\n        }));\r\n    }\r\n\r\n    $('#order-view-cancel-button').click(function () {\r\n        var msg = $.mage.__('Are you sure you want to cancel this order?'),\r\n            url = $('#order-view-cancel-button').data('url');\r\n\r\n        confirm({\r\n            'content': msg,\r\n            'actions': {\r\n\r\n                /**\r\n                 * 'Confirm' action handler.\r\n                 */\r\n                confirm: function () {\r\n                    getForm(url).appendTo('body').submit();\r\n                }\r\n            }\r\n        });\r\n\r\n        return false;\r\n    });\r\n\r\n    $('#order-view-hold-button').click(function () {\r\n        var url = $('#order-view-hold-button').data('url');\r\n\r\n        getForm(url).appendTo('body').submit();\r\n    });\r\n\r\n    $('#order-view-unhold-button').click(function () {\r\n        var url = $('#order-view-unhold-button').data('url');\r\n\r\n        getForm(url).appendTo('body').submit();\r\n    });\r\n});\r\n","Magento_SalesRule/js/form/element/apply_to_shipping.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox-toggle-notice'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            imports: {\r\n                toggleDisabled: '${ $.parentName }.simple_action:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle element disabled state according to simple action value.\r\n         *\r\n         * @param {String} action\r\n         */\r\n        toggleDisabled: function (action) {\r\n            switch (action) {\r\n                default:\r\n                    this.disabled(false);\r\n            }\r\n\r\n            if (this.disabled()) {\r\n                this.checked(false);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_SalesRule/js/form/element/coupon-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/select'\r\n], function (_, uiRegistry, select) {\r\n    'use strict';\r\n\r\n    return select.extend({\r\n\r\n        /**\r\n         * Hide fields on coupon tab\r\n         */\r\n        onUpdate: function () {\r\n\r\n            /* eslint-disable eqeqeq */\r\n            if (this.value() != this.displayOnlyForCouponType) {\r\n                uiRegistry.get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation').checked(false);\r\n            }\r\n\r\n            this.enableDisableFields();\r\n        },\r\n\r\n        /**\r\n         * Enable/disable fields on Coupons tab\r\n         */\r\n        enableDisableFields: function () {\r\n            var selector,\r\n                isUseAutoGenerationChecked,\r\n                couponType,\r\n                disableAuto;\r\n\r\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\r\n                    '[id=sales-rule-form-tab-coupons] button';\r\n            isUseAutoGenerationChecked = uiRegistry\r\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\r\n                    .checked();\r\n            couponType = uiRegistry\r\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\r\n                .value();\r\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\r\n            _.each(\r\n                document.querySelectorAll(selector),\r\n                function (element) {\r\n                    element.disabled = !disableAuto;\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_SalesRule/js/form/element/manage-coupon-codes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (_, uiRegistry, fieldset, async) {\r\n    'use strict';\r\n\r\n    return fieldset.extend({\r\n\r\n        /*eslint-disable no-unused-vars*/\r\n        /**\r\n         * Initialize element\r\n         *\r\n         * @returns {Abstract} Chainable\r\n         */\r\n        initialize: function (elems, position) {\r\n            var obj = this;\r\n\r\n            this._super();\r\n\r\n            async.async('#sales-rule-form-tab-coupons', document.getElementById('container'), function (node) {\r\n                var useAutoGeneration = uiRegistry.get(\r\n                    'sales_rule_form.sales_rule_form.rule_information.use_auto_generation'\r\n                );\r\n\r\n                useAutoGeneration.on('checked', function () {\r\n                    obj.enableDisableFields();\r\n                });\r\n                obj.enableDisableFields();\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /*eslint-enable no-unused-vars*/\r\n        /*eslint-disable lines-around-comment*/\r\n\r\n        /**\r\n         * Enable/disable fields on Coupons tab\r\n         */\r\n        enableDisableFields: function () {\r\n            var selector,\r\n                isUseAutoGenerationChecked,\r\n                couponType,\r\n                disableAuto;\r\n\r\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\r\n                    '[id=sales-rule-form-tab-coupons] button';\r\n            isUseAutoGenerationChecked = uiRegistry\r\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\r\n                    .checked();\r\n            couponType = uiRegistry\r\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\r\n                .value();\r\n            /**\r\n             * \\Magento\\Rule\\Model\\AbstractModel::COUPON_TYPE_AUTO\r\n             */\r\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\r\n            _.each(\r\n                document.querySelectorAll(selector),\r\n                function (element) {\r\n                    element.disabled = !disableAuto;\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Security/js/confirm-redirect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*eslint-disable no-undef*/\r\ndefine(\r\n    ['jquery'],\r\n    function ($) {\r\n        'use strict';\r\n\r\n        return function (config, element) {\r\n            $(element).click(config, function () {\r\n                confirmSetLocation(config.message, config.url);\r\n            });\r\n        };\r\n    }\r\n);\r\n","Magento_Security/js/escaper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * A loose JavaScript version of Magento\\Framework\\Escaper\r\n *\r\n * Due to differences in how XML/HTML is processed in PHP vs JS there are a couple of minor differences in behavior\r\n * from the PHP counterpart.\r\n *\r\n * The first difference is that the default invocation of escapeHtml without allowedTags will double-escape existing\r\n * entities as the intention of such an invocation is that the input isn't supposed to contain any HTML.\r\n *\r\n * The second difference is that escapeHtml will not escape quotes. Since the input is actually being processed by the\r\n * DOM there is no chance of quotes being mixed with HTML syntax. And, since escapeHtml is not\r\n * intended to be used with raw injection into a HTML attribute, this is acceptable.\r\n *\r\n * @api\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        neverAllowedElements: ['script', 'img', 'embed', 'iframe', 'video', 'source', 'object', 'audio'],\r\n        generallyAllowedAttributes: ['id', 'class', 'href', 'title', 'style'],\r\n        forbiddenAttributesByElement: {\r\n            a: ['style']\r\n        },\r\n\r\n        /**\r\n         * Escape a string for safe injection into HTML\r\n         *\r\n         * @param {String} data\r\n         * @param {Array|null} allowedTags\r\n         * @returns {String}\r\n         */\r\n        escapeHtml: function (data, allowedTags) {\r\n            var domParser = new DOMParser(),\r\n                fragment = domParser.parseFromString('<div></div>', 'text/html');\r\n\r\n            fragment = fragment.body.childNodes[0];\r\n            allowedTags = typeof allowedTags === 'object' && allowedTags.length ? allowedTags : null;\r\n\r\n            if (allowedTags) {\r\n                fragment.innerHTML = data || '';\r\n                allowedTags = this._filterProhibitedTags(allowedTags);\r\n\r\n                this._removeComments(fragment);\r\n                this._removeNotAllowedElements(fragment, allowedTags);\r\n                this._removeNotAllowedAttributes(fragment);\r\n\r\n                return fragment.innerHTML;\r\n            }\r\n\r\n            fragment.textContent = data || '';\r\n\r\n            return fragment.innerHTML;\r\n        },\r\n\r\n        /**\r\n         * Remove the always forbidden tags from a list of provided tags\r\n         *\r\n         * @param {Array} tags\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _filterProhibitedTags: function (tags) {\r\n            return tags.filter(function (n) {\r\n                return this.neverAllowedElements.indexOf(n) === -1;\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Remove comment nodes from the given node\r\n         *\r\n         * @param {Node} node\r\n         * @private\r\n         */\r\n        _removeComments: function (node) {\r\n            var treeWalker = node.ownerDocument.createTreeWalker(\r\n                    node,\r\n                    NodeFilter.SHOW_COMMENT,\r\n                    function () {\r\n                        return NodeFilter.FILTER_ACCEPT;\r\n                    },\r\n                    false\r\n                ),\r\n                nodesToRemove = [];\r\n\r\n            while (treeWalker.nextNode()) {\r\n                nodesToRemove.push(treeWalker.currentNode);\r\n            }\r\n\r\n            nodesToRemove.forEach(function (nodeToRemove) {\r\n                nodeToRemove.parentNode.removeChild(nodeToRemove);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Strip the given node of all disallowed tags while permitting any nested text nodes\r\n         *\r\n         * @param {Node} node\r\n         * @param {Array|null} allowedTags\r\n         * @private\r\n         */\r\n        _removeNotAllowedElements: function (node, allowedTags) {\r\n            var treeWalker = node.ownerDocument.createTreeWalker(\r\n                    node,\r\n                    NodeFilter.SHOW_ELEMENT,\r\n                    function (currentNode) {\r\n                        return allowedTags.indexOf(currentNode.nodeName.toLowerCase()) === -1 ?\r\n                            NodeFilter.FILTER_ACCEPT\r\n                            // SKIP instead of REJECT because REJECT also rejects child nodes\r\n                            : NodeFilter.FILTER_SKIP;\r\n                    },\r\n                false\r\n                ),\r\n                nodesToRemove = [];\r\n\r\n            while (treeWalker.nextNode()) {\r\n                if (allowedTags.indexOf(treeWalker.currentNode.nodeName.toLowerCase()) === -1) {\r\n                    nodesToRemove.push(treeWalker.currentNode);\r\n                }\r\n            }\r\n\r\n            nodesToRemove.forEach(function (nodeToRemove) {\r\n                nodeToRemove.parentNode.replaceChild(\r\n                    node.ownerDocument.createTextNode(nodeToRemove.textContent),\r\n                    nodeToRemove\r\n                );\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Remove any invalid attributes from the given node\r\n         *\r\n         * @param {Node} node\r\n         * @private\r\n         */\r\n        _removeNotAllowedAttributes: function (node) {\r\n            var treeWalker = node.ownerDocument.createTreeWalker(\r\n                    node,\r\n                    NodeFilter.SHOW_ELEMENT,\r\n                    function () {\r\n                        return NodeFilter.FILTER_ACCEPT;\r\n                    },\r\n                false\r\n                ),\r\n                i,\r\n                attribute,\r\n                nodeName,\r\n                attributesToRemove = [];\r\n\r\n            while (treeWalker.nextNode()) {\r\n                for (i = 0; i < treeWalker.currentNode.attributes.length; i++) {\r\n                    attribute = treeWalker.currentNode.attributes[i];\r\n                    nodeName = treeWalker.currentNode.nodeName.toLowerCase();\r\n\r\n                    if (this.generallyAllowedAttributes.indexOf(attribute.name) === -1 || // eslint-disable-line max-depth,max-len\r\n                        this.forbiddenAttributesByElement[nodeName] &&\r\n                        this.forbiddenAttributesByElement[nodeName].indexOf(attribute.name) !== -1\r\n                    ) {\r\n                        attributesToRemove.push(attribute);\r\n                    }\r\n                }\r\n            }\r\n\r\n            attributesToRemove.forEach(function (attributeToRemove) {\r\n                attributeToRemove.ownerElement.removeAttribute(attributeToRemove.name);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Shipping/js/packages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($, modal, $t) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        config.buttons = [\r\n            {\r\n                text: $t('Print'),\r\n                'class': 'action action-primary',\r\n\r\n                /**\r\n                 * Click handler\r\n                 */\r\n                click: function () {\r\n                    window.location.href = this.options.url;\r\n                }\r\n            }, {\r\n                text: $t('Cancel'),\r\n                'class': 'action action-secondary',\r\n\r\n                /**\r\n                 * Click handler\r\n                 */\r\n                click: function () {\r\n                    this.closeModal();\r\n                }\r\n            }\r\n        ];\r\n        modal(config, element);\r\n    };\r\n});\r\n","Magento_Shipping/order/packaging.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['prototype'], function () {\r\n\r\n    window.Packaging = Class.create();\r\n    Packaging.prototype = {\r\n        /**\r\n         * Initialize object\r\n         */\r\n        initialize: function (params) {\r\n            this.packageIncrement = 0;\r\n            this.packages = [];\r\n            this.itemsAll = [];\r\n            this.createLabelUrl = params.createLabelUrl ? params.createLabelUrl : null;\r\n            this.itemsGridUrl = params.itemsGridUrl ? params.itemsGridUrl : null;\r\n            this.errorQtyOverLimit = params.errorQtyOverLimit;\r\n            this.titleDisabledSaveBtn = params.titleDisabledSaveBtn;\r\n            this.window = $('packaging_window');\r\n            this.messages = this.window.select('.message-warning')[0];\r\n            this.packagesContent = $('packages_content');\r\n            this.template = $('package_template');\r\n            this.paramsCreateLabelRequest = {};\r\n            this.validationErrorMsg = params.validationErrorMsg;\r\n\r\n            this.defaultItemsQty            = params.shipmentItemsQty ? params.shipmentItemsQty : null;\r\n            this.defaultItemsPrice          = params.shipmentItemsPrice ? params.shipmentItemsPrice : null;\r\n            this.defaultItemsName           = params.shipmentItemsName ? params.shipmentItemsName : null;\r\n            this.defaultItemsWeight         = params.shipmentItemsWeight ? params.shipmentItemsWeight : null;\r\n            this.defaultItemsProductId      = params.shipmentItemsProductId ? params.shipmentItemsProductId : null;\r\n            this.defaultItemsOrderItemId    = params.shipmentItemsOrderItemId ? params.shipmentItemsOrderItemId : null;\r\n\r\n            this.shippingInformation = params.shippingInformation ? params.shippingInformation : null;\r\n            this.thisPage           = params.thisPage ? params.thisPage : null;\r\n            this.customizableContainers = params.customizable ? params.customizable : [];\r\n\r\n            this.eps = 0.000001;\r\n        },\r\n\r\n        /**\r\n         * Get Package Id\r\n         */\r\n        getPackageId: function (packageBlock) {\r\n            return packageBlock.id.match(/\\d{0,}$/)[0];\r\n        },\r\n\r\n        //******************** Setters **********************************//\r\n        setLabelCreatedCallback: function (callback) {\r\n            this.labelCreatedCallback = callback;\r\n        },\r\n        setCancelCallback: function (callback) {\r\n            this.cancelCallback = callback;\r\n        },\r\n        setConfirmPackagingCallback: function (callback) {\r\n            this.confirmPackagingCallback = callback;\r\n        },\r\n        setItemQtyCallback: function (callback) {\r\n            this.itemQtyCallback = callback;\r\n        },\r\n        setCreateLabelUrl: function (url) {\r\n            this.createLabelUrl = url;\r\n        },\r\n        setParamsCreateLabelRequest: function (params) {\r\n            Object.extend(this.paramsCreateLabelRequest, params);\r\n        },\r\n        //******************** End Setters *******************************//\r\n\r\n        showWindow: function () {\r\n            if (this.packagesContent.childElements().length == 0) {\r\n                this.newPackage();\r\n            }\r\n            jQuery(this.window).modal('openModal');\r\n        },\r\n\r\n        cancelPackaging: function () {\r\n            if (Object.isFunction(this.cancelCallback)) {\r\n                this.cancelCallback();\r\n            }\r\n        },\r\n\r\n        confirmPackaging: function (params) {\r\n            if (Object.isFunction(this.confirmPackagingCallback)) {\r\n                this.confirmPackagingCallback();\r\n            }\r\n        },\r\n\r\n        checkAllItems: function (headCheckbox) {\r\n            $(headCheckbox).up('table').select('tbody input[type=\"checkbox\"]').each(function (checkbox) {\r\n                checkbox.checked = headCheckbox.checked;\r\n                this._observeQty.call(checkbox);\r\n            }.bind(this));\r\n        },\r\n\r\n        cleanPackages: function () {\r\n            this.packagesContent.update();\r\n            this.packages = [];\r\n            this.itemsAll = [];\r\n            this.packageIncrement = 0;\r\n            this._setAllItemsPackedState();\r\n            this.messages.hide().update();\r\n        },\r\n\r\n        sendCreateLabelRequest: function () {\r\n            var self = this;\r\n\r\n            if (!this.validate()) {\r\n                this.messages.show().update(this.validationErrorMsg);\r\n\r\n                return;\r\n            }\r\n            this.messages.hide().update();\r\n\r\n            if (this.createLabelUrl) {\r\n                var weight, length, width, height = null;\r\n                var packagesParams = [];\r\n\r\n                this.packagesContent.childElements().each(function (pack) {\r\n                    var packageId = this.getPackageId(pack);\r\n\r\n                    weight = parseFloat(pack.select('input[name=\"container_weight\"]')[0].value);\r\n                    length = parseFloat(pack.select('input[name=\"container_length\"]')[0].value);\r\n                    width = parseFloat(pack.select('input[name=\"container_width\"]')[0].value);\r\n                    height = parseFloat(pack.select('input[name=\"container_height\"]')[0].value);\r\n                    packagesParams[packageId] = {\r\n                        container:                  pack.select('select[name=\"package_container\"]')[0].value,\r\n                        customs_value:              parseFloat(pack.select('input[name=\"package_customs_value\"]')[0].value, 10),\r\n                        weight:                     isNaN(weight) ? '' : weight,\r\n                        length:                     isNaN(length) ? '' : length,\r\n                        width:                      isNaN(width) ? '' : width,\r\n                        height:                     isNaN(height) ? '' : height,\r\n                        weight_units:               pack.select('select[name=\"container_weight_units\"]')[0].value,\r\n                        dimension_units:            pack.select('select[name=\"container_dimension_units\"]')[0].value\r\n                    };\r\n\r\n                    if (isNaN(packagesParams[packageId]['customs_value'])) {\r\n                        packagesParams[packageId]['customs_value'] = 0;\r\n                    }\r\n\r\n                    if ('undefined' != typeof pack.select('select[name=\"package_size\"]')[0]) {\r\n                        if ('' != pack.select('select[name=\"package_size\"]')[0].value) {\r\n                            packagesParams[packageId]['size'] = pack.select('select[name=\"package_size\"]')[0].value;\r\n                        }\r\n                    }\r\n\r\n                    if ('undefined' != typeof pack.select('input[name=\"container_girth\"]')[0]) {\r\n                        if ('' != pack.select('input[name=\"container_girth\"]')[0].value) {\r\n                            packagesParams[packageId]['girth'] = pack.select('input[name=\"container_girth\"]')[0].value;\r\n                            packagesParams[packageId]['girth_dimension_units'] = pack.select('select[name=\"container_girth_dimension_units\"]')[0].value;\r\n                        }\r\n                    }\r\n\r\n                    if ('undefined' != typeof pack.select('select[name=\"content_type\"]')[0] && 'undefined' != typeof pack.select('input[name=\"content_type_other\"]')[0]) {\r\n                        packagesParams[packageId]['content_type'] = pack.select('select[name=\"content_type\"]')[0].value;\r\n                        packagesParams[packageId]['content_type_other'] = pack.select('input[name=\"content_type_other\"]')[0].value;\r\n                    } else {\r\n                        packagesParams[packageId]['content_type'] = '';\r\n                        packagesParams[packageId]['content_type_other'] = '';\r\n                    }\r\n                    var deliveryConfirmation = pack.select('select[name=\"delivery_confirmation_types\"]');\r\n\r\n                    if (deliveryConfirmation.length) {\r\n                        packagesParams[packageId]['delivery_confirmation'] =  deliveryConfirmation[0].value;\r\n                    }\r\n                }.bind(this));\r\n\r\n                for (var packageId in this.packages) {\r\n                    if (!isNaN(packageId)) {\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[container]']              = packagesParams[packageId]['container'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight]']                 = packagesParams[packageId]['weight'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[customs_value]']          = packagesParams[packageId]['customs_value'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[length]']                 = packagesParams[packageId]['length'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[width]']                  = packagesParams[packageId]['width'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[height]']                 = packagesParams[packageId]['height'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight_units]']           = packagesParams[packageId]['weight_units'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[dimension_units]']        = packagesParams[packageId]['dimension_units'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type]']           = packagesParams[packageId]['content_type'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type_other]']     = packagesParams[packageId]['content_type_other'];\r\n\r\n                        if ('undefined' != typeof packagesParams[packageId]['size']) {\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[size]'] = packagesParams[packageId]['size'];\r\n                        }\r\n\r\n                        if ('undefined' != typeof packagesParams[packageId]['girth']) {\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth]'] = packagesParams[packageId]['girth'];\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth_dimension_units]'] = packagesParams[packageId]['girth_dimension_units'];\r\n                        }\r\n\r\n                        if ('undefined' != typeof packagesParams[packageId]['delivery_confirmation']) {\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[delivery_confirmation]']  = packagesParams[packageId]['delivery_confirmation'];\r\n                        }\r\n\r\n                        for (var packedItemId in this.packages[packageId]['items']) {\r\n                            if (!isNaN(packedItemId)) {\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][qty]']           = this.packages[packageId]['items'][packedItemId]['qty'];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][customs_value]'] = this.packages[packageId]['items'][packedItemId]['customs_value'];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][price]']         = self.defaultItemsPrice[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][name]']          = self.defaultItemsName[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][weight]']        = self.defaultItemsWeight[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][product_id]']    = self.defaultItemsProductId[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][order_item_id]'] = self.defaultItemsOrderItemId[packedItemId];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                new Ajax.Request(this.createLabelUrl, {\r\n                    parameters: this.paramsCreateLabelRequest,\r\n                    onSuccess: function (transport) {\r\n                        var response = transport.responseText;\r\n\r\n                        if (response.isJSON()) {\r\n                            response = response.evalJSON();\r\n\r\n                            if (response.error) {\r\n                                this.messages.show().innerHTML = response.message;\r\n                            } else if (response.ok && Object.isFunction(this.labelCreatedCallback)) {\r\n                                this.labelCreatedCallback(response);\r\n                            }\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n\r\n                if (this.paramsCreateLabelRequest['code'] &&\r\n                    this.paramsCreateLabelRequest['carrier_title'] &&\r\n                    this.paramsCreateLabelRequest['method_title'] &&\r\n                    this.paramsCreateLabelRequest['price']\r\n                ) {\r\n                    var a = this.paramsCreateLabelRequest['code'];\r\n                    var b = this.paramsCreateLabelRequest['carrier_title'];\r\n                    var c = this.paramsCreateLabelRequest['method_title'];\r\n                    var d = this.paramsCreateLabelRequest['price'];\r\n\r\n                    this.paramsCreateLabelRequest = {};\r\n                    this.paramsCreateLabelRequest['code']           = a;\r\n                    this.paramsCreateLabelRequest['carrier_title']  = b;\r\n                    this.paramsCreateLabelRequest['method_title']   = c;\r\n                    this.paramsCreateLabelRequest['price']          = d;\r\n                } else {\r\n                    this.paramsCreateLabelRequest = {};\r\n                }\r\n            }\r\n        },\r\n\r\n        validate: function () {\r\n            var dimensionElements = $('packaging_window').select(\r\n                'input[name=container_length],input[name=container_width],input[name=container_height],input[name=container_girth]:not(\"._disabled\")'\r\n            );\r\n            var callback = null;\r\n\r\n            if (dimensionElements.any(function (element) {\r\n                return !!element.value;\r\n            })) {\r\n                callback = function (element) {\r\n                    $(element).addClassName('required-entry');\r\n                };\r\n            } else {\r\n                callback = function (element) {\r\n                    $(element).removeClassName('required-entry');\r\n                };\r\n            }\r\n            dimensionElements.each(callback);\r\n\r\n            return result = $$('[id^=\"package_block_\"] input').collect(function (element) {\r\n                return this.validateElement(element);\r\n            }, this).all();\r\n        },\r\n\r\n        validateElement: function (elm) {\r\n            var cn = $w(elm.className);\r\n\r\n            return result = cn.all(function (value) {\r\n                var v = Validation.get(value);\r\n\r\n                if (Validation.isVisible(elm) && !v.test($F(elm), elm)) {\r\n                    $(elm).addClassName('validation-failed');\r\n\r\n                    return false;\r\n                }\r\n                $(elm).removeClassName('validation-failed');\r\n\r\n                return true;\r\n\r\n            });\r\n        },\r\n\r\n        validateCustomsValue: function () {\r\n            var items = [];\r\n            var isValid = true;\r\n            var itemsPrepare = [];\r\n            var itemsPacked = [];\r\n\r\n            this.packagesContent.childElements().each(function (pack) {\r\n                itemsPrepare = pack.select('[data-role=\"package-items\"]')[0];\r\n\r\n                if (itemsPrepare) {\r\n                    items = items.concat(itemsPrepare.select('.grid tbody tr'));\r\n                }\r\n                itemsPacked = pack.select('.package_items')[0];\r\n\r\n                if (itemsPacked) {\r\n                    items = items.concat(itemsPacked.select('.grid tbody tr'));\r\n                }\r\n            });\r\n\r\n            items.each(function (item) {\r\n                var itemCustomsValue = item.select('[name=\"customs_value\"]')[0];\r\n\r\n                if (!this.validateElement(itemCustomsValue)) {\r\n                    isValid = false;\r\n                }\r\n            }.bind(this));\r\n\r\n            if (isValid) {\r\n                this.messages.hide().update();\r\n            } else {\r\n                this.messages.show().update(this.validationErrorMsg);\r\n            }\r\n\r\n            return isValid;\r\n        },\r\n\r\n        newPackage: function () {\r\n            var pack = this.template.cloneNode(true);\r\n\r\n            pack.id = 'package_block_' + ++this.packageIncrement;\r\n            pack.addClassName('package-block');\r\n            pack.select('[data-role=package-number]')[0].update(this.packageIncrement);\r\n            this.packagesContent.insert({\r\n                top: pack\r\n            });\r\n            pack.select('[data-action=package-save-items]')[0].hide();\r\n            pack.show();\r\n        },\r\n\r\n        deletePackage: function (obj) {\r\n            var pack = $(obj).up('[id^=\"package_block\"]');\r\n\r\n            var packItems = pack.select('.package_items')[0];\r\n            var packageId = this.getPackageId(pack);\r\n\r\n            delete this.packages[packageId];\r\n            pack.remove();\r\n            this.messages.hide().update();\r\n            this._setAllItemsPackedState();\r\n        },\r\n\r\n        deleteItem: function (obj) {\r\n            var item = $(obj).up('tr');\r\n            var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n            var pack = $(obj).up('[id^=\"package_block\"]');\r\n            var packItems = pack.select('.package_items')[0];\r\n            var packageId = this.getPackageId(pack);\r\n\r\n            delete this.packages[packageId]['items'][itemId];\r\n\r\n            if (item.offsetParent.rows.length <= 2) { /* head + this last row */\r\n                $(packItems).hide();\r\n            }\r\n            item.remove();\r\n            this.messages.hide().update();\r\n            this._recalcContainerWeightAndCustomsValue(packItems);\r\n            this._setAllItemsPackedState();\r\n        },\r\n\r\n        recalcContainerWeightAndCustomsValue: function (obj) {\r\n            var pack = $(obj).up('[id^=\"package_block\"]');\r\n            var packItems = pack.select('.package_items')[0];\r\n\r\n            if (packItems) {\r\n                if (!this.validateCustomsValue()) {\r\n                    return;\r\n                }\r\n                this._recalcContainerWeightAndCustomsValue(packItems);\r\n            }\r\n        },\r\n\r\n        getItemsForPack: function (obj) {\r\n            if (this.itemsGridUrl) {\r\n                var parameters = $H({\r\n                    'shipment_id': this.shipmentId\r\n                });\r\n                var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n                var packagePrapare = packageBlock.select('[data-role=package-items]')[0];\r\n                var packagePrapareGrid = packagePrapare.select('.grid_prepare')[0];\r\n\r\n                new Ajax.Request(this.itemsGridUrl, {\r\n                    parameters: parameters,\r\n                    onSuccess: function (transport) {\r\n                        var response = transport.responseText;\r\n\r\n                        if (response) {\r\n                            packagePrapareGrid.update(response);\r\n                            this.processPackagePrepare(packagePrapareGrid);\r\n\r\n                            if (packagePrapareGrid.select('.grid tbody tr').length) {\r\n                                packageBlock.select('[data-action=package-add-items]')[0].hide();\r\n                                packageBlock.select('[data-action=package-save-items]')[0].show();\r\n                                packagePrapare.show();\r\n                            } else {\r\n                                packagePrapareGrid.update();\r\n                            }\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            }\r\n        },\r\n\r\n        getPackedItemsQty: function () {\r\n            var items = [];\r\n\r\n            for (var packageId in this.packages) {\r\n                if (!isNaN(packageId)) {\r\n                    for (var packedItemId in this.packages[packageId]['items']) {\r\n                        if (!isNaN(packedItemId)) {\r\n                            if (items[packedItemId]) {\r\n                                items[packedItemId] += this.packages[packageId]['items'][packedItemId]['qty'];\r\n                            } else {\r\n                                items[packedItemId] = this.packages[packageId]['items'][packedItemId]['qty'];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return items;\r\n        },\r\n\r\n        _parseQty: function (obj) {\r\n            var qty = $(obj).hasClassName('qty-decimal') ? parseFloat(obj.value) : parseInt(obj.value);\r\n\r\n            if (isNaN(qty) || qty <= 0) {\r\n                qty = 1;\r\n            }\r\n\r\n            return qty;\r\n        },\r\n\r\n        packItems: function (obj) {\r\n            var anySelected = false;\r\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n            var packageId = this.getPackageId(packageBlock);\r\n            var packagePrepare = packageBlock.select('[data-role=package-items]')[0];\r\n            var packagePrepareGrid = packagePrepare.select('.grid_prepare')[0];\r\n\r\n            // check for exceeds the total shipped quantity\r\n            var checkExceedsQty = false;\r\n\r\n            this.messages.hide().update();\r\n            packagePrepareGrid.select('.grid tbody tr').each(function (item) {\r\n                var checkbox = item.select('[type=\"checkbox\"]')[0];\r\n                var itemId = checkbox.value;\r\n                var qtyValue  = this._parseQty(item.select('[name=\"qty\"]')[0]);\r\n\r\n                item.select('[name=\"qty\"]')[0].value = qtyValue;\r\n\r\n                if (checkbox.checked && this._checkExceedsQty(itemId, qtyValue)) {\r\n                    this.messages.show().update(this.errorQtyOverLimit);\r\n                    checkExceedsQty = true;\r\n                }\r\n            }.bind(this));\r\n\r\n            if (checkExceedsQty) {\r\n                return;\r\n            }\r\n\r\n            if (!this.validateCustomsValue()) {\r\n                return;\r\n            }\r\n\r\n            // prepare items for packing\r\n            packagePrepareGrid.select('.grid tbody tr').each(function (item) {\r\n                var checkbox = item.select('[type=\"checkbox\"]')[0];\r\n\r\n                if (checkbox.checked) {\r\n                    var qty  = item.select('[name=\"qty\"]')[0];\r\n                    var qtyValue  = this._parseQty(qty);\r\n\r\n                    item.select('[name=\"qty\"]')[0].value = qtyValue;\r\n                    anySelected = true;\r\n                    qty.disabled = 'disabled';\r\n                    checkbox.disabled = 'disabled';\r\n                    packagePrepareGrid.select('.grid th [type=\"checkbox\"]')[0].up('th label').hide();\r\n                    item.select('[data-action=package-delete-item]')[0].show();\r\n                } else {\r\n                    item.remove();\r\n                }\r\n            }.bind(this));\r\n\r\n            // packing items\r\n            if (anySelected) {\r\n                var packItems = packageBlock.select('.package_items')[0];\r\n\r\n                if (!packItems) {\r\n                    packagePrepare.insert(new Element('div').addClassName('grid_prepare'));\r\n                    packagePrepare.insert({\r\n                        after: packagePrepareGrid\r\n                    });\r\n                    packItems = packagePrepareGrid.removeClassName('grid_prepare').addClassName('package_items');\r\n                    packItems.select('.grid tbody tr').each(function (item) {\r\n                        var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n                        var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\r\n\r\n                        qtyValue = qtyValue <= 0 ? 1 : qtyValue;\r\n\r\n                        if ('undefined' == typeof this.packages[packageId]) {\r\n                            this.packages[packageId] = {\r\n                                'items': [], 'params': {}\r\n                            };\r\n                        }\r\n\r\n                        if ('undefined' == typeof this.packages[packageId]['items'][itemId]) {\r\n                            this.packages[packageId]['items'][itemId] = {};\r\n                            this.packages[packageId]['items'][itemId]['qty'] = qtyValue;\r\n                        } else {\r\n                            this.packages[packageId]['items'][itemId]['qty'] += qtyValue;\r\n                        }\r\n                    }.bind(this));\r\n                } else {\r\n                    packagePrepareGrid.select('.grid tbody tr').each(function (item) {\r\n                        var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n                        var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\r\n\r\n                        qtyValue = qtyValue <= 0 ? 1 : qtyValue;\r\n\r\n                        if ('undefined' == typeof this.packages[packageId]['items'][itemId]) {\r\n                            this.packages[packageId]['items'][itemId] = {};\r\n                            this.packages[packageId]['items'][itemId]['qty'] = qtyValue;\r\n                            packItems.select('.grid tbody')[0].insert(item);\r\n                        } else {\r\n                            this.packages[packageId]['items'][itemId]['qty'] += qtyValue;\r\n                            var packItem = packItems.select('[type=\"checkbox\"][value=\"' + itemId + '\"]')[0].up('tr').select('[name=\"qty\"]')[0];\r\n\r\n                            packItem.value = this.packages[packageId]['items'][itemId]['qty'];\r\n                        }\r\n                    }.bind(this));\r\n                    packagePrepareGrid.update();\r\n                }\r\n                $(packItems).show();\r\n                this._recalcContainerWeightAndCustomsValue(packItems);\r\n            } else {\r\n                packagePrepareGrid.update();\r\n            }\r\n\r\n            // show/hide disable/enable\r\n            packagePrepare.hide();\r\n            packageBlock.select('[data-action=package-save-items]')[0].hide();\r\n            packageBlock.select('[data-action=package-add-items]')[0].show();\r\n            this._setAllItemsPackedState();\r\n        },\r\n\r\n        validateItemQty: function (itemId, qty) {\r\n            return this.defaultItemsQty[itemId] < qty ? this.defaultItemsQty[itemId] : qty;\r\n        },\r\n\r\n        changeMeasures: function (obj) {\r\n            var incr = 0;\r\n            var incrSelected = 0;\r\n\r\n            obj.childElements().each(function (option) {\r\n                if (option.selected) {\r\n                    incrSelected = incr;\r\n                }\r\n                incr++;\r\n            });\r\n\r\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n\r\n            packageBlock.select('.measures').each(function (item) {\r\n                if (item.name != obj.name) {\r\n                    var incr = 0;\r\n\r\n                    item.select('option').each(function (option) {\r\n                        if (incr == incrSelected) {\r\n                            item.value = option.value;\r\n                            //option.selected = true\r\n                        }\r\n                        incr++;\r\n                    });\r\n                }\r\n            });\r\n\r\n        },\r\n\r\n        checkSizeAndGirthParameter: function (obj, enabled) {\r\n            if (enabled == 0) {\r\n                return;\r\n            }\r\n            var currentNode = obj;\r\n\r\n            while (currentNode.nodeName != 'TBODY') {\r\n                currentNode = currentNode.parentNode;\r\n            }\r\n\r\n            if (!currentNode) {\r\n                return;\r\n            }\r\n\r\n            var packageSize = currentNode.select('select[name=package_size]');\r\n            var packageContainer = currentNode.select('select[name=package_container]');\r\n            var packageGirth = currentNode.select('input[name=container_girth]');\r\n            var packageGirthDimensionUnits = currentNode.select('select[name=container_girth_dimension_units]');\r\n\r\n            if (packageSize.length <= 0) {\r\n                return;\r\n            }\r\n\r\n            var girthEnabled = packageContainer[0].value == 'NONRECTANGULAR' || packageContainer[0].value == 'VARIABLE';\r\n\r\n            if (!girthEnabled) {\r\n                packageGirth[0].value = '';\r\n                packageGirth[0].disable();\r\n                packageGirth[0].addClassName('_disabled');\r\n                packageGirthDimensionUnits[0].disable();\r\n                packageGirthDimensionUnits[0].addClassName('_disabled');\r\n            } else {\r\n                packageGirth[0].enable();\r\n                packageGirth[0].removeClassName('_disabled');\r\n                packageGirthDimensionUnits[0].enable();\r\n                packageGirthDimensionUnits[0].removeClassName('_disabled');\r\n            }\r\n\r\n            var sizeEnabled = packageContainer[0].value == 'NONRECTANGULAR' || packageContainer[0].value == 'RECTANGULAR' ||\r\n                packageContainer[0].value == 'VARIABLE';\r\n\r\n            if (!sizeEnabled) {\r\n                option = document.createElement('OPTION');\r\n                option.value = '';\r\n                option.text = '';\r\n                packageSize[0].options.add(option);\r\n                packageSize[0].value = '';\r\n                packageSize[0].disable();\r\n                packageSize[0].addClassName('_disabled');\r\n            } else {\r\n                for (i = 0; i < packageSize[0].length; i++) {\r\n                    if (packageSize[0].options[i].value == '') {\r\n                        packageSize[0].removeChild(packageSize[0].options[i]);\r\n                    }\r\n                }\r\n                packageSize[0].enable();\r\n                packageSize[0].removeClassName('_disabled');\r\n            }\r\n        },\r\n\r\n        changeContainerType: function (obj) {\r\n            if (this.customizableContainers.length <= 0) {\r\n                return;\r\n            }\r\n\r\n            var disable = true;\r\n\r\n            for (var i in this.customizableContainers) {\r\n                if (this.customizableContainers[i] == obj.value) {\r\n                    disable = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            var currentNode = obj;\r\n\r\n            while (currentNode.nodeName != 'TBODY') {\r\n                currentNode = currentNode.parentNode;\r\n            }\r\n\r\n            if (!currentNode) {\r\n                return;\r\n            }\r\n\r\n            $(currentNode).select(\r\n                'input[name=container_length],input[name=container_width],input[name=container_height],select[name=container_dimension_units]'\r\n            ).each(function (inputElement) {\r\n                if (disable) {\r\n                    Form.Element.disable(inputElement);\r\n                    inputElement.addClassName('_disabled');\r\n\r\n                    if (inputElement.nodeName == 'INPUT') {\r\n                        $(inputElement).value = '';\r\n                    }\r\n                } else {\r\n                    Form.Element.enable(inputElement);\r\n                    inputElement.removeClassName('_disabled');\r\n                }\r\n            });\r\n        },\r\n\r\n        changeContentTypes: function (obj) {\r\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n            var contentType = packageBlock.select('[name=content_type]')[0];\r\n            var contentTypeOther = packageBlock.select('[name=content_type_other]')[0];\r\n\r\n            if (contentType.value == 'OTHER') {\r\n                Form.Element.enable(contentTypeOther);\r\n                contentTypeOther.removeClassName('_disabled');\r\n            } else {\r\n                Form.Element.disable(contentTypeOther);\r\n                contentTypeOther.addClassName('_disabled');\r\n            }\r\n\r\n        },\r\n\r\n        //******************** Private functions **********************************//\r\n        _getItemsCount: function (items) {\r\n            var count = 0;\r\n\r\n            items.each(function (itemCount) {\r\n                if (!isNaN(itemCount)) {\r\n                    count += parseFloat(itemCount);\r\n                }\r\n            });\r\n\r\n            return count;\r\n        },\r\n\r\n        /**\r\n         * Show/hide disable/enable buttons in case of all items packed state\r\n         */\r\n        _setAllItemsPackedState: function () {\r\n            var addPackageBtn = $$('[data-action=add-packages]')[0];\r\n            var savePackagesBtn = $$('[data-action=save-packages]')[0];\r\n\r\n            if (this._getItemsCount(this.itemsAll) > 0 &&\r\n                    this._checkExceedsQtyFinal(this._getItemsCount(this.getPackedItemsQty()), this._getItemsCount(this.itemsAll))\r\n            ) {\r\n                this.packagesContent.select('[data-action=package-add-items]').each(function (button) {\r\n                    button.disabled = 'disabled';\r\n                    button.addClassName('_disabled');\r\n                });\r\n                addPackageBtn.addClassName('_disabled');\r\n                Form.Element.disable(addPackageBtn);\r\n                savePackagesBtn.removeClassName('_disabled');\r\n                Form.Element.enable(savePackagesBtn);\r\n                savePackagesBtn.title = '';\r\n\r\n                // package number recalculation\r\n                var packagesRecalc = [];\r\n\r\n                this.packagesContent.childElements().each(function (pack) {\r\n                    if (!pack.select('.package_items .grid tbody tr').length) {\r\n                        pack.remove();\r\n                    }\r\n                });\r\n                var packagesCount = this.packagesContent.childElements().length;\r\n\r\n                this.packageIncrement = packagesCount;\r\n                this.packagesContent.childElements().each(function (pack) {\r\n                    var packageId = this.getPackageId(pack);\r\n\r\n                    pack.id = 'package_block_' + packagesCount;\r\n                    pack.select('[data-role=package-number]')[0].update(packagesCount);\r\n                    packagesRecalc[packagesCount] = this.packages[packageId];\r\n                    --packagesCount;\r\n                }.bind(this));\r\n                this.packages = packagesRecalc;\r\n\r\n            } else {\r\n                this.packagesContent.select('[data-action=package-add-items]').each(function (button) {\r\n                    button.removeClassName('_disabled');\r\n                    Form.Element.enable(button);\r\n                });\r\n                addPackageBtn.removeClassName('_disabled');\r\n                Form.Element.enable(addPackageBtn);\r\n                savePackagesBtn.addClassName('_disabled');\r\n                Form.Element.disable(savePackagesBtn);\r\n                savePackagesBtn.title = this.titleDisabledSaveBtn;\r\n            }\r\n        },\r\n\r\n        processPackagePrepare: function (packagePrepare) {\r\n            var itemsAll = [],\r\n                qty,\r\n                itemId,\r\n                qtyValue = 0,\r\n                value = 1;\r\n\r\n            packagePrepare.select('.grid tbody tr').each(function (item) {\r\n                qty = item.select('[name=\"qty\"]')[0],\r\n                    itemId = item.select('[type=\"checkbox\"]')[0].value,\r\n                    qtyValue = parseFloat(qty.value);\r\n\r\n                if (Object.isFunction(this.itemQtyCallback)) {\r\n                    value = this.itemQtyCallback(itemId);\r\n\r\n                    if (typeof value !== 'undefined') {\r\n                        qtyValue = parseFloat(value);\r\n                        qtyValue = this.validateItemQty(itemId, qtyValue);\r\n                        qty.value = qtyValue;\r\n                    }\r\n                } else {\r\n                    value = item.select('[name=\"qty\"]')[0].value;\r\n                    qtyValue = typeof value == 'string' && value.length == 0 ? 0 : parseFloat(value);\r\n\r\n                    if (isNaN(qtyValue) || qtyValue < 0) {\r\n                        qtyValue = 1;\r\n                    }\r\n                }\r\n\r\n                if (qtyValue == 0) {\r\n                    item.remove();\r\n\r\n                    return;\r\n                }\r\n                var packedItems = this.getPackedItemsQty();\r\n\r\n                itemsAll[itemId] = qtyValue;\r\n\r\n                for (var packedItemId in packedItems) {\r\n                    if (!isNaN(packedItemId)) {\r\n                        var packedQty = packedItems[packedItemId];\r\n\r\n                        if (itemId == packedItemId) {\r\n                            if (qtyValue == packedQty || qtyValue <= packedQty) {\r\n                                item.remove();\r\n                            } else if (qtyValue > packedQty) {\r\n                                /* fix float number precision */\r\n                                qty.value = Number(Number(Math.round(qtyValue - packedQty + 'e+4') + 'e-4').toFixed(4));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }.bind(this));\r\n\r\n            if (!this.itemsAll.length) {\r\n                this.itemsAll = itemsAll;\r\n            }\r\n\r\n            packagePrepare.select('tbody input[type=\"checkbox\"]').each(function (item) {\r\n                $(item).observe('change', this._observeQty);\r\n                this._observeQty.call(item);\r\n            }.bind(this));\r\n        },\r\n\r\n        _observeQty: function () {\r\n            /** this = input[type=\"checkbox\"] */\r\n            var tr  = jQuery(this).closest('tr')[0],\r\n                qty = $(tr.cells[tr.cells.length - 1]).select('input[name=\"qty\"]')[0];\r\n\r\n            if (qty.disabled = !this.checked) {\r\n                $(qty).addClassName('_disabled');\r\n            } else {\r\n                $(qty).removeClassName('_disabled');\r\n            }\r\n        },\r\n\r\n        _checkExceedsQty: function (itemId, qty) {\r\n            var packedItemQty = this.getPackedItemsQty()[itemId] ? this.getPackedItemsQty()[itemId] : 0;\r\n            var allItemQty = this.itemsAll[itemId];\r\n\r\n            return qty * (1 - this.eps) > allItemQty *  (1 + this.eps)  - packedItemQty * (1 - this.eps);\r\n        },\r\n\r\n        _checkExceedsQtyFinal: function (checkOne, defQty) {\r\n            return checkOne * (1 + this.eps) >= defQty * (1 - this.eps);\r\n        },\r\n\r\n        _recalcContainerWeightAndCustomsValue: function (container) {\r\n            var packageBlock = container.up('[id^=\"package_block\"]');\r\n            var packageId = this.getPackageId(packageBlock);\r\n            var containerWeight = packageBlock.select('[name=\"container_weight\"]')[0];\r\n            var containerCustomsValue = packageBlock.select('[name=\"package_customs_value\"]')[0];\r\n\r\n            containerWeight.value = 0;\r\n            containerCustomsValue.value = 0;\r\n            container.select('.grid tbody tr').each(function (item) {\r\n                var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n                var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\r\n\r\n                if (isNaN(qtyValue) || qtyValue <= 0) {\r\n                    qtyValue = 1;\r\n                    item.select('[name=\"qty\"]')[0].value = qtyValue;\r\n                }\r\n                var itemWeight = parseFloat(this._getElementText(item.select('[data-role=item-weight]')[0]));\r\n\r\n                containerWeight.value = parseFloat(containerWeight.value) + itemWeight * qtyValue;\r\n                var itemCustomsValue = parseFloat(item.select('[name=\"customs_value\"]')[0].value) || 0;\r\n\r\n                containerCustomsValue.value = parseFloat(containerCustomsValue.value) + itemCustomsValue * qtyValue;\r\n                this.packages[packageId]['items'][itemId]['customs_value'] = itemCustomsValue;\r\n            }.bind(this));\r\n            containerWeight.value = parseFloat(parseFloat(Math.round(containerWeight.value + 'e+4') + 'e-4').toFixed(4));\r\n            containerCustomsValue.value = parseFloat(Math.round(containerCustomsValue.value + 'e+2') + 'e-2').toFixed(2);\r\n\r\n            if (containerCustomsValue.value == 0) {\r\n                containerCustomsValue.value = '';\r\n            }\r\n        },\r\n\r\n        _getElementText: function (el) {\r\n            if ('string' == typeof el.textContent) {\r\n                return el.textContent;\r\n            }\r\n\r\n            if ('string' == typeof el.innerText) {\r\n                return el.innerText;\r\n            }\r\n\r\n            return el.innerHTML.replace(/<[^>]*>/g, '');\r\n        }\r\n        //******************** End Private functions ******************************//\r\n    };\r\n\r\n});\r\n","Magento_Sitemap/js/form-submit-loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        $(element).on('save', function () {\r\n            if ($(this).valid()) {\r\n                $('body').trigger('processStart');\r\n            }\r\n        });\r\n    };\r\n});\r\n","Magento_Swatches/js/product-attributes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'uiRegistry',\r\n    'collapsable'\r\n], function ($, alert, prompt, rg) {\r\n    'use strict';\r\n\r\n    return function (optionConfig) {\r\n        var activePanelClass = 'selected-type-options',\r\n            swatchProductAttributes = {\r\n                frontendInput: $('#frontend_input'),\r\n                isFilterable: $('#is_filterable'),\r\n                isFilterableInSearch: $('#is_filterable_in_search'),\r\n                backendType: $('#backend_type'),\r\n                usedForSortBy: $('#used_for_sort_by'),\r\n                frontendClass: $('#frontend_class'),\r\n                isWysiwygEnabled: $('#is_wysiwyg_enabled'),\r\n                isHtmlAllowedOnFront: $('#is_html_allowed_on_front'),\r\n                isRequired: $('#is_required'),\r\n                isUnique: $('#is_unique'),\r\n                defaultValueText: $('#default_value_text'),\r\n                defaultValueTextarea: $('#default_value_textarea'),\r\n                defaultValueDate: $('#default_value_date'),\r\n                defaultValueDatetime: $('#default_value_datetime'),\r\n                defaultValueYesno: $('#default_value_yesno'),\r\n                isGlobal: $('#is_global'),\r\n                useProductImageForSwatch: $('#use_product_image_for_swatch'),\r\n                updateProductPreviewImage: $('#update_product_preview_image'),\r\n                usedInProductListing: $('#used_in_product_listing'),\r\n                isVisibleOnFront: $('#is_visible_on_front'),\r\n                position: $('#position'),\r\n                attrTabsFront: $('#product_attribute_tabs_front'),\r\n\r\n                /**\r\n                 * @returns {*|jQuery|HTMLElement}\r\n                 */\r\n                get tabsFront() {\r\n                    return this.attrTabsFront.length ? this.attrTabsFront.closest('li') : $('#front_fieldset-wrapper');\r\n                },\r\n                selectFields: ['boolean', 'select', 'multiselect', 'price', 'swatch_text', 'swatch_visual'],\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                toggleApplyVisibility: function (select) {\r\n                    if ($(select).val() === 1) {\r\n                        $(select).next('select').removeClass('no-display');\r\n                        $(select).next('select').removeClass('ignore-validate');\r\n                    } else {\r\n                        $(select).next('select').addClass('no-display');\r\n                        $(select).next('select').addClass('ignore-validate');\r\n                        $(select).next('select option:selected').each(function () {\r\n                            this.selected = false;\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                checkOptionsPanelVisibility: function () {\r\n                    var selectOptionsPanel = $('#manage-options-panel'),\r\n                        visualOptionsPanel = $('#swatch-visual-options-panel'),\r\n                        textOptionsPanel = $('#swatch-text-options-panel');\r\n\r\n                    this._hidePanel(selectOptionsPanel);\r\n                    this._hidePanel(visualOptionsPanel);\r\n                    this._hidePanel(textOptionsPanel);\r\n\r\n                    switch (this.frontendInput.val()) {\r\n                        case 'swatch_visual':\r\n                            this._showPanel(visualOptionsPanel);\r\n                            break;\r\n\r\n                        case 'swatch_text':\r\n                            this._showPanel(textOptionsPanel);\r\n                            break;\r\n\r\n                        case 'select':\r\n                        case 'multiselect':\r\n                            this._showPanel(selectOptionsPanel);\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                bindAttributeInputType: function () {\r\n                    this.checkOptionsPanelVisibility();\r\n                    this.switchDefaultValueField();\r\n\r\n                    if (!~$.inArray(this.frontendInput.val(), this.selectFields)) {\r\n                        // not in array\r\n                        this.isFilterable.selectedIndex = 0;\r\n                        this._disable(this.isFilterable);\r\n                        this._disable(this.isFilterableInSearch);\r\n                    } else {\r\n                        // in array\r\n                        this._enable(this.isFilterable);\r\n                        this._enable(this.isFilterableInSearch);\r\n                        this.backendType.val('int');\r\n                    }\r\n\r\n                    if (this.frontendInput.val() === 'multiselect' ||\r\n                        this.frontendInput.val() === 'gallery' ||\r\n                        this.frontendInput.val() === 'textarea'\r\n                    ) {\r\n                        this._disable(this.usedForSortBy);\r\n                    } else {\r\n                        this._enable(this.usedForSortBy);\r\n                    }\r\n\r\n                    if (this.frontendInput.val() === 'swatch_text') {\r\n                        $('.swatch-text-field-0').addClass('required-option');\r\n                    } else {\r\n                        $('.swatch-text-field-0').removeClass('required-option');\r\n                    }\r\n\r\n                    this.setRowVisibility(this.isWysiwygEnabled, false);\r\n                    this.setRowVisibility(this.isHtmlAllowedOnFront, false);\r\n\r\n                    switch (this.frontendInput.val()) {\r\n                        case 'textarea':\r\n                            this.setRowVisibility(this.isWysiwygEnabled, true);\r\n\r\n                            if (this.isWysiwygEnabled.val() === '0') {\r\n                                this._enable(this.isHtmlAllowedOnFront);\r\n                            }\r\n                            this.frontendClass.val('');\r\n                            this._disable(this.frontendClass);\r\n                            break;\r\n\r\n                        case 'text':\r\n                            this.setRowVisibility(this.isHtmlAllowedOnFront, true);\r\n                            this._enable(this.frontendClass);\r\n                            break;\r\n\r\n                        case 'select':\r\n                        case 'multiselect':\r\n                            this.setRowVisibility(this.isHtmlAllowedOnFront, true);\r\n                            this.frontendClass.val('');\r\n                            this._disable(this.frontendClass);\r\n                            break;\r\n                        default:\r\n                            this.frontendClass.val('');\r\n                            this._disable(this.frontendClass);\r\n                    }\r\n\r\n                    this.switchIsFilterable();\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                switchIsFilterable: function () {\r\n                    if (this.isFilterable.selectedIndex === 0) {\r\n                        this._disable(this.position);\r\n                    } else {\r\n                        this._enable(this.position);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                switchDefaultValueField: function () {\r\n                    var currentValue = this.frontendInput.val(),\r\n                        defaultValueTextVisibility = false,\r\n                        defaultValueTextareaVisibility = false,\r\n                        defaultValueDateVisibility = false,\r\n                        defaultValueDatetimeVisibility = false,\r\n                        defaultValueYesnoVisibility = false,\r\n                        scopeVisibility = true,\r\n                        useProductImageForSwatch = false,\r\n                        defaultValueUpdateImage = false,\r\n                        optionDefaultInputType = '',\r\n                        isFrontTabHidden = false,\r\n                        thing = this;\r\n\r\n                    if (!this.frontendInput.length) {\r\n                        return;\r\n                    }\r\n\r\n                    switch (currentValue) {\r\n                        case 'select':\r\n                            optionDefaultInputType = 'radio';\r\n                            break;\r\n\r\n                        case 'multiselect':\r\n                            optionDefaultInputType = 'checkbox';\r\n                            break;\r\n\r\n                        case 'date':\r\n                            defaultValueDateVisibility = true;\r\n                            break;\r\n\r\n                        case 'datetime':\r\n                            defaultValueDatetimeVisibility = true;\r\n                            break;\r\n\r\n                        case 'boolean':\r\n                            defaultValueYesnoVisibility = true;\r\n                            break;\r\n\r\n                        case 'textarea':\r\n                        case 'texteditor':\r\n                            defaultValueTextareaVisibility = true;\r\n                            break;\r\n\r\n                        case 'media_image':\r\n                            defaultValueTextVisibility = false;\r\n                            break;\r\n\r\n                        case 'price':\r\n                            scopeVisibility = false;\r\n                            break;\r\n\r\n                        case 'swatch_visual':\r\n                            useProductImageForSwatch = true;\r\n                            defaultValueUpdateImage = true;\r\n                            defaultValueTextVisibility = false;\r\n                            break;\r\n\r\n                        case 'swatch_text':\r\n                            useProductImageForSwatch = false;\r\n                            defaultValueUpdateImage = true;\r\n                            defaultValueTextVisibility = false;\r\n                            break;\r\n                        default:\r\n                            defaultValueTextVisibility = true;\r\n                            break;\r\n                    }\r\n\r\n                    delete optionConfig.hiddenFields['swatch_visual'];\r\n                    delete optionConfig.hiddenFields['swatch_text'];\r\n\r\n                    if (currentValue === 'media_image') {\r\n                        this.tabsFront.hide();\r\n                        this.setRowVisibility(this.isRequired, false);\r\n                        this.setRowVisibility(this.isUnique, false);\r\n                        this.setRowVisibility(this.frontendClass, false);\r\n                    } else if (optionConfig.hiddenFields[currentValue]) {\r\n                        $.each(optionConfig.hiddenFields[currentValue], function (key, option) {\r\n                            switch (option) {\r\n                                case '_front_fieldset':\r\n                                    thing.tabsFront.hide();\r\n                                    isFrontTabHidden = true;\r\n                                    break;\r\n\r\n                                case '_default_value':\r\n                                    defaultValueTextVisibility = false;\r\n                                    defaultValueTextareaVisibility = false;\r\n                                    defaultValueDateVisibility = false;\r\n                                    defaultValueDatetimeVisibility = false;\r\n                                    defaultValueYesnoVisibility = false;\r\n                                    break;\r\n\r\n                                case '_scope':\r\n                                    scopeVisibility = false;\r\n                                    break;\r\n                                default:\r\n                                    thing.setRowVisibility($('#' + option), false);\r\n                            }\r\n                        });\r\n\r\n                        if (!isFrontTabHidden) {\r\n                            thing.tabsFront.show();\r\n                        }\r\n\r\n                    } else {\r\n                        this.tabsFront.show();\r\n                        this.showDefaultRows();\r\n                    }\r\n\r\n                    this.setRowVisibility(this.defaultValueText, defaultValueTextVisibility);\r\n                    this.setRowVisibility(this.defaultValueTextarea, defaultValueTextareaVisibility);\r\n                    this.setRowVisibility(this.defaultValueDate, defaultValueDateVisibility);\r\n                    this.setRowVisibility(this.defaultValueDatetime, defaultValueDatetimeVisibility);\r\n                    this.setRowVisibility(this.defaultValueYesno, defaultValueYesnoVisibility);\r\n                    this.setRowVisibility(this.isGlobal, scopeVisibility);\r\n\r\n                    /* swatch attributes */\r\n                    this.setRowVisibility(this.useProductImageForSwatch, useProductImageForSwatch);\r\n                    this.setRowVisibility(this.updateProductPreviewImage, defaultValueUpdateImage);\r\n\r\n                    $('input[name=\\'default[]\\']').each(function () {\r\n                        $(this).attr('type', optionDefaultInputType);\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                showDefaultRows: function () {\r\n                    this.setRowVisibility(this.isRequired, true);\r\n                    this.setRowVisibility(this.isUnique, true);\r\n                    this.setRowVisibility(this.frontendClass, true);\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @param {Boolean} isVisible\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                setRowVisibility: function (el, isVisible) {\r\n                    if (isVisible) {\r\n                        el.show();\r\n                        el.closest('.field').show();\r\n                    } else {\r\n                        el.hide();\r\n                        el.closest('.field').hide();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _disable: function (el) {\r\n                    el.attr('disabled', 'disabled');\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _enable: function (el) {\r\n                    if (!el.attr('readonly')) {\r\n                        el.removeAttr('disabled');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _showPanel: function (el) {\r\n                    el.closest('.fieldset').show();\r\n                    el.addClass(activePanelClass);\r\n                    this._render(el.attr('id'));\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _hidePanel: function (el) {\r\n                    el.closest('.fieldset').hide();\r\n                    el.removeClass(activePanelClass);\r\n                },\r\n\r\n                /**\r\n                 * @param {String} id\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _render: function (id) {\r\n                    rg.get(id, function () {\r\n                        $('#' + id).trigger('render');\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {String} promptMessage\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                saveAttributeInNewSet: function (promptMessage) {\r\n\r\n                    prompt({\r\n                        content: promptMessage,\r\n                        actions: {\r\n\r\n                            /**\r\n                             * @param {String} val\r\n                             * @this {actions}\r\n                             */\r\n                            confirm: function (val) {\r\n                                var rules = ['required-entry', 'validate-no-html-tags'],\r\n                                    newAttributeSetNameInputId = $('#new_attribute_set_name'),\r\n                                    editForm = $('#edit_form'),\r\n                                    newAttributeSetName = val,\r\n                                    i;\r\n\r\n                                if (!newAttributeSetName) {\r\n                                    return;\r\n                                }\r\n\r\n                                for (i = 0; i < rules.length; i++) {\r\n                                    if (!$.validator.methods[rules[i]](newAttributeSetName)) {\r\n                                        alert({\r\n                                            content: $.validator.messages[rules[i]]\r\n                                        });\r\n\r\n                                        return;\r\n                                    }\r\n                                }\r\n\r\n                                if (newAttributeSetNameInputId.length) {\r\n                                    newAttributeSetNameInputId.val(newAttributeSetName);\r\n                                } else {\r\n                                    editForm.append(new Element('input', {\r\n                                            type: 'hidden',\r\n                                            id: newAttributeSetNameInputId,\r\n                                            name: 'new_attribute_set_name',\r\n                                            value: newAttributeSetName\r\n                                        })\r\n                                    );\r\n                                }\r\n                                // Temporary solution will replaced after refactoring of attributes functionality\r\n                                editForm.triggerHandler('save');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n        $(function () {\r\n            var editForm = $('#edit_form'),\r\n                swatchVisualPanel = $('#swatch-visual-options-panel'),\r\n                swatchTextPanel = $('#swatch-text-options-panel'),\r\n                tableBody = $(),\r\n                activePanel = $();\r\n\r\n            $('#frontend_input').bind('change', function () {\r\n                swatchProductAttributes.bindAttributeInputType();\r\n            });\r\n            $('#is_filterable').bind('change', function () {\r\n                swatchProductAttributes.switchIsFilterable();\r\n            });\r\n\r\n            swatchProductAttributes.bindAttributeInputType();\r\n\r\n            // @todo: refactor collapsible component\r\n            $('.attribute-popup .collapse, [data-role=\"advanced_fieldset-content\"]')\r\n                .collapsable()\r\n                .collapse('hide');\r\n\r\n            editForm.on('beforeSubmit', function () {\r\n                var optionContainer, optionsValues;\r\n\r\n                activePanel = swatchTextPanel.hasClass(activePanelClass) ? swatchTextPanel : swatchVisualPanel;\r\n                optionContainer = activePanel.find('table tbody');\r\n\r\n                if (activePanel.hasClass(activePanelClass)) {\r\n                    optionsValues = $.map(\r\n                        optionContainer.find('tr'),\r\n                        function (row) {\r\n                            return $(row).find('input, select, textarea').serialize();\r\n                        }\r\n                    );\r\n                    $('<input>')\r\n                        .attr({\r\n                            type: 'hidden',\r\n                            name: 'serialized_options'\r\n                        })\r\n                        .val(JSON.stringify(optionsValues))\r\n                        .prependTo(editForm);\r\n                }\r\n\r\n                tableBody = optionContainer.detach();\r\n            });\r\n\r\n            editForm.on('afterValidate.error highlight.validate', function () {\r\n                if (activePanel.hasClass(activePanelClass)) {\r\n                    activePanel.find('table').append(tableBody);\r\n                    $('input[name=\"serialized_options\"]').remove();\r\n                }\r\n            });\r\n        });\r\n\r\n        window.saveAttributeInNewSet = swatchProductAttributes.saveAttributeInNewSet;\r\n        window.toggleApplyVisibility = swatchProductAttributes.toggleApplyVisibility;\r\n    };\r\n});\r\n","Magento_Swatches/js/swatch-renderer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'mage/smart-keyboard-handler',\r\n    'mage/translate',\r\n    'priceUtils',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/jquery.parsequery',\r\n    'mage/validation/validation'\r\n], function ($, _, mageTemplate, keyboardHandler, $t, priceUtils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Extend form validation to support swatch accessibility\r\n     */\r\n    $.widget('mage.validation', $.mage.validation, {\r\n        /**\r\n         * Handle form with swatches validation. Focus on first invalid swatch block.\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} validation\r\n         */\r\n        listenFormValidateHandler: function (event, validation) {\r\n            var swatchWrapper, firstActive, swatches, swatch, successList, errorList, firstSwatch;\r\n\r\n            this._superApply(arguments);\r\n\r\n            swatchWrapper = '.swatch-attribute-options';\r\n            swatches = $(event.target).find(swatchWrapper);\r\n\r\n            if (!swatches.length) {\r\n                return;\r\n            }\r\n\r\n            swatch = '.swatch-attribute';\r\n            firstActive = $(validation.errorList[0].element || []);\r\n            successList = validation.successList;\r\n            errorList = validation.errorList;\r\n            firstSwatch = $(firstActive).parent(swatch).find(swatchWrapper);\r\n\r\n            keyboardHandler.focus(swatches);\r\n\r\n            $.each(successList, function (index, item) {\r\n                $(item).parent(swatch).find(swatchWrapper).attr('aria-invalid', false);\r\n            });\r\n\r\n            $.each(errorList, function (index, item) {\r\n                $(item.element).parent(swatch).find(swatchWrapper).attr('aria-invalid', true);\r\n            });\r\n\r\n            if (firstSwatch.length) {\r\n                $(firstSwatch).focus();\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Render tooltips by attributes (only to up).\r\n     * Required element attributes:\r\n     *  - data-option-type (integer, 0-3)\r\n     *  - data-option-label (string)\r\n     *  - data-option-tooltip-thumb\r\n     *  - data-option-tooltip-value\r\n     *  - data-thumb-width\r\n     *  - data-thumb-height\r\n     */\r\n    $.widget('mage.SwatchRendererTooltip', {\r\n        options: {\r\n            delay: 200,                             //how much ms before tooltip to show\r\n            tooltipClass: 'swatch-option-tooltip'  //configurable, but remember about css\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            var $widget = this,\r\n                $this = this.element,\r\n                $element = $('.' + $widget.options.tooltipClass),\r\n                timer,\r\n                type = parseInt($this.data('option-type'), 10),\r\n                label = $this.data('option-label'),\r\n                thumb = $this.data('option-tooltip-thumb'),\r\n                value = $this.data('option-tooltip-value'),\r\n                width = $this.data('thumb-width'),\r\n                height = $this.data('thumb-height'),\r\n                $image,\r\n                $title,\r\n                $corner;\r\n\r\n            if (!$element.length) {\r\n                $element = $('<div class=\"' +\r\n                    $widget.options.tooltipClass +\r\n                    '\"><div class=\"image\"></div><div class=\"title\"></div><div class=\"corner\"></div></div>'\r\n                );\r\n                $('body').append($element);\r\n            }\r\n\r\n            $image = $element.find('.image');\r\n            $title = $element.find('.title');\r\n            $corner = $element.find('.corner');\r\n\r\n            $this.hover(function () {\r\n                if (!$this.hasClass('disabled')) {\r\n                    timer = setTimeout(\r\n                        function () {\r\n                            var leftOpt = null,\r\n                                leftCorner = 0,\r\n                                left,\r\n                                $window;\r\n\r\n                            if (type === 2) {\r\n                                // Image\r\n                                $image.css({\r\n                                    'background': 'url(\"' + thumb + '\") no-repeat center', //Background case\r\n                                    'background-size': 'initial',\r\n                                    'width': width + 'px',\r\n                                    'height': height + 'px'\r\n                                });\r\n                                $image.show();\r\n                            } else if (type === 1) {\r\n                                // Color\r\n                                $image.css({\r\n                                    background: value\r\n                                });\r\n                                $image.show();\r\n                            } else if (type === 0 || type === 3) {\r\n                                // Default\r\n                                $image.hide();\r\n                            }\r\n\r\n                            $title.text(label);\r\n\r\n                            leftOpt = $this.offset().left;\r\n                            left = leftOpt + $this.width() / 2 - $element.width() / 2;\r\n                            $window = $(window);\r\n\r\n                            // the numbers (5 and 5) is magick constants for offset from left or right page\r\n                            if (left < 0) {\r\n                                left = 5;\r\n                            } else if (left + $element.width() > $window.width()) {\r\n                                left = $window.width() - $element.width() - 5;\r\n                            }\r\n\r\n                            // the numbers (6,  3 and 18) is magick constants for offset tooltip\r\n                            leftCorner = 0;\r\n\r\n                            if ($element.width() < $this.width()) {\r\n                                leftCorner = $element.width() / 2 - 3;\r\n                            } else {\r\n                                leftCorner = (leftOpt > left ? leftOpt - left : left - leftOpt) + $this.width() / 2 - 6;\r\n                            }\r\n\r\n                            $corner.css({\r\n                                left: leftCorner\r\n                            });\r\n                            $element.css({\r\n                                left: left,\r\n                                top: $this.offset().top - $element.height() - $corner.height() - 18\r\n                            }).show();\r\n                        },\r\n                        $widget.options.delay\r\n                    );\r\n                }\r\n            }, function () {\r\n                $element.hide();\r\n                clearTimeout(timer);\r\n            });\r\n\r\n            $(document).on('tap', function () {\r\n                $element.hide();\r\n                clearTimeout(timer);\r\n            });\r\n\r\n            $this.on('tap', function (event) {\r\n                event.stopPropagation();\r\n            });\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Render swatch controls with options and use tooltips.\r\n     * Required two json:\r\n     *  - jsonConfig (magento's option config)\r\n     *  - jsonSwatchConfig (swatch's option config)\r\n     *\r\n     *  Tuning:\r\n     *  - numberToShow (show \"more\" button if options are more)\r\n     *  - onlySwatches (hide selectboxes)\r\n     *  - moreButtonText (text for \"more\" button)\r\n     *  - selectorProduct (selector for product container)\r\n     *  - selectorProductPrice (selector for change price)\r\n     */\r\n    $.widget('mage.SwatchRenderer', {\r\n        options: {\r\n            classes: {\r\n                attributeClass: 'swatch-attribute',\r\n                attributeLabelClass: 'swatch-attribute-label',\r\n                attributeSelectedOptionLabelClass: 'swatch-attribute-selected-option',\r\n                attributeOptionsWrapper: 'swatch-attribute-options',\r\n                attributeInput: 'swatch-input',\r\n                optionClass: 'swatch-option',\r\n                selectClass: 'swatch-select',\r\n                moreButton: 'swatch-more',\r\n                loader: 'swatch-option-loading'\r\n            },\r\n            // option's json config\r\n            jsonConfig: {},\r\n\r\n            // swatch's json config\r\n            jsonSwatchConfig: {},\r\n\r\n            // selector of parental block of prices and swatches (need to know where to seek for price block)\r\n            selectorProduct: '.product-info-main',\r\n\r\n            // selector of price wrapper (need to know where set price)\r\n            selectorProductPrice: '[data-role=priceBox]',\r\n\r\n            //selector of product images gallery wrapper\r\n            mediaGallerySelector: '[data-gallery-role=gallery-placeholder]',\r\n\r\n            // selector of category product tile wrapper\r\n            selectorProductTile: '.product-item',\r\n\r\n            // number of controls to show (false or zero = show all)\r\n            numberToShow: false,\r\n\r\n            // show only swatch controls\r\n            onlySwatches: false,\r\n\r\n            // enable label for control\r\n            enableControlLabel: true,\r\n\r\n            // control label id\r\n            controlLabelId: '',\r\n\r\n            // text for more button\r\n            moreButtonText: $t('More'),\r\n\r\n            // Callback url for media\r\n            mediaCallback: '',\r\n\r\n            // Local media cache\r\n            mediaCache: {},\r\n\r\n            // Cache for BaseProduct images. Needed when option unset\r\n            mediaGalleryInitial: [{}],\r\n\r\n            // Use ajax to get image data\r\n            useAjax: false,\r\n\r\n            /**\r\n             * Defines the mechanism of how images of a gallery should be\r\n             * updated when user switches between configurations of a product.\r\n             *\r\n             * As for now value of this option can be either 'replace' or 'prepend'.\r\n             *\r\n             * @type {String}\r\n             */\r\n            gallerySwitchStrategy: 'replace',\r\n\r\n            // whether swatches are rendered in product list or on product page\r\n            inProductList: false,\r\n\r\n            // sly-old-price block selector\r\n            slyOldPriceSelector: '.sly-old-price',\r\n\r\n            // tier prise selectors start\r\n            tierPriceTemplateSelector: '#tier-prices-template',\r\n            tierPriceBlockSelector: '[data-role=\"tier-price-block\"]',\r\n            tierPriceTemplate: '',\r\n            // tier prise selectors end\r\n\r\n            // A price label selector\r\n            normalPriceLabelSelector: '.product-info-main .normal-price .price-label'\r\n        },\r\n\r\n        /**\r\n         * Get chosen product\r\n         *\r\n         * @returns int|null\r\n         */\r\n        getProduct: function () {\r\n            var products = this._CalcProducts();\r\n\r\n            return _.isArray(products) ? products[0] : null;\r\n        },\r\n\r\n        /**\r\n         * Get chosen product id\r\n         *\r\n         * @returns int|null\r\n         */\r\n        getProductId: function () {\r\n            var products = this._CalcProducts();\r\n\r\n            return _.isArray(products) && products.length === 1 ? products[0] : null;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            // Don't render the same set of swatches twice\r\n            if ($(this.element).attr('data-rendered')) {\r\n                return;\r\n            }\r\n\r\n            $(this.element).attr('data-rendered', true);\r\n\r\n            if (_.isEmpty(this.options.jsonConfig.images)) {\r\n                this.options.useAjax = true;\r\n                // creates debounced variant of _LoadProductMedia()\r\n                // to use it in events handlers instead of _LoadProductMedia()\r\n                this._debouncedLoadProductMedia = _.debounce(this._LoadProductMedia.bind(this), 500);\r\n            }\r\n\r\n            this.options.tierPriceTemplate = $(this.options.tierPriceTemplateSelector).html();\r\n\r\n            if (this.options.jsonConfig !== '' && this.options.jsonSwatchConfig !== '') {\r\n                // store unsorted attributes\r\n                this.options.jsonConfig.mappedAttributes = _.clone(this.options.jsonConfig.attributes);\r\n                this._sortAttributes();\r\n                this._RenderControls();\r\n                this._setPreSelectedGallery();\r\n                $(this.element).trigger('swatch.initialized');\r\n            } else {\r\n                console.log('SwatchRenderer: No input data received');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _sortAttributes: function () {\r\n            this.options.jsonConfig.attributes = _.sortBy(this.options.jsonConfig.attributes, function (attribute) {\r\n                return parseInt(attribute.position, 10);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var options = this.options,\r\n                gallery = $('[data-gallery-role=gallery-placeholder]', '.column.main'),\r\n                productData = this._determineProductData(),\r\n                $main = productData.isInProductView ?\r\n                    this.element.parents('.column.main') :\r\n                    this.element.parents('.product-item-info');\r\n\r\n            if (productData.isInProductView) {\r\n                gallery.data('gallery') ?\r\n                    this._onGalleryLoaded(gallery) :\r\n                    gallery.on('gallery:loaded', this._onGalleryLoaded.bind(this, gallery));\r\n            } else {\r\n                options.mediaGalleryInitial = [{\r\n                    'img': $main.find('.product-image-photo').attr('src')\r\n                }];\r\n            }\r\n\r\n            this.productForm = this.element.parents(this.options.selectorProductTile).find('form:first');\r\n            this.inProductList = this.productForm.length > 0;\r\n        },\r\n\r\n        /**\r\n         * Determine product id and related data\r\n         *\r\n         * @returns {{productId: *, isInProductView: bool}}\r\n         * @private\r\n         */\r\n        _determineProductData: function () {\r\n            // Check if product is in a list of products.\r\n            var productId,\r\n                isInProductView = false;\r\n\r\n            productId = this.element.parents('.product-item-details')\r\n                    .find('.price-box.price-final_price').attr('data-product-id');\r\n\r\n            if (!productId) {\r\n                // Check individual product.\r\n                productId = $('[name=product]').val();\r\n                isInProductView = productId > 0;\r\n            }\r\n\r\n            return {\r\n                productId: productId,\r\n                isInProductView: isInProductView\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Render controls\r\n         *\r\n         * @private\r\n         */\r\n        _RenderControls: function () {\r\n            var $widget = this,\r\n                container = this.element,\r\n                classes = this.options.classes,\r\n                chooseText = this.options.jsonConfig.chooseText,\r\n                showTooltip = this.options.showTooltip;\r\n\r\n            $widget.optionsMap = {};\r\n\r\n            $.each(this.options.jsonConfig.attributes, function () {\r\n                var item = this,\r\n                    controlLabelId = 'option-label-' + item.code + '-' + item.id,\r\n                    options = $widget._RenderSwatchOptions(item, controlLabelId),\r\n                    select = $widget._RenderSwatchSelect(item, chooseText),\r\n                    input = $widget._RenderFormInput(item),\r\n                    listLabel = '',\r\n                    label = '';\r\n\r\n                // Show only swatch controls\r\n                if ($widget.options.onlySwatches && !$widget.options.jsonSwatchConfig.hasOwnProperty(item.id)) {\r\n                    return;\r\n                }\r\n\r\n                if ($widget.options.enableControlLabel) {\r\n                    label +=\r\n                        '<span id=\"' + controlLabelId + '\" class=\"' + classes.attributeLabelClass + '\">' +\r\n                        $('<i></i>').text(item.label).html() +\r\n                        '</span>' +\r\n                        '<span class=\"' + classes.attributeSelectedOptionLabelClass + '\"></span>';\r\n                }\r\n\r\n                if ($widget.inProductList) {\r\n                    $widget.productForm.append(input);\r\n                    input = '';\r\n                    listLabel = 'aria-label=\"' + $('<i></i>').text(item.label).html() + '\"';\r\n                } else {\r\n                    listLabel = 'aria-labelledby=\"' + controlLabelId + '\"';\r\n                }\r\n\r\n                // Create new control\r\n                container.append(\r\n                    '<div class=\"' + classes.attributeClass + ' ' + item.code + '\" ' +\r\n                         'data-attribute-code=\"' + item.code + '\" ' +\r\n                         'data-attribute-id=\"' + item.id + '\">' +\r\n                        label +\r\n                        '<div aria-activedescendant=\"\" ' +\r\n                             'tabindex=\"0\" ' +\r\n                             'aria-invalid=\"false\" ' +\r\n                             'aria-required=\"true\" ' +\r\n                             'role=\"listbox\" ' + listLabel +\r\n                             'class=\"' + classes.attributeOptionsWrapper + ' clearfix\">' +\r\n                            options + select +\r\n                        '</div>' + input +\r\n                    '</div>'\r\n                );\r\n\r\n                $widget.optionsMap[item.id] = {};\r\n\r\n                // Aggregate options array to hash (key => value)\r\n                $.each(item.options, function () {\r\n                    if (this.products.length > 0) {\r\n                        $widget.optionsMap[item.id][this.id] = {\r\n                            price: parseInt(\r\n                                $widget.options.jsonConfig.optionPrices[this.products[0]].finalPrice.amount,\r\n                                10\r\n                            ),\r\n                            products: this.products\r\n                        };\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (showTooltip === 1) {\r\n                // Connect Tooltip\r\n                container\r\n                    .find('[data-option-type=\"1\"], [data-option-type=\"2\"],' +\r\n                        ' [data-option-type=\"0\"], [data-option-type=\"3\"]')\r\n                    .SwatchRendererTooltip();\r\n            }\r\n\r\n            // Hide all elements below more button\r\n            $('.' + classes.moreButton).nextAll().hide();\r\n\r\n            // Handle events like click or change\r\n            $widget._EventListener();\r\n\r\n            // Rewind options\r\n            $widget._Rewind(container);\r\n\r\n            //Emulate click on all swatches from Request\r\n            $widget._EmulateSelected($.parseQuery());\r\n            $widget._EmulateSelected($widget._getSelectedAttributes());\r\n        },\r\n\r\n        /**\r\n         * Render swatch options by part of config\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} controlId\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _RenderSwatchOptions: function (config, controlId) {\r\n            var optionConfig = this.options.jsonSwatchConfig[config.id],\r\n                optionClass = this.options.classes.optionClass,\r\n                sizeConfig = this.options.jsonSwatchImageSizeConfig,\r\n                moreLimit = parseInt(this.options.numberToShow, 10),\r\n                moreClass = this.options.classes.moreButton,\r\n                moreText = this.options.moreButtonText,\r\n                countAttributes = 0,\r\n                html = '';\r\n\r\n            if (!this.options.jsonSwatchConfig.hasOwnProperty(config.id)) {\r\n                return '';\r\n            }\r\n\r\n            $.each(config.options, function (index) {\r\n                var id,\r\n                    type,\r\n                    value,\r\n                    thumb,\r\n                    label,\r\n                    width,\r\n                    height,\r\n                    attr,\r\n                    swatchImageWidth,\r\n                    swatchImageHeight;\r\n\r\n                if (!optionConfig.hasOwnProperty(this.id)) {\r\n                    return '';\r\n                }\r\n\r\n                // Add more button\r\n                if (moreLimit === countAttributes++) {\r\n                    html += '<a href=\"#\" class=\"' + moreClass + '\"><span>' + moreText + '</span></a>';\r\n                }\r\n\r\n                id = this.id;\r\n                type = parseInt(optionConfig[id].type, 10);\r\n                value = optionConfig[id].hasOwnProperty('value') ?\r\n                    $('<i></i>').text(optionConfig[id].value).html() : '';\r\n                thumb = optionConfig[id].hasOwnProperty('thumb') ? optionConfig[id].thumb : '';\r\n                width = _.has(sizeConfig, 'swatchThumb') ? sizeConfig.swatchThumb.width : 110;\r\n                height = _.has(sizeConfig, 'swatchThumb') ? sizeConfig.swatchThumb.height : 90;\r\n                label = this.label ? $('<i></i>').text(this.label).html() : '';\r\n                attr =\r\n                    ' id=\"' + controlId + '-item-' + id + '\"' +\r\n                    ' index=\"' + index + '\"' +\r\n                    ' aria-checked=\"false\"' +\r\n                    ' aria-describedby=\"' + controlId + '\"' +\r\n                    ' tabindex=\"0\"' +\r\n                    ' data-option-type=\"' + type + '\"' +\r\n                    ' data-option-id=\"' + id + '\"' +\r\n                    ' data-option-label=\"' + label + '\"' +\r\n                    ' aria-label=\"' + label + '\"' +\r\n                    ' role=\"option\"' +\r\n                    ' data-thumb-width=\"' + width + '\"' +\r\n                    ' data-thumb-height=\"' + height + '\"';\r\n\r\n                attr += thumb !== '' ? ' data-option-tooltip-thumb=\"' + thumb + '\"' : '';\r\n                attr += value !== '' ? ' data-option-tooltip-value=\"' + value + '\"' : '';\r\n\r\n                swatchImageWidth = _.has(sizeConfig, 'swatchImage') ? sizeConfig.swatchImage.width : 30;\r\n                swatchImageHeight = _.has(sizeConfig, 'swatchImage') ? sizeConfig.swatchImage.height : 20;\r\n\r\n                if (!this.hasOwnProperty('products') || this.products.length <= 0) {\r\n                    attr += ' data-option-empty=\"true\"';\r\n                }\r\n\r\n                if (type === 0) {\r\n                    // Text\r\n                    html += '<div class=\"' + optionClass + ' text\" ' + attr + '>' + (value ? value : label) +\r\n                        '</div>';\r\n                } else if (type === 1) {\r\n                    // Color\r\n                    html += '<div class=\"' + optionClass + ' color\" ' + attr +\r\n                        ' style=\"background: ' + value +\r\n                        ' no-repeat center; background-size: initial;\">' + '' +\r\n                        '</div>';\r\n                } else if (type === 2) {\r\n                    // Image\r\n                    html += '<div class=\"' + optionClass + ' image\" ' + attr +\r\n                        ' style=\"background: url(' + value + ') no-repeat center; background-size: initial;width:' +\r\n                        swatchImageWidth + 'px; height:' + swatchImageHeight + 'px\">' + '' +\r\n                        '</div>';\r\n                } else if (type === 3) {\r\n                    // Clear\r\n                    html += '<div class=\"' + optionClass + '\" ' + attr + '></div>';\r\n                } else {\r\n                    // Default\r\n                    html += '<div class=\"' + optionClass + '\" ' + attr + '>' + label + '</div>';\r\n                }\r\n            });\r\n\r\n            return html;\r\n        },\r\n\r\n        /**\r\n         * Render select by part of config\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} chooseText\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _RenderSwatchSelect: function (config, chooseText) {\r\n            var html;\r\n\r\n            if (this.options.jsonSwatchConfig.hasOwnProperty(config.id)) {\r\n                return '';\r\n            }\r\n\r\n            html =\r\n                '<select class=\"' + this.options.classes.selectClass + ' ' + config.code + '\">' +\r\n                '<option value=\"0\" data-option-id=\"0\">' + chooseText + '</option>';\r\n\r\n            $.each(config.options, function () {\r\n                var label = this.label,\r\n                    attr = ' value=\"' + this.id + '\" data-option-id=\"' + this.id + '\"';\r\n\r\n                if (!this.hasOwnProperty('products') || this.products.length <= 0) {\r\n                    attr += ' data-option-empty=\"true\"';\r\n                }\r\n\r\n                html += '<option ' + attr + '>' + label + '</option>';\r\n            });\r\n\r\n            html += '</select>';\r\n\r\n            return html;\r\n        },\r\n\r\n        /**\r\n         * Input for submit form.\r\n         * This control shouldn't have \"type=hidden\", \"display: none\" for validation work :(\r\n         *\r\n         * @param {Object} config\r\n         * @private\r\n         */\r\n        _RenderFormInput: function (config) {\r\n            return '<input class=\"' + this.options.classes.attributeInput + ' super-attribute-select\" ' +\r\n                'name=\"super_attribute[' + config.id + ']\" ' +\r\n                'type=\"text\" ' +\r\n                'value=\"\" ' +\r\n                'data-selector=\"super_attribute[' + config.id + ']\" ' +\r\n                'data-validate=\"{required: true}\" ' +\r\n                'aria-required=\"true\" ' +\r\n                'aria-invalid=\"false\">';\r\n        },\r\n\r\n        /**\r\n         * Event listener\r\n         *\r\n         * @private\r\n         */\r\n        _EventListener: function () {\r\n            var $widget = this,\r\n                options = this.options.classes,\r\n                target;\r\n\r\n            $widget.element.on('click', '.' + options.optionClass, function () {\r\n                return $widget._OnClick($(this), $widget);\r\n            });\r\n\r\n            $widget.element.on('change', '.' + options.selectClass, function () {\r\n                return $widget._OnChange($(this), $widget);\r\n            });\r\n\r\n            $widget.element.on('click', '.' + options.moreButton, function (e) {\r\n                e.preventDefault();\r\n\r\n                return $widget._OnMoreClick($(this));\r\n            });\r\n\r\n            $widget.element.on('keydown', function (e) {\r\n                if (e.which === 13) {\r\n                    target = $(e.target);\r\n\r\n                    if (target.is('.' + options.optionClass)) {\r\n                        return $widget._OnClick(target, $widget);\r\n                    } else if (target.is('.' + options.selectClass)) {\r\n                        return $widget._OnChange(target, $widget);\r\n                    } else if (target.is('.' + options.moreButton)) {\r\n                        e.preventDefault();\r\n\r\n                        return $widget._OnMoreClick(target);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Load media gallery using ajax or json config.\r\n         *\r\n         * @private\r\n         */\r\n        _loadMedia: function () {\r\n            var $main = this.inProductList ?\r\n                    this.element.parents('.product-item-info') :\r\n                    this.element.parents('.column.main'),\r\n                images;\r\n\r\n            if (this.options.useAjax) {\r\n                this._debouncedLoadProductMedia();\r\n            }  else {\r\n                images = this.options.jsonConfig.images[this.getProduct()];\r\n\r\n                if (!images) {\r\n                    images = this.options.mediaGalleryInitial;\r\n                }\r\n                this.updateBaseImage(this._sortImages(images), $main, !this.inProductList);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sorting images array\r\n         *\r\n         * @private\r\n         */\r\n        _sortImages: function (images) {\r\n            return _.sortBy(images, function (image) {\r\n                return parseInt(image.position, 10);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Event for swatch options\r\n         *\r\n         * @param {Object} $this\r\n         * @param {Object} $widget\r\n         * @private\r\n         */\r\n        _OnClick: function ($this, $widget) {\r\n            var $parent = $this.parents('.' + $widget.options.classes.attributeClass),\r\n                $wrapper = $this.parents('.' + $widget.options.classes.attributeOptionsWrapper),\r\n                $label = $parent.find('.' + $widget.options.classes.attributeSelectedOptionLabelClass),\r\n                attributeId = $parent.data('attribute-id'),\r\n                $input = $parent.find('.' + $widget.options.classes.attributeInput),\r\n                checkAdditionalData = JSON.parse(this.options.jsonSwatchConfig[attributeId]['additional_data']),\r\n                $priceBox = $widget.element.parents($widget.options.selectorProduct)\r\n                    .find(this.options.selectorProductPrice);\r\n\r\n            if ($widget.inProductList) {\r\n                $input = $widget.productForm.find(\r\n                    '.' + $widget.options.classes.attributeInput + '[name=\"super_attribute[' + attributeId + ']\"]'\r\n                );\r\n            }\r\n\r\n            if ($this.hasClass('disabled')) {\r\n                return;\r\n            }\r\n\r\n            if ($this.hasClass('selected')) {\r\n                $parent.removeAttr('data-option-selected').find('.selected').removeClass('selected');\r\n                $input.val('');\r\n                $label.text('');\r\n                $this.attr('aria-checked', false);\r\n            } else {\r\n                $parent.attr('data-option-selected', $this.data('option-id')).find('.selected').removeClass('selected');\r\n                $label.text($this.data('option-label'));\r\n                $input.val($this.data('option-id'));\r\n                $input.attr('data-attr-name', this._getAttributeCodeById(attributeId));\r\n                $this.addClass('selected');\r\n                $widget._toggleCheckedAttributes($this, $wrapper);\r\n            }\r\n\r\n            $widget._Rebuild();\r\n\r\n            if ($priceBox.is(':data(mage-priceBox)')) {\r\n                $widget._UpdatePrice();\r\n            }\r\n\r\n            $(document).trigger('updateMsrpPriceBlock',\r\n                [\r\n                    this._getSelectedOptionPriceIndex(),\r\n                    $widget.options.jsonConfig.optionPrices,\r\n                    $priceBox\r\n                ]);\r\n\r\n            if (parseInt(checkAdditionalData['update_product_preview_image'], 10) === 1) {\r\n                $widget._loadMedia();\r\n            }\r\n\r\n            $input.trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Get selected option price index\r\n         *\r\n         * @return {String|undefined}\r\n         * @private\r\n         */\r\n        _getSelectedOptionPriceIndex: function () {\r\n            var allowedProduct = this._getAllowedProductWithMinPrice(this._CalcProducts());\r\n\r\n            if (_.isEmpty(allowedProduct)) {\r\n                return undefined;\r\n            }\r\n\r\n            return allowedProduct;\r\n        },\r\n\r\n        /**\r\n         * Get human readable attribute code (eg. size, color) by it ID from configuration\r\n         *\r\n         * @param {Number} attributeId\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getAttributeCodeById: function (attributeId) {\r\n            var attribute = this.options.jsonConfig.mappedAttributes[attributeId];\r\n\r\n            return attribute ? attribute.code : attributeId;\r\n        },\r\n\r\n        /**\r\n         * Toggle accessibility attributes\r\n         *\r\n         * @param {Object} $this\r\n         * @param {Object} $wrapper\r\n         * @private\r\n         */\r\n        _toggleCheckedAttributes: function ($this, $wrapper) {\r\n            $wrapper.attr('aria-activedescendant', $this.attr('id'))\r\n                    .find('.' + this.options.classes.optionClass).attr('aria-checked', false);\r\n            $this.attr('aria-checked', true);\r\n        },\r\n\r\n        /**\r\n         * Event for select\r\n         *\r\n         * @param {Object} $this\r\n         * @param {Object} $widget\r\n         * @private\r\n         */\r\n        _OnChange: function ($this, $widget) {\r\n            var $parent = $this.parents('.' + $widget.options.classes.attributeClass),\r\n                attributeId = $parent.data('attribute-id'),\r\n                $input = $parent.find('.' + $widget.options.classes.attributeInput);\r\n\r\n            if ($widget.productForm.length > 0) {\r\n                $input = $widget.productForm.find(\r\n                    '.' + $widget.options.classes.attributeInput + '[name=\"super_attribute[' + attributeId + ']\"]'\r\n                );\r\n            }\r\n\r\n            if ($this.val() > 0) {\r\n                $parent.attr('data-option-selected', $this.val());\r\n                $input.val($this.val());\r\n            } else {\r\n                $parent.removeAttr('data-option-selected');\r\n                $input.val('');\r\n            }\r\n\r\n            $widget._Rebuild();\r\n            $widget._UpdatePrice();\r\n            $widget._loadMedia();\r\n            $input.trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Event for more switcher\r\n         *\r\n         * @param {Object} $this\r\n         * @private\r\n         */\r\n        _OnMoreClick: function ($this) {\r\n            $this.nextAll().show();\r\n            $this.blur().remove();\r\n        },\r\n\r\n        /**\r\n         * Rewind options for controls\r\n         *\r\n         * @private\r\n         */\r\n        _Rewind: function (controls) {\r\n            controls.find('div[data-option-id], option[data-option-id]').removeClass('disabled').removeAttr('disabled');\r\n            controls.find('div[data-option-empty], option[data-option-empty]')\r\n                .attr('disabled', true)\r\n                .addClass('disabled')\r\n                .attr('tabindex', '-1');\r\n        },\r\n\r\n        /**\r\n         * Rebuild container\r\n         *\r\n         * @private\r\n         */\r\n        _Rebuild: function () {\r\n            var $widget = this,\r\n                controls = $widget.element.find('.' + $widget.options.classes.attributeClass + '[data-attribute-id]'),\r\n                selected = controls.filter('[data-option-selected]');\r\n\r\n            // Enable all options\r\n            $widget._Rewind(controls);\r\n\r\n            // done if nothing selected\r\n            if (selected.length <= 0) {\r\n                return;\r\n            }\r\n\r\n            // Disable not available options\r\n            controls.each(function () {\r\n                var $this = $(this),\r\n                    id = $this.data('attribute-id'),\r\n                    products = $widget._CalcProducts(id);\r\n\r\n                if (selected.length === 1 && selected.first().data('attribute-id') === id) {\r\n                    return;\r\n                }\r\n\r\n                $this.find('[data-option-id]').each(function () {\r\n                    var $element = $(this),\r\n                        option = $element.data('option-id');\r\n\r\n                    if (!$widget.optionsMap.hasOwnProperty(id) || !$widget.optionsMap[id].hasOwnProperty(option) ||\r\n                        $element.hasClass('selected') ||\r\n                        $element.is(':selected')) {\r\n                        return;\r\n                    }\r\n\r\n                    if (_.intersection(products, $widget.optionsMap[id][option].products).length <= 0) {\r\n                        $element.attr('disabled', true).addClass('disabled');\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get selected product list\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _CalcProducts: function ($skipAttributeId) {\r\n            var $widget = this,\r\n                selectedOptions = '.' + $widget.options.classes.attributeClass + '[data-option-selected]',\r\n                products = [];\r\n\r\n            // Generate intersection of products\r\n            $widget.element.find(selectedOptions).each(function () {\r\n                var id = $(this).data('attribute-id'),\r\n                    option = $(this).attr('data-option-selected');\r\n\r\n                if ($skipAttributeId !== undefined && $skipAttributeId === id) {\r\n                    return;\r\n                }\r\n\r\n                if (!$widget.optionsMap.hasOwnProperty(id) || !$widget.optionsMap[id].hasOwnProperty(option)) {\r\n                    return;\r\n                }\r\n\r\n                if (products.length === 0) {\r\n                    products = $widget.optionsMap[id][option].products;\r\n                } else {\r\n                    products = _.intersection(products, $widget.optionsMap[id][option].products);\r\n                }\r\n            });\r\n\r\n            return products;\r\n        },\r\n\r\n        /**\r\n         * Update total price\r\n         *\r\n         * @private\r\n         */\r\n        _UpdatePrice: function () {\r\n            var $widget = this,\r\n                $product = $widget.element.parents($widget.options.selectorProduct),\r\n                $productPrice = $product.find(this.options.selectorProductPrice),\r\n                result = $widget._getNewPrices(),\r\n                tierPriceHtml,\r\n                isShow;\r\n\r\n            $productPrice.trigger(\r\n                'updatePrice',\r\n                {\r\n                    'prices': $widget._getPrices(result, $productPrice.priceBox('option').prices)\r\n                }\r\n            );\r\n\r\n            isShow = typeof result != 'undefined' && result.oldPrice.amount !== result.finalPrice.amount;\r\n\r\n            $productPrice.find('span:first').toggleClass('special-price', isShow);\r\n\r\n            $product.find(this.options.slyOldPriceSelector)[isShow ? 'show' : 'hide']();\r\n\r\n            if (typeof result != 'undefined' && result.tierPrices && result.tierPrices.length) {\r\n                if (this.options.tierPriceTemplate) {\r\n                    tierPriceHtml = mageTemplate(\r\n                        this.options.tierPriceTemplate,\r\n                        {\r\n                            'tierPrices': result.tierPrices,\r\n                            '$t': $t,\r\n                            'currencyFormat': this.options.jsonConfig.currencyFormat,\r\n                            'priceUtils': priceUtils\r\n                        }\r\n                    );\r\n                    $(this.options.tierPriceBlockSelector).html(tierPriceHtml).show();\r\n                }\r\n            } else {\r\n                $(this.options.tierPriceBlockSelector).hide();\r\n            }\r\n\r\n            $(this.options.normalPriceLabelSelector).hide();\r\n\r\n            _.each($('.' + this.options.classes.attributeOptionsWrapper), function (attribute) {\r\n                if ($(attribute).find('.' + this.options.classes.optionClass + '.selected').length === 0) {\r\n                    if ($(attribute).find('.' + this.options.classes.selectClass).length > 0) {\r\n                        _.each($(attribute).find('.' + this.options.classes.selectClass), function (dropdown) {\r\n                            if ($(dropdown).val() === '0') {\r\n                                $(this.options.normalPriceLabelSelector).show();\r\n                            }\r\n                        }.bind(this));\r\n                    } else {\r\n                        $(this.options.normalPriceLabelSelector).show();\r\n                    }\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Get new prices for selected options\r\n         *\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getNewPrices: function () {\r\n            var $widget = this,\r\n                newPrices = $widget.options.jsonConfig.prices,\r\n                allowedProduct = this._getAllowedProductWithMinPrice(this._CalcProducts());\r\n\r\n            if (!_.isEmpty(allowedProduct)) {\r\n                newPrices = this.options.jsonConfig.optionPrices[allowedProduct];\r\n            }\r\n\r\n            return newPrices;\r\n        },\r\n\r\n        /**\r\n         * Get prices\r\n         *\r\n         * @param {Object} newPrices\r\n         * @param {Object} displayPrices\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getPrices: function (newPrices, displayPrices) {\r\n            var $widget = this;\r\n\r\n            if (_.isEmpty(newPrices)) {\r\n                newPrices = $widget._getNewPrices();\r\n            }\r\n            _.each(displayPrices, function (price, code) {\r\n\r\n                if (newPrices[code]) {\r\n                    displayPrices[code].amount = newPrices[code].amount - displayPrices[code].amount;\r\n                }\r\n            });\r\n\r\n            return displayPrices;\r\n        },\r\n\r\n        /**\r\n         * Get product with minimum price from selected options.\r\n         *\r\n         * @param {Array} allowedProducts\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _getAllowedProductWithMinPrice: function (allowedProducts) {\r\n            var optionPrices = this.options.jsonConfig.optionPrices,\r\n                product = {},\r\n                optionFinalPrice, optionMinPrice;\r\n\r\n            _.each(allowedProducts, function (allowedProduct) {\r\n                optionFinalPrice = parseFloat(optionPrices[allowedProduct].finalPrice.amount);\r\n\r\n                if (_.isEmpty(product) || optionFinalPrice < optionMinPrice) {\r\n                    optionMinPrice = optionFinalPrice;\r\n                    product = allowedProduct;\r\n                }\r\n            }, this);\r\n\r\n            return product;\r\n        },\r\n\r\n        /**\r\n         * Gets all product media and change current to the needed one\r\n         *\r\n         * @private\r\n         */\r\n        _LoadProductMedia: function () {\r\n            var $widget = this,\r\n                $this = $widget.element,\r\n                productData = this._determineProductData(),\r\n                mediaCallData,\r\n                mediaCacheKey,\r\n\r\n                /**\r\n                 * Processes product media data\r\n                 *\r\n                 * @param {Object} data\r\n                 * @returns void\r\n                 */\r\n                mediaSuccessCallback = function (data) {\r\n                    if (!(mediaCacheKey in $widget.options.mediaCache)) {\r\n                        $widget.options.mediaCache[mediaCacheKey] = data;\r\n                    }\r\n                    $widget._ProductMediaCallback($this, data, productData.isInProductView);\r\n                    setTimeout(function () {\r\n                        $widget._DisableProductMediaLoader($this);\r\n                    }, 300);\r\n                };\r\n\r\n            if (!$widget.options.mediaCallback) {\r\n                return;\r\n            }\r\n\r\n            mediaCallData = {\r\n                'product_id': this.getProduct()\r\n            };\r\n\r\n            mediaCacheKey = JSON.stringify(mediaCallData);\r\n\r\n            if (mediaCacheKey in $widget.options.mediaCache) {\r\n                $widget._XhrKiller();\r\n                $widget._EnableProductMediaLoader($this);\r\n                mediaSuccessCallback($widget.options.mediaCache[mediaCacheKey]);\r\n            } else {\r\n                mediaCallData.isAjax = true;\r\n                $widget._XhrKiller();\r\n                $widget._EnableProductMediaLoader($this);\r\n                $widget.xhr = $.ajax({\r\n                    url: $widget.options.mediaCallback,\r\n                    cache: true,\r\n                    type: 'GET',\r\n                    dataType: 'json',\r\n                    data: mediaCallData,\r\n                    success: mediaSuccessCallback\r\n                }).done(function () {\r\n                    $widget._XhrKiller();\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Enable loader\r\n         *\r\n         * @param {Object} $this\r\n         * @private\r\n         */\r\n        _EnableProductMediaLoader: function ($this) {\r\n            var $widget = this;\r\n\r\n            if ($('body.catalog-product-view').length > 0) {\r\n                $this.parents('.column.main').find('.photo.image')\r\n                    .addClass($widget.options.classes.loader);\r\n            } else {\r\n                //Category View\r\n                $this.parents('.product-item-info').find('.product-image-photo')\r\n                    .addClass($widget.options.classes.loader);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable loader\r\n         *\r\n         * @param {Object} $this\r\n         * @private\r\n         */\r\n        _DisableProductMediaLoader: function ($this) {\r\n            var $widget = this;\r\n\r\n            if ($('body.catalog-product-view').length > 0) {\r\n                $this.parents('.column.main').find('.photo.image')\r\n                    .removeClass($widget.options.classes.loader);\r\n            } else {\r\n                //Category View\r\n                $this.parents('.product-item-info').find('.product-image-photo')\r\n                    .removeClass($widget.options.classes.loader);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Callback for product media\r\n         *\r\n         * @param {Object} $this\r\n         * @param {String} response\r\n         * @param {Boolean} isInProductView\r\n         * @private\r\n         */\r\n        _ProductMediaCallback: function ($this, response, isInProductView) {\r\n            var $main = isInProductView ? $this.parents('.column.main') : $this.parents('.product-item-info'),\r\n                $widget = this,\r\n                images = [],\r\n\r\n                /**\r\n                 * Check whether object supported or not\r\n                 *\r\n                 * @param {Object} e\r\n                 * @returns {*|Boolean}\r\n                 */\r\n                support = function (e) {\r\n                    return e.hasOwnProperty('large') && e.hasOwnProperty('medium') && e.hasOwnProperty('small');\r\n                };\r\n\r\n            if (_.size($widget) < 1 || !support(response)) {\r\n                this.updateBaseImage(this.options.mediaGalleryInitial, $main, isInProductView);\r\n\r\n                return;\r\n            }\r\n\r\n            images.push({\r\n                full: response.large,\r\n                img: response.medium,\r\n                thumb: response.small,\r\n                isMain: true\r\n            });\r\n\r\n            if (response.hasOwnProperty('gallery')) {\r\n                $.each(response.gallery, function () {\r\n                    if (!support(this) || response.large === this.large) {\r\n                        return;\r\n                    }\r\n                    images.push({\r\n                        full: this.large,\r\n                        img: this.medium,\r\n                        thumb: this.small\r\n                    });\r\n                });\r\n            }\r\n\r\n            this.updateBaseImage(images, $main, isInProductView);\r\n        },\r\n\r\n        /**\r\n         * Check if images to update are initial and set their type\r\n         * @param {Array} images\r\n         */\r\n        _setImageType: function (images) {\r\n            var initial = this.options.mediaGalleryInitial[0].img;\r\n\r\n            if (images[0].img === initial) {\r\n                images = $.extend(true, [], this.options.mediaGalleryInitial);\r\n            } else {\r\n                images.map(function (img) {\r\n                    if (!img.type) {\r\n                        img.type = 'image';\r\n                    }\r\n                });\r\n            }\r\n\r\n            return images;\r\n        },\r\n\r\n        /**\r\n         * Update [gallery-placeholder] or [product-image-photo]\r\n         * @param {Array} images\r\n         * @param {jQuery} context\r\n         * @param {Boolean} isInProductView\r\n         */\r\n        updateBaseImage: function (images, context, isInProductView) {\r\n            var justAnImage = images[0],\r\n                initialImages = this.options.mediaGalleryInitial,\r\n                imagesToUpdate,\r\n                gallery = context.find(this.options.mediaGallerySelector).data('gallery'),\r\n                isInitial;\r\n\r\n            if (isInProductView) {\r\n                if (_.isUndefined(gallery)) {\r\n                    context.find(this.options.mediaGallerySelector).on('gallery:loaded', function () {\r\n                        this.updateBaseImage(images, context, isInProductView);\r\n                    }.bind(this));\r\n\r\n                    return;\r\n                }\r\n\r\n                imagesToUpdate = images.length ? this._setImageType($.extend(true, [], images)) : [];\r\n                isInitial = _.isEqual(imagesToUpdate, initialImages);\r\n\r\n                if (this.options.gallerySwitchStrategy === 'prepend' && !isInitial) {\r\n                    imagesToUpdate = imagesToUpdate.concat(initialImages);\r\n                }\r\n\r\n                imagesToUpdate = this._setImageIndex(imagesToUpdate);\r\n\r\n                gallery.updateData(imagesToUpdate);\r\n                this._addFotoramaVideoEvents(isInitial);\r\n            } else if (justAnImage && justAnImage.img) {\r\n                context.find('.product-image-photo').attr('src', justAnImage.img);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add video events\r\n         *\r\n         * @param {Boolean} isInitial\r\n         * @private\r\n         */\r\n        _addFotoramaVideoEvents: function (isInitial) {\r\n            if (_.isUndefined($.mage.AddFotoramaVideoEvents)) {\r\n                return;\r\n            }\r\n\r\n            if (isInitial) {\r\n                $(this.options.mediaGallerySelector).AddFotoramaVideoEvents();\r\n\r\n                return;\r\n            }\r\n\r\n            $(this.options.mediaGallerySelector).AddFotoramaVideoEvents({\r\n                selectedOption: this.getProduct(),\r\n                dataMergeStrategy: this.options.gallerySwitchStrategy\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set correct indexes for image set.\r\n         *\r\n         * @param {Array} images\r\n         * @private\r\n         */\r\n        _setImageIndex: function (images) {\r\n            var length = images.length,\r\n                i;\r\n\r\n            for (i = 0; length > i; i++) {\r\n                images[i].i = i + 1;\r\n            }\r\n\r\n            return images;\r\n        },\r\n\r\n        /**\r\n         * Kill doubled AJAX requests\r\n         *\r\n         * @private\r\n         */\r\n        _XhrKiller: function () {\r\n            var $widget = this;\r\n\r\n            if ($widget.xhr !== undefined && $widget.xhr !== null) {\r\n                $widget.xhr.abort();\r\n                $widget.xhr = null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Emulate mouse click on all swatches that should be selected\r\n         * @param {Object} [selectedAttributes]\r\n         * @private\r\n         */\r\n        _EmulateSelected: function (selectedAttributes) {\r\n            $.each(selectedAttributes, $.proxy(function (attributeCode, optionId) {\r\n                var elem = this.element.find('.' + this.options.classes.attributeClass +\r\n                    '[data-attribute-code=\"' + attributeCode + '\"] [data-option-id=\"' + optionId + '\"]'),\r\n                    parentInput = elem.parent();\r\n\r\n                if (elem.hasClass('selected')) {\r\n                    return;\r\n                }\r\n\r\n                if (parentInput.hasClass(this.options.classes.selectClass)) {\r\n                    parentInput.val(optionId);\r\n                    parentInput.trigger('change');\r\n                } else {\r\n                    elem.trigger('click');\r\n                }\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Emulate mouse click or selection change on all swatches that should be selected\r\n         * @param {Object} [selectedAttributes]\r\n         * @private\r\n         */\r\n        _EmulateSelectedByAttributeId: function (selectedAttributes) {\r\n            $.each(selectedAttributes, $.proxy(function (attributeId, optionId) {\r\n                var elem = this.element.find('.' + this.options.classes.attributeClass +\r\n                    '[data-attribute-id=\"' + attributeId + '\"] [data-option-id=\"' + optionId + '\"]'),\r\n                    parentInput = elem.parent();\r\n\r\n                if (elem.hasClass('selected')) {\r\n                    return;\r\n                }\r\n\r\n                if (parentInput.hasClass(this.options.classes.selectClass)) {\r\n                    parentInput.val(optionId);\r\n                    parentInput.trigger('change');\r\n                } else {\r\n                    elem.trigger('click');\r\n                }\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Get default options values settings with either URL query parameters\r\n         * @private\r\n         */\r\n        _getSelectedAttributes: function () {\r\n            var hashIndex = window.location.href.indexOf('#'),\r\n                selectedAttributes = {},\r\n                params;\r\n\r\n            if (hashIndex !== -1) {\r\n                params = $.parseQuery(window.location.href.substr(hashIndex + 1));\r\n\r\n                selectedAttributes = _.invert(_.mapObject(_.invert(params), function (attributeId) {\r\n                    var attribute = this.options.jsonConfig.mappedAttributes[attributeId];\r\n\r\n                    return attribute ? attribute.code : attributeId;\r\n                }.bind(this)));\r\n            }\r\n\r\n            return selectedAttributes;\r\n        },\r\n\r\n        /**\r\n         * Callback which fired after gallery gets initialized.\r\n         *\r\n         * @param {HTMLElement} element - DOM element associated with a gallery.\r\n         */\r\n        _onGalleryLoaded: function (element) {\r\n            var galleryObject = element.data('gallery');\r\n\r\n            this.options.mediaGalleryInitial = galleryObject.returnCurrentImages();\r\n        },\r\n\r\n        /**\r\n         * Sets mediaCache for cases when jsonConfig contains preSelectedGallery on layered navigation result pages\r\n         *\r\n         * @private\r\n         */\r\n        _setPreSelectedGallery: function () {\r\n            var mediaCallData;\r\n\r\n            if (this.options.jsonConfig.preSelectedGallery) {\r\n                mediaCallData = {\r\n                    'product_id': this.getProduct()\r\n                };\r\n\r\n                this.options.mediaCache[JSON.stringify(mediaCallData)] = this.options.jsonConfig.preSelectedGallery;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.SwatchRenderer;\r\n});\r\n","Magento_Swatches/js/text.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $break $ $$ */\r\n\r\n/**\r\n *  @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'prototype',\r\n    'validation'\r\n], function (jQuery, mageTemplate, rg) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var swatchOptionTextDefaultInputType = 'radio',\r\n            swatchTextOption = {\r\n                table: $('swatch-text-options-table'),\r\n                itemCount: 0,\r\n                totalItems: 0,\r\n                rendered: 0,\r\n                isReadOnly: config.isReadOnly,\r\n                template: mageTemplate('#swatch-text-row-template'),\r\n\r\n                /**\r\n                 * Add option\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Object} render\r\n                 */\r\n                add: function (data, render) {\r\n                    var isNewOption = false,\r\n                        element;\r\n\r\n                    if (typeof data.id == 'undefined') {\r\n                        data = {\r\n                            'id': 'option_' + this.itemCount,\r\n                            'sort_order': this.itemCount + 1\r\n                        };\r\n                        isNewOption = true;\r\n                    }\r\n\r\n                    if (!data.intype) {\r\n                        data.intype = swatchOptionTextDefaultInputType;\r\n                    }\r\n\r\n                    element = this.template({\r\n                        data: data\r\n                    });\r\n\r\n                    if (isNewOption && !this.isReadOnly) {\r\n                        this.enableNewOptionDeleteButton(data.id);\r\n                    }\r\n                    this.itemCount++;\r\n                    this.totalItems++;\r\n                    this.elements += element;\r\n\r\n                    if (render) {\r\n                        this.render();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Remove option\r\n                 *\r\n                 * @param {Object} event\r\n                 */\r\n                remove: function (event) {\r\n                    var element = $(Event.findElement(event, 'tr')),\r\n                        elementFlags; // !!! Button already have table parent in safari\r\n\r\n                    // Safari workaround\r\n                    element.ancestors().each(function (parentItem) {\r\n                        if (parentItem.hasClassName('option-row')) {\r\n                            element = parentItem;\r\n                            throw $break;\r\n                        } else if (parentItem.hasClassName('box')) {\r\n                            throw $break;\r\n                        }\r\n                    });\r\n\r\n                    if (element) {\r\n                        elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                        if (elementFlags[0]) {\r\n                            elementFlags[0].value = 1;\r\n                        }\r\n\r\n                        element.addClassName('no-display');\r\n                        element.addClassName('template');\r\n                        element.hide();\r\n                        this.totalItems--;\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Update items count field\r\n                 */\r\n                updateItemsCountField: function () {\r\n                    $('swatch-text-option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n                },\r\n\r\n                /**\r\n                 * Enable delete button for new option\r\n                 *\r\n                 * @param {String} id\r\n                 */\r\n                enableNewOptionDeleteButton: function (id) {\r\n                    $$('#delete_button_swatch_container_' + id + ' button').each(function (button) {\r\n                        button.enable();\r\n                        button.removeClassName('disabled');\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * Bind remove button\r\n                 */\r\n                bindRemoveButtons: function () {\r\n                    jQuery('#swatch-text-options-panel').on('click', '.delete-option', this.remove.bind(this));\r\n                },\r\n\r\n                /**\r\n                 * Render action\r\n                 */\r\n                render: function () {\r\n                    Element.insert($$('[data-role=swatch-text-options-container]')[0], this.elements);\r\n                    this.elements = '';\r\n                },\r\n\r\n                /**\r\n                 * Render action with delay (performance fix)\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Number} from\r\n                 * @param {Number} step\r\n                 * @param {Number} delay\r\n                 * @returns {Boolean}\r\n                 */\r\n                renderWithDelay: function (data, from, step, delay) {\r\n                    var arrayLength = data.length,\r\n                        len;\r\n\r\n                    for (len = from + step; from < len && from < arrayLength; from++) {\r\n                        this.add(data[from]);\r\n                    }\r\n                    this.render();\r\n\r\n                    if (from === arrayLength) {\r\n                        this.updateItemsCountField();\r\n                        this.rendered = 1;\r\n                        jQuery('body').trigger('processStop');\r\n\r\n                        return true;\r\n                    }\r\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\r\n                },\r\n\r\n                /**\r\n                 * Ignore validate action\r\n                 */\r\n                ignoreValidate: function () {\r\n                    var ignore = '.ignore-validate input, ' +\r\n                        '.ignore-validate select, ' +\r\n                        '.ignore-validate textarea';\r\n\r\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\r\n                }\r\n            };\r\n\r\n        if ($('add_new_swatch_text_option_button')) {\r\n            Event.observe(\r\n                'add_new_swatch_text_option_button',\r\n                'click',\r\n                swatchTextOption.add.bind(swatchTextOption, true)\r\n            );\r\n        }\r\n        jQuery('#swatch-text-options-panel').on('render', function () {\r\n            swatchTextOption.ignoreValidate();\r\n\r\n            if (swatchTextOption.rendered) {\r\n                return false;\r\n            }\r\n            jQuery('body').trigger('processStart');\r\n            swatchTextOption.renderWithDelay(config.attributesData, 0, 100, 300);\r\n            swatchTextOption.bindRemoveButtons();\r\n        });\r\n\r\n        if (config.isSortable) {\r\n            jQuery(function ($) {\r\n                $('[data-role=swatch-text-options-container]').sortable({\r\n                    distance: 8,\r\n                    tolerance: 'pointer',\r\n                    cancel: 'input, button',\r\n                    axis: 'y',\r\n\r\n                    /**\r\n                     * Update components\r\n                     */\r\n                    update: function () {\r\n                        $('[data-role=swatch-text-options-container] [data-role=order]').each(\r\n                            function (index, element) {\r\n                                $(element).val(index + 1);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        jQuery(document).ready(function () {\r\n            if (jQuery('#frontend_input').val() !== 'swatch_text') {\r\n                jQuery('.swatch-text-field-0').removeClass('required-option');\r\n            }\r\n        });\r\n\r\n        window.swatchTextOption = swatchTextOption;\r\n        window.swatchOptionTextDefaultInputType = swatchOptionTextDefaultInputType;\r\n\r\n        rg.set('swatch-text-options-panel', swatchTextOption);\r\n    };\r\n});\r\n","Magento_Swatches/js/visual.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $break $ $$ FORM_KEY */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/colorpicker/js/colorpicker',\r\n    'prototype',\r\n    'jquery/ui',\r\n    'validation'\r\n], function (jQuery, mageTemplate, rg) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var swatchOptionVisualDefaultInputType = 'radio',\r\n            swatchVisualOption = {\r\n                table: $('swatch-visual-options-table'),\r\n                itemCount: 0,\r\n                totalItems: 0,\r\n                rendered: 0,\r\n                isReadOnly: config.isReadOnly,\r\n                template: mageTemplate('#swatch-visual-row-template'),\r\n\r\n                /**\r\n                 * Add new option using template\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Object} render\r\n                 */\r\n                add: function (data, render) {\r\n                    var isNewOption = false,\r\n                        element;\r\n\r\n                    if (typeof data.id == 'undefined') {\r\n                        data = {\r\n                            'id': 'option_' + this.itemCount,\r\n                            'sort_order': this.itemCount + 1,\r\n                            'empty_class': 'unavailable'\r\n                        };\r\n                        isNewOption = true;\r\n                    } else if (data.defaultswatch0 === '') {\r\n                        data['empty_class'] = 'unavailable';\r\n                    }\r\n\r\n                    if (!data.intype) {\r\n                        data.intype = swatchOptionVisualDefaultInputType;\r\n                    }\r\n\r\n                    element = this.template({\r\n                        data: data\r\n                    });\r\n\r\n                    if (isNewOption && !this.isReadOnly) {\r\n                        this.enableNewOptionDeleteButton(data.id);\r\n                    }\r\n                    this.itemCount++;\r\n                    this.totalItems++;\r\n                    this.elements += element;\r\n\r\n                    if (render) {\r\n                        this.render();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * ColorPicker initialization process\r\n                 */\r\n                initColorPicker: function () {\r\n                    var element = this,\r\n                        hiddenColorPicker = !jQuery(element).data('colorpickerId');\r\n\r\n                    jQuery(this).ColorPicker({\r\n\r\n                        /**\r\n                         * ColorPicker onShow action\r\n                         */\r\n                        onShow: function () {\r\n                            var color = jQuery(element).parent().parent().prev().prev('input').val(),\r\n                                menu = jQuery(this).parents('.swatch_sub-menu_container');\r\n\r\n                            menu.hide();\r\n                            jQuery(element).ColorPickerSetColor(color);\r\n                        },\r\n\r\n                        /**\r\n                         * ColorPicker onSubmit action\r\n                         *\r\n                         * @param {String} hsb\r\n                         * @param {String} hex\r\n                         * @param {String} rgb\r\n                         * @param {String} el\r\n                         */\r\n                        onSubmit: function (hsb, hex, rgb, el) {\r\n                            var container = jQuery(el).parent().parent().prev();\r\n\r\n                            jQuery(el).ColorPickerHide();\r\n                            container.parent().removeClass('unavailable');\r\n                            container.prev('input').val('#' + hex);\r\n                            container.css('background', '#' + hex);\r\n                        }\r\n                    });\r\n\r\n                    if (hiddenColorPicker) {\r\n                        jQuery(this).ColorPickerShow();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Remove action\r\n                 *\r\n                 * @param {Object} event\r\n                 */\r\n                remove: function (event) {\r\n                    var element = $(Event.findElement(event, 'tr')),\r\n                        elementFlags; // !!! Button already have table parent in safari\r\n\r\n                    // Safari workaround\r\n                    element.ancestors().each(function (parentItem) {\r\n                        if (parentItem.hasClassName('option-row')) {\r\n                            element = parentItem;\r\n                            throw $break;\r\n                        } else if (parentItem.hasClassName('box')) {\r\n                            throw $break;\r\n                        }\r\n                    });\r\n\r\n                    if (element) {\r\n                        elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                        if (elementFlags[0]) {\r\n                            elementFlags[0].value = 1;\r\n                        }\r\n\r\n                        element.addClassName('no-display');\r\n                        element.addClassName('template');\r\n                        element.hide();\r\n                        this.totalItems--;\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Update items count field\r\n                 */\r\n                updateItemsCountField: function () {\r\n                    $('swatch-visual-option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n                },\r\n\r\n                /**\r\n                 * Enable delete button for new option\r\n                 *\r\n                 * @param {String} id\r\n                 */\r\n                enableNewOptionDeleteButton: function (id) {\r\n                    $$('#delete_button_swatch_container_' + id + ' button').each(function (button) {\r\n                        button.enable();\r\n                        button.removeClassName('disabled');\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * Bind remove button\r\n                 */\r\n                bindRemoveButtons: function () {\r\n                    jQuery('#swatch-visual-options-panel').on('click', '.delete-option', this.remove.bind(this));\r\n                },\r\n\r\n                /**\r\n                 * Render options\r\n                 */\r\n                render: function () {\r\n                    Element.insert($$('[data-role=swatch-visual-options-container]')[0], this.elements);\r\n                    this.elements = '';\r\n                },\r\n\r\n                /**\r\n                 * Render elements with delay (performance fix)\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Number} from\r\n                 * @param {Number} step\r\n                 * @param {Number} delay\r\n                 * @returns {Boolean}\r\n                 */\r\n                renderWithDelay: function (data, from, step, delay) {\r\n                    var arrayLength = data.length,\r\n                        len;\r\n\r\n                    for (len = from + step; from < len && from < arrayLength; from++) {\r\n                        this.add(data[from]);\r\n                    }\r\n                    this.render();\r\n\r\n                    if (from === arrayLength) {\r\n                        this.updateItemsCountField();\r\n                        this.rendered = 1;\r\n                        jQuery('body').trigger('processStop');\r\n\r\n                        return true;\r\n                    }\r\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\r\n                },\r\n\r\n                /**\r\n                 * Ignore validate action\r\n                 */\r\n                ignoreValidate: function () {\r\n                    var ignore = '.ignore-validate input, ' +\r\n                        '.ignore-validate select, ' +\r\n                        '.ignore-validate textarea';\r\n\r\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\r\n                }\r\n            };\r\n\r\n        if ($('add_new_swatch_visual_option_button')) {\r\n            Event.observe(\r\n                'add_new_swatch_visual_option_button',\r\n                'click',\r\n                swatchVisualOption.add.bind(swatchVisualOption, {}, true)\r\n            );\r\n        }\r\n\r\n        jQuery('#swatch-visual-options-panel').on('render', function () {\r\n            swatchVisualOption.ignoreValidate();\r\n\r\n            if (swatchVisualOption.rendered) {\r\n                return false;\r\n            }\r\n            jQuery('body').trigger('processStart');\r\n            swatchVisualOption.renderWithDelay(config.attributesData, 0, 100, 300);\r\n            swatchVisualOption.bindRemoveButtons();\r\n            jQuery('#swatch-visual-options-panel').on(\r\n                'click',\r\n                '.colorpicker_handler',\r\n                swatchVisualOption.initColorPicker\r\n            );\r\n        });\r\n        jQuery('body').on('click', function (event) {\r\n            var element = jQuery(event.target);\r\n\r\n            if (\r\n                element.parents('.swatch_sub-menu_container').length === 1 ||\r\n                element.next('div.swatch_sub-menu_container').length === 1\r\n            ) {\r\n                return true;\r\n            }\r\n            jQuery('.swatch_sub-menu_container').hide();\r\n        });\r\n\r\n        if (config.isSortable) {\r\n            jQuery(function ($) {\r\n                $('[data-role=swatch-visual-options-container]').sortable({\r\n                    distance: 8,\r\n                    tolerance: 'pointer',\r\n                    cancel: 'input, button',\r\n                    axis: 'y',\r\n\r\n                    /**\r\n                     * Update component\r\n                     */\r\n                    update: function () {\r\n                        $('[data-role=swatch-visual-options-container] [data-role=order]').each(\r\n                            function (index, element) {\r\n                                $(element).val(index + 1);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        window.swatchVisualOption = swatchVisualOption;\r\n        window.swatchOptionVisualDefaultInputType = swatchOptionVisualDefaultInputType;\r\n\r\n        rg.set('swatch-visual-options-panel', swatchVisualOption);\r\n\r\n        jQuery(function ($) {\r\n\r\n            var swatchComponents = {\r\n\r\n                /**\r\n                 * div wrapper for to hide all evement\r\n                 */\r\n                wrapper: null,\r\n\r\n                /**\r\n                 * iframe component to perform file upload without page reload\r\n                 */\r\n                iframe: null,\r\n\r\n                /**\r\n                 * form component for upload image\r\n                 */\r\n                form: null,\r\n\r\n                /**\r\n                 * Input file component for upload image\r\n                 */\r\n                inputFile: null,\r\n\r\n                /**\r\n                 * Create swatch component for upload files\r\n                 *\r\n                 * @this {swatchComponents}\r\n                 * @public\r\n                 */\r\n                create: function () {\r\n                    this.wrapper = $('<div>').css({\r\n                        display: 'none'\r\n                    }).appendTo($('body'));\r\n\r\n                    this.iframe = $('<iframe />', {\r\n                        id:  'upload_iframe',\r\n                        name: 'upload_iframe'\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.form = $('<form />', {\r\n                        id: 'swatch_form_image_upload',\r\n                        name: 'swatch_form_image_upload',\r\n                        target: 'upload_iframe',\r\n                        method: 'post',\r\n                        enctype: 'multipart/form-data',\r\n                        class: 'ignore-validate',\r\n                        action: config.uploadActionUrl\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.inputFile = $('<input />', {\r\n                        type: 'file',\r\n                        name: 'datafile',\r\n                        class: 'swatch_option_file'\r\n                    }).appendTo(this.form);\r\n\r\n                    $('<input />', {\r\n                        type: 'hidden',\r\n                        name: 'form_key',\r\n                        value: FORM_KEY\r\n                    }).appendTo(this.form);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Create swatch components\r\n             */\r\n            swatchComponents.create();\r\n\r\n            /**\r\n             * Register event for swatch input[type=file] change\r\n             */\r\n            swatchComponents.inputFile.change(function () {\r\n                var container = $('#' + $(this).attr('data-called-by')).parents().eq(2).children('.swatch_window'),\r\n\r\n                    /**\r\n                     * @this {iframe}\r\n                     */\r\n                    iframeHandler = function () {\r\n                        var imageParams = $.parseJSON($(this).contents().find('body').html()),\r\n                            fullMediaUrl = imageParams['swatch_path'] + imageParams['file_path'];\r\n\r\n                        container.prev('input').val(imageParams['file_path']);\r\n                        container.css({\r\n                            'background-image': 'url(' + fullMediaUrl + ')',\r\n                            'background-size': 'cover'\r\n                        });\r\n                        container.parent().removeClass('unavailable');\r\n                    };\r\n\r\n                swatchComponents.iframe.off('load');\r\n                swatchComponents.iframe.load(iframeHandler);\r\n                swatchComponents.form.submit();\r\n                $(this).val('');\r\n            });\r\n\r\n            /**\r\n             * Register event for choose \"upload image\" option\r\n             */\r\n            $(document).on('click', '.btn_choose_file_upload', function () {\r\n                swatchComponents.inputFile.attr('data-called-by', $(this).attr('id'));\r\n                swatchComponents.inputFile.click();\r\n            });\r\n\r\n            /**\r\n             * Register event for remove option\r\n             */\r\n            $(document).on('click', '.btn_remove_swatch', function () {\r\n                var optionPanel = $(this).parents().eq(2);\r\n\r\n                optionPanel.children('input').val('');\r\n                optionPanel.children('.swatch_window').css('background', '');\r\n\r\n                optionPanel.addClass('unavailable');\r\n\r\n                jQuery('.swatch_sub-menu_container').hide();\r\n            });\r\n\r\n            /**\r\n             * Toggle color upload chooser\r\n             */\r\n            $(document).on('click', '.swatches-visual-col', function () {\r\n                var currentElement = $(this).find('.swatch_sub-menu_container');\r\n\r\n                jQuery('.swatch_sub-menu_container').not(currentElement).hide();\r\n                currentElement.toggle();\r\n            });\r\n        });\r\n    };\r\n});\r\n","Magento_Swatches/js/form/element/swatch-visual.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $break $ FORM_KEY */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'prototype',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'jquery/colorpicker/js/colorpicker',\r\n    'jquery/ui'\r\n], function (_, jQuery, mageTemplate, rg, prototype, Abstract) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Former implementation.\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} container\r\n     * @param {String} uploadUrl\r\n     * @param {String} elementName\r\n     */\r\n    function oldCode(value, container, uploadUrl, elementName) {\r\n        var swatchVisualOption = {\r\n            itemCount: 0,\r\n            totalItems: 0,\r\n            rendered: 0,\r\n            isReadOnly: false,\r\n\r\n            /**\r\n             * Initialize.\r\n             */\r\n            initialize: function () {\r\n                if (_.isEmpty(value)) {\r\n                    container.addClassName('unavailable');\r\n                }\r\n\r\n                jQuery(container).on(\r\n                    'click',\r\n                    '.colorpicker_handler',\r\n                    this.initColorPicker\r\n                );\r\n            },\r\n\r\n            /**\r\n             * ColorPicker initialization process\r\n             */\r\n            initColorPicker: function () {\r\n                var element = this,\r\n                    hiddenColorPicker = !jQuery(element).data('colorpickerId');\r\n\r\n                jQuery(this).ColorPicker({\r\n\r\n                    /**\r\n                     * ColorPicker onShow action\r\n                     */\r\n                    onShow: function () {\r\n                        var color = jQuery(element).parent().parent().prev().prev('input').val(),\r\n                            menu = jQuery(this).parents('.swatch_sub-menu_container');\r\n\r\n                        menu.hide();\r\n                        jQuery(element).ColorPickerSetColor(color);\r\n                    },\r\n\r\n                    /**\r\n                     * ColorPicker onSubmit action\r\n                     *\r\n                     * @param {String} hsb\r\n                     * @param {String} hex\r\n                     * @param {String} rgb\r\n                     * @param {String} el\r\n                     */\r\n                    onSubmit: function (hsb, hex, rgb, el) {\r\n                        var localContainer = jQuery(el).parent().parent().prev();\r\n\r\n                        jQuery(el).ColorPickerHide();\r\n                        localContainer.parent().removeClass('unavailable');\r\n                        localContainer.prev('input').val('#' + hex).trigger('change');\r\n                        localContainer.css('background', '#' + hex);\r\n                    }\r\n                });\r\n\r\n                if (hiddenColorPicker) {\r\n                    jQuery(this).ColorPickerShow();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Remove action\r\n             *\r\n             * @param {Object} event\r\n             */\r\n            remove: function (event) {\r\n                var element = $(Event.findElement(event, 'tr')),\r\n                    elementFlags; // !!! Button already have table parent in safari\r\n\r\n                // Safari workaround\r\n                element.ancestors().each(function (parentItem) {\r\n                    if (parentItem.hasClassName('option-row')) {\r\n                        element = parentItem;\r\n                        throw $break;\r\n                    } else if (parentItem.hasClassName('box')) {\r\n                        throw $break;\r\n                    }\r\n                });\r\n\r\n                if (element) {\r\n                    elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                    if (elementFlags[0]) {\r\n                        elementFlags[0].value = 1;\r\n                    }\r\n\r\n                    element.addClassName('no-display');\r\n                    element.addClassName('template');\r\n                    element.hide();\r\n                    this.totalItems--;\r\n                    this.updateItemsCountField();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Update items count field\r\n             */\r\n            updateItemsCountField: function () {\r\n                $('swatch-visual-option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n            }\r\n        };\r\n\r\n        //swatchVisualOption.initColorPicker();\r\n\r\n        jQuery('body').on('click', function (event) {\r\n            var element = jQuery(event.target);\r\n\r\n            if (\r\n                element.parents('.swatch_sub-menu_container').length === 1 ||\r\n                element.next('div.swatch_sub-menu_container').length === 1\r\n            ) {\r\n                return true;\r\n            }\r\n            jQuery('.swatch_sub-menu_container').hide();\r\n        });\r\n\r\n        jQuery(function ($) {\r\n\r\n            var swatchComponents = {\r\n\r\n                /**\r\n                 * div wrapper for to hide all evement\r\n                 */\r\n                wrapper: null,\r\n\r\n                /**\r\n                 * iframe component to perform file upload without page reload\r\n                 */\r\n                iframe: null,\r\n\r\n                /**\r\n                 * form component for upload image\r\n                 */\r\n                form: null,\r\n\r\n                /**\r\n                 * Input file component for upload image\r\n                 */\r\n                inputFile: null,\r\n\r\n                /**\r\n                 * Create swatch component for upload files\r\n                 *\r\n                 * @this {swatchComponents}\r\n                 * @public\r\n                 */\r\n                create: function () {\r\n                    this.wrapper = $('<div>').css({\r\n                        display: 'none'\r\n                    }).appendTo($('body'));\r\n\r\n                    this.iframe = $('<iframe />', {\r\n                        name: 'upload_iframe_' + elementName\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.form = $('<form />', {\r\n                        name: 'swatch_form_image_upload_' + elementName,\r\n                        target: 'upload_iframe_' + elementName,\r\n                        method: 'post',\r\n                        enctype: 'multipart/form-data',\r\n                        class: 'ignore-validate',\r\n                        action: uploadUrl\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.inputFile = $('<input />', {\r\n                        type: 'file',\r\n                        name: 'datafile',\r\n                        class: 'swatch_option_file'\r\n                    }).appendTo(this.form);\r\n\r\n                    $('<input />', {\r\n                        type: 'hidden',\r\n                        name: 'form_key',\r\n                        value: FORM_KEY\r\n                    }).appendTo(this.form);\r\n                }\r\n            };\r\n\r\n            swatchVisualOption.initialize();\r\n\r\n            /**\r\n             * Create swatch components\r\n             */\r\n            swatchComponents.create();\r\n\r\n            /**\r\n             * Register event for swatch input[type=file] change\r\n             */\r\n            swatchComponents.inputFile.change(function () {\r\n                var localContainer = $('.' + $(this).attr('data-called-by')).parents().eq(2).children('.swatch_window'),\r\n\r\n                    /**\r\n                     * @this {iframe}\r\n                     */\r\n                    iframeHandler = function () {\r\n                        var imageParams = $.parseJSON($(this).contents().find('body').html()),\r\n                            fullMediaUrl = imageParams['swatch_path'] + imageParams['file_path'];\r\n\r\n                        localContainer.prev('input').val(imageParams['file_path']).trigger('change');\r\n                        localContainer.css({\r\n                            'background-image': 'url(' + fullMediaUrl + ')',\r\n                            'background-size': 'cover'\r\n                        });\r\n                        localContainer.parent().removeClass('unavailable');\r\n                    };\r\n\r\n                swatchComponents.iframe.off('load');\r\n                swatchComponents.iframe.load(iframeHandler);\r\n                swatchComponents.form.submit();\r\n                $(this).val('');\r\n            });\r\n\r\n            /**\r\n             * Register event for choose \"upload image\" option\r\n             */\r\n            $(container).on('click', '.btn_choose_file_upload', function () {\r\n                swatchComponents.inputFile.attr('data-called-by', $(this).data('class'));\r\n                swatchComponents.inputFile.click();\r\n            });\r\n\r\n            /**\r\n             * Register event for remove option\r\n             */\r\n            $(container).on('click', '.btn_remove_swatch', function () {\r\n                var optionPanel = $(this).parents().eq(2);\r\n\r\n                optionPanel.children('input').val('').trigger('change');\r\n                optionPanel.children('.swatch_window').css('background', '');\r\n                optionPanel.addClass('unavailable');\r\n                jQuery('.swatch_sub-menu_container').hide();\r\n            });\r\n\r\n            /**\r\n             * Toggle color upload chooser\r\n             */\r\n            $(container).on('click', '.swatch_window', function () {\r\n                jQuery('.swatch_sub-menu_container').hide();\r\n                $(this).next('div').toggle();\r\n            });\r\n        });\r\n    }\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementId: 0,\r\n            prefixName: '',\r\n            prefixElementName: '',\r\n            elementName: '',\r\n            value: '',\r\n            uploadUrl: ''\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initOldCode()\r\n                .on('value', this.onChangeColor.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler function that execute when color changes.\r\n         *\r\n         * @param {String} data - color\r\n         */\r\n        onChangeColor: function (data) {\r\n            if (!data) {\r\n                jQuery('.' + this.elementName).parent().removeClass('unavailable');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize wrapped former implementation.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOldCode: function () {\r\n            jQuery.async('.' + this.elementName, this.name, function (elem) {\r\n                oldCode(this.value(), elem.parentElement, this.uploadUrl, this.elementName);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId, prefixName;\r\n\r\n            // Get recordId\r\n            recordId = this.parentName.split('.').last();\r\n\r\n            prefixName = this.dataScopeToHtmlArray(this.prefixName);\r\n            this.elementName = this.prefixElementName + recordId;\r\n\r\n            this.inputName = prefixName + '[' + this.elementName + ']';\r\n            this.exportDataLink = 'data.' + this.prefixName + '.' + this.elementName;\r\n            this.exports.value = this.provider + ':' + this.exportDataLink;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            this._super();\r\n\r\n            this.source.remove(this.exportDataLink);\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Add new level of nesting.\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        }\r\n    });\r\n});\r\n","Magento_Tax/js/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'mage/backend/editablemultiselect'\r\n]);\r\n","Magento_Tax/js/price/adjustment.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'mage/translate'\r\n], function (Element, $t) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Tax/price/adjustment',\r\n            taxPriceType: 'final_price',\r\n            taxPriceCssClass: 'price-including-tax',\r\n            bothPrices: 3,\r\n            inclTax: 2,\r\n            exclTax: 1,\r\n            modules: {\r\n                price: '${ $.parentName }'\r\n            },\r\n            listens: {\r\n                price: 'initializePriceAttributes'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initializePriceAttributes();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update parent price.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initializePriceAttributes: function () {\r\n            if (this.displayBothPrices && this.price()) {\r\n                this.price().priceWrapperCssClasses = this.taxPriceCssClass;\r\n                this.price().priceWrapperAttr = {\r\n                    'data-label': $t('Incl. Tax')\r\n                };\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get price tax adjustment.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} tax html\r\n         */\r\n        getTax: function (row) {\r\n            return row['price_info']['extension_attributes']['tax_adjustments']['formatted_prices'][this.taxPriceType];\r\n        },\r\n\r\n        /**\r\n         * Set price tax type.\r\n         *\r\n         * @param {String} priceType\r\n         * @return {Object}\r\n         */\r\n        setPriceType: function (priceType) {\r\n            this.taxPriceType = priceType;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display\r\n         * both price including tax and price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayBothPrices: function () {\r\n            return +this.source.data.displayTaxes === this.bothPrices;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price including tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceIncludeTax: function () {\r\n            return +this.source.data.displayTaxes === this.inclTax;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclTax: function () {\r\n            return +this.source.data.displayTaxes === this.exclTax;\r\n        }\r\n    });\r\n});\r\n","Magento_Theme/js/bootstrap.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'jquery/fileUploader/jquery.fileupload-ui',\r\n    'mage/adminhtml/browser',\r\n    'Magento_Theme/js/form'\r\n]);\r\n","Magento_Theme/js/custom-js-list.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('theme.themeJsList', {\r\n        options: {\r\n            templateId: null,\r\n            emptyTemplateId: null,\r\n            refreshFileListEvent: null,\r\n            prefixItemId: '',\r\n            suffixItemId: ''\r\n        },\r\n\r\n        /**\r\n         * Initialize widget\r\n         *\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind event handlers\r\n         *\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            $('body').on(this.options.refreshFileListEvent, $.proxy(this._onRefreshList, this));\r\n        },\r\n\r\n        /**\r\n         * Render js files list\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @protected\r\n         */\r\n        _onRefreshList: function (event, data) {\r\n            $(this.element).html('');\r\n\r\n            if (data.jsList.length) {\r\n                this._renderList(data.jsList);\r\n            } else {\r\n                this._renderEmptyList();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get item js list id\r\n         *\r\n         * @param {*} fileId\r\n         * @return {String}\r\n         * @protected\r\n         */\r\n        _getItemId: function (fileId) {\r\n            return this.options.prefixItemId + fileId + this.options.suffixItemId;\r\n        },\r\n\r\n        /**\r\n         * Render js list\r\n         *\r\n         * @param {Array} jsList\r\n         * @protected\r\n         */\r\n        _renderList: function (jsList) {\r\n            var itemTmpl,\r\n                index,\r\n                tmpl;\r\n\r\n            for (index = 0; index < jsList.length; index++) {\r\n                itemTmpl = $('<li></li>').html($(this.options.templateId).html());\r\n\r\n                $(itemTmpl).attr('class', $(this.options.templateId).attr('class'));\r\n\r\n                itemTmpl.attr('id', this._getItemId(jsList[index].id));\r\n\r\n                tmpl = mageTemplate(itemTmpl.html(), {\r\n                    data: jsList[index]\r\n                });\r\n\r\n                itemTmpl.html(tmpl);\r\n\r\n                itemTmpl.removeClass('no-display');\r\n                itemTmpl.appendTo(this.element);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set empty js list\r\n         *\r\n         * @protected\r\n         */\r\n        _renderEmptyList: function () {\r\n            var itemTmpl = $('<li></li>').html($(this.options.emptyTemplateId).html());\r\n\r\n            $(itemTmpl).attr('class', $(this.options.emptyTemplateId).attr('class'));\r\n\r\n            itemTmpl.attr('id', 'empty-js-list');\r\n            itemTmpl.removeClass('no-display');\r\n            itemTmpl.appendTo(this.element);\r\n        }\r\n    });\r\n});\r\n","Magento_Theme/js/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'prototype'\r\n], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} selected\r\n     * @param {Object} defaultsById\r\n     */\r\n    function parentThemeOnChange(selected, defaultsById) {\r\n        var statusBar = $$('.tab-item-link')[0],\r\n            isChanged = statusBar.hasClassName('changed'),\r\n            defaults;\r\n\r\n        if (!isChanged) {\r\n            defaults = defaultsById[selected];\r\n            $('theme_title').value = defaults['theme_title'];\r\n        }\r\n    }\r\n\r\n    window.parentThemeOnChange = parentThemeOnChange;\r\n});\r\n","Magento_Theme/js/sortable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * JQuery UI Widget declaration: 'mage.sortable'\r\n *\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Widget panel\r\n     */\r\n    $.widget('mage.sortable', $.ui.sortable, {\r\n        options: {\r\n            moveUpEvent:   'moveUp',\r\n            moveDownEvent: 'moveDown'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._super();\r\n            this.initButtons();\r\n            this.bind();\r\n        },\r\n\r\n        /**\r\n         * Init buttons.\r\n         */\r\n        initButtons: function () {\r\n            this.element.find('input.up').on('click', $.proxy(function (event) {\r\n                $('body').trigger(this.options.moveUpEvent, {\r\n                    item: $(event.target).parent('li')\r\n                });\r\n            }, this));\r\n            this.element.find('input.down').on('click', $.proxy(function (event) {\r\n                $('body').trigger(this.options.moveDownEvent, {\r\n                    item: $(event.target).parent('li')\r\n                });\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Bind.\r\n         */\r\n        bind: function () {\r\n            var $body = $('body');\r\n\r\n            $body.on(this.options.moveUpEvent, $.proxy(this._onMoveUp, this));\r\n            $body.on(this.options.moveDownEvent, $.proxy(this._onMoveDown, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _onMoveUp: function (event, data) {\r\n            data.item.insertBefore(data.item.prev());\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _onMoveDown: function (event, data) {\r\n            data.item.insertAfter(data.item.next());\r\n        }\r\n    });\r\n\r\n    return $.mage.sortable;\r\n});\r\n","Magento_Theme/js/form/component/robots-reset-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'uiRegistry'\r\n], function (Button, registry) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            customInstructionField: '${ $.parentName }.custom_instructions',\r\n            label: '',\r\n            buttonTpl: 'Magento_Theme/form/element/button'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @param {String} json\r\n         * @return {String}\r\n         */\r\n        _parseJson: function (json) {\r\n            return JSON.parse(json);\r\n        },\r\n\r\n        /**\r\n         * @param {String} defaultRobotsTxt\r\n         */\r\n        reset: function (defaultRobotsTxt) {\r\n            var customInstructions = registry.get(this.customInstructionField);\r\n\r\n            if (customInstructions) {\r\n                customInstructions.set('value', this._parseJson(defaultRobotsTxt));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Tinymce3/tinymce3Adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated use lib/web/mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter.js instead\r\n */\r\n/* global varienGlobalEvents, tinyMceEditors, MediabrowserUtility, closeEditorPopup, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'tinymceDeprecated',\r\n    'mage/adminhtml/wysiwyg/tiny_mce/html5-schema',\r\n    'mage/translate',\r\n    'prototype',\r\n    'mage/adminhtml/events'\r\n], function (jQuery, _, tinyMCE3, html5Schema) {\r\n\r\n    var tinyMce3Wysiwyg = Class.create();\r\n\r\n    tinyMce3Wysiwyg.prototype = {\r\n        mediaBrowserOpener: null,\r\n        mediaBrowserTargetElementId: null,\r\n\r\n        /**\r\n         * @param {*} htmlId\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (htmlId, config) {\r\n            if (config.baseStaticUrl && config.baseStaticDefaultUrl) {\r\n                tinyMCE3.baseURL = tinyMCE3.baseURL.replace(config.baseStaticUrl, config.baseStaticDefaultUrl);\r\n            }\r\n\r\n            this.id = htmlId;\r\n            this.config = config;\r\n            this.schema = config.schema || html5Schema;\r\n\r\n            _.bindAll(\r\n                this,\r\n                'beforeSetContent',\r\n                'saveContent',\r\n                'onChangeContent',\r\n                'openFileBrowser',\r\n                'updateTextArea',\r\n                'removeEvents'\r\n            );\r\n\r\n            varienGlobalEvents.attachEventHandler('tinymceChange', this.onChangeContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceBeforeSetContent', this.beforeSetContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceSetContent', this.updateTextArea);\r\n            varienGlobalEvents.attachEventHandler('tinymceSaveContent', this.saveContent);\r\n\r\n            if (typeof tinyMceEditors == 'undefined') {\r\n                window.tinyMceEditors = $H({});\r\n            }\r\n\r\n            tinyMceEditors.set(this.id, this);\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         */\r\n        setup: function (mode) {\r\n            if (this.config['widget_plugin_src']) {\r\n                tinyMCE3.PluginManager.load('magentowidget', 'plugins/magentowidget/editor_plugin.js');\r\n            }\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function (plugin) {\r\n                    tinyMCE3.PluginManager.load(plugin.name, plugin.src);\r\n                });\r\n            }\r\n\r\n            if (jQuery.isReady) {\r\n                tinyMCE3.dom.Event.domLoaded = true;\r\n            }\r\n\r\n            tinyMCE3.init(this.getSettings(mode));\r\n            varienGlobalEvents.clearEventHandlers('open_browser_callback');\r\n            varienGlobalEvents.attachEventHandler('open_browser_callback', tinyMceEditors.get(this.id).openFileBrowser);\r\n        },\r\n\r\n        /**\r\n         * Remove events from instance.\r\n         *\r\n         * @param {String} wysiwygId\r\n         */\r\n        removeEvents: function (wysiwygId) {\r\n            var editor = tinyMceEditors.get(wysiwygId);\r\n\r\n            varienGlobalEvents.removeEventHandler('tinymceChange', editor.onChangeContent);\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         * @return {Object}\r\n         */\r\n        getSettings: function (mode) {\r\n            var plugins = 'inlinepopups,safari,pagebreak,style,layer,table,advhr,advimage,emotions,iespell,media,searchreplace,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,noneditable', //eslint-disable-line\r\n                self = this,\r\n                magentoPluginsOptions, magentoPlugins, settings;\r\n\r\n            if (this.config['widget_plugin_src']) {\r\n                plugins = 'magentowidget,' + plugins;\r\n            }\r\n\r\n            magentoPluginsOptions = $H({});\r\n            magentoPlugins = '';\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function (plugin) {\r\n                    magentoPlugins = plugin.name + ',' + magentoPlugins;\r\n                    magentoPluginsOptions.set(plugin.name, plugin.options);\r\n                });\r\n\r\n                if (magentoPlugins) {\r\n                    plugins = '-' + magentoPlugins + plugins;\r\n                }\r\n            }\r\n\r\n            settings = {\r\n                'entity_encoding': 'raw',\r\n                mode: mode != undefined ? mode : 'none', //eslint-disable-line eqeqeq\r\n                elements: this.id,\r\n                theme: 'advanced',\r\n                plugins: plugins,\r\n                'theme_advanced_buttons1': magentoPlugins + 'magentowidget,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect', //eslint-disable-line max-len\r\n                'theme_advanced_buttons2': 'cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,forecolor,backcolor', //eslint-disable-line max-len\r\n                'theme_advanced_buttons3': 'tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,iespell,media,advhr,|,ltr,rtl,|,fullscreen', //eslint-disable-line max-len\r\n                'theme_advanced_buttons4': 'insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,pagebreak', //eslint-disable-line max-len\r\n                'theme_advanced_toolbar_location': 'top',\r\n                'theme_advanced_toolbar_align': 'left',\r\n                'theme_advanced_statusbar_location': 'bottom',\r\n                'valid_elements': this.schema.validElements.join(','),\r\n                'valid_children': this.schema.validChildren.join(','),\r\n                'theme_advanced_resizing': true,\r\n                'theme_advanced_resize_horizontal': false,\r\n                'convert_urls': false,\r\n                'relative_urls': false,\r\n                'content_css': this.config['content_css'],\r\n                'custom_popup_css': this.config['popup_css'],\r\n                'magentowidget_url': this.config['widget_window_url'],\r\n                'noneditable_leave_contenteditable': true,\r\n                magentoPluginsOptions: magentoPluginsOptions,\r\n                doctype: '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">', //eslint-disable-line max-len\r\n\r\n                /**\r\n                 * @param {Object} ed\r\n                 */\r\n                setup: function (ed) {\r\n                    var onChange;\r\n\r\n                    ed.onPreInit.add(self.onEditorPreInit.bind(self));\r\n\r\n                    ed.onInit.add(self.onEditorInit.bind(self));\r\n\r\n                    ed.onInit.add(function (editor) {\r\n                        varienGlobalEvents.fireEvent('wysiwygEditorInitialized', editor);\r\n                    });\r\n\r\n                    ed.onSubmit.add(function (edi, e) {\r\n                        varienGlobalEvents.fireEvent('tinymceSubmit', e);\r\n                    });\r\n\r\n                    ed.onPaste.add(function (edi, e, o) {\r\n                        varienGlobalEvents.fireEvent('tinymcePaste', o);\r\n                    });\r\n\r\n                    ed.onBeforeSetContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceBeforeSetContent', o);\r\n                    });\r\n\r\n                    ed.onSetContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSetContent', o);\r\n                    });\r\n\r\n                    ed.onSaveContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSaveContent', o);\r\n                    });\r\n\r\n                    /**\r\n                     * @param {*} edi\r\n                     * @param {*} l\r\n                     */\r\n                    onChange = function (edi, l) {\r\n                        varienGlobalEvents.fireEvent('tinymceChange', l);\r\n                    };\r\n\r\n                    ed.onChange.add(onChange);\r\n                    ed.onKeyUp.add(onChange);\r\n\r\n                    ed.onExecCommand.add(function (edi, cmd) {\r\n                        varienGlobalEvents.fireEvent('tinymceExecCommand', cmd);\r\n                    });\r\n                }\r\n            };\r\n\r\n            // jscs:disable requireDotNotation\r\n            if (!settings['style_formats']) {\r\n                settings['theme_advanced_buttons1'] = settings['theme_advanced_buttons1'].replace(',styleselect', '');\r\n            }\r\n\r\n            // Set the document base URL\r\n            if (this.config['document_base_url']) {\r\n                settings['document_base_url'] = this.config['document_base_url'];\r\n            }\r\n\r\n            if (this.config['files_browser_window_url']) {\r\n\r\n                /**\r\n                 * @param {*} fieldName\r\n                 * @param {*} url\r\n                 * @param {*} objectType\r\n                 * @param {*} w\r\n                 */\r\n                settings['file_browser_callback'] = function (fieldName, url, objectType, w) {\r\n                    varienGlobalEvents.fireEvent('open_browser_callback', {\r\n                        win: w,\r\n                        type: objectType,\r\n                        field: fieldName\r\n                    });\r\n                };\r\n            }\r\n            // jscs:enable requireDotNotation\r\n\r\n            if (this.config.width) {\r\n                settings.width = this.config.width;\r\n            }\r\n\r\n            if (this.config.height) {\r\n                settings.height = this.config.height;\r\n            }\r\n\r\n            if (this.config.settings) {\r\n                Object.extend(settings, this.config.settings);\r\n            }\r\n\r\n            return settings;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} editor\r\n         */\r\n        applySchema: function (editor) {\r\n            var schema      = editor.schema,\r\n                schemaData  = this.schema,\r\n                makeMap     = tinyMCE3.makeMap;\r\n\r\n            jQuery.extend(true, {\r\n                nonEmpty: schema.getNonEmptyElements(),\r\n                boolAttrs: schema.getBoolAttrs(),\r\n                whiteSpace: schema.getWhiteSpaceElements(),\r\n                shortEnded: schema.getShortEndedElements(),\r\n                selfClosing: schema.getSelfClosingElements(),\r\n                blockElements: schema.getBlockElements()\r\n            }, {\r\n                nonEmpty: makeMap(schemaData.nonEmpty),\r\n                boolAttrs: makeMap(schemaData.boolAttrs),\r\n                whiteSpace: makeMap(schemaData.whiteSpace),\r\n                shortEnded: makeMap(schemaData.shortEnded),\r\n                selfClosing: makeMap(schemaData.selfClosing),\r\n                blockElements: makeMap(schemaData.blockElements)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         */\r\n        get: function (id) {\r\n            return tinyMCE3.get(id);\r\n        },\r\n\r\n        /**\r\n         * @return {String|null}\r\n         */\r\n        getId: function () {\r\n            return this.id || (this.activeEditor() ? this.activeEditor().id : null) || tinyMceEditors.values()[0].id;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        activeEditor: function () {\r\n            return tinyMCE3.activeEditor;\r\n        },\r\n\r\n        /**\r\n         * Insert content to active editor.\r\n         *\r\n         * @param {String} content\r\n         * @param {Boolean} ui\r\n         */\r\n        insertContent: function (content, ui) {\r\n            this.activeEditor().execCommand('mceInsertContent', typeof ui !== 'undefined' ? ui : false, content);\r\n        },\r\n\r\n        /**\r\n         * Set the status of the toolbar to disabled or enabled (true for enabled, false for disabled)\r\n         * @param {Boolean} enabled\r\n         */\r\n        setToolbarStatus: function (enabled) {\r\n            _.each(this.activeEditor().controlManager.controls, function (property, index, controls) {\r\n                controls[property.id].setDisabled(!enabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set the status of the editor and toolbar\r\n         *\r\n         * @param {Boolean} enabled\r\n         */\r\n        setEnabledStatus: function (enabled) {\r\n            if (this.activeEditor()) {\r\n                this.activeEditor().getBody().setAttribute('contenteditable', enabled);\r\n                this.activeEditor().readonly = !enabled;\r\n                this.setToolbarStatus(enabled);\r\n            }\r\n\r\n            if (enabled) {\r\n                this.getTextArea().removeProp('disabled');\r\n            } else {\r\n                this.getTextArea().prop('disabled', 'disabled');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set caret location in WYSIWYG editor.\r\n         *\r\n         * @param {Object} targetElement\r\n         */\r\n        setCaretOnElement: function (targetElement) {\r\n            this.activeEditor().selection.select(targetElement);\r\n            this.activeEditor().selection.collapse();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        openFileBrowser: function (o) {\r\n            var typeTitle = this.translate('Select Images'),\r\n                storeId = this.config['store_id'] !== null ? this.config['store_id'] : 0,\r\n                frameDialog = jQuery(o.win.frameElement).parents('[role=\"dialog\"]'),\r\n                wUrl = this.config['files_browser_window_url'] +\r\n                    'target_element_id/' + this.getId() + '/' +\r\n                    'store/' + storeId + '/';\r\n\r\n            this.mediaBrowserOpener = o.win;\r\n            this.mediaBrowserTargetElementId = o.field;\r\n\r\n            if (typeof o.type != 'undefined' && o.type != '') { //eslint-disable-line eqeqeq\r\n                wUrl = wUrl + 'type/' + o.type + '/';\r\n            }\r\n\r\n            frameDialog.hide();\r\n            jQuery('#mceModalBlocker').hide();\r\n\r\n            require(['mage/adminhtml/browser'], function () {\r\n                MediabrowserUtility.openDialog(wUrl, false, false, typeTitle, {\r\n                    /**\r\n                     * Closed.\r\n                     */\r\n                    closed: function () {\r\n                        frameDialog.show();\r\n                        jQuery('#mceModalBlocker').show();\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} string\r\n         * @return {String}\r\n         */\r\n        translate: function (string) {\r\n            return jQuery.mage.__ ? jQuery.mage.__(string) : string;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserOpener: function () {\r\n            return this.mediaBrowserOpener;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserTargetElementId: function () {\r\n            return this.mediaBrowserTargetElementId;\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        getToggleButton: function () {\r\n            return $('toggle' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * Get plugins button.\r\n         */\r\n        getPluginButtons: function () {\r\n            return jQuery('#buttons' + this.getId() + ' > button.plugin');\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOn: function (mode) {\r\n            this.closePopups();\r\n\r\n            this.setup(mode);\r\n\r\n            tinyMCE3.execCommand('mceAddControl', false, this.getId());\r\n\r\n            this.getPluginButtons().hide();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOff: function () {\r\n            this.closePopups();\r\n\r\n            tinyMCE3.execCommand('mceRemoveControl', false, this.getId());\r\n\r\n            this.getPluginButtons().show();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close popups.\r\n         */\r\n        closePopups: function () {\r\n            if (typeof closeEditorPopup == 'function') {\r\n                // close all popups to avoid problems with updating parent content area\r\n                closeEditorPopup('widget_window' + this.getId());\r\n                closeEditorPopup('browser_window' + this.getId());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        toggle: function () {\r\n            if (!tinyMCE3.get(this.getId())) {\r\n                this.turnOn();\r\n\r\n                return true;\r\n            }\r\n            this.turnOff();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Editor pre-initialise event handler.\r\n         */\r\n        onEditorPreInit: function (editor) {\r\n            this.applySchema(editor);\r\n        },\r\n\r\n        /**\r\n         * @deprecated\r\n         */\r\n        onEditorInit: function () {},\r\n\r\n        /**\r\n         * On form validation.\r\n         */\r\n        onFormValidation: function () {\r\n            if (tinyMCE3.get(this.getId())) {\r\n                $(this.getId()).value = tinyMCE3.get(this.getId()).getContent();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * On change content.\r\n         */\r\n        onChangeContent: function () {\r\n            // Add \"changed\" to tab class if it exists\r\n            var tab;\r\n\r\n            this.updateTextArea();\r\n\r\n            if (this.config['tab_id']) {\r\n                tab = $$('a[id$=' + this.config['tab_id'] + ']')[0];\r\n\r\n                if ($(tab) != undefined && $(tab).hasClassName('tab-item-link')) { //eslint-disable-line eqeqeq\r\n                    $(tab).addClassName('changed');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieve directives URL with substituted directive value.\r\n         *\r\n         * @param {String} directive\r\n         */\r\n        makeDirectiveUrl: function (directive) {\r\n            return this.config['directives_url']\r\n                .replace(/directive/, 'directive/___directive/' + directive)\r\n                .replace(/\\/$/, '');\r\n        },\r\n\r\n        /**\r\n         * Convert {{directive}} style attributes syntax to absolute URLs\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeDirectives: function (content) {\r\n            // collect all HTML tags with attributes that contain directives\r\n            return content.gsub(/<([a-z0-9\\-\\_]+[^>]+?)([a-z0-9\\-\\_]+=\"[^\"]*?\\{\\{.+?\\}\\}.*?\".*?)>/i, function (match) {\r\n                var attributesString = match[2],\r\n                    decodedDirectiveString;\r\n\r\n                // process tag attributes string\r\n                attributesString = attributesString.gsub(/([a-z0-9\\-\\_]+)=\"(.*?)(\\{\\{.+?\\}\\})(.*?)\"/i, function (m) {\r\n                    decodedDirectiveString = encodeURIComponent(Base64.mageEncode(m[3].replace(/&quot;/g, '\"')));\r\n\r\n                    return m[1] + '=\"' + m[2] + this.makeDirectiveUrl(decodedDirectiveString) + m[4] + '\"';\r\n                }.bind(this));\r\n\r\n                return '<' + match[1] + attributesString + '>';\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeWidgets: function (content) {\r\n            return content.gsub(/\\{\\{widget(.*?)\\}\\}/i, function (match) {\r\n                var attributes = this.parseAttributesString(match[1]),\r\n                    imageSrc,\r\n                    imageHtml;\r\n\r\n                if (attributes.type) {\r\n                    attributes.type = attributes.type.replace(/\\\\\\\\/g, '\\\\');\r\n                    imageSrc = this.config['widget_placeholders'][attributes.type];\r\n\r\n                    imageHtml = '<img';\r\n                    imageHtml += ' id=\"' + Base64.idEncode(match[0]) + '\"';\r\n                    imageHtml += ' src=\"' + imageSrc + '\"';\r\n                    imageHtml += ' title=\"' +\r\n                        match[0].replace(/\\{\\{/g, '{').replace(/\\}\\}/g, '}').replace(/\\\"/g, '&quot;') + '\"';\r\n                    imageHtml += '>';\r\n\r\n                    return imageHtml;\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Convert absolute URLs to {{directive}} style attributes syntax\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeDirectives: function (content) {\r\n            var directiveUrl = this.makeDirectiveUrl('%directive%').split('?')[0], // remove query string from directive\r\n                // escape special chars in directives url to use in regular expression\r\n                regexEscapedDirectiveUrl = directiveUrl.replace(/([$^.?*!+:=()\\[\\]{}|\\\\])/g, '\\\\$1'),\r\n                regexDirectiveUrl = regexEscapedDirectiveUrl\r\n                    .replace(\r\n                        '%directive%',\r\n                        '([a-zA-Z0-9,_-]+(?:%2[A-Z]|)+\\/?)(?:(?!\").)*'\r\n                    ) + '/?(\\\\\\\\?[^\"]*)?', // allow optional query string\r\n                reg = new RegExp(regexDirectiveUrl);\r\n\r\n            return content.gsub(reg, function (match) {\r\n                return Base64.mageDecode(decodeURIComponent(match[1]).replace(/\\/$/, '')).replace(/\"/g, '&quot;');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeWidgets: function (content) {\r\n            return content.gsub(/<img([^>]+id=\\\"[^>]+)>/i, function (match) {\r\n                var attributes = this.parseAttributesString(match[1]),\r\n                    widgetCode;\r\n\r\n                if (attributes.id) {\r\n                    widgetCode = Base64.idDecode(attributes.id);\r\n\r\n                    if (widgetCode.indexOf('{{widget') !== -1) {\r\n                        return widgetCode;\r\n                    }\r\n                }\r\n\r\n                return match[0];\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attributes\r\n         * @return {Object}\r\n         */\r\n        parseAttributesString: function (attributes) {\r\n            var result = {};\r\n\r\n            attributes.gsub(\r\n                /(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/,\r\n                function (match) {\r\n                    result[match[1]] = match[2];\r\n                }\r\n            );\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Update text area.\r\n         */\r\n        updateTextArea: function () {\r\n            var editor = tinyMCE3.get(this.getId()),\r\n                content;\r\n\r\n            if (!editor) {\r\n                return;\r\n            }\r\n\r\n            content = editor.getContent();\r\n            content = this.decodeContent(content);\r\n\r\n            this.getTextArea().val(content).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @return {Object} jQuery textarea element\r\n         */\r\n        getTextArea: function () {\r\n            return jQuery('#' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config['add_widgets']) {\r\n                result = this.decodeWidgets(result);\r\n                result = this.decodeDirectives(result);\r\n            } else if (this.config['add_directives']) {\r\n                result = this.decodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config['add_widgets']) {\r\n                result = this.encodeWidgets(this.decodeWidgets(result));\r\n                result = this.encodeDirectives(result);\r\n            } else if (this.config['add_directives']) {\r\n                result = this.encodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        beforeSetContent: function (o) {\r\n            o.content = this.encodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        saveContent: function (o) {\r\n            o.content = this.decodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getAdapterPrototype: function () {\r\n            return tinyMce3Wysiwyg;\r\n        }\r\n    };\r\n\r\n    return tinyMce3Wysiwyg.prototype;\r\n});\r\n","Magento_Tinymce3/wysiwyg/tiny_mce/plugins/magentovariable/editor_plugin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated use lib/web/mage/adminhtml/wysiwyg/tiny_mce/plugins/magentovariable/editor_plugin.js instead\r\n */\r\n/* global tinyMCE, tinymce, MagentovariablePlugin */\r\n/* eslint-disable strict */\r\ntinyMCE.addI18n({\r\n    en: {\r\n        magentovariable: {\r\n            'insert_variable': 'Insert Variable'\r\n        }\r\n    }\r\n});\r\n\r\n(function () {\r\n    tinymce.create('tinymce.plugins.MagentovariablePlugin', {\r\n        /**\r\n         * @param {tinymce.Editor} ed - Editor instance that the plugin is initialized in.\r\n         * @param {String} url - Absolute URL to where the plugin is located.\r\n         */\r\n        init: function (ed, url) {\r\n            ed.addCommand('mceMagentovariable', function () {\r\n                var pluginSettings = ed.settings.magentoPluginsOptions.get('magentovariable');\r\n\r\n                MagentovariablePlugin.setEditor(ed);\r\n                MagentovariablePlugin.loadChooser(pluginSettings.url, ed.settings.elements);\r\n            });\r\n\r\n            // Register Widget plugin button\r\n            ed.addButton('magentovariable', {\r\n                title: 'magentovariable.insert_variable',\r\n                cmd: 'mceMagentovariable',\r\n                image: url + '/img/icon.gif'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        getInfo: function () {\r\n            return {\r\n                longname: 'Magento Variable Manager Plugin for TinyMCE 3.x',\r\n                author: 'Magento Core Team',\r\n                authorurl: 'http://magentocommerce.com',\r\n                infourl: 'http://magentocommerce.com',\r\n                version: '1.0'\r\n            };\r\n        }\r\n    });\r\n\r\n    // Register plugin\r\n    tinymce.PluginManager.add('magentovariable', tinymce.plugins.MagentovariablePlugin);\r\n})();\r\n","Magento_Translation/js/i18n-config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    require.config({\r\n        config: {\r\n            'Magento_Ui/js/lib/knockout/bindings/i18n': {\r\n                inlineTranslation: true\r\n            }\r\n        }\r\n    });\r\n})();\r\n","Magento_Translation/js/mage-translation-dictionary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'text!js-translation.json'\r\n], function (dict) {\r\n    'use strict';\r\n\r\n    return JSON.parse(dict);\r\n});\r\n","Magento_TwoFactorAuth/js/change_provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'ko'\r\n], function (Component, ko) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        showChangeMethod: ko.observable(false),\r\n\r\n        providers: [],\r\n        switchIcon: '',\r\n\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/change_provider'\r\n        },\r\n\r\n        /**\r\n         * Get switch icon URL\r\n         * @returns {String}\r\n         */\r\n        getSwitchIconUrl: function () {\r\n            return this.switchIcon;\r\n        },\r\n\r\n        /**\r\n         * Show available alternative 2FA providers\r\n         */\r\n        displayChangeMethod: function () {\r\n            this.showChangeMethod(true);\r\n        },\r\n\r\n        /**\r\n         * Return a list of alternative providers\r\n         * @returns {Array}\r\n         */\r\n        getProviders: function () {\r\n            return this.providers;\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/error.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Display an error message\r\n         * @param {String} message\r\n         */\r\n        display: function (message) {\r\n            alert({\r\n                title: $.mage.__('Error'),\r\n                content: message\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_TwoFactorAuth/js/authy/auth.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/error',\r\n    'mage/translate'\r\n], function ($, ko, Component, error) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        selectedMethod: ko.observable(''),\r\n        waitingText: ko.observable(''),\r\n        success: ko.observable(false),\r\n        tokenCode: ko.observable(''),\r\n\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/authy/auth'\r\n        },\r\n\r\n        waitForOneTouchApprovalTimeout: 0,\r\n\r\n        postUrl: '',\r\n        tokenRequestUrl: '',\r\n        oneTouchUrl: '',\r\n        verifyOneTouchUrl: '',\r\n\r\n        /**\r\n         * Get auth post URL\r\n         * @returns {String}\r\n         */\r\n        getPostUrl: function () {\r\n            return this.postUrl;\r\n        },\r\n\r\n        /**\r\n         * Get token request URL\r\n         * @returns {String}\r\n         */\r\n        getTokenRequestUrl: function () {\r\n            return this.tokenRequestUrl;\r\n        },\r\n\r\n        /**\r\n         * Get one touch request URL\r\n         * @returns {String}\r\n         */\r\n        getOneTouchUrl: function () {\r\n            return this.oneTouchUrl;\r\n        },\r\n\r\n        /**\r\n         * Get one touch verification URL\r\n         * @returns {String}\r\n         */\r\n        getVerifyOneTouchUrl: function () {\r\n            return this.verifyOneTouchUrl;\r\n        },\r\n\r\n        /**\r\n         * Get success URL\r\n         * @returns {String}\r\n         */\r\n        getSuccessUrl: function () {\r\n            return this.successUrl;\r\n        },\r\n\r\n        /**\r\n         * Go to login page\r\n         */\r\n        login: function () {\r\n            this.success(true);\r\n            self.location.href = this.getSuccessUrl();\r\n        },\r\n\r\n        /**\r\n         * Stop onetouch approval background approval\r\n         */\r\n        stopWaitingOnetouchApproval: function () {\r\n            if (this.waitForOneTouchApprovalTimeout) {\r\n                window.clearTimeout(this.waitForOneTouchApprovalTimeout);\r\n                this.waitForOneTouchApprovalTimeout = 0;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Switch to authy code validation\r\n         * @param {String} via\r\n         */\r\n        runSendCode: function (via) {\r\n            var me = this;\r\n\r\n            this.selectedMethod('code');\r\n\r\n            if (via !== 'token') {\r\n                $.getJSON(\r\n                    this.getTokenRequestUrl() + '?via=' +\r\n                    via\r\n                )\r\n                    .fail(function () {\r\n                        error.display('There was an error trying to contact Authy services');\r\n                        me.switchAnotherMethod();\r\n                    });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Switch to authy token code validation\r\n         */\r\n        runSendCodeToken: function () {\r\n            this.runSendCode('token');\r\n        },\r\n\r\n        /**\r\n         * Switch to authy sms code validation\r\n         */\r\n        runSendCodeSms: function () {\r\n            this.runSendCode('sms');\r\n        },\r\n\r\n        /**\r\n         * Switch to authy call code validation\r\n         */\r\n        runSendCodeCall: function () {\r\n            this.runSendCode('call');\r\n        },\r\n\r\n        /**\r\n         * Switch to one touch validation\r\n         */\r\n        runOneTouch: function () {\r\n            var me = this;\r\n\r\n            this.selectedMethod('onetouch');\r\n            this.waitingText('Sending push notification...');\r\n            this.success(false);\r\n\r\n            this.stopWaitingOnetouchApproval();\r\n\r\n            $.getJSON(this.getOneTouchUrl())\r\n                .done(function () {\r\n                    me.waitForOneTouchApproval();\r\n                })\r\n                .fail(function () {\r\n                    error.display('There was an error trying to contact Authy services');\r\n                    me.switchAnotherMethod();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Start background one touch approval check\r\n         */\r\n        waitForOneTouchApproval: function () {\r\n            var me = this;\r\n\r\n            this.waitingText('Waiting for approval...');\r\n\r\n            $.getJSON(this.getVerifyOneTouchUrl())\r\n                .done(function (res) {\r\n                    if (res.status === 'retry') {\r\n                        me.waitForOneTouchApprovalTimeout = window.setTimeout(function () {\r\n                            me.waitForOneTouchApproval();\r\n                        }, 1000);\r\n                    } else if (res.status === 'expired') {\r\n                        error.display($.mage.__('Your request has been expired'));\r\n                        me.switchAnotherMethod();\r\n                    } else if (res.status === 'denied') {\r\n                        error.display($.mage.__('Your request has been rejected'));\r\n                        me.switchAnotherMethod();\r\n                    } else if (res.status === 'approved') {\r\n                        me.login();\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    error.display('There was an error trying to contact Authy services');\r\n                    this.switchAnotherMethod();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Switch back to method selection\r\n         */\r\n        switchAnotherMethod: function () {\r\n            this.selectedMethod('');\r\n            this.waitingText('');\r\n            this.success(false);\r\n        },\r\n\r\n        /**\r\n         * Verify authy code\r\n         */\r\n        verifyCode: function () {\r\n            var me = this;\r\n\r\n            this.waitingText('Please wait...');\r\n\r\n            $.post(this.getPostUrl(), {\r\n                'tfa_code': this.tokenCode\r\n            })\r\n                .done(function (res) {\r\n                    if (res.success) {\r\n                        me.login();\r\n                    } else {\r\n                        error.display(res.message);\r\n                        me.waitingText('');\r\n                        me.tokenCode('');\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    error.display('There was an internal error trying to verify your code');\r\n                });\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/authy/configure.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/authy/configure/registry'\r\n], function (ko, Component, registry) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        currentStep: registry.currentStep,\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/authy/configure'\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/authy/configure/register.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/error',\r\n    'Magento_TwoFactorAuth/js/authy/configure/registry',\r\n    'mage/translate'\r\n], function ($, ko, Component, error, registry) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        configurePostUrl: '',\r\n        countries: [],\r\n\r\n        country: ko.observable(''),\r\n        phone: ko.observable(''),\r\n        method: ko.observable(''),\r\n\r\n        waitText: ko.observable(''),\r\n\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/authy/configure/register'\r\n        },\r\n\r\n        /**\r\n         * Get configure POST url\r\n         * @returns {String}\r\n         */\r\n        getConfigurePostUrl: function () {\r\n            return this.configurePostUrl;\r\n        },\r\n\r\n        /**\r\n         * Get a list of available countries\r\n         * @returns {Array}\r\n         */\r\n        getCountries: function () {\r\n            return this.countries;\r\n        },\r\n\r\n        /**\r\n         * Go to next step\r\n         */\r\n        nextStep: function () {\r\n            registry.currentStep('verify');\r\n            window.setTimeout(function () {\r\n                registry.currentStep('register');\r\n            }, registry.secondsToExpire() * 1000);\r\n        },\r\n\r\n        /**\r\n         * Start Authy registration procedure\r\n         */\r\n        doRegister: function () {\r\n            var me = this;\r\n\r\n            this.waitText('Please wait...');\r\n            $.post(this.getConfigurePostUrl(), {\r\n                'tfa_country': this.country(),\r\n                'tfa_phone': this.phone(),\r\n                'tfa_method': this.method()\r\n\r\n            })\r\n                .done(function (res) {\r\n                    if (res.success) {\r\n                        registry.messageText(res.message);\r\n                        registry.secondsToExpire(res['seconds_to_expire']);\r\n                        me.nextStep();\r\n                    } else {\r\n                        error.display(res.message);\r\n                    }\r\n                    me.waitText('');\r\n                })\r\n                .fail(function () {\r\n                    error.display('There was an internal error trying to verify your code');\r\n                    me.waitText('');\r\n                });\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/authy/configure/registry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko'\r\n], function (ko) {\r\n    'use strict';\r\n\r\n    return {\r\n        currentStep: ko.observable('register'),\r\n        messageText: ko.observable(''),\r\n        secondsToExpire: ko.observable(0)\r\n    };\r\n});\r\n","Magento_TwoFactorAuth/js/authy/configure/verify.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/error',\r\n    'Magento_TwoFactorAuth/js/authy/configure/registry',\r\n    'mage/translate'\r\n], function ($, ko, Component, error, registry) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        verifyCode: ko.observable(''),\r\n        messageText: registry.messageText,\r\n        waitText: ko.observable(''),\r\n\r\n        verifyPostUrl: '',\r\n        successUrl: '',\r\n\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/authy/configure/verify'\r\n        },\r\n\r\n        /**\r\n         * Get verification post URL\r\n         * @returns {String}\r\n         */\r\n        getVerifyPostUrl: function () {\r\n            return this.verifyPostUrl;\r\n        },\r\n\r\n        /**\r\n         * Go to next step\r\n         */\r\n        nextStep: function () {\r\n            registry.currentStep('login');\r\n            self.location.href = this.successUrl;\r\n        },\r\n\r\n        /**\r\n         * Verify auth code\r\n         */\r\n        doVerify: function () {\r\n            var me = this;\r\n\r\n            this.waitText('Please wait...');\r\n            $.post(this.getVerifyPostUrl(), {\r\n                'tfa_verify': this.verifyCode()\r\n            })\r\n                .done(function (res) {\r\n                    if (res.success) {\r\n                        me.nextStep();\r\n                    } else {\r\n                        error.display(res.message);\r\n                    }\r\n                    me.waitText('');\r\n                })\r\n                .fail(function () {\r\n                    error.display('There was an internal error trying to verify your code');\r\n                    me.waitText('');\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Go to previous step to change phone number\r\n         */\r\n        changePhoneNumber: function () {\r\n            registry.currentStep('register');\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/duo/api.js":"/**\r\n * Duo Web SDK v2\r\n * Copyright 2017, Duo Security\r\n */\r\n\r\n/* eslint-disable */\r\n// jscs:disable\r\n\r\n(function (root, factory) {\r\n/* eslint-disable */\r\nif (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define([], factory);\r\n} else if (typeof module === 'object' && module.exports) {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like environments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory();\r\n} else {\r\n    // Browser globals (root is window)\r\n    var Duo = factory();\r\n    // If the Javascript was loaded via a script tag, attempt to autoload\r\n    // the frame.\r\n\r\n    Duo._onReady(Duo.init);\r\n\r\n    // Attach Duo to the `window` object\r\n    root.Duo = Duo;\r\n}\r\n}(this, function () {\r\n    var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\\|[A-Za-z0-9\\+\\/=]+\\|[A-Za-z0-9\\+\\/=]+$/;\r\n    var DUO_ERROR_FORMAT = /^ERR\\|[\\w\\s\\.\\(\\)]+$/;\r\n    var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\\|/;\r\n    var VALID_OPEN_WINDOW_DOMAINS = [\r\n      'duo.com',\r\n      'duosecurity.com',\r\n      'duomobile.s3-us-west-1.amazonaws.com'\r\n    ];\r\n\r\n    var iframeId = 'duo_iframe',\r\n      postAction = '',\r\n      postArgument = 'sig_response',\r\n      host,\r\n      sigRequest,\r\n      duoSig,\r\n      appSig,\r\n      iframe,\r\n      submitCallback;\r\n\r\n    function throwError(message, url) {\r\n        throw new Error(\r\n          'Duo Web SDK error: ' + message +\r\n          (url ? '\\n' + 'See ' + url + ' for more information' : '')\r\n        );\r\n    }\r\n\r\n    function hyphenize(str) {\r\n        return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();\r\n    }\r\n\r\n    // cross-browser data attributes\r\n    function getDataAttribute(element, name) {\r\n        if ('dataset' in element) {\r\n            return element.dataset[name];\r\n        }\r\n\r\n        return element.getAttribute('data-' + hyphenize(name));\r\n\r\n    }\r\n\r\n    // cross-browser event binding/unbinding\r\n    function on(context, event, fallbackEvent, callback) {\r\n        if ('addEventListener' in window) {\r\n            context.addEventListener(event, callback, false);\r\n        } else {\r\n            context.attachEvent(fallbackEvent, callback);\r\n        }\r\n    }\r\n\r\n    function off(context, event, fallbackEvent, callback) {\r\n        if ('removeEventListener' in window) {\r\n            context.removeEventListener(event, callback, false);\r\n        } else {\r\n            context.detachEvent(fallbackEvent, callback);\r\n        }\r\n    }\r\n\r\n    function onReady(callback) {\r\n        on(document, 'DOMContentLoaded', 'onreadystatechange', callback);\r\n    }\r\n\r\n    function offReady(callback) {\r\n        off(document, 'DOMContentLoaded', 'onreadystatechange', callback);\r\n    }\r\n\r\n    function onMessage(callback) {\r\n        on(window, 'message', 'onmessage', callback);\r\n    }\r\n\r\n    function offMessage(callback) {\r\n        off(window, 'message', 'onmessage', callback);\r\n    }\r\n\r\n    /**\r\n     * Parse the sig_request parameter, throwing errors if the token contains\r\n     * a server error or if the token is invalid.\r\n     *\r\n     * @param {String} sig Request token\r\n     */\r\n    function parseSigRequest(sig) {\r\n        if (!sig) {\r\n            // nothing to do\r\n            return;\r\n        }\r\n\r\n        // see if the token contains an error, throwing it if it does\r\n        if (sig.indexOf('ERR|') === 0) {\r\n            throwError(sig.split('|')[1]);\r\n        }\r\n\r\n        // validate the token\r\n        if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {\r\n            throwError(\r\n              'Duo was given a bad token.  This might indicate a configuration ' +\r\n              'problem with one of Duo\\'s client libraries.',\r\n              'https://www.duosecurity.com/docs/duoweb#first-steps'\r\n            );\r\n        }\r\n\r\n        var sigParts = sig.split(':');\r\n\r\n        // hang on to the token, and the parsed duo and app sigs\r\n        sigRequest = sig;\r\n        duoSig = sigParts[0];\r\n        appSig = sigParts[1];\r\n\r\n        return {\r\n            sigRequest: sig,\r\n            duoSig: sigParts[0],\r\n            appSig: sigParts[1]\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This function is set up to run when the DOM is ready, if the iframe was\r\n     * not available during `init`.\r\n     */\r\n    function onDOMReady() {\r\n        iframe = document.getElementById(iframeId);\r\n\r\n        if (!iframe) {\r\n            throw new Error(\r\n              'This page does not contain an iframe for Duo to use.' +\r\n              'Add an element like <iframe id=\"duo_iframe\"></iframe> ' +\r\n              'to this page.  ' +\r\n              'See https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe ' +\r\n              'for more information.'\r\n            );\r\n        }\r\n\r\n        // we've got an iframe, away we go!\r\n        ready();\r\n\r\n        // always clean up after yourself\r\n        offReady(onDOMReady);\r\n    }\r\n\r\n    /**\r\n     * Validate that a MessageEvent came from the Duo service, and that it\r\n     * is a properly formatted payload.\r\n     *\r\n     * The Google Chrome sign-in page injects some JS into pages that also\r\n     * make use of postMessage, so we need to do additional validation above\r\n     * and beyond the origin.\r\n     *\r\n     * @param {MessageEvent} event Message received via postMessage\r\n     */\r\n    function isDuoMessage(event) {\r\n        return Boolean(\r\n          event.origin === 'https://' + host &&\r\n          typeof event.data === 'string' &&\r\n          (\r\n            event.data.match(DUO_MESSAGE_FORMAT) ||\r\n            event.data.match(DUO_ERROR_FORMAT) ||\r\n            event.data.match(DUO_OPEN_WINDOW_FORMAT)\r\n          )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validate the request token and prepare for the iframe to become ready.\r\n     *\r\n     * All options below can be passed into an options hash to `Duo.init`, or\r\n     * specified on the iframe using `data-` attributes.\r\n     *\r\n     * Options specified using the options hash will take precedence over\r\n     * `data-` attributes.\r\n     *\r\n     * Example using options hash:\r\n     * ```javascript\r\n     * Duo.init({\r\n       *     iframe: \"some_other_id\",\r\n       *     host: \"api-main.duo.test\",\r\n       *     sig_request: \"...\",\r\n       *     post_action: \"/auth\",\r\n       *     post_argument: \"resp\"\r\n       * });\r\n     * ```\r\n     *\r\n     * Example using `data-` attributes:\r\n     * ```\r\n     * <iframe id=\"duo_iframe\"\r\n     *         data-host=\"api-main.duo.test\"\r\n     *         data-sig-request=\"...\"\r\n     *         data-post-action=\"/auth\"\r\n     *         data-post-argument=\"resp\"\r\n     *         >\r\n     * </iframe>\r\n     * ```\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.iframe                         The iframe, or id of an iframe to set up\r\n     * @param {String} options.host                           Hostname\r\n     * @param {String} options.sig_request                    Request token\r\n     * @param {String} [options.post_action='']               URL to POST back to after successful auth\r\n     * @param {String} [options.post_argument='sig_response'] Parameter name to use for response token\r\n     * @param {Function} [options.submit_callback]            If provided, duo will not submit the form instead execute\r\n     *                                                        the callback function with reference to the \"duo_form\" form object\r\n     *                                                        submit_callback can be used to prevent the webpage from reloading.\r\n     */\r\n    function init(options) {\r\n        if (options) {\r\n            if (options.host) {\r\n                host = options.host;\r\n            }\r\n\r\n            if (options.sig_request) {\r\n                parseSigRequest(options.sig_request);\r\n            }\r\n\r\n            if (options.post_action) {\r\n                postAction = options.post_action;\r\n            }\r\n\r\n            if (options.post_argument) {\r\n                postArgument = options.post_argument;\r\n            }\r\n\r\n            if (options.iframe) {\r\n                if (options.iframe.tagName) {\r\n                    iframe = options.iframe;\r\n                } else if (typeof options.iframe === 'string') {\r\n                    iframeId = options.iframe;\r\n                }\r\n            }\r\n\r\n            if (typeof options.submit_callback === 'function') {\r\n                submitCallback = options.submit_callback;\r\n            }\r\n        }\r\n\r\n        // if we were given an iframe, no need to wait for the rest of the DOM\r\n        if (iframe) {\r\n            ready();\r\n        } else {\r\n            // try to find the iframe in the DOM\r\n            iframe = document.getElementById(iframeId);\r\n\r\n            // iframe is in the DOM, away we go!\r\n            if (iframe) {\r\n                ready();\r\n            } else {\r\n                // wait until the DOM is ready, then try again\r\n                onReady(onDOMReady);\r\n            }\r\n        }\r\n\r\n        // always clean up after yourself!\r\n        offReady(init);\r\n    }\r\n\r\n    /**\r\n     * This function is called when a message was received from another domain\r\n     * using the `postMessage` API.  Check that the event came from the Duo\r\n     * service domain, and that the message is a properly formatted payload,\r\n     * then perform the post back to the primary service.\r\n     *\r\n     * @param event Event object (contains origin and data)\r\n     */\r\n    function onReceivedMessage(event) {\r\n        if (isDuoMessage(event)) {\r\n            if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {\r\n                var url = event.data.substring('DUO_OPEN_WINDOW|'.length);\r\n\r\n                if (isValidUrlToOpen(url)) {\r\n                    // Open the URL that comes after the DUO_WINDOW_OPEN token.\r\n                    window.open(url, '_self');\r\n                }\r\n            } else {\r\n                // the event came from duo, do the post back\r\n                doPostBack(event.data);\r\n\r\n                // always clean up after yourself!\r\n                offMessage(onReceivedMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate that this passed in URL is one that we will actually allow to\r\n     * be opened.\r\n     * @param url String URL that the message poster wants to open\r\n     * @returns {boolean} true if we allow this url to be opened in the window\r\n     */\r\n    function isValidUrlToOpen(url) {\r\n        if (!url) {\r\n            return false;\r\n        }\r\n\r\n        var parser = document.createElement('a');\r\n\r\n        parser.href = url;\r\n\r\n        if (parser.protocol === 'duotrustedendpoints:') {\r\n            return true;\r\n        } else if (parser.protocol !== 'https:') {\r\n            return false;\r\n        }\r\n\r\n        for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {\r\n            if (parser.hostname.endsWith('.' + VALID_OPEN_WINDOW_DOMAINS[i]) ||\r\n              parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Point the iframe at Duo, then wait for it to postMessage back to us.\r\n     */\r\n    function ready() {\r\n        if (!host) {\r\n            host = getDataAttribute(iframe, 'host');\r\n\r\n            if (!host) {\r\n                throwError(\r\n                  'No API hostname is given for Duo to use.  Be sure to pass ' +\r\n                  'a `host` parameter to Duo.init, or through the `data-host` ' +\r\n                  'attribute on the iframe element.',\r\n                  'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!duoSig || !appSig) {\r\n            parseSigRequest(getDataAttribute(iframe, 'sigRequest'));\r\n\r\n            if (!duoSig || !appSig) {\r\n                throwError(\r\n                  'No valid signed request is given.  Be sure to give the ' +\r\n                  '`sig_request` parameter to Duo.init, or use the ' +\r\n                  '`data-sig-request` attribute on the iframe element.',\r\n                  'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'\r\n                );\r\n            }\r\n        }\r\n\r\n        // if postAction/Argument are defaults, see if they are specified\r\n        // as data attributes on the iframe\r\n        if (postAction === '') {\r\n            postAction = getDataAttribute(iframe, 'postAction') || postAction;\r\n        }\r\n\r\n        if (postArgument === 'sig_response') {\r\n            postArgument = getDataAttribute(iframe, 'postArgument') || postArgument;\r\n        }\r\n\r\n        // point the iframe at Duo\r\n        iframe.src = [\r\n          'https://', host, '/frame/web/v1/auth?tx=', duoSig,\r\n          '&parent=', encodeURIComponent(document.location.href),\r\n          '&v=2.6'\r\n        ].join('');\r\n\r\n        // listen for the 'message' event\r\n        onMessage(onReceivedMessage);\r\n    }\r\n\r\n    /**\r\n     * We received a postMessage from Duo.  POST back to the primary service\r\n     * with the response token, and any additional user-supplied parameters\r\n     * given in form#duo_form.\r\n     */\r\n    function doPostBack(response) {\r\n        // create a hidden input to contain the response token\r\n        var input = document.createElement('input');\r\n\r\n        input.type = 'hidden';\r\n        input.name = postArgument;\r\n        input.value = response + ':' + appSig;\r\n\r\n        // user may supply their own form with additional inputs\r\n        var form = document.getElementById('duo_form');\r\n\r\n        // if the form doesn't exist, create one\r\n        if (!form) {\r\n            form = document.createElement('form');\r\n\r\n            // insert the new form after the iframe\r\n            iframe.parentElement.insertBefore(form, iframe.nextSibling);\r\n        }\r\n\r\n        // make sure we are actually posting to the right place\r\n        form.method = 'POST';\r\n        form.action = postAction;\r\n\r\n        // add the response token input to the form\r\n        form.appendChild(input);\r\n\r\n        // away we go!\r\n        if (typeof submitCallback === 'function') {\r\n            submitCallback.call(null, form);\r\n        } else {\r\n            form.submit();\r\n        }\r\n    }\r\n\r\n    return {\r\n        init: init,\r\n        _onReady: onReady,\r\n        _parseSigRequest: parseSigRequest,\r\n        _isDuoMessage: isDuoMessage,\r\n        _doPostBack: doPostBack\r\n    };\r\n}));\r\n\r\n/* eslint-enable */\r\n","Magento_TwoFactorAuth/js/duo/auth.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/duo/api'\r\n], function (ko, Component, duo) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        currentStep: ko.observable('register'),\r\n\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/duo/auth'\r\n        },\r\n\r\n        signature: '',\r\n        apiHost: '',\r\n        postUrl: '',\r\n        authenticateData: {},\r\n\r\n        /**\r\n         * Start waiting loop\r\n         */\r\n        onAfterRender: function () {\r\n            window.setTimeout(function () {\r\n                duo.init();\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Get POST URL\r\n         * @returns {String}\r\n         */\r\n        getPostUrl: function () {\r\n            return this.postUrl;\r\n        },\r\n\r\n        /**\r\n         * Get signature\r\n         * @returns {String}\r\n         */\r\n        getSignature: function () {\r\n            return this.signature;\r\n        },\r\n\r\n        /**\r\n         * Get API host\r\n         * @returns {String}\r\n         */\r\n        getApiHost: function () {\r\n            return this.apiHost;\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/form/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/provider'\r\n], function (Provider) {\r\n    'use strict';\r\n\r\n    return Provider.extend({\r\n        /**\r\n         * @see Magento_Ui/js/form/provider\r\n         * @returns {Element}\r\n         */\r\n        save: function () {\r\n            // Disable independent save (we have a parent form with own validation)\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/form/element/providers.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['Magento_Ui/js/form/element/abstract'], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        /**\r\n         * Get a list of forced providers\r\n         * @returns {Array}\r\n         */\r\n        getForcedProviders: function () {\r\n            //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            return this.forced_providers;\r\n        },\r\n\r\n        /**\r\n         * Get a list of enabled providers\r\n         * @returns {Array}\r\n         */\r\n        getEnabledProviders: function () {\r\n            //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            return this.enabled_providers;\r\n        },\r\n\r\n        /**\r\n         * Return true if a provider is selected\r\n         * @param {String} provider\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (provider) {\r\n            var i, providers = this.value();\r\n\r\n            for (i = 0; i < providers.length; i++) {\r\n                if (providers[i] === provider) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/form/element/reset_providers.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n  'Magento_Ui/js/form/element/abstract',\r\n  'Magento_Ui/js/modal/confirm'\r\n], function (Abstract, confirm) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        /**\r\n         * Get a list of providers with reset option\r\n         * @returns {Array}\r\n         */\r\n        getResetProviders: function () {\r\n            return this.source.data['reset_providers'] ? this.source.data['reset_providers'] : [];\r\n        },\r\n\r\n        /**\r\n         * Reset a provider\r\n         * @param {Object} item\r\n         */\r\n        resetProvider: function (item) {\r\n            confirm({\r\n                title: 'Confirm',\r\n                content: 'Are you sure you want to reset ' + item.label + ' provider?',\r\n                actions: {\r\n                    confirm: function () { // jscs:ignore jsDoc\r\n                        self.location.href = item.url;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/google/auth.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/error'\r\n], function ($, ko, Component, error) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        currentStep: ko.observable('register'),\r\n        waitText: ko.observable(''),\r\n        verifyCode: ko.observable(''),\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/google/auth'\r\n        },\r\n\r\n        qrCodeUrl: '',\r\n        postUrl: '',\r\n        successUrl: '',\r\n        secretCode: '',\r\n\r\n        /**\r\n         * Get QR code URL\r\n         * @returns {String}\r\n         */\r\n        getQrCodeUrl: function () {\r\n            return this.qrCodeUrl;\r\n        },\r\n\r\n        /**\r\n         * Get POST URL\r\n         * @returns {String}\r\n         */\r\n        getPostUrl: function () {\r\n            return this.postUrl;\r\n        },\r\n\r\n        /**\r\n         * Get plain Secret Code\r\n         * @returns {String}\r\n         */\r\n        getSecretCode: function () {\r\n            return this.secretCode;\r\n        },\r\n\r\n        /**\r\n         * Go to next step\r\n         */\r\n        nextStep: function () {\r\n            this.currentStep('login');\r\n            self.location.href = this.successUrl;\r\n        },\r\n\r\n        /**\r\n         * Verify auth code\r\n         */\r\n        doVerify: function () {\r\n            var me = this;\r\n\r\n            this.waitText('Please wait...');\r\n            $.post(this.getPostUrl(), {\r\n                'tfa_code': this.verifyCode()\r\n            })\r\n                .done(function (res) {\r\n                    if (res.success) {\r\n                        me.nextStep();\r\n                    } else {\r\n                        error.display(res.message);\r\n                        me.verifyCode('');\r\n                    }\r\n                    me.waitText('');\r\n                })\r\n                .fail(function () {\r\n                    error.display('There was an internal error trying to verify your code');\r\n                    me.waitText('');\r\n                });\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/system/config/providers.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/translate',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'domReady!'\r\n], function ($, $t, confirm) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n\r\n        var $element = $(element),\r\n            initialValue = $element.val();\r\n\r\n        element.on('blur', function () {\r\n            var currentValue = $element.val();\r\n\r\n            if (currentValue && currentValue.some(function (item) {\r\n                return initialValue.indexOf(item) !== -1;\r\n            })) {\r\n                return;\r\n            }\r\n\r\n            confirm({\r\n                title: config.modalTitleText,\r\n                content: config.modalContentBody,\r\n                buttons: [{\r\n                    text: $t('Cancel'),\r\n                    class: 'action-secondary action-dismiss',\r\n\r\n                    /**\r\n                     * Close modal and trigger 'cancel' action on click\r\n                     */\r\n                    click: function (event) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }, {\r\n                    text: $t('Confirm'),\r\n                    class: 'action-primary action-accept',\r\n\r\n                    /**\r\n                     * Close modal and trigger 'confirm' action on click\r\n                     */\r\n                    click: function (event) {\r\n                        this.closeModal(event, true);\r\n                    }\r\n                }],\r\n                actions: {\r\n\r\n                    /**\r\n                     * Revert back to original Enabled setting\r\n                     */\r\n                    cancel: function () {\r\n                        $element.val(initialValue);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    };\r\n});\r\n","Magento_TwoFactorAuth/js/u2fkey/auth.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/error',\r\n    'Magento_TwoFactorAuth/js/u2fkey/utils',\r\n    'mage/translate'\r\n], function ($, ko, Component, error, utils, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        currentStep: ko.observable('register'),\r\n\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/u2fkey/auth',\r\n            idle: ko.observable(true),\r\n            loading: ko.observable(false)\r\n        },\r\n\r\n        postUrl: '',\r\n        successUrl: '',\r\n        touchImageUrl: '',\r\n        authenticateData: {},\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function (config) {\r\n            this._super(config);\r\n            // eslint-disable-next-line no-undef\r\n            this.authenticateData.credentialRequestOptions.challenge = new Uint8Array(\r\n                this.authenticateData.credentialRequestOptions.challenge\r\n            );\r\n\r\n            this.authenticateData.credentialRequestOptions.allowCredentials =\r\n                this.authenticateData.credentialRequestOptions.allowCredentials.map(function (credential) {\r\n                    // eslint-disable-next-line no-undef\r\n                    credential.id = new Uint8Array(credential.id);\r\n\r\n                    return credential;\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start waiting loop\r\n         */\r\n        onAfterRender: function () {\r\n            this.waitForTouch();\r\n        },\r\n\r\n        /**\r\n         * Get touch image URL\r\n         * @returns {String}\r\n         */\r\n        getTouchImageUrl: function () {\r\n            return this.touchImageUrl;\r\n        },\r\n\r\n        /**\r\n         * Get POST URL\r\n         * @returns {String}\r\n         */\r\n        getPostUrl: function () {\r\n            return this.postUrl;\r\n        },\r\n\r\n        /**\r\n         * Get success URL\r\n         * @returns {String}\r\n         */\r\n        getSuccessUrl: function () {\r\n            return this.successUrl;\r\n        },\r\n\r\n        /**\r\n         * Wait for key touch\r\n         */\r\n        waitForTouch: function () {\r\n            this.idle(false);\r\n            navigator.credentials.get({\r\n                publicKey: this.authenticateData.credentialRequestOptions\r\n            })\r\n            .then(this._onCredentialSuccess.bind(this))\r\n            .catch(this._onCredentialError.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Handle WebAuthn success\r\n         *\r\n         * @param {Object} credentialData\r\n         * @returns void\r\n         * @private\r\n         */\r\n        _onCredentialSuccess: function (credentialData) {\r\n            utils.asyncUint8ArrayToUtf8String(\r\n                // eslint-disable-next-line no-undef\r\n                new Uint8Array(credentialData.response.clientDataJSON),\r\n                function (clientDataJSON) {\r\n                    credentialData.clientDataUtf8JSON = clientDataJSON;\r\n                    credentialData.clientData = JSON.parse(clientDataJSON);\r\n                    this._processCredentialData(credentialData);\r\n                }.bind(this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate and submit response from u2f key\r\n         *\r\n         * @param {Object} credentialData\r\n         * @private\r\n         */\r\n        _processCredentialData: function (credentialData) {\r\n            this.loading(true);\r\n            $.post(this.getPostUrl(), {\r\n                publicKeyCredential: {\r\n                    type: credentialData.type,\r\n                    id: utils.arrayBufferToBase64(credentialData.rawId),\r\n                    response: {\r\n                        authenticatorData: utils.arrayBufferToBase64(credentialData.response.authenticatorData),\r\n                        clientData: credentialData.clientData,\r\n                        clientDataJSON: credentialData.clientDataUtf8JSON,\r\n                        signature: utils.arrayBufferToBase64(credentialData.response.signature)\r\n                    }\r\n                }\r\n            })\r\n            .done(function (res) {\r\n                this.loading(false);\r\n\r\n                if (res.success) {\r\n                    this.currentStep('login');\r\n                    self.location.href = this.getSuccessUrl();\r\n                } else {\r\n                    error.display($t('Invalid key or key is not registered.'));\r\n                    this.idle(true);\r\n                }\r\n            }.bind(this))\r\n            .fail(function () {\r\n                error.display($t('Invalid key or key is not registered.'));\r\n                this.loading(false);\r\n                this.idle(true);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Handle WebAuthn failure\r\n         *\r\n         * @param {Object} u2fError\r\n         * @return void\r\n         * @private\r\n         */\r\n        _onCredentialError: function (u2fError) {\r\n            this.idle(true);\r\n\r\n            if (['AbortError', 'NS_ERROR_ABORT', 'NotAllowedError'].indexOf(u2fError.name) === -1) {\r\n                error.display($t('Unable to register your device'));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/u2fkey/configure.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'uiComponent',\r\n    'Magento_TwoFactorAuth/js/error',\r\n    'Magento_TwoFactorAuth/js/u2fkey/utils',\r\n    'mage/translate'\r\n], function ($, ko, Component, error, utils, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        currentStep: ko.observable('register'),\r\n\r\n        defaults: {\r\n            template: 'Magento_TwoFactorAuth/u2fkey/configure',\r\n            idle: ko.observable(true),\r\n            loading: ko.observable(false)\r\n        },\r\n\r\n        postUrl: '',\r\n        successUrl: '',\r\n        touchImageUrl: '',\r\n        registerData: {},\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function (config) {\r\n            this._super(config);\r\n            // eslint-disable-next-line no-undef\r\n            this.registerData.publicKey.challenge = new Uint8Array(this.registerData.publicKey.challenge);\r\n            // eslint-disable-next-line no-undef\r\n            this.registerData.publicKey.user.id = new Uint8Array(this.registerData.publicKey.user.id);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start waiting loop\r\n         */\r\n        onAfterRender: function () {\r\n            this.waitForTouch();\r\n        },\r\n\r\n        /**\r\n         * Get touch image URL\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTouchImageUrl: function () {\r\n            return this.touchImageUrl;\r\n        },\r\n\r\n        /**\r\n         * Get POST URL\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPostUrl: function () {\r\n            return this.postUrl;\r\n        },\r\n\r\n        /**\r\n         * Get success URL\r\n         * @returns {String}\r\n         */\r\n        getSuccessUrl: function () {\r\n            return this.successUrl;\r\n        },\r\n\r\n        /**\r\n         * Wait for key touch\r\n         */\r\n        waitForTouch: function () {\r\n            this.idle(false);\r\n            navigator.credentials.create({\r\n                publicKey: this.registerData.publicKey\r\n            })\r\n            .then(this._onCredentialSuccess.bind(this))\r\n            .catch(this._onCredentialError.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Handle WebAuthn success\r\n         *\r\n         * @param {Object} credentialData\r\n         * @returns void\r\n         * @private\r\n         */\r\n        _onCredentialSuccess: function (credentialData) {\r\n            utils.asyncUint8ArrayToUtf8String(\r\n                // eslint-disable-next-line no-undef\r\n                new Uint8Array(credentialData.response.clientDataJSON),\r\n                function (clientDataJSON) {\r\n                    credentialData.clientData = JSON.parse(clientDataJSON);\r\n                    this._processCredentialData(credentialData);\r\n                }.bind(this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate and submit response from u2f key\r\n         *\r\n         * @param {Object} credentialData\r\n         * @private\r\n         */\r\n        _processCredentialData: function (credentialData) {\r\n            this.loading(true);\r\n            $.post(this.getPostUrl(), {\r\n                publicKeyCredential: {\r\n                    id: utils.arrayBufferToBase64(credentialData.rawId),\r\n                    response: {\r\n                        clientData: credentialData.clientData,\r\n                        attestationObject: utils.arrayBufferToBase64(\r\n                            credentialData.response.attestationObject\r\n                        )\r\n                    }\r\n                }\r\n            })\r\n            .done(function (res) {\r\n                this.loading(false);\r\n\r\n                if (res.success) {\r\n                    this.currentStep('login');\r\n                    self.location.href = this.getSuccessUrl();\r\n                } else {\r\n                    error.display($t('There was an error processing your key.'));\r\n                    this.idle(true);\r\n                }\r\n            }.bind(this))\r\n            .fail(function () {\r\n                error.display($t('Unable to register your device'));\r\n                this.loading(false);\r\n                this.idle(true);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Handle WebAuthn failure\r\n         *\r\n         * @param {Object} u2fError\r\n         * @return void\r\n         * @private\r\n         */\r\n        _onCredentialError: function (u2fError) {\r\n            this.idle(true);\r\n\r\n            if (['AbortError', 'NS_ERROR_ABORT', 'NotAllowedError'].indexOf(u2fError.name) === -1) {\r\n                error.display($t('Unable to register your device'));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_TwoFactorAuth/js/u2fkey/utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @returns {self}\r\n         * @constructor\r\n         */\r\n        'Magento_TwoFactorAuth/js/u2fkey/utils': function () {\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Convert an array buffer to base64\r\n         *\r\n         * @param {ArrayBuffer} buffer\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        arrayBufferToBase64: function (buffer) {\r\n            var binary = '',\r\n                // eslint-disable-next-line no-undef\r\n                bytes = new Uint8Array(buffer),\r\n                len = bytes.byteLength,\r\n                i = 0;\r\n\r\n            for (i = 0; i < len; i++) {\r\n                binary += String.fromCharCode(bytes[i]);\r\n            }\r\n\r\n            return window.btoa(binary)\r\n                .replace(/\\-/g, '+')\r\n                .replace(/_/g, '/');\r\n        },\r\n\r\n        /**\r\n         * Convert a Uint8Array to a UTF-8 string using cross-browser safe methods\r\n         *\r\n         * @param {Uint8Array} uint8array\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        asyncUint8ArrayToUtf8String: function (uint8array, callback) {\r\n            var blob = new Blob([uint8array]),\r\n                fileReader = new FileReader();\r\n\r\n            /**\r\n             * Handle loaded\r\n             *\r\n             * @param {Event} e\r\n             */\r\n            fileReader.onload = function (e) {\r\n                callback(e.target.result);\r\n            };\r\n\r\n            fileReader.readAsText(blob);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/block-loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/knockout/template/loader',\r\n    'mage/template'\r\n], function (ko, $, templateLoader, template) {\r\n    'use strict';\r\n\r\n    var blockLoaderTemplatePath = 'ui/block-loader',\r\n        blockContentLoadingClass = '_block-content-loading',\r\n        blockLoader,\r\n        blockLoaderClass,\r\n        blockLoaderElement = $.Deferred(),\r\n        loaderImageHref = $.Deferred();\r\n\r\n    templateLoader.loadTemplate(blockLoaderTemplatePath).done(function (blockLoaderTemplate) {\r\n        loaderImageHref.done(function (loaderHref) {\r\n            blockLoader = template($.trim(blockLoaderTemplate), {\r\n                loaderImageHref: loaderHref\r\n            });\r\n            blockLoader = $(blockLoader);\r\n            blockLoaderClass = '.' + blockLoader.attr('class');\r\n            blockLoaderElement.resolve();\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Helper function to check if blockContentLoading class should be applied.\r\n     * @param {Object} element\r\n     * @returns {Boolean}\r\n     */\r\n    function isLoadingClassRequired(element) {\r\n        var position = element.css('position');\r\n\r\n        if (position === 'absolute' || position === 'fixed') {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add loader to block.\r\n     * @param {Object} element\r\n     */\r\n    function addBlockLoader(element) {\r\n        element.find(':focus').blur();\r\n        element.find('input:disabled, select:disabled').addClass('_disabled');\r\n        element.find('input, select').prop('disabled', true);\r\n\r\n        if (isLoadingClassRequired(element)) {\r\n            element.addClass(blockContentLoadingClass);\r\n        }\r\n        element.append(blockLoader.clone());\r\n    }\r\n\r\n    /**\r\n     * Remove loader from block.\r\n     * @param {Object} element\r\n     */\r\n    function removeBlockLoader(element) {\r\n        if (!element.has(blockLoaderClass).length) {\r\n            return;\r\n        }\r\n        element.find(blockLoaderClass).remove();\r\n        element.find('input:not(\"._disabled\"), select:not(\"._disabled\")').prop('disabled', false);\r\n        element.find('input:disabled, select:disabled').removeClass('_disabled');\r\n        element.removeClass(blockContentLoadingClass);\r\n    }\r\n\r\n    return function (loaderHref) {\r\n        loaderImageHref.resolve(loaderHref);\r\n        ko.bindingHandlers.blockLoader = {\r\n            /**\r\n             * Process loader for block\r\n             * @param {String} element\r\n             * @param {Boolean} displayBlockLoader\r\n             */\r\n            update: function (element, displayBlockLoader) {\r\n                element = $(element);\r\n\r\n                if (ko.unwrap(displayBlockLoader())) {\r\n                    blockLoaderElement.done(addBlockLoader(element));\r\n                } else {\r\n                    blockLoaderElement.done(removeBlockLoader(element));\r\n                }\r\n            }\r\n        };\r\n    };\r\n});\r\n","Magento_Ui/js/core/app.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    './renderer/types',\r\n    './renderer/layout',\r\n    '../lib/knockout/bootstrap'\r\n], function (types, layout) {\r\n    'use strict';\r\n\r\n    return function (data, merge) {\r\n        types.set(data.types);\r\n        layout(data.components, undefined, true, merge);\r\n    };\r\n});\r\n","Magento_Ui/js/core/renderer/layout.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './types',\r\n    '../../lib/logger/console-logger'\r\n], function (_, $, utils, registry, types, consoleLogger) {\r\n    'use strict';\r\n\r\n    var templates = registry.create(),\r\n        layout = {},\r\n        cachedConfig = {};\r\n\r\n    /**\r\n     * Build name from parent name and node name\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @param {String} [name]\r\n     * @returns {String}\r\n     */\r\n    function getNodeName(parent, node, name) {\r\n        var parentName = parent && parent.name;\r\n\r\n        if (typeof name !== 'string') {\r\n            name = node.name || name;\r\n        }\r\n\r\n        return utils.fullPath(parentName, name);\r\n    }\r\n\r\n    /**\r\n     * Get node type from node or parent.\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @returns {String}\r\n     */\r\n    function getNodeType(parent, node) {\r\n        return node.type || parent && parent.childType;\r\n    }\r\n\r\n    /**\r\n     * Get data scope based on parent data scope and node data scope.\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @returns {String}\r\n     */\r\n    function getDataScope(parent, node) {\r\n        var dataScope = node.dataScope,\r\n            parentScope = parent && parent.dataScope;\r\n\r\n        return !utils.isEmpty(parentScope) ?\r\n            !utils.isEmpty(dataScope) ?\r\n                parentScope + '.' + dataScope :\r\n                parentScope :\r\n            dataScope || '';\r\n    }\r\n\r\n    /**\r\n     * Load node dependencies on other instances.\r\n     *\r\n     * @param {Object} node\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function loadDeps(node) {\r\n        var loaded = $.Deferred(),\r\n            loggerUtils = consoleLogger.utils;\r\n\r\n        if (node.deps) {\r\n            consoleLogger.utils.asyncLog(\r\n                loaded,\r\n                {\r\n                    data: {\r\n                        component: node.name,\r\n                        deps: node.deps\r\n                    },\r\n                    messages: loggerUtils.createMessages(\r\n                        'depsStartRequesting',\r\n                        'depsFinishRequesting',\r\n                        'depsLoadingFail'\r\n                    )\r\n                }\r\n            );\r\n        }\r\n\r\n        registry.get(node.deps, function (deps) {\r\n            node.provider = node.extendProvider ? deps && deps.name : node.provider;\r\n            loaded.resolve(node);\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    /**\r\n     * Load node component file via requirejs.\r\n     *\r\n     * @param {Object} node\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function loadSource(node) {\r\n        var loaded = $.Deferred(),\r\n            source = node.component;\r\n\r\n        consoleLogger.info('componentStartLoading', {\r\n            component: node.component\r\n        });\r\n\r\n        require([source], function (constr) {\r\n            consoleLogger.info('componentFinishLoading', {\r\n                component: node.component\r\n            });\r\n            loaded.resolve(node, constr);\r\n        }, function () {\r\n            consoleLogger.error('componentLoadingFail', {\r\n                component: node.component\r\n            });\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    /**\r\n     * Create a new component instance and set it to the registry.\r\n     *\r\n     * @param {Object} node\r\n     * @param {Function} Constr\r\n     */\r\n    function initComponent(node, Constr) {\r\n        var component = new Constr(_.omit(node, 'children'));\r\n\r\n        consoleLogger.info('componentStartInitialization', {\r\n            component: node.component,\r\n            componentName: node.name\r\n        });\r\n\r\n        registry.set(node.name, component);\r\n    }\r\n\r\n    /**\r\n     * Application entry point.\r\n     *\r\n     * @param {Object} nodes\r\n     * @param {Object} parent\r\n     * @param {Boolean} cached\r\n     * @param {Boolean} merge\r\n     * @returns {Boolean|undefined}\r\n     */\r\n    function run(nodes, parent, cached, merge) {\r\n        if (_.isBoolean(merge) && merge) {\r\n            layout.merge(nodes);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (cached) {\r\n            cachedConfig[_.keys(nodes)[0]] = JSON.parse(JSON.stringify(nodes));\r\n        }\r\n\r\n        _.each(nodes || [], layout.iterator.bind(layout, parent));\r\n    }\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Determines if node ready to be added or process it.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object|String} node\r\n         */\r\n        iterator: function (parent, node) {\r\n            var action = _.isString(node) ?\r\n                this.addChild :\r\n                this.process;\r\n\r\n            action.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Prepare component.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Object}\r\n         */\r\n        process: function (parent, node, name) {\r\n            if (!parent && node.parent) {\r\n                return this.waitParent(node, name);\r\n            }\r\n\r\n            if (node.nodeTemplate) {\r\n                return this.waitTemplate.apply(this, arguments);\r\n            }\r\n\r\n            node = this.build.apply(this, arguments);\r\n\r\n            if (!registry.has(node.name)) {\r\n                this.addChild(parent, node)\r\n                    .manipulate(node)\r\n                    .initComponent(node);\r\n            }\r\n\r\n            if (node) {\r\n                run(node.children, node);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Detailed processing of component config.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Boolean|Object}\r\n         */\r\n        build: function (parent, node, name) {\r\n            var defaults    = parent && parent.childDefaults || {},\r\n                children    = this.filterDisabledChildren(node.children),\r\n                type        = getNodeType(parent, node),\r\n                dataScope   = getDataScope(parent, node),\r\n                component,\r\n                extendDeps  = true,\r\n                nodeName;\r\n\r\n            node.children = false;\r\n            node.extendProvider = true;\r\n\r\n            if (node.config && node.config.provider || node.provider) {\r\n                node.extendProvider = false;\r\n            }\r\n\r\n            if (node.config && node.config.deps || node.deps) {\r\n                extendDeps = false;\r\n            }\r\n\r\n            node = utils.extend({\r\n            }, types.get(type), defaults, node);\r\n\r\n            nodeName = getNodeName(parent, node, name);\r\n\r\n            if (registry.has(nodeName)) {\r\n                component = registry.get(nodeName);\r\n                component.children = children;\r\n\r\n                return component;\r\n            }\r\n\r\n            if (extendDeps && parent && parent.deps && type) {\r\n                node.deps = parent.deps;\r\n            }\r\n\r\n            _.extend(node, node.config || {}, {\r\n                index: node.name || name,\r\n                name: nodeName,\r\n                dataScope: dataScope,\r\n                parentName: utils.getPart(nodeName, -2),\r\n                parentScope: utils.getPart(dataScope, -2)\r\n            });\r\n\r\n            node.children = children;\r\n            node.componentType = node.type;\r\n\r\n            delete node.type;\r\n            delete node.config;\r\n\r\n            if (children) {\r\n                node.initChildCount = _.size(children);\r\n            }\r\n\r\n            if (node.isTemplate) {\r\n                node.isTemplate = false;\r\n\r\n                templates.set(node.name, node);\r\n                registry.get(node.parentName, function (parentComp) {\r\n                    parentComp.childTemplate = node;\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            if (node.componentDisabled === true) {\r\n                return false;\r\n            }\r\n\r\n            return node;\r\n        },\r\n\r\n        /**\r\n         * Filter out all disabled components.\r\n         *\r\n         * @param {Object} children\r\n         * @returns {*}\r\n         */\r\n        filterDisabledChildren: function (children) {\r\n            var cIds;\r\n\r\n            //cleanup children config.componentDisabled = true\r\n            if (children && typeof children === 'object') {\r\n                cIds = Object.keys(children);\r\n\r\n                if (cIds) {\r\n                    _.each(cIds, function (cId) {\r\n                        if (typeof children[cId] === 'object' &&\r\n                            children[cId].hasOwnProperty('config') &&\r\n                            typeof children[cId].config === 'object' &&\r\n                            children[cId].config.hasOwnProperty('componentDisabled') &&\r\n                            children[cId].config.componentDisabled === true) {\r\n                            delete children[cId];\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return children;\r\n        },\r\n\r\n        /**\r\n         * Init component.\r\n         *\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        initComponent: function (node) {\r\n            if (!node.component) {\r\n                return this;\r\n            }\r\n\r\n            loadDeps(node)\r\n                .then(loadSource)\r\n                .done(initComponent);\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Loading component marked as isTemplate.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        waitTemplate: function (parent, node) {\r\n            var args = _.toArray(arguments);\r\n\r\n            templates.get(node.nodeTemplate, function () {\r\n                this.applyTemplate.apply(this, args);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Waiting for parent component and process provided component.\r\n         *\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Object}\r\n         */\r\n        waitParent: function (node, name) {\r\n            var process = this.process.bind(this);\r\n\r\n            registry.get(node.parent, function (parent) {\r\n                process(parent, node, name);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processing component marked as isTemplate.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         */\r\n        applyTemplate: function (parent, node, name) {\r\n            var template = templates.get(node.nodeTemplate);\r\n\r\n            node = utils.extend({}, template, node);\r\n\r\n            delete node.nodeTemplate;\r\n\r\n            this.process(parent, node, name);\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Determines inserting strategy.\r\n         *\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        manipulate: function (node) {\r\n            var name = node.name;\r\n\r\n            if (node.appendTo) {\r\n                this.insert(name, node.appendTo, -1);\r\n            }\r\n\r\n            if (node.prependTo) {\r\n                this.insert(name, node.prependTo, 0);\r\n            }\r\n\r\n            if (node.insertTo) {\r\n                this.insertTo(name, node.insertTo);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Insert component to provide target and position.\r\n         *\r\n         * @param {Object|String} item\r\n         * @param {Object} target\r\n         * @param {Number} position\r\n         * @returns {Object}\r\n         */\r\n        insert: function (item, target, position) {\r\n            registry.get(target, function (container) {\r\n                container.insertChild(item, position);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Insert component into multiple targets.\r\n         *\r\n         * @param {Object} item\r\n         * @param {Array} targets\r\n         * @returns {Object}\r\n         */\r\n        insertTo: function (item, targets) {\r\n            _.each(targets, function (info, target) {\r\n                this.insert(item, target, info.position);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add provided child to parent.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object|String} child\r\n         * @returns {Object}\r\n         */\r\n        addChild: function (parent, child) {\r\n            var name;\r\n\r\n            if (parent && parent.component) {\r\n                name = child.name || child;\r\n\r\n                this.insert(name, parent.name, child.sortOrder);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Merge components configuration with cached configuration.\r\n         *\r\n         * @param {Array} components\r\n         */\r\n        merge: function (components) {\r\n            var cachedKey = _.keys(components)[0],\r\n                compared = utils.compare(cachedConfig[cachedKey], components),\r\n                remove = this.filterComponents(this.getByProperty(compared.changes, 'type', 'remove'), true),\r\n                update = this.getByProperty(compared.changes, 'type', 'update'),\r\n                dataSources = this.getDataSources(components),\r\n                names, index, name, component;\r\n\r\n            _.each(dataSources, function (val, key) {\r\n                name = key.replace(/\\.children|\\.config/g, '');\r\n                component = registry.get(name);\r\n\r\n                component.cacheData();\r\n                component.updateConfig(\r\n                    true,\r\n                    this.getFullConfig(key, components),\r\n                    this.getFullConfig(key, cachedConfig[cachedKey])\r\n                );\r\n            }, this);\r\n\r\n            _.each(remove, function (val) {\r\n                component = registry.get(val.path);\r\n\r\n                if (component) {\r\n                    component.destroy();\r\n                }\r\n            });\r\n\r\n            update = _.compact(_.filter(update, function (val) {\r\n                return !_.isEqual(val.oldValue, val.value);\r\n            }));\r\n\r\n            _.each(update, function (val) {\r\n                names = val.path.split('.');\r\n                index = Math.max(_.lastIndexOf(names, 'config'), _.lastIndexOf(names, 'children') + 2);\r\n                name = _.without(names.splice(0, index), 'children', 'config').join('.');\r\n                component = registry.get(name);\r\n\r\n                if (val.name === 'sortOrder' && component) {\r\n                    registry.get(component.parentName).insertChild(component, val.value);\r\n                } else if (component) {\r\n                    component.updateConfig(\r\n                        val.oldValue,\r\n                        val.value,\r\n                        val.path\r\n                    );\r\n                }\r\n            }, this);\r\n\r\n            run(components, undefined, true);\r\n        },\r\n\r\n        /**\r\n         * Recursive dataSource assignment.\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} parentPath\r\n         * @returns {Object}\r\n         */\r\n        getDataSources: function (config, parentPath) {\r\n            var dataSources = {},\r\n                key, obj;\r\n\r\n            /* eslint-disable no-loop-func, max-depth */\r\n            for (key in config) {\r\n                if (config.hasOwnProperty(key)) {\r\n                    if (\r\n                        key === 'type' &&\r\n                        config[key] === 'dataSource' &&\r\n                        config.hasOwnProperty('config')\r\n                    ) {\r\n                        dataSources[parentPath + '.config'] = config.config;\r\n                    } else if (_.isObject(config[key])) {\r\n                        obj = this.getDataSources(config[key], utils.fullPath(parentPath, key));\r\n\r\n                        _.each(obj, function (value, path) {\r\n                            dataSources[path] = value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* eslint-enable no-loop-func, max-depth */\r\n\r\n            return dataSources;\r\n        },\r\n\r\n        /**\r\n         * Configuration getter.\r\n         *\r\n         * @param {String} path\r\n         * @param {Object} config\r\n         * @returns {Boolean|Object}\r\n         */\r\n        getFullConfig: function (path, config) {\r\n            var index;\r\n\r\n            path = path.split('.');\r\n            index = _.lastIndexOf(path, 'config');\r\n\r\n            if (!~index) {\r\n                return false;\r\n            }\r\n            path = path.splice(0, index);\r\n\r\n            _.each(path, function (val) {\r\n                config = config[val];\r\n            });\r\n\r\n            return config.config;\r\n        },\r\n\r\n        /**\r\n         * Filter data by property and value.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} prop\r\n         * @param {*} propValue\r\n         */\r\n        getByProperty: function (data, prop, propValue) {\r\n            return _.filter(data, function (value) {\r\n                return value[prop] === propValue;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Filter components.\r\n         *\r\n         * @param {Array} data\r\n         * @param {Boolean} splitPath\r\n         * @param {Number} index\r\n         * @param {String} separator\r\n         * @param {String} keyName\r\n         * @returns {Array}\r\n         */\r\n        filterComponents: function (data, splitPath, index, separator, keyName) {\r\n            var result = [],\r\n                names, length;\r\n\r\n            index = -2;\r\n            separator = '.' || separator;\r\n            keyName = 'children' || keyName;\r\n\r\n            _.each(data, function (val) {\r\n                names = val.path.split(separator);\r\n                length  = names.length;\r\n\r\n                if (names[length + index] === keyName) {\r\n                    val.path = splitPath ? _.without(names, keyName).join(separator) : val.path;\r\n                    result.push(val);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return run;\r\n});\r\n","Magento_Ui/js/core/renderer/types.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var store = {};\r\n\r\n    /**\r\n     * Flatten a nested data.\r\n     *\r\n     * @param {Object} data\r\n     * @returns {Object}\r\n     */\r\n    function flatten(data) {\r\n        var extender = data.extends || [],\r\n            result = {};\r\n\r\n        extender = utils.stringToArray(extender);\r\n\r\n        extender.push(data);\r\n\r\n        extender.forEach(function (item) {\r\n            if (_.isString(item)) {\r\n                item = store[item] || {};\r\n            }\r\n\r\n            utils.extend(result, item);\r\n        });\r\n\r\n        delete result.extends;\r\n\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Set types to store object.\r\n         *\r\n         * @param {Object} types\r\n         */\r\n        set: function (types) {\r\n            types = types || {};\r\n\r\n            utils.extend(store, types);\r\n\r\n            _.each(types, function (data, type) {\r\n                store[type] = flatten(data);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get type from store object.\r\n         *\r\n         * @param {String} type\r\n         * @returns {*|{}}\r\n         */\r\n        get: function (type) {\r\n            return store[type] || {};\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/dynamic-rows/action-delete.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            links: {\r\n                value: false\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delete record handler.\r\n         *\r\n         * @param {Number} index\r\n         * @param {Number} id\r\n         */\r\n        deleteRecord: function (index, id) {\r\n            this.bubble('deleteRecord', index, id);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/dynamic-rows/dnd.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'uiElement',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (ko, $, _, Element) {\r\n    'use strict';\r\n\r\n    var transformProp;\r\n\r\n    /**\r\n     * Get element context\r\n     */\r\n    function getContext(elem) {\r\n        return ko.contextFor(elem);\r\n    }\r\n\r\n    /**\r\n     * Defines supported css 'transform' property.\r\n     *\r\n     * @returns {String|Undefined}\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.createElement('div').style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform !== 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] !== 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            separatorsClass: {\r\n                top: '_dragover-top',\r\n                bottom: '_dragover-bottom'\r\n            },\r\n            step: 'auto',\r\n            tableClass: 'table.admin__dynamic-rows',\r\n            recordsCache: [],\r\n            draggableElement: {},\r\n            draggableElementClass: '_dragged',\r\n            elemPositions: [],\r\n            listens: {\r\n                '${ $.recordsProvider }:elems': 'setCacheRecords'\r\n            },\r\n            modules: {\r\n                parentComponent: '${ $.recordsProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize component\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'mousemoveHandler',\r\n                'mouseupHandler'\r\n            );\r\n\r\n            this._super()\r\n                .body = $('body');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'recordsCache'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init listens to start drag\r\n         *\r\n         * @param {Object} elem - DOM element\r\n         * @param {Object} data - element data\r\n         */\r\n        initListeners: function (elem, data) {\r\n            $(elem).on('mousedown touchstart', this.mousedownHandler.bind(this, data, elem));\r\n        },\r\n\r\n        /**\r\n         * Mouse down handler\r\n         *\r\n         * @param {Object} data - element data\r\n         * @param {Object} elem - element\r\n         * @param {Object} event - key down event\r\n         */\r\n        mousedownHandler: function (data, elem, event) {\r\n            var recordNode = this.getRecordNode(elem),\r\n                originRecord = $(elem).parents('tr').eq(0),\r\n                drEl = this.draggableElement,\r\n                $table = $(elem).parents('table').eq(0),\r\n                $tableWrapper = $table.parent();\r\n\r\n            this.disableScroll();\r\n            $(recordNode).addClass(this.draggableElementClass);\r\n            $(originRecord).addClass(this.draggableElementClass);\r\n            this.step = this.step === 'auto' ? originRecord.height() / 2 : this.step;\r\n            drEl.originRow = originRecord;\r\n            drEl.instance = recordNode = this.processingStyles(recordNode, elem);\r\n            drEl.instanceCtx = this.getRecord(originRecord[0]);\r\n            drEl.eventMousedownY = this.getPageY(event);\r\n            drEl.minYpos =\r\n                $table.offset().top - originRecord.offset().top + $table.children('thead').outerHeight();\r\n            drEl.maxYpos = drEl.minYpos + $table.children('tbody').outerHeight() - originRecord.outerHeight();\r\n            $tableWrapper.append(recordNode);\r\n            this.body.bind('mousemove touchmove', this.mousemoveHandler);\r\n            this.body.bind('mouseup touchend', this.mouseupHandler);\r\n        },\r\n\r\n        /**\r\n         * Mouse move handler\r\n         *\r\n         * @param {Object} event - mouse move event\r\n         */\r\n        mousemoveHandler: function (event) {\r\n            var depEl = this.draggableElement,\r\n                pageY = this.getPageY(event),\r\n                positionY = pageY - depEl.eventMousedownY,\r\n                processingPositionY = positionY + 'px',\r\n                processingMaxYpos = depEl.maxYpos + 'px',\r\n                processingMinYpos = depEl.minYpos + 'px',\r\n                depElement = this.getDepElement(depEl.instance, positionY, depEl.originRow);\r\n\r\n            if (depElement) {\r\n                depEl.depElement ? depEl.depElement.elem.removeClass(depEl.depElement.className) : false;\r\n                depEl.depElement = depElement;\r\n                depEl.depElement.insert !== 'none' ? depEl.depElement.elem.addClass(depElement.className) : false;\r\n            } else if (depEl.depElement && depEl.depElement.insert !== 'none') {\r\n                depEl.depElement.elem.removeClass(depEl.depElement.className);\r\n                depEl.depElement.insert = 'none';\r\n            }\r\n\r\n            if (positionY > depEl.minYpos && positionY < depEl.maxYpos) {\r\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingPositionY + ')';\r\n            } else if (positionY < depEl.minYpos) {\r\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingMinYpos + ')';\r\n            } else if (positionY >= depEl.maxYpos) {\r\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingMaxYpos + ')';\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Mouse up handler\r\n         */\r\n        mouseupHandler: function (event) {\r\n            var depElementCtx,\r\n                drEl = this.draggableElement,\r\n                pageY = this.getPageY(event),\r\n                positionY = pageY - drEl.eventMousedownY;\r\n\r\n            this.enableScroll();\r\n            drEl.depElement = this.getDepElement(drEl.instance, positionY, this.draggableElement.originRow);\r\n\r\n            drEl.instance.remove();\r\n\r\n            if (drEl.depElement) {\r\n                depElementCtx = this.getRecord(drEl.depElement.elem[0]);\r\n                drEl.depElement.elem.removeClass(drEl.depElement.className);\r\n\r\n                if (drEl.depElement.insert !== 'none') {\r\n                    this.setPosition(drEl.depElement.elem, depElementCtx, drEl);\r\n                }\r\n            }\r\n\r\n            drEl.originRow.removeClass(this.draggableElementClass);\r\n\r\n            this.body.unbind('mousemove touchmove', this.mousemoveHandler);\r\n            this.body.unbind('mouseup touchend', this.mouseupHandler);\r\n\r\n            this.draggableElement = {};\r\n        },\r\n\r\n        /**\r\n         * Set position to element\r\n         *\r\n         * @param {Object} depElem - dep element\r\n         * @param {Object} depElementCtx - dep element context\r\n         * @param {Object} dragData - data draggable element\r\n         */\r\n        setPosition: function (depElem, depElementCtx, dragData) {\r\n            var depElemPosition = ~~depElementCtx.position;\r\n\r\n            if (dragData.depElement.insert === 'after') {\r\n                dragData.instanceCtx.position = depElemPosition + 1;\r\n            } else if (dragData.depElement.insert === 'before') {\r\n                dragData.instanceCtx.position = depElemPosition;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get dependency element\r\n         *\r\n         * @param {Object} curInstance - current element instance\r\n         * @param {Number} position\r\n         * @param {Object} row\r\n         */\r\n        getDepElement: function (curInstance, position, row) {\r\n            var tableSelector = this.tableClass + ' tr',\r\n                $table = $(row).parents('table').eq(0),\r\n                $curInstance = $(curInstance),\r\n                recordsCollection = $table.find('table').length ?\r\n                    $table.find('tbody > tr').filter(function (index, elem) {\r\n                        return !$(elem).parents(tableSelector).length;\r\n                    }) :\r\n                    $table.find('tbody > tr'),\r\n                curInstancePositionTop = $curInstance.position().top,\r\n                curInstancePositionBottom = curInstancePositionTop + $curInstance.height();\r\n\r\n            if (position < 0) {\r\n                return this._getDepElement(recordsCollection, 'before', curInstancePositionTop);\r\n            } else if (position > 0) {\r\n                return this._getDepElement(recordsCollection, 'after', curInstancePositionBottom);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get dependency element private\r\n         *\r\n         * @param {Array} collection - record collection\r\n         * @param {String} position - position to add\r\n         * @param {Number} dragPosition - position drag element\r\n         */\r\n        _getDepElement: function (collection, position, dragPosition) {\r\n            var rec,\r\n                rangeEnd,\r\n                rangeStart,\r\n                result,\r\n                className,\r\n                i = 0,\r\n                length = collection.length;\r\n\r\n            for (i; i < length; i++) {\r\n                rec = collection.eq(i);\r\n\r\n                if (position === 'before') {\r\n                    rangeStart = collection.eq(i).position().top - this.step;\r\n                    rangeEnd = rangeStart + this.step * 2;\r\n                    className = this.separatorsClass.top;\r\n                } else if (position === 'after') {\r\n                    rangeEnd = rec.position().top + rec.height() + this.step;\r\n                    rangeStart = rangeEnd - this.step * 2;\r\n                    className = this.separatorsClass.bottom;\r\n                }\r\n\r\n                if (dragPosition > rangeStart && dragPosition < rangeEnd) {\r\n                    result = {\r\n                        elem: rec,\r\n                        insert: rec[0] === this.draggableElement.originRow[0] ? 'none' : position,\r\n                        className: className\r\n                    };\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Set default position of draggable element\r\n         *\r\n         * @param {Object} elem - current element instance\r\n         * @param {Object} data - current element data\r\n         */\r\n        _setDefaultPosition: function (elem, data) {\r\n            var originRecord = $(elem).parents('tr').eq(0),\r\n                position = originRecord.position();\r\n\r\n            ++position.top;\r\n            $(data).css(position);\r\n        },\r\n\r\n        /**\r\n         * Set records to cache\r\n         *\r\n         * @param {Object} records - record instance\r\n         */\r\n        setCacheRecords: function (records) {\r\n            this.recordsCache(records);\r\n        },\r\n\r\n        /**\r\n         * Set styles to draggable element\r\n         *\r\n         * @param {Object} data - data\r\n         * @param {Object} elem - elem instance\r\n         * @returns {Object} instance data.\r\n         */\r\n        processingStyles: function (data, elem) {\r\n            var table = $(elem).parents('table').eq(0),\r\n                columns = table.find('th'),\r\n                recordColumns = $(data).find('td');\r\n\r\n            this._setDefaultPosition(elem, $(data));\r\n            this._setColumnsWidth(columns, recordColumns);\r\n            this._setTableWidth(table, $(data));\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Set table width.\r\n         *\r\n         * @param {Object} originalTable - original record instance\r\n         * @param {Object} recordTable - draggable record instance\r\n         */\r\n        _setTableWidth: function (originalTable, recordTable) {\r\n            recordTable.outerWidth(originalTable.outerWidth());\r\n        },\r\n\r\n        /**\r\n         * Set columns width.\r\n         *\r\n         * @param {Object} originColumns - original record instance\r\n         * @param {Object} recordColumns - draggable record instance\r\n         */\r\n        _setColumnsWidth: function (originColumns, recordColumns) {\r\n            var i = 0,\r\n                length = originColumns.length;\r\n\r\n            for (i; i < length; i++) {\r\n                recordColumns.eq(i).outerWidth(originColumns.eq(i).outerWidth());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get copy original record\r\n         *\r\n         * @param {Object} record - original record instance\r\n         * @returns {Object} draggable record instance\r\n         */\r\n        getRecordNode: function (record) {\r\n            var $record = $(record),\r\n                table = $record.parents('table')[0].cloneNode(true),\r\n                $table = $(table);\r\n\r\n            $table.find('tr').remove();\r\n            $table.append($record.parents('tr')[0].cloneNode(true));\r\n\r\n            return table;\r\n        },\r\n\r\n        /**\r\n         * Get record context by element\r\n         *\r\n         * @param {Object} elem - original element\r\n         * @returns {Object} draggable record context\r\n         */\r\n        getRecord: function (elem) {\r\n            var ctx = getContext(elem),\r\n                index = _.isFunction(ctx.$index) ? ctx.$index() : ctx.$index;\r\n\r\n            return this.recordsCache()[index];\r\n        },\r\n\r\n        /**\r\n         * Get correct page Y\r\n         *\r\n         * @param {Object} event - current event\r\n         * @returns {integer}\r\n         */\r\n        getPageY: function (event) {\r\n            var pageY;\r\n\r\n            if (event.type.indexOf('touch') >= 0) {\r\n                if (event.originalEvent.touches[0]) {\r\n                    pageY = event.originalEvent.touches[0].pageY;\r\n                } else {\r\n                    pageY = event.originalEvent.changedTouches[0].pageY;\r\n                }\r\n            } else {\r\n                pageY = event.pageY;\r\n            }\r\n\r\n            return pageY;\r\n        },\r\n\r\n        /**\r\n         * Disable page scrolling\r\n         */\r\n        disableScroll: function () {\r\n            document.body.addEventListener('touchmove', this.preventDefault, {\r\n                passive: false\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Enable page scrolling\r\n         */\r\n        enableScroll: function () {\r\n            document.body.removeEventListener('touchmove', this.preventDefault, {\r\n                passive: false\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prevent default function\r\n         *\r\n         * @param {Object} event - event object\r\n         */\r\n        preventDefault: function (event) {\r\n            event.preventDefault();\r\n        }\r\n\r\n    });\r\n});\r\n","Magento_Ui/js/dynamic-rows/dynamic-rows-grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './dynamic-rows'\r\n], function (_, dynamicRows) {\r\n    'use strict';\r\n\r\n    return dynamicRows.extend({\r\n        defaults: {\r\n            dataProvider: '',\r\n            insertData: [],\r\n            map: null,\r\n            cacheGridData: [],\r\n            deleteProperty: false,\r\n            positionProvider: 'position',\r\n            dataLength: 0,\r\n            identificationProperty: 'id',\r\n            identificationDRProperty: 'id',\r\n            listens: {\r\n                'insertData': 'processingInsertData',\r\n                'recordData': 'initElements setToInsertData'\r\n            },\r\n            mappingSettings: {\r\n                enabled: true,\r\n                distinct: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initialize: function () {\r\n            this.setToInsertData = _.debounce(this.setToInsertData, 200);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'insertData'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set data from recordData to insertData\r\n         */\r\n        setToInsertData: function () {\r\n            var insertData = [],\r\n                obj;\r\n\r\n            if (this.recordData().length && !this.update) {\r\n                _.each(this.recordData(), function (recordData) {\r\n                    obj = {};\r\n                    obj[this.map[this.identificationProperty]] = recordData[this.identificationProperty];\r\n                    insertData.push(obj);\r\n                }, this);\r\n\r\n                if (insertData.length) {\r\n                    this.source.set(this.dataProvider, insertData);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize children\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            this.getChildItems().forEach(function (data, index) {\r\n                this.processingAddChild(data, this.startIndex + index, data[this.identificationDRProperty]);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize elements from grid\r\n         *\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initElements: function (data) {\r\n            var newData = this.getNewData(data);\r\n\r\n            this.parsePagesData(data);\r\n\r\n            if (newData.length) {\r\n                if (this.insertData().length) {\r\n                    this.processingAddChild(newData[0], data.length - 1, newData[0][this.identificationProperty]);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delete record instance\r\n         * update data provider dataScope\r\n         *\r\n         * @param {String|Number} index - record index\r\n         * @param {String|Number} recordId\r\n         */\r\n        deleteRecord: function (index, recordId) {\r\n            this.updateInsertData(recordId);\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Updates insertData when record is deleted\r\n         *\r\n         * @param {String|Number} recordId\r\n         */\r\n        updateInsertData: function (recordId) {\r\n            var data = this.getElementData(this.insertData(), recordId),\r\n            prop = this.map[this.identificationDRProperty];\r\n\r\n            this.insertData(_.reject(this.source.get(this.dataProvider), function (recordData) {\r\n                return recordData[prop].toString() === data[prop].toString();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Find data object by index\r\n         *\r\n         * @param {Array} array - data collection\r\n         * @param {Number} index - element index\r\n         * @param {String} property - to find by property\r\n         *\r\n         * @returns {Object} data object\r\n         */\r\n        getElementData: function (array, index, property) {\r\n            var obj = {},\r\n                result;\r\n\r\n            property ? obj[property] = index : obj[this.map[this.identificationDRProperty]] = index;\r\n            result = _.findWhere(array, obj);\r\n\r\n            if (!result) {\r\n                property ?\r\n                    obj[property] = index.toString() :\r\n                    obj[this.map[this.identificationDRProperty]] = index.toString();\r\n            }\r\n\r\n            result = _.findWhere(array, obj);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Processing pages before addChild\r\n         *\r\n         * @param {Object} ctx - element context\r\n         * @param {Number|String} index - element index\r\n         * @param {Number|String} prop - additional property to element\r\n         */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            if (this._elems.length > this.pageSize) {\r\n                return false;\r\n            }\r\n\r\n            this.showSpinner(true);\r\n            this.addChild(ctx, index, prop);\r\n        },\r\n\r\n        /**\r\n         * Contains old data with new\r\n         *\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Array} changed data\r\n         */\r\n        getNewData: function (data) {\r\n            var changes = [],\r\n                tmpObj = {};\r\n\r\n            if (data.length !== this.relatedData.length) {\r\n                _.each(data, function (obj) {\r\n                    tmpObj[this.identificationDRProperty] = obj[this.identificationDRProperty];\r\n\r\n                    if (!_.findWhere(this.relatedData, tmpObj)) {\r\n                        changes.push(obj);\r\n                    }\r\n                }, this);\r\n            }\r\n\r\n            return changes;\r\n        },\r\n\r\n        /**\r\n         * Processing insert data\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processingInsertData: function (data) {\r\n            var changes,\r\n                obj = {};\r\n\r\n            changes = this._checkGridData(data);\r\n            this.cacheGridData = data;\r\n\r\n            if (changes.length) {\r\n                obj[this.identificationDRProperty] = changes[0][this.map[this.identificationProperty]];\r\n\r\n                if (_.findWhere(this.recordData(), obj)) {\r\n                    return false;\r\n                }\r\n\r\n                changes.forEach(function (changedObject) {\r\n                    this.mappingValue(changedObject);\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Mapping value from grid\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        mappingValue: function (data) {\r\n            var obj = {},\r\n                tmpObj = {};\r\n\r\n            if (this.mappingSettings.enabled) {\r\n                _.each(this.map, function (prop, index) {\r\n                    obj[index] = !_.isUndefined(data[prop]) ? data[prop] : '';\r\n                }, this);\r\n            } else {\r\n                obj = data;\r\n            }\r\n\r\n            if (this.mappingSettings.distinct) {\r\n                tmpObj[this.identificationDRProperty] = obj[this.identificationDRProperty];\r\n\r\n                if (_.findWhere(this.recordData(), tmpObj)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (!obj.hasOwnProperty(this.positionProvider)) {\r\n                this.setMaxPosition();\r\n                obj[this.positionProvider] = this.maxPosition;\r\n            }\r\n\r\n            this.source.set(this.dataScope + '.' + this.index + '.' + this.recordData().length, obj);\r\n        },\r\n\r\n        /**\r\n         * Check changed records\r\n         *\r\n         * @param {Array} data - array with records data\r\n         * @returns {Array} Changed records\r\n         */\r\n        _checkGridData: function (data) {\r\n            var cacheLength = this.cacheGridData.length,\r\n                curData = data.length,\r\n                max = cacheLength > curData ? this.cacheGridData : data,\r\n                changes = [],\r\n                obj = {};\r\n\r\n            max.forEach(function (record, index) {\r\n                obj[this.map[this.identificationDRProperty]] = record[this.map[this.identificationDRProperty]];\r\n\r\n                if (!_.where(this.cacheGridData, obj).length) {\r\n                    changes.push(data[index]);\r\n                }\r\n            }, this);\r\n\r\n            return changes;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/dynamic-rows/dynamic-rows.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'mageUtils',\r\n    'underscore',\r\n    'uiLayout',\r\n    'uiCollection',\r\n    'uiRegistry',\r\n    'mage/translate'\r\n], function (ko, utils, _, layout, uiCollection, registry, $t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks value type and cast to boolean if needed\r\n     *\r\n     * @param {*} value\r\n     *\r\n     * @returns {Boolean|*} casted or origin value\r\n     */\r\n    function castValue(value) {\r\n        if (_.isUndefined(value) || value === '' || _.isNull(value)) {\r\n            return false;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Compares arrays.\r\n     *\r\n     * @param {Array} base - array as method bases its decision on first argument.\r\n     * @param {Array} current - second array\r\n     *\r\n     * @returns {Boolean} result - is current array equal to base array\r\n     */\r\n    function compareArrays(base, current) {\r\n        var index = 0,\r\n            length = base.length;\r\n\r\n        if (base.length !== current.length) {\r\n            return false;\r\n        }\r\n\r\n        /*eslint-disable max-depth, eqeqeq, no-use-before-define */\r\n        for (index; index < length; index++) {\r\n            if (_.isArray(base[index]) && _.isArray(current[index])) {\r\n                if (!compareArrays(base[index], current[index])) {\r\n                    return false;\r\n                }\r\n            } else if (typeof base[index] === 'object' && typeof current[index] === 'object') {\r\n                if (!compareObjects(base[index], current[index])) {\r\n                    return false;\r\n                }\r\n            } else if (castValue(base[index]) != castValue(current[index])) {\r\n                return false;\r\n            }\r\n        }/*eslint-enable max-depth, eqeqeq, no-use-before-define */\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Compares objects. Compares only properties from origin object,\r\n     * if current object has more properties - they are not considered\r\n     *\r\n     * @param {Object} base - first object\r\n     * @param {Object} current - second object\r\n     *\r\n     * @returns {Boolean} result - is current object equal to base object\r\n     */\r\n    function compareObjects(base, current) {\r\n        var prop;\r\n\r\n        /*eslint-disable max-depth, eqeqeq*/\r\n        for (prop in base) {\r\n            if (_.isArray(base[prop]) && _.isArray(current[prop])) {\r\n                if (!compareArrays(base[prop], current[prop])) {\r\n                    return false;\r\n                }\r\n            } else if (typeof base[prop] === 'object' && typeof current[prop] === 'object') {\r\n                if (!compareObjects(base[prop], current[prop])) {\r\n                    return false;\r\n                }\r\n            } else if (castValue(base[prop]) != castValue(current[prop])) {\r\n                return false;\r\n            }\r\n        }/*eslint-enable max-depth, eqeqeq */\r\n\r\n        return true;\r\n    }\r\n\r\n    return uiCollection.extend({\r\n        defaults: {\r\n            defaultRecord: false,\r\n            columnsHeader: true,\r\n            columnsHeaderAfterRender: false,\r\n            columnsHeaderClasses: '',\r\n            labels: [],\r\n            recordTemplate: 'record',\r\n            collapsibleHeader: false,\r\n            additionalClasses: {},\r\n            visible: true,\r\n            disabled: false,\r\n            fit: false,\r\n            addButton: true,\r\n            addButtonLabel: $t('Add'),\r\n            recordData: [],\r\n            maxPosition: 0,\r\n            deleteProperty: 'delete',\r\n            identificationProperty: 'record_id',\r\n            deleteValue: true,\r\n            showSpinner: true,\r\n            isDifferedFromDefault: false,\r\n            defaultState: [],\r\n            defaultPagesState: {},\r\n            pagesChanged: {},\r\n            hasInitialPagesState: {},\r\n            changed: false,\r\n            fallbackResetTpl: 'ui/form/element/helper/fallback-reset-link',\r\n            dndConfig: {\r\n                name: '${ $.name }_dnd',\r\n                component: 'Magento_Ui/js/dynamic-rows/dnd',\r\n                template: 'ui/dynamic-rows/cells/dnd',\r\n                recordsProvider: '${ $.name }',\r\n                enabled: true\r\n            },\r\n            templates: {\r\n                record: {\r\n                    parent: '${ $.$data.collection.name }',\r\n                    name: '${ $.$data.index }',\r\n                    dataScope: '${ $.$data.collection.index }.${ $.name }',\r\n                    nodeTemplate: '${ $.parent }.${ $.$data.collection.recordTemplate }'\r\n                }\r\n            },\r\n            links: {\r\n                recordData: '${ $.provider }:${ $.dataScope }.${ $.index }'\r\n            },\r\n            listens: {\r\n                visible: 'setVisible',\r\n                disabled: 'setDisabled',\r\n                childTemplate: 'initHeader',\r\n                recordTemplate: 'onUpdateRecordTemplate',\r\n                recordData: 'setDifferedFromDefault parsePagesData setRecordDataToCache',\r\n                currentPage: 'changePage',\r\n                elems: 'checkSpinner',\r\n                changed: 'updateTrigger'\r\n            },\r\n            modules: {\r\n                dnd: '${ $.dndConfig.name }'\r\n            },\r\n            pages: 1,\r\n            pageSize: 20,\r\n            relatedData: [],\r\n            currentPage: 1,\r\n            recordDataCache: [],\r\n            startIndex: 0\r\n        },\r\n\r\n        /**\r\n         * Sets record data to cache\r\n         */\r\n        setRecordDataToCache: function (data) {\r\n            this.recordDataCache = data;\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initialize of parent\r\n         * class, calls initChildren method, set observe variable.\r\n         * Use parent \"track\" method - wrapper observe array\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this,\r\n                'processingDeleteRecord',\r\n                'onChildrenUpdate',\r\n                'checkDefaultState',\r\n                'renderColumnsHeader',\r\n                'deleteHandler',\r\n                'setDefaultState'\r\n            );\r\n\r\n            this._super()\r\n                .initChildren()\r\n                .initDnd()\r\n                .initDefaultRecord()\r\n                .setInitialProperty()\r\n                .setColumnsHeaderListener()\r\n                .checkSpinner();\r\n\r\n            this.on('recordData', this.checkDefaultState);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        bubble: function (event) {\r\n            if (event === 'deleteRecord' || event === 'update') {\r\n                return false;\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Inits DND module\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initDnd: function () {\r\n            if (this.dndConfig.enabled) {\r\n                layout([this.dndConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            if (this.dnd()) {\r\n                this.dnd().destroy();\r\n            }\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('childTemplate')\r\n                .observe([\r\n                    'pages',\r\n                    'currentPage',\r\n                    'recordData',\r\n                    'columnsHeader',\r\n                    'visible',\r\n                    'disabled',\r\n                    'labels',\r\n                    'showSpinner',\r\n                    'isDifferedFromDefault',\r\n                    'changed'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n            elem.on({\r\n                'deleteRecord': this.deleteHandler,\r\n                'update': this.onChildrenUpdate,\r\n                'addChild': this.setDefaultState\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler for deleteRecord event\r\n         *\r\n         * @param {Number|String} index - element index\r\n         * @param {Number|String} id\r\n         */\r\n        deleteHandler: function (index, id) {\r\n            var defaultState;\r\n\r\n            this.setDefaultState();\r\n            defaultState = this.defaultPagesState[this.currentPage()];\r\n            this.processingDeleteRecord(index, id);\r\n            this.pagesChanged[this.currentPage()] =\r\n                !compareArrays(defaultState, this.arrayFilter(this.getChildItems()));\r\n            this.changed(_.some(this.pagesChanged));\r\n        },\r\n\r\n        /**\r\n         * Set initial property to records data\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setInitialProperty: function () {\r\n            if (_.isArray(this.recordData())) {\r\n                this.recordData.each(function (data, index) {\r\n                    this.source.set(this.dataScope + '.' + this.index + '.' + index + '.initialize', true);\r\n                }, this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler for update event\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        onChildrenUpdate: function (state) {\r\n            var changed,\r\n                dataScope,\r\n                changedElemDataScope;\r\n\r\n            if (state && !this.hasInitialPagesState[this.currentPage()]) {\r\n                this.setDefaultState();\r\n                changed = this.getChangedElems(this.elems());\r\n                dataScope = this.elems()[0].dataScope.split('.');\r\n                dataScope.splice(dataScope.length - 1, 1);\r\n                changed.forEach(function (elem) {\r\n                    changedElemDataScope = elem.dataScope.split('.');\r\n                    changedElemDataScope.splice(0, dataScope.length);\r\n                    changedElemDataScope[0] =\r\n                        (parseInt(changedElemDataScope[0], 10) - this.pageSize * (this.currentPage() - 1)).toString();\r\n                    this.setValueByPath(\r\n                        this.defaultPagesState[this.currentPage()],\r\n                        changedElemDataScope, elem.initialValue\r\n                    );\r\n                }, this);\r\n            }\r\n\r\n            if (this.defaultPagesState[this.currentPage()]) {\r\n                this.setChangedForCurrentPage();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set default dynamic-rows state or state before changing data\r\n         *\r\n         * @param {Array} data - defaultState data\r\n         */\r\n        setDefaultState: function (data) {\r\n            var componentData,\r\n                childItems;\r\n\r\n            if (!this.hasInitialPagesState[this.currentPage()]) {\r\n                childItems = this.getChildItems();\r\n                componentData = childItems.length ?\r\n                    utils.copy(childItems) :\r\n                    utils.copy(this.getChildItems(this.recordDataCache));\r\n                componentData.forEach(function (dataObj) {\r\n                    if (dataObj.hasOwnProperty('initialize')) {\r\n                        delete dataObj.initialize;\r\n                    }\r\n                });\r\n\r\n                this.hasInitialPagesState[this.currentPage()] = true;\r\n                this.defaultPagesState[this.currentPage()] = data ? data : this.arrayFilter(componentData);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets value to object by string path\r\n         *\r\n         * @param {Object} obj\r\n         * @param {Array|String} path\r\n         * @param {*} value\r\n         */\r\n        setValueByPath: function (obj, path, value) {\r\n            var prop;\r\n\r\n            if (_.isString(path)) {\r\n                path = path.split('.');\r\n            }\r\n\r\n            if (path.length - 1) {\r\n                prop = obj[path[0]];\r\n                path.splice(0, 1);\r\n                this.setValueByPath(prop, path, value);\r\n            } else if (path.length && obj) {\r\n                obj[path[0]] = value;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns elements which changed self state\r\n         *\r\n         * @param {Array} array - data array\r\n         * @param {Array} changed - array with changed elements\r\n         * @returns {Array} changed - array with changed elements\r\n         */\r\n        getChangedElems: function (array, changed) {\r\n            changed = changed || [];\r\n\r\n            array.forEach(function (elem) {\r\n                if (_.isFunction(elem.elems)) {\r\n                    this.getChangedElems(elem.elems(), changed);\r\n                } else if (_.isFunction(elem.hasChanged) && elem.hasChanged()) {\r\n                    changed.push(elem);\r\n                }\r\n            }, this);\r\n\r\n            return changed;\r\n        },\r\n\r\n        /**\r\n         * Checks columnsHeaderAfterRender property,\r\n         * and set listener on elems if needed\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setColumnsHeaderListener: function () {\r\n            if (this.columnsHeaderAfterRender) {\r\n                this.on('recordData', this.renderColumnsHeader);\r\n\r\n                if (_.isArray(this.recordData()) && this.recordData().length) {\r\n                    this.renderColumnsHeader();\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks whether component's state is default or not\r\n         */\r\n        checkDefaultState: function () {\r\n            var isRecordDataArray = _.isArray(this.recordData()),\r\n                initialize,\r\n                hasNotDefaultRecords = isRecordDataArray ? !!this.recordData().filter(function (data) {\r\n                    return !data.initialize;\r\n                }).length : false;\r\n\r\n            if (!this.hasInitialPagesState[this.currentPage()] && isRecordDataArray && hasNotDefaultRecords) {\r\n                this.hasInitialPagesState[this.currentPage()] = true;\r\n                this.defaultPagesState[this.currentPage()] = utils.copy(this.getChildItems().filter(function (data) {\r\n                    initialize = data.initialize;\r\n                    delete data.initialize;\r\n\r\n                    return initialize;\r\n                }));\r\n\r\n                this.setChangedForCurrentPage();\r\n            } else if (this.hasInitialPagesState[this.currentPage()]) {\r\n                this.setChangedForCurrentPage();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters out deleted items from array\r\n         *\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Array} filtered array\r\n         */\r\n        arrayFilter: function (data) {\r\n            var prop;\r\n\r\n            /*eslint-disable no-loop-func*/\r\n            data.forEach(function (elem) {\r\n                for (prop in elem) {\r\n                    if (_.isArray(elem[prop])) {\r\n                        elem[prop] = _.filter(elem[prop], function (elemProp) {\r\n                            return elemProp[this.deleteProperty] !== this.deleteValue;\r\n                        }, this);\r\n\r\n                        elem[prop].forEach(function (elemProp) {\r\n                            if (_.isArray(elemProp)) {\r\n                                elem[prop] = this.arrayFilter(elemProp);\r\n                            }\r\n                        }, this);\r\n                    }\r\n                }\r\n            }, this);\r\n\r\n            /*eslint-enable no-loop-func*/\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Triggers update event\r\n         *\r\n         * @param {Boolean} val\r\n         */\r\n        updateTrigger: function (val) {\r\n            this.trigger('update', val);\r\n        },\r\n\r\n        /**\r\n         * Returns component state\r\n         */\r\n        hasChanged: function () {\r\n            return this.changed();\r\n        },\r\n\r\n        /**\r\n         * Render column header\r\n         */\r\n        renderColumnsHeader: function () {\r\n            this.recordData().length ? this.columnsHeader(true) : this.columnsHeader(false);\r\n        },\r\n\r\n        /**\r\n         * Init default record\r\n         *\r\n         * @returns Chainable.\r\n         */\r\n        initDefaultRecord: function () {\r\n            if (this.defaultRecord && !this.recordData().length) {\r\n                this.addChild();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Create header template\r\n         *\r\n         * @param {Object} prop - instance obj\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        createHeaderTemplate: function (prop) {\r\n            var visible = prop.visible !== false,\r\n                disabled = _.isUndefined(prop.disabled) ? this.disabled() : prop.disabled;\r\n\r\n            return {\r\n                visible: ko.observable(visible),\r\n                disabled: ko.observable(disabled)\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Init header elements\r\n         */\r\n        initHeader: function () {\r\n            var labels = [],\r\n                data;\r\n\r\n            if (!this.labels().length) {\r\n                _.each(this.childTemplate.children, function (cell) {\r\n                    data = this.createHeaderTemplate(cell.config);\r\n                    cell.config.labelVisible = false;\r\n                    _.extend(data, {\r\n                        defaultLabelVisible: data.visible(),\r\n                        label: cell.config.label,\r\n                        name: cell.name,\r\n                        required: !!cell.config.validation,\r\n                        columnsHeaderClasses: cell.config.columnsHeaderClasses,\r\n                        sortOrder: cell.config.sortOrder\r\n                    });\r\n                    labels.push(data);\r\n                }, this);\r\n                this.labels(_.sortBy(labels, 'sortOrder'));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set max element position\r\n         *\r\n         * @param {Number} position - element position\r\n         * @param {Object} elem - instance\r\n         */\r\n        setMaxPosition: function (position, elem) {\r\n            if (position || position === 0) {\r\n                this.checkMaxPosition(position);\r\n                this.sort(position, elem);\r\n            } else {\r\n                this.maxPosition += 1;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sort element by position\r\n         *\r\n         * @param {Number} position - element position\r\n         * @param {Object} elem - instance\r\n         */\r\n        sort: function (position, elem) {\r\n            var that = this,\r\n                sorted,\r\n                updatedCollection;\r\n\r\n            if (this.elems().filter(function (el) {\r\n                    return el.position || el.position === 0;\r\n                }).length !== this.getChildItems().length) {\r\n\r\n                return false;\r\n            }\r\n\r\n            if (!elem.containers.length) {\r\n                registry.get(elem.name, function () {\r\n                    that.sort(position, elem);\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            sorted = this.elems().sort(function (propOne, propTwo) {\r\n                return ~~propOne.position - ~~propTwo.position;\r\n            });\r\n\r\n            updatedCollection = this.updatePosition(sorted, position, elem.name);\r\n            this.elems(updatedCollection);\r\n        },\r\n\r\n        /**\r\n         * Checking loader visibility\r\n         *\r\n         * @param {Array} elems\r\n         */\r\n        checkSpinner: function (elems) {\r\n            this.showSpinner(!(!this.recordData().length || elems && elems.length === this.getChildItems().length));\r\n        },\r\n\r\n        /**\r\n         * Filtering data and calculates the quantity of pages\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        parsePagesData: function (data) {\r\n            var pages;\r\n\r\n            this.relatedData = this.deleteProperty ?\r\n                _.filter(data, function (elem) {\r\n                    return elem && elem[this.deleteProperty] !== this.deleteValue;\r\n                }, this) : data;\r\n\r\n            pages = Math.ceil(this.relatedData.length / this.pageSize) || 1;\r\n            this.pages(pages);\r\n        },\r\n\r\n        /**\r\n         * Reinit record data in order to remove deleted values\r\n         *\r\n         * @return void\r\n         */\r\n        reinitRecordData: function () {\r\n            this.recordData(\r\n                _.filter(this.recordData(), function (elem) {\r\n                    return elem && elem[this.deleteProperty] !== this.deleteValue;\r\n                }, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Get items to rendering on current page\r\n         *\r\n         * @returns {Array} data\r\n         */\r\n        getChildItems: function (data, page) {\r\n            var dataRecord = data || this.relatedData,\r\n                startIndex;\r\n\r\n            this.startIndex = (~~this.currentPage() - 1) * this.pageSize;\r\n\r\n            startIndex = page || this.startIndex;\r\n\r\n            return dataRecord.slice(startIndex, this.startIndex + parseInt(this.pageSize, 10));\r\n        },\r\n\r\n        /**\r\n         * Get record count with filtered delete property.\r\n         *\r\n         * @returns {Number} count\r\n         */\r\n        getRecordCount: function () {\r\n            return _.filter(this.recordData(), function (record) {\r\n                return record && record[this.deleteProperty] !== this.deleteValue;\r\n            }, this).length;\r\n        },\r\n\r\n        /**\r\n         * Get number of columns\r\n         *\r\n         * @returns {Number} columns\r\n         */\r\n        getColumnsCount: function () {\r\n            return this.labels().length + (this.dndConfig.enabled ? 1 : 0);\r\n        },\r\n\r\n        /**\r\n         * Processing pages before addChild\r\n         *\r\n         * @param {Object} ctx - element context\r\n         * @param {Number|String} index - element index\r\n         * @param {Number|String} prop - additional property to element\r\n         */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            this.bubble('addChild', false);\r\n\r\n            if (this.relatedData.length && this.relatedData.length % this.pageSize === 0) {\r\n                this.pages(this.pages() + 1);\r\n                this.nextPage();\r\n            } else if (~~this.currentPage() !== this.pages()) {\r\n                this.currentPage(this.pages());\r\n            }\r\n\r\n            this.addChild(ctx, index, prop);\r\n        },\r\n\r\n        /**\r\n         * Processing pages before deleteRecord\r\n         *\r\n         * @param {Number|String} index - element index\r\n         * @param {Number|String} recordId\r\n         */\r\n        processingDeleteRecord: function (index, recordId) {\r\n            this.deleteRecord(index, recordId);\r\n        },\r\n\r\n        /**\r\n         * Change page\r\n         *\r\n         * @param {Number} page - current page\r\n         */\r\n        changePage: function (page) {\r\n            this.clear();\r\n\r\n            if (page === 1 && !this.recordData().length) {\r\n                return false;\r\n            }\r\n\r\n            if (~~page > this.pages()) {\r\n                this.currentPage(this.pages());\r\n\r\n                return false;\r\n            } else if (~~page < 1) {\r\n                this.currentPage(1);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.initChildren();\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Check page\r\n         *\r\n         * @returns {Boolean} is page first or not\r\n         */\r\n        isFirst: function () {\r\n            return this.currentPage() === 1;\r\n        },\r\n\r\n        /**\r\n         * Check page\r\n         *\r\n         * @returns {Boolean} is page last or not\r\n         */\r\n        isLast: function () {\r\n            return this.currentPage() === this.pages();\r\n        },\r\n\r\n        /**\r\n         * Change page to next\r\n         */\r\n        nextPage: function () {\r\n            this.currentPage(this.currentPage() + 1);\r\n        },\r\n\r\n        /**\r\n         * Change page to previous\r\n         */\r\n        previousPage: function () {\r\n            this.currentPage(this.currentPage() - 1);\r\n        },\r\n\r\n        /**\r\n         * Check dependency and set position to elements\r\n         *\r\n         * @param {Array} collection - elems\r\n         * @param {Number} position - current position\r\n         * @param {String} elemName - element name\r\n         *\r\n         * @returns {Array} collection\r\n         */\r\n        updatePosition: function (collection, position, elemName) {\r\n            var curPos,\r\n                parsePosition = ~~position,\r\n                result = _.filter(collection, function (record) {\r\n                    return ~~record.position === parsePosition;\r\n                });\r\n\r\n            if (result[1]) {\r\n                curPos = parsePosition + 1;\r\n                result[0].name === elemName ? result[1].position = curPos : result[0].position = curPos;\r\n                this.updatePosition(collection, curPos);\r\n            }\r\n\r\n            return collection;\r\n        },\r\n\r\n        /**\r\n         * Check max elements position and set if max\r\n         *\r\n         * @param {Number} position - current position\r\n         */\r\n        checkMaxPosition: function (position) {\r\n            var max = 0,\r\n                pos;\r\n\r\n            this.elems.each(function (record) {\r\n                pos = ~~record.position;\r\n                pos > max ? max = pos : false;\r\n            });\r\n\r\n            max < position ? max = position : false;\r\n            this.maxPosition = max;\r\n        },\r\n\r\n        /**\r\n         * Remove and set new max position\r\n         */\r\n        removeMaxPosition: function () {\r\n            this.maxPosition = 0;\r\n            this.elems.each(function (record) {\r\n                this.maxPosition < record.position ? this.maxPosition = ~~record.position : false;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Update record template and rerender elems\r\n         *\r\n         * @param {String} recordName - record name\r\n         */\r\n        onUpdateRecordTemplate: function (recordName) {\r\n            if (recordName) {\r\n                this.recordTemplate = recordName;\r\n                this.reload();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delete record\r\n         *\r\n         * @param {Number} index - row index\r\n         *\r\n         */\r\n        deleteRecord: function (index, recordId) {\r\n            var recordInstance,\r\n                lastRecord,\r\n                recordsData,\r\n                lastRecordIndex;\r\n\r\n            if (this.deleteProperty) {\r\n                recordsData = this.recordData();\r\n                recordInstance = _.find(this.elems(), function (elem) {\r\n                    return elem.index === index;\r\n                });\r\n                recordInstance.destroy();\r\n                this.elems([]);\r\n                this._updateCollection();\r\n                this.removeMaxPosition();\r\n                recordsData[recordInstance.index][this.deleteProperty] = this.deleteValue;\r\n                this.recordData(recordsData);\r\n                this.reinitRecordData();\r\n                this.reload();\r\n            } else {\r\n                this.update = true;\r\n\r\n                if (~~this.currentPage() === this.pages()) {\r\n                    lastRecordIndex = this.startIndex + this.getChildItems().length - 1;\r\n                    lastRecord =\r\n                        _.findWhere(this.elems(), {\r\n                            index: lastRecordIndex\r\n                        }) ||\r\n                        _.findWhere(this.elems(), {\r\n                            index: lastRecordIndex.toString()\r\n                        });\r\n\r\n                    lastRecord.destroy();\r\n                }\r\n\r\n                this.removeMaxPosition();\r\n                recordsData = this._getDataByProp(recordId);\r\n                this._updateData(recordsData);\r\n                this.update = false;\r\n            }\r\n\r\n            this._reducePages();\r\n            this._sort();\r\n        },\r\n\r\n        /**\r\n         * Reduce the number of pages\r\n         *\r\n         * @private\r\n         * @return void\r\n         */\r\n        _reducePages: function () {\r\n            if (this.pages() < ~~this.currentPage()) {\r\n                this.currentPage(this.pages());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get data object by some property\r\n         *\r\n         * @param {Number} id - element id\r\n         * @param {String} prop - property\r\n         */\r\n        _getDataByProp: function (id, prop) {\r\n            prop = prop || this.identificationProperty;\r\n\r\n            return _.reject(this.getChildItems(), function (recordData) {\r\n                return recordData[prop].toString() === id.toString();\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Sort elems by position property\r\n         */\r\n        _sort: function () {\r\n            this.elems(this.elems().sort(function (propOne, propTwo) {\r\n                return ~~propOne.position - ~~propTwo.position;\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Set new data to dataSource,\r\n         * delete element\r\n         *\r\n         * @param {Array} data - record data\r\n         */\r\n        _updateData: function (data) {\r\n            var elems = _.clone(this.elems()),\r\n                path,\r\n                dataArr;\r\n\r\n            dataArr = this.recordData.splice(this.startIndex, this.recordData().length - this.startIndex);\r\n            dataArr.splice(0, this.pageSize);\r\n            elems = _.sortBy(this.elems(), function (elem) {\r\n                return ~~elem.index;\r\n            });\r\n\r\n            data.concat(dataArr).forEach(function (rec, idx) {\r\n                if (elems[idx]) {\r\n                    elems[idx].recordId = rec[this.identificationProperty];\r\n                }\r\n\r\n                if (!rec.position) {\r\n                    rec.position = this.maxPosition;\r\n                    this.setMaxPosition();\r\n                }\r\n\r\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + idx);\r\n                this.source.set(path, rec);\r\n            }, this);\r\n\r\n            this.elems(elems);\r\n        },\r\n\r\n        /**\r\n         * Rerender dynamic-rows elems\r\n         */\r\n        reload: function () {\r\n            this.clear();\r\n            this.initChildren(false, true);\r\n\r\n            /* After change page size need to check existing current page */\r\n            this._reducePages();\r\n        },\r\n\r\n        /**\r\n         * Destroy all dynamic-rows elems\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.destroyChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset data to initial value.\r\n         * Call method reset on child elements.\r\n         */\r\n        reset: function () {\r\n            var elems = this.elems();\r\n\r\n            _.each(elems, function (elem) {\r\n                if (_.isFunction(elem.reset)) {\r\n                    elem.reset();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set classes\r\n         *\r\n         * @param {Object} data\r\n         *\r\n         * @returns {Object} Classes\r\n         */\r\n        setClasses: function (data) {\r\n            var additional;\r\n\r\n            if (_.isString(data.additionalClasses)) {\r\n                additional = data.additionalClasses.split(' ');\r\n                data.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    data.additionalClasses[name] = true;\r\n                });\r\n            }\r\n\r\n            if (!data.additionalClasses) {\r\n                data.additionalClasses = {};\r\n            }\r\n\r\n            _.extend(data.additionalClasses, {\r\n                '_fit': data.fit,\r\n                '_required': data.required,\r\n                '_error': data.error,\r\n                '_empty': !this.elems().length,\r\n                '_no-header': this.columnsHeaderAfterRender || this.collapsibleHeader\r\n            });\r\n\r\n            return data.additionalClasses;\r\n        },\r\n\r\n        /**\r\n         * Initialize children\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            this.showSpinner(true);\r\n            this.getChildItems().forEach(function (data, index) {\r\n                this.addChild(data, this.startIndex + index);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set visibility to dynamic-rows child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setVisible: function (state) {\r\n            this.elems.each(function (record) {\r\n                record.setVisible(state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set disabled property to dynamic-rows child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabled: function (state) {\r\n            this.elems.each(function (record) {\r\n                record.setDisabled(state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set visibility to column\r\n         *\r\n         * @param {Number} index - column index\r\n         * @param {Boolean} state\r\n         */\r\n        setVisibilityColumn: function (index, state) {\r\n            this.elems.each(function (record) {\r\n                record.setVisibilityColumn(index, state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set disabled property to column\r\n         *\r\n         * @param {Number} index - column index\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabledColumn: function (index, state) {\r\n            this.elems.each(function (record) {\r\n                record.setDisabledColumn(index, state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Add child components\r\n         *\r\n         * @param {Object} data - component data\r\n         * @param {Number} index - record(row) index\r\n         * @param {Number|String} prop - custom identify property\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        addChild: function (data, index, prop) {\r\n            var template = this.templates.record,\r\n                child;\r\n\r\n            index = index || _.isNumber(index) ? index : this.recordData().length;\r\n            prop = prop || _.isNumber(prop) ? prop : index;\r\n\r\n            _.extend(this.templates.record, {\r\n                recordId: prop\r\n            });\r\n\r\n            child = utils.template(template, {\r\n                collection: this,\r\n                index: index\r\n            });\r\n\r\n            layout([child]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Restore value to default\r\n         */\r\n        restoreToDefault: function () {\r\n            this.recordData(utils.copy(this.default));\r\n            this.reload();\r\n        },\r\n\r\n        /**\r\n         * Update whether value differs from default value\r\n         */\r\n        setDifferedFromDefault: function () {\r\n            var recordData = utils.copy(this.recordData());\r\n\r\n            Array.isArray(recordData) && recordData.forEach(function (item) {\r\n                delete item['record_id'];\r\n            });\r\n\r\n            this.isDifferedFromDefault(!_.isEqual(recordData, this.default));\r\n        },\r\n\r\n        /**\r\n         * Set the changed property if the current page is different\r\n         * than the default state\r\n         *\r\n         * @return void\r\n         */\r\n        setChangedForCurrentPage: function () {\r\n            this.pagesChanged[this.currentPage()] =\r\n                !compareArrays(this.defaultPagesState[this.currentPage()], this.arrayFilter(this.getChildItems()));\r\n            this.changed(_.some(this.pagesChanged));\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/dynamic-rows/record.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiCollection',\r\n    'uiRegistry'\r\n], function (_, uiCollection, registry) {\r\n    'use strict';\r\n\r\n    return uiCollection.extend({\r\n        defaults: {\r\n            visible: true,\r\n            disabled: true,\r\n            headerLabel: '',\r\n            label: '',\r\n            positionProvider: 'position',\r\n            imports: {\r\n                data: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            listens: {\r\n                position: 'initPosition',\r\n                elems: 'setColumnVisibleListener'\r\n            },\r\n            links: {\r\n                position: '${ $.name }.${ $.positionProvider }:value'\r\n            },\r\n            exports: {\r\n                recordId: '${ $.provider }:${ $.dataScope }.record_id'\r\n            },\r\n            modules: {\r\n                parentComponent: '${ $.parentName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initialize of parent\r\n         * class, calls initChildren method, set observe variable.\r\n         * Use parent \"track\" method - wrapper observe array\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            var self = this;\r\n\r\n            this._super();\r\n\r\n            registry.async(this.name + '.' + this.positionProvider)(function (component) {\r\n\r\n                /**\r\n                 * Overwrite hasChanged method\r\n                 *\r\n                 * @returns {Boolean}\r\n                 */\r\n                component.hasChanged = function () {\r\n\r\n                    /* eslint-disable eqeqeq */\r\n                    return this.value().toString() != this.initialValue.toString();\r\n\r\n                    /* eslint-enable eqeqeq */\r\n                };\r\n\r\n                if (!component.initialValue) {\r\n                    component.initialValue = self.parentComponent().maxPosition;\r\n                    component.bubble('update', component.hasChanged());\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.label = this.label || this.headerLabel;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('position')\r\n                .observe([\r\n                    'visible',\r\n                    'disabled',\r\n                    'data',\r\n                    'label'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init element position\r\n         *\r\n         * @param {Number} position - element position\r\n         */\r\n        initPosition: function (position) {\r\n            var pos = parseInt(position, 10);\r\n\r\n            this.parentComponent().setMaxPosition(pos, this);\r\n\r\n            if (!pos && pos !== 0) {\r\n                this.position = this.parentComponent().maxPosition;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set column visibility listener\r\n         */\r\n        setColumnVisibleListener: function () {\r\n            var elem = _.find(this.elems(), function (curElem) {\r\n                return !curElem.hasOwnProperty('visibleListener');\r\n            });\r\n\r\n            if (!elem) {\r\n                return;\r\n            }\r\n\r\n            this.childVisibleListener(elem);\r\n\r\n            if (!elem.visibleListener) {\r\n                elem.on('visible', this.childVisibleListener.bind(this, elem));\r\n            }\r\n\r\n            elem.visibleListener = true;\r\n        },\r\n\r\n        /**\r\n         * Child visibility listener\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        childVisibleListener: function (data) {\r\n            this.setVisibilityColumn(data.index, data.visible());\r\n        },\r\n\r\n        /**\r\n         * Reset data to initial value.\r\n         * Call method reset on child elements.\r\n         */\r\n        reset: function () {\r\n            var elems = this.elems(),\r\n                nameIsEqual,\r\n                dataScopeIsEqual;\r\n\r\n            _.each(elems, function (elem) {\r\n                nameIsEqual = this.name + '.' + this.positionProvider === elem.name;\r\n                dataScopeIsEqual = this.dataScope === elem.dataScope;\r\n\r\n                if (!(nameIsEqual || dataScopeIsEqual) && _.isFunction(elem.reset)) {\r\n                    elem.reset();\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clear data\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        clear: function () {\r\n            var elems = this.elems(),\r\n                nameIsEqual,\r\n                dataScopeIsEqual;\r\n\r\n            _.each(elems, function (elem) {\r\n                nameIsEqual = this.name + '.' + this.positionProvider === elem.name;\r\n                dataScopeIsEqual = this.dataScope === elem.dataScope;\r\n\r\n                if (!(nameIsEqual || dataScopeIsEqual) && _.isFunction(elem.reset)) {\r\n                    elem.clear();\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get label for collapsible header\r\n         *\r\n         * @param {String} label\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (label) {\r\n            if (_.isString(label)) {\r\n                this.label(label);\r\n            } else if (label && this.label()) {\r\n                return this.label();\r\n            } else {\r\n                this.label(this.headerLabel);\r\n            }\r\n\r\n            return this.label();\r\n        },\r\n\r\n        /**\r\n         * Set visibility to record child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setVisible: function (state) {\r\n            this.elems.each(function (cell) {\r\n                cell.visible(state);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set visibility to child by index\r\n         *\r\n         * @param {Number} index\r\n         * @param {Boolean} state\r\n         */\r\n        setVisibilityColumn: function (index, state) {\r\n            var elems = this.elems(),\r\n                curElem = parseInt(index, 10),\r\n                label;\r\n\r\n            if (!this.parentComponent()) {\r\n                return false;\r\n            }\r\n\r\n            if (_.isNaN(curElem)) {\r\n                _.findWhere(elems, {\r\n                    index: index\r\n                }).visible(state);\r\n                label = _.findWhere(this.parentComponent().labels(), {\r\n                    name: index\r\n                });\r\n                label.defaultLabelVisible && label.visible(state);\r\n            } else {\r\n                elems[curElem].visible(state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set disabled to child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabled: function (state) {\r\n            this.elems.each(function (cell) {\r\n                cell.disabled(state);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set disabled to child by index\r\n         *\r\n         * @param {Number} index\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabledColumn: function (index, state) {\r\n            index = ~~index;\r\n            this.elems()[index].disabled(state);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/form/adapter/buttons'\r\n], function ($, _, buttons) {\r\n    'use strict';\r\n\r\n    var selectorPrefix = '',\r\n        eventPrefix;\r\n\r\n    /**\r\n     * Initialize listener.\r\n     *\r\n     * @param {Function} callback\r\n     * @param {String} action\r\n     */\r\n    function initListener(callback, action) {\r\n        var selector    = selectorPrefix ? selectorPrefix + ' ' + buttons[action] : buttons[action],\r\n            elem        = $(selector)[0];\r\n\r\n        if (!elem) {\r\n            return;\r\n        }\r\n\r\n        if (elem.onclick) {\r\n            elem.onclick = null;\r\n        }\r\n\r\n        $(elem).on('click' + eventPrefix, callback);\r\n    }\r\n\r\n    /**\r\n     * Destroy listener.\r\n     *\r\n     * @param {String} action\r\n     */\r\n    function destroyListener(action) {\r\n        var selector    = selectorPrefix ? selectorPrefix + ' ' + buttons[action] : buttons[action],\r\n            elem        = $(selector)[0];\r\n\r\n        if (!elem) {\r\n            return;\r\n        }\r\n\r\n        if (elem.onclick) {\r\n            elem.onclick = null;\r\n        }\r\n\r\n        $(elem).off('click' + eventPrefix);\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attaches events handlers.\r\n         *\r\n         * @param {Object} handlers\r\n         * @param {String} selectorPref\r\n         * @param {String} eventPref\r\n         */\r\n        on: function (handlers, selectorPref, eventPref) {\r\n            selectorPrefix = selectorPrefix || selectorPref;\r\n            eventPrefix = eventPref;\r\n            _.each(handlers, initListener);\r\n            selectorPrefix = '';\r\n        },\r\n\r\n        /**\r\n         * Removes events handlers.\r\n         *\r\n         * @param {Object} handlers\r\n         * @param {String} eventPref\r\n         */\r\n        off: function (handlers, eventPref) {\r\n            eventPrefix = eventPref;\r\n            _.each(handlers, destroyListener);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/form/button-adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiClass',\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry'\r\n], function (Class, $, _, registry) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Initialize actions and adapter.\r\n         *\r\n         * @param {Object} config\r\n         * @param {Element} elem\r\n         * @returns {Object}\r\n         */\r\n        initialize: function (config, elem) {\r\n            return this._super()\r\n                .initActions()\r\n                .initAdapter(elem);\r\n        },\r\n\r\n        /**\r\n         * Creates callback from declared actions.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initActions: function () {\r\n            var callbacks = [];\r\n\r\n            _.each(this.actions, function (action) {\r\n                callbacks.push({\r\n                    action: registry.async(action.targetName),\r\n                    args: _.union([action.actionName], action.params)\r\n                });\r\n            });\r\n\r\n            /**\r\n             * Callback function.\r\n             */\r\n            this.callback = function () {\r\n                _.each(callbacks, function (callback) {\r\n                    callback.action.apply(callback.action, callback.args);\r\n                });\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback handler on button.\r\n         *\r\n         * @param {Element} elem\r\n         */\r\n        initAdapter: function (elem) {\r\n            $(elem).on('click', this.callback);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/client.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Before save validate request.\r\n     *\r\n     * @param {Object} data\r\n     * @param {String} url\r\n     * @param {String} selectorPrefix\r\n     * @param {String} messagesClass\r\n     * @returns {*}\r\n     */\r\n    function beforeSave(data, url, selectorPrefix, messagesClass) {\r\n        var save = $.Deferred();\r\n\r\n        data = utils.serialize(utils.filterFormData(data));\r\n        data['form_key'] = window.FORM_KEY;\r\n\r\n        if (!url || url === 'undefined') {\r\n            return save.resolve();\r\n        }\r\n\r\n        $('body').trigger('processStart');\r\n\r\n        $.ajax({\r\n            url: url,\r\n            data: data,\r\n\r\n            /**\r\n             * Success callback.\r\n             * @param {Object} resp\r\n             * @returns {Boolean}\r\n             */\r\n            success: function (resp) {\r\n                if (!resp.error) {\r\n                    save.resolve();\r\n\r\n                    return true;\r\n                }\r\n\r\n                $('body').notification('clear');\r\n                $.each(resp.messages || [resp.message] || [], function (key, message) {\r\n                    $('body').notification('add', {\r\n                        error: resp.error,\r\n                        message: message,\r\n\r\n                        /**\r\n                         * Insert method.\r\n                         *\r\n                         * @param {String} msg\r\n                         */\r\n                        insertMethod: function (msg) {\r\n                            var $wrapper = $('<div/>').addClass(messagesClass).html(msg);\r\n\r\n                            $('.page-main-actions', selectorPrefix).after($wrapper);\r\n                            $('html, body').animate({\r\n                                scrollTop: $('.page-main-actions', selectorPrefix).offset().top\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Complete callback.\r\n             */\r\n            complete: function () {\r\n                $('body').trigger('processStop');\r\n            }\r\n        });\r\n\r\n        return save.promise();\r\n    }\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Assembles data and submits it using 'utils.submit' method\r\n         */\r\n        save: function (data, options) {\r\n            var url = this.urls.beforeSave,\r\n                save = this._save.bind(this, data, options);\r\n\r\n            beforeSave(data, url, this.selectorPrefix, this.messagesClass).then(save);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Save data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {Object} options\r\n         * @returns {Object}\r\n         * @private\r\n         */\r\n        _save: function (data, options) {\r\n            var url = this.urls.save;\r\n\r\n            $('body').trigger('processStart');\r\n            options = options || {};\r\n\r\n            if (!options.redirect) {\r\n                url += 'back/edit';\r\n            }\r\n\r\n            if (options.ajaxSave) {\r\n                utils.ajaxSubmit({\r\n                    url: url,\r\n                    data: data\r\n                }, options);\r\n\r\n                $('body').trigger('processStop');\r\n\r\n                return this;\r\n            }\r\n\r\n            utils.submit({\r\n                url: url,\r\n                data: data\r\n            }, options.attributes);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'rjsResolver',\r\n    './adapter',\r\n    'uiCollection',\r\n    'mageUtils',\r\n    'jquery',\r\n    'Magento_Ui/js/core/app',\r\n    'mage/validation'\r\n], function (_, loader, resolver, adapter, Collection, utils, $, app) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Format params\r\n     *\r\n     * @param {Object} params\r\n     * @returns {Array}\r\n     */\r\n    function prepareParams(params) {\r\n        var result = '?';\r\n\r\n        _.each(params, function (value, key) {\r\n            result += key + '=' + value + '&';\r\n        });\r\n\r\n        return result.slice(0, -1);\r\n    }\r\n\r\n    /**\r\n     * Collect form data.\r\n     *\r\n     * @param {Array} items\r\n     * @returns {Object}\r\n     */\r\n    function collectData(items) {\r\n        var result = {},\r\n            name;\r\n\r\n        items = Array.prototype.slice.call(items);\r\n\r\n        items.forEach(function (item) {\r\n            switch (item.type) {\r\n                case 'checkbox':\r\n                    result[item.name] = +!!item.checked;\r\n                    break;\r\n\r\n                case 'radio':\r\n                    if (item.checked) {\r\n                        result[item.name] = item.value;\r\n                    }\r\n                    break;\r\n\r\n                case 'select-multiple':\r\n                    name = item.name.substring(0, item.name.length - 2); //remove [] from the name ending\r\n                    result[name] = _.pluck(item.selectedOptions, 'value');\r\n                    break;\r\n\r\n                default:\r\n                    result[item.name] = item.value;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Makes ajax request\r\n     *\r\n     * @param {Object} params\r\n     * @param {Object} data\r\n     * @param {String} url\r\n     * @returns {*}\r\n     */\r\n    function makeRequest(params, data, url) {\r\n        var save = $.Deferred();\r\n\r\n        data = utils.serialize(data);\r\n        data['form_key'] = window.FORM_KEY;\r\n\r\n        if (!url) {\r\n            save.resolve();\r\n        }\r\n\r\n        $('body').trigger('processStart');\r\n\r\n        $.ajax({\r\n            url: url + prepareParams(params),\r\n            data: data,\r\n            dataType: 'json',\r\n\r\n            /**\r\n             * Success callback.\r\n             * @param {Object} resp\r\n             * @returns {Boolean}\r\n             */\r\n            success: function (resp) {\r\n                if (resp.ajaxExpired) {\r\n                    window.location.href = resp.ajaxRedirect;\r\n                }\r\n\r\n                if (!resp.error) {\r\n                    save.resolve(resp);\r\n\r\n                    return true;\r\n                }\r\n\r\n                $('body').notification('clear');\r\n                $.each(resp.messages, function (key, message) {\r\n                    $('body').notification('add', {\r\n                        error: resp.error,\r\n                        message: message,\r\n\r\n                        /**\r\n                         * Inserts message on page\r\n                         * @param {String} msg\r\n                         */\r\n                        insertMethod: function (msg) {\r\n                            $('.page-main-actions').after(msg);\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Complete callback.\r\n             */\r\n            complete: function () {\r\n                $('body').trigger('processStop');\r\n            }\r\n        });\r\n\r\n        return save.promise();\r\n    }\r\n\r\n    /**\r\n     * Check if fields is valid.\r\n     *\r\n     * @param {Array}items\r\n     * @returns {Boolean}\r\n     */\r\n    function isValidFields(items) {\r\n        var result = true;\r\n\r\n        _.each(items, function (item) {\r\n            if (!$.validator.validateSingleElement(item)) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            additionalFields: [],\r\n            additionalInvalid: false,\r\n            selectorPrefix: '.page-content',\r\n            messagesClass: 'messages',\r\n            errorClass: '.admin__field._error',\r\n            eventPrefix: '.${ $.index }',\r\n            ajaxSave: false,\r\n            ajaxSaveType: 'default',\r\n            imports: {\r\n                reloadUrl: '${ $.provider}:reloadUrl'\r\n            },\r\n            listens: {\r\n                selectorPrefix: 'destroyAdapter initAdapter',\r\n                '${ $.name }.${ $.reloadItem }': 'params.set reload'\r\n            },\r\n            exports: {\r\n                selectorPrefix: '${ $.provider }:client.selectorPrefix',\r\n                messagesClass: '${ $.provider }:client.messagesClass'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super()\r\n                .initAdapter();\r\n\r\n            resolver(this.hideLoader, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'responseData',\r\n                    'responseStatus'\r\n                ]);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.selector = '[data-form-part=' + this.namespace + ']';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize adapter handlers.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initAdapter: function () {\r\n            adapter.on({\r\n                'reset': this.reset.bind(this),\r\n                'save': this.save.bind(this, true, {}),\r\n                'saveAndContinue': this.save.bind(this, false, {})\r\n            }, this.selectorPrefix, this.eventPrefix);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroy adapter handlers.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        destroyAdapter: function () {\r\n            adapter.off([\r\n                'reset',\r\n                'save',\r\n                'saveAndContinue'\r\n            ], this.eventPrefix);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hide loader.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        hideLoader: function () {\r\n            loader.get(this.name).hide();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate and save form.\r\n         *\r\n         * @param {String} redirect\r\n         * @param {Object} data\r\n         */\r\n        save: function (redirect, data) {\r\n            this.validate();\r\n\r\n            if (!this.additionalInvalid && !this.source.get('params.invalid')) {\r\n                this.setAdditionalData(data)\r\n                    .submit(redirect);\r\n            } else {\r\n                this.focusInvalid();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to set focus on first invalid form field.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        focusInvalid: function () {\r\n            var invalidField = _.find(this.delegate('checkInvalid'));\r\n\r\n            if (!_.isUndefined(invalidField) && _.isFunction(invalidField.focused)) {\r\n                invalidField.focused(true);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set additional data to source before form submit and after validation.\r\n         *\r\n         * @param {Object} data\r\n         * @returns {Object}\r\n         */\r\n        setAdditionalData: function (data) {\r\n            _.each(data, function (value, name) {\r\n                this.source.set('data.' + name, value);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Submits form\r\n         *\r\n         * @param {String} redirect\r\n         */\r\n        submit: function (redirect) {\r\n            var additional = collectData(this.additionalFields),\r\n                source = this.source;\r\n\r\n            _.each(additional, function (value, name) {\r\n                source.set('data.' + name, value);\r\n            });\r\n\r\n            source.save({\r\n                redirect: redirect,\r\n                ajaxSave: this.ajaxSave,\r\n                ajaxSaveType: this.ajaxSaveType,\r\n                response: {\r\n                    data: this.responseData,\r\n                    status: this.responseStatus\r\n                },\r\n                attributes: {\r\n                    id: this.namespace\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Validates each element and returns true, if all elements are valid.\r\n         */\r\n        validate: function () {\r\n            this.additionalFields = document.querySelectorAll(this.selector);\r\n            this.source.set('params.invalid', false);\r\n            this.source.trigger('data.validate');\r\n            this.set('additionalInvalid', !isValidFields(this.additionalFields));\r\n        },\r\n\r\n        /**\r\n         * Trigger reset form data.\r\n         */\r\n        reset: function () {\r\n            this.source.trigger('data.reset');\r\n            $('[data-bind*=datepicker]').val('');\r\n        },\r\n\r\n        /**\r\n         * Trigger overload form data.\r\n         */\r\n        overload: function () {\r\n            this.source.trigger('data.overload');\r\n        },\r\n\r\n        /**\r\n         * Updates data from server.\r\n         */\r\n        reload: function () {\r\n            makeRequest(this.params, this.data, this.reloadUrl).then(function (data) {\r\n                app(data, true);\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiElement',\r\n    './client',\r\n    'mageUtils'\r\n], function (_, Element, Client, utils) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            clientConfig: {\r\n                urls: {\r\n                    save: '${ $.submit_url }',\r\n                    beforeSave: '${ $.validate_url }'\r\n                }\r\n            },\r\n            ignoreTmpls: {\r\n                data: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes provider component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initClient();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes client component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initClient: function () {\r\n            this.client = new Client(this.clientConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves currently available data.\r\n         *\r\n         * @param {Object} [options] - Addtitional request options.\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        save: function (options) {\r\n            var data = this.get('data');\r\n\r\n            this.client.save(data, options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update data that stored in provider.\r\n         *\r\n         * @param {Boolean} isProvider\r\n         * @param {Object} newData\r\n         * @param {Object} oldData\r\n         *\r\n         * @returns {Provider}\r\n         */\r\n        updateConfig: function (isProvider, newData, oldData) {\r\n            if (isProvider === true) {\r\n                this.setData(oldData, newData, this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *  Set data to provider based on current data.\r\n         *\r\n         * @param {Object} oldData\r\n         * @param {Object} newData\r\n         * @param {Provider} current\r\n         * @param {String} parentPath\r\n         */\r\n        setData: function (oldData, newData, current, parentPath) {\r\n            _.each(newData, function (val, key) {\r\n                if (_.isObject(val) || _.isArray(val)) {\r\n                    this.setData(oldData[key], val, current[key], utils.fullPath(parentPath, key));\r\n                } else if (val != oldData[key] && oldData[key] == current[key]) {//eslint-disable-line eqeqeq\r\n                    this.set(utils.fullPath(parentPath, key), val);\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/switcher.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (_, registry, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rules: []\r\n        },\r\n\r\n        /**\r\n         * Initializes instance of a DataSwitcher.\r\n         *\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initRules();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initRules: function () {\r\n            this.rules.forEach(this.initRule, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule definition.\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initRule: function (rule) {\r\n            var handler = this.onValueChange.bind(this, rule);\r\n\r\n            if (!rule.target) {\r\n                rule.target = this.target;\r\n            }\r\n\r\n            if (!rule.property) {\r\n                rule.property = this.property;\r\n            }\r\n\r\n            registry.get(rule.target, function (target) {\r\n                this.applyRule(rule, target.get(rule.property));\r\n                target.on(rule.property, handler);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule definition.\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        addRule: function (rule) {\r\n            this.rules.push(rule);\r\n            this.initRule(rule);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule object.\r\n         * @param {*} value - Current value associated with a rule.\r\n         */\r\n        applyRule: function (rule, value) {\r\n            var actions = rule.actions;\r\n\r\n            //TODO Refactor this logic in scope of MAGETWO-48585\r\n            /* eslint-disable eqeqeq */\r\n            if (rule.value != value) {\r\n                return;\r\n            } else if (rule.strict) {\r\n                return;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n            actions.forEach(this.applyAction, this);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} action - Action object.\r\n         */\r\n        applyAction: function (action) {\r\n            registry.get(action.target, function (target) {\r\n                var callback = target[action.callback];\r\n\r\n                callback.apply(target, action.params || []);\r\n            });\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rules object.\r\n         * @param {*} value - Current value associated with a rule.\r\n         */\r\n        onValueChange: function (rule, value) {\r\n            this.applyRule(rule, value);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/adapter/buttons.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        'reset': '#reset',\r\n        'save': '#save',\r\n        'saveAndContinue': '#save_and_continue'\r\n    };\r\n});\r\n","Magento_Ui/js/form/components/area.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './tab'\r\n], function (_, Tab) {\r\n    'use strict';\r\n\r\n    return Tab.extend({\r\n        defaults: {\r\n            uniqueNs:   'params.activeArea',\r\n            template:   'ui/area',\r\n            changed:    false,\r\n            loading:    false\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onChildrenUpdate', 'onContentLoading');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('changed loading');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls parent's initElement method.\r\n         * Assigns callbacks on various events of incoming element.\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.on({\r\n                'update':   this.onChildrenUpdate,\r\n                'loading':  this.onContentLoading\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children update.\r\n         * Sets changed property to one incoming.\r\n         * Invokes setActive method if settings\r\n         * contain makeVisible property set to true.\r\n         *\r\n         * @param  {Boolean} hasChanged\r\n         */\r\n        onChildrenUpdate: function (hasChanged) {\r\n            if (!hasChanged) {\r\n                hasChanged = _.some(this.delegate('hasChanged'));\r\n            }\r\n\r\n            this.changed(hasChanged);\r\n        },\r\n\r\n        /**\r\n         * Callback that sets loading property to true.\r\n         */\r\n        onContentLoading: function (isLoading) {\r\n            this.loading(isLoading);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiElement',\r\n    'uiRegistry',\r\n    'uiLayout',\r\n    'mageUtils',\r\n    'underscore'\r\n], function (Element, registry, layout, utils, _) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            buttonClasses: {},\r\n            additionalClasses: {},\r\n            displayArea: 'outsideGroup',\r\n            displayAsLink: false,\r\n            elementTmpl: 'ui/form/element/button',\r\n            template: 'ui/form/components/button/simple',\r\n            visible: true,\r\n            disabled: false,\r\n            title: ''\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            return this._super()\r\n                ._setClasses()\r\n                ._setButtonClasses();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'visible',\r\n                    'disabled',\r\n                    'title',\r\n                    'childError'\r\n                ]);\r\n        },\r\n\r\n        /**\r\n         * Performs configured actions\r\n         */\r\n        action: function () {\r\n            this.actions.forEach(this.applyAction, this);\r\n        },\r\n\r\n        /**\r\n         * Apply action on target component,\r\n         * but previously create this component from template if it is not existed\r\n         *\r\n         * @param {Object} action - action configuration\r\n         */\r\n        applyAction: function (action) {\r\n            var targetName = action.targetName,\r\n                params = utils.copy(action.params) || [],\r\n                actionName = action.actionName,\r\n                target;\r\n\r\n            if (!registry.has(targetName)) {\r\n                this.getFromTemplate(targetName);\r\n            }\r\n            target = registry.async(targetName);\r\n\r\n            if (target && typeof target === 'function' && actionName) {\r\n                params.unshift(actionName);\r\n                target.apply(target, params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create target component from template\r\n         *\r\n         * @param {Object} targetName - name of component,\r\n         * that supposed to be a template and need to be initialized\r\n         */\r\n        getFromTemplate: function (targetName) {\r\n            var parentName = targetName.split('.'),\r\n                index = parentName.pop(),\r\n                child;\r\n\r\n            parentName = parentName.join('.');\r\n            child = utils.template({\r\n                parent: parentName,\r\n                name: index,\r\n                nodeTemplate: targetName\r\n            });\r\n            layout([child]);\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            if (typeof this.additionalClasses === 'string') {\r\n                if (this.additionalClasses === '') {\r\n                    this.additionalClasses = {};\r\n\r\n                    return this;\r\n                }\r\n\r\n                this.additionalClasses = this.additionalClasses\r\n                    .trim()\r\n                    .split(' ')\r\n                    .reduce(function (classes, name) {\r\n                        classes[name] = true;\r\n\r\n                        return classes;\r\n                    }, {}\r\n                );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'buttonClasses' object.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        _setButtonClasses: function () {\r\n            var additional = this.buttonClasses;\r\n\r\n            if (_.isString(additional)) {\r\n                this.buttonClasses = {};\r\n\r\n                if (additional.trim().length) {\r\n                    additional = additional.trim().split(' ');\r\n\r\n                    additional.forEach(function (name) {\r\n                        if (name.length) {\r\n                            this.buttonClasses[name] = true;\r\n                        }\r\n                    }, this);\r\n                }\r\n            }\r\n\r\n            _.extend(this.buttonClasses, {\r\n                'action-basic': !this.displayAsLink,\r\n                'action-additional': this.displayAsLink\r\n            });\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/collection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'uiLayout',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function (_, utils, registry, Component, layout, confirm) {\r\n    'use strict';\r\n\r\n    var childTemplate = {\r\n        parent: '${ $.$data.name }',\r\n        name: '${ $.$data.childIndex }',\r\n        dataScope: '${ $.name }',\r\n        nodeTemplate: '${ $.$data.name }.${ $.$data.itemTemplate }'\r\n    };\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            lastIndex: 0,\r\n            template: 'ui/form/components/collection'\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initialize of parent\r\n         * class, calls initChildren method.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Activates the incoming child and triggers the update event.\r\n         *\r\n         * @param {Object} elem - Incoming child.\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.activate();\r\n\r\n            this.bubble('update');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Loops over corresponding data in data storage,\r\n         * creates child for each and pushes it's identifier to initialItems array.\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var children = this.source.get(this.dataScope),\r\n                initial = this.initialItems = [];\r\n\r\n            _.each(children, function (item, index) {\r\n                initial.push(index);\r\n                this.addChild(index);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates new item of collection, based on incoming 'index'.\r\n         * If not passed creates one with 'new_' prefix.\r\n         *\r\n         * @param {String|Object} [index] - Index of a child.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        addChild: function (index) {\r\n            this.childIndex = !_.isString(index) ?\r\n                'new_' + this.lastIndex++ :\r\n                index;\r\n\r\n            layout([utils.template(childTemplate, this)]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns true if current set of items differ from initial one,\r\n         * or if some child has been changed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var initial = this.initialItems,\r\n                current = this.elems.pluck('index'),\r\n                changed = !utils.equalArrays(initial, current);\r\n\r\n            return changed || this.elems.some(function (elem) {\r\n                return _.some(elem.delegate('hasChanged'));\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initiates validation of its' children components.\r\n         *\r\n         * @returns {Array} An array of validation results.\r\n         */\r\n        validate: function () {\r\n            var elems;\r\n\r\n            this.allValid = true;\r\n\r\n            elems = this.elems.sortBy(function (elem) {\r\n                return !elem.active();\r\n            });\r\n\r\n            elems = elems.map(this._validate, this);\r\n\r\n            return _.flatten(elems);\r\n        },\r\n\r\n        /**\r\n         * Iterator function for components validation.\r\n         * Activates first invalid child component.\r\n         *\r\n         * @param {Object} elem - Element to run validation on.\r\n         * @returns {Array} An array of validation results.\r\n         */\r\n        _validate: function (elem) {\r\n            var result = elem.delegate('validate'),\r\n                invalid;\r\n\r\n            invalid = _.some(result, function (item) {\r\n                return !item.valid;\r\n            });\r\n\r\n            if (this.allValid && invalid) {\r\n                this.allValid = false;\r\n\r\n                elem.activate();\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Creates function that removes element\r\n         * from collection using '_removeChild' method.\r\n         * @param  {Object} elem - Element that should be removed.\r\n         * @deprecated Not used anymore\r\n         */\r\n        removeAddress: function (elem) {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: this.removeMessage,\r\n                actions: {\r\n                    /** @inheritdoc */\r\n                    confirm: function () {\r\n                        self._removeAddress(elem);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Removes element from both collection and data storage,\r\n         * activates first element if removed one was active,\r\n         * triggers 'update' event.\r\n         *\r\n         * @param {Object} elem - Element to remove.\r\n         */\r\n        _removeAddress: function (elem) {\r\n            var isActive = elem.active(),\r\n                first;\r\n\r\n            elem.destroy();\r\n\r\n            first = this.elems.first();\r\n\r\n            if (first && isActive) {\r\n                first.activate();\r\n            }\r\n\r\n            this.bubble('update');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/fieldset.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'underscore'\r\n], function (Collapsible, _) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            template: 'ui/form/fieldset',\r\n            collapsible: false,\r\n            changed: false,\r\n            loading: false,\r\n            error: false,\r\n            opened: false,\r\n            level: 0,\r\n            visible: true,\r\n            initializeFieldsetDataByDefault: false, /* Data in some fieldsets should be initialized before open */\r\n            disabled: false,\r\n            listens: {\r\n                'opened': 'onVisibilityChange'\r\n            },\r\n            additionalClasses: {}\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onChildrenUpdate', 'onChildrenError', 'onContentLoading');\r\n\r\n            return this._super()\r\n                ._setClasses();\r\n        },\r\n\r\n        /**\r\n         * Initializes components' configuration.\r\n         *\r\n         * @returns {Fieldset} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this._wasOpened = this.opened || !this.collapsible;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         *\r\n         * @returns {Object} Reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('changed loading error visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls parent's initElement method.\r\n         * Assigns callbacks on various events of incoming element.\r\n         *\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            elem.initContainer(this);\r\n\r\n            elem.on({\r\n                'update': this.onChildrenUpdate,\r\n                'loading': this.onContentLoading,\r\n                'error': this.onChildrenError\r\n            });\r\n\r\n            if (this.disabled) {\r\n                try {\r\n                    elem.disabled(true);\r\n                }\r\n                catch (e) {\r\n\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children update.\r\n         * Sets changed property to one incoming.\r\n         *\r\n         * @param  {Boolean} hasChanged\r\n         */\r\n        onChildrenUpdate: function (hasChanged) {\r\n            if (!hasChanged) {\r\n                hasChanged = _.some(this.delegate('hasChanged'));\r\n            }\r\n\r\n            this.bubble('update', hasChanged);\r\n            this.changed(hasChanged);\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__collapsible-block-wrapper': this.collapsible,\r\n                _show: this.opened,\r\n                _hide: !this.opened,\r\n                _disabled: this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler of the \"opened\" property changes.\r\n         *\r\n         * @param {Boolean} isOpened\r\n         */\r\n        onVisibilityChange: function (isOpened) {\r\n            if (!this._wasOpened) {\r\n                this._wasOpened = isOpened;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children validation error.\r\n         * Sets error property to one incoming.\r\n         *\r\n         * @param {String} message - error message.\r\n         */\r\n        onChildrenError: function (message) {\r\n            var hasErrors = false;\r\n\r\n            if (!message) {\r\n                hasErrors = this._isChildrenHasErrors(hasErrors, this);\r\n            }\r\n\r\n            this.error(hasErrors || message);\r\n\r\n            if (hasErrors || message) {\r\n                this.open();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns errors of children if exist\r\n         *\r\n         * @param {Boolean} hasErrors\r\n         * @param {*} container\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isChildrenHasErrors: function (hasErrors, container) {\r\n            var self = this;\r\n\r\n            if (hasErrors === false && container.hasOwnProperty('elems')) {\r\n                hasErrors = container.elems.some('error');\r\n\r\n                if (hasErrors === false && container.hasOwnProperty('_elems')) {\r\n                    container._elems.forEach(function (child) {\r\n\r\n                        if (hasErrors === false) {\r\n                            hasErrors = self._isChildrenHasErrors(hasErrors, child);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return hasErrors;\r\n        },\r\n\r\n        /**\r\n         * Callback that sets loading property to true.\r\n         */\r\n        onContentLoading: function (isLoading) {\r\n            this.loading(isLoading);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/group.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiCollection'\r\n], function (_, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            visible: true,\r\n            label: '',\r\n            showLabel: true,\r\n            required: false,\r\n            template: 'ui/group/group',\r\n            fieldTemplate: 'ui/form/field',\r\n            breakLine: true,\r\n            validateWholeGroup: false,\r\n            additionalClasses: {}\r\n        },\r\n\r\n        /**\r\n         * Extends this with defaults and config.\r\n         * Then calls initObservable, iniListenes and extractData methods.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                ._setClasses();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('visible')\r\n                .observe({\r\n                    required: !!+this.required\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__control-grouped': !this.breakLine,\r\n                'admin__control-fields': this.breakLine,\r\n                required:   this.required,\r\n                _error:     this.error,\r\n                _disabled:  this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines if group has only one element.\r\n         * @return {Boolean}\r\n         */\r\n        isSingle: function () {\r\n            return this.elems.getLength() === 1;\r\n        },\r\n\r\n        /**\r\n         * Defines if group has multiple elements.\r\n         * @return {Boolean}\r\n         */\r\n        isMultiple: function () {\r\n            return this.elems.getLength() > 1;\r\n        },\r\n\r\n        /**\r\n         * Returns an array of child components previews.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPreview: function () {\r\n            return this.elems.map('getPreview');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/html.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent'\r\n], function ($, _, Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            content:        '',\r\n            showSpinner:    false,\r\n            loading:        false,\r\n            visible:        true,\r\n            template:       'ui/content/content',\r\n            additionalClasses: {},\r\n            ignoreTmpls: {\r\n                content: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls 'initialize' method of\r\n         *     parent, calls 'initAjaxConfig'\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onContainerToggle', 'onDataLoaded');\r\n\r\n            this._super()\r\n                ._setClasses()\r\n                .initAjaxConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' method of parent, initializes observable\r\n         * properties of instance\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('content loading visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__scope-old': !!additional\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initContainer: function (parent) {\r\n            this._super();\r\n\r\n            parent.on('active', this.onContainerToggle);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes default ajax config on instance\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initAjaxConfig: function () {\r\n            this.ajaxConfig = {\r\n                url: this.url,\r\n                data: {\r\n                    FORM_KEY: window.FORM_KEY\r\n                },\r\n                success:    this.onDataLoaded\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'loadData' if both 'active' variable and 'shouldLoad'\r\n         * property are truthy\r\n         *\r\n         * @param  {Boolean} active\r\n         */\r\n        onContainerToggle: function (active) {\r\n            if (active && this.shouldLoad()) {\r\n                this.loadData();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Defines if instance has 'content' property defined.\r\n         *\r\n         * @return {Boolean} [description]\r\n         */\r\n        hasData: function () {\r\n            return !!this.content();\r\n        },\r\n\r\n        /**\r\n         * Defines if instance should load external data\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        shouldLoad: function () {\r\n            return this.url && !this.hasData() && !this.loading();\r\n        },\r\n\r\n        /**\r\n         * Sets loading property to true, makes ajax call\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        loadData: function () {\r\n            this.loading(true);\r\n\r\n            $.ajax(this.ajaxConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Ajax's request success handler. Calls 'updateContent' passing 'data'\r\n         * to it, then sets 'loading' property to false.\r\n         *\r\n         * @param  {String} data\r\n         */\r\n        onDataLoaded: function (data) {\r\n            this.updateContent(data)\r\n                .loading(false);\r\n        },\r\n\r\n        /**\r\n         * Sets incoming data 'content' property's value\r\n         *\r\n         * @param  {String} content\r\n         * @return {Object} - reference to instance\r\n         */\r\n        updateContent: function (content) {\r\n            this.content(content);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './insert',\r\n    'mageUtils',\r\n    'jquery'\r\n], function (Insert, utils, $) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Get page actions element.\r\n     *\r\n     * @param {String} elem\r\n     * @param {String} actionsClass\r\n     * @returns {String}\r\n     */\r\n    function getPageActions(elem, actionsClass) {\r\n        var el = document.createElement('div');\r\n\r\n        el.innerHTML = elem;\r\n\r\n        return el.getElementsByClassName(actionsClass)[0];\r\n    }\r\n\r\n    /**\r\n     * Return element without page actions toolbar\r\n     *\r\n     * @param {String} elem\r\n     * @param {String} actionsClass\r\n     * @returns {String}\r\n     */\r\n    function removePageActions(elem, actionsClass) {\r\n        var el = document.createElement('div'),\r\n            actions;\r\n\r\n        el.innerHTML = elem;\r\n        actions = el.getElementsByClassName(actionsClass)[0];\r\n\r\n        if (actions) {\r\n            el.removeChild(actions);\r\n        }\r\n\r\n        return el.innerHTML;\r\n    }\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            externalFormName: '${ $.ns }.${ $.ns }',\r\n            pageActionsClass: 'page-actions',\r\n            actionsContainerClass: 'page-main-actions',\r\n            exports: {\r\n                prefix: '${ $.externalFormName }:selectorPrefix'\r\n            },\r\n            imports: {\r\n                toolbarSection: '${ $.toolbarContainer }:toolbarSection',\r\n                prefix: '${ $.toolbarContainer }:rootSelector',\r\n                messagesClass: '${ $.externalFormName }:messagesClass'\r\n            },\r\n            settings: {\r\n                ajax: {\r\n                    ajaxSave: true,\r\n                    exports: {\r\n                        ajaxSave: '${ $.externalFormName }:ajaxSave'\r\n                    },\r\n                    imports: {\r\n                        responseStatus: '${ $.externalFormName }:responseStatus',\r\n                        responseData: '${ $.externalFormName }:responseData'\r\n                    }\r\n                }\r\n            },\r\n            modules: {\r\n                externalForm: '${ $.externalFormName }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe('responseStatus');\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var defaults = this.constructor.defaults;\r\n\r\n            utils.extend(defaults, defaults.settings[config.formSubmitType] || {});\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc*/\r\n        destroyInserted: function () {\r\n            if (this.isRendered && this.externalForm()) {\r\n                this.externalForm().delegate('destroy');\r\n                this.removeActions();\r\n                this.responseStatus(undefined);\r\n                this.responseData = {};\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        onRender: function (data) {\r\n            var actions = getPageActions(data, this.pageActionsClass);\r\n\r\n            if (!data.length) {\r\n                return this;\r\n            }\r\n            data = removePageActions(data, this.pageActionsClass);\r\n            this.renderActions(actions);\r\n            this._super(data);\r\n        },\r\n\r\n        /**\r\n         * Insert actions in toolbar.\r\n         *\r\n         * @param {String} actions\r\n         */\r\n        renderActions: function (actions) {\r\n            var $container = $('<div/>');\r\n\r\n            $container\r\n                .addClass(this.actionsContainerClass)\r\n                .append(actions);\r\n\r\n            this.formHeader = $container;\r\n\r\n            $(this.toolbarSection).append(this.formHeader);\r\n        },\r\n\r\n        /**\r\n         * Remove actions toolbar.\r\n         */\r\n        removeActions: function () {\r\n            $(this.formHeader).siblings('.' + this.messagesClass).remove();\r\n            $(this.formHeader).remove();\r\n            this.formHeader = $();\r\n        },\r\n\r\n        /**\r\n         * Reset external form data.\r\n         */\r\n        resetForm: function () {\r\n            if (this.externalSource()) {\r\n                this.externalSource().trigger('data.reset');\r\n                this.responseStatus(undefined);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/insert-listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    './insert',\r\n    'mageUtils',\r\n    'underscore'\r\n], function ($, Insert, utils, _) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            externalListingName: '${ $.ns }.${ $.ns }',\r\n            behaviourType: 'simple',\r\n            externalFilterMode: false,\r\n            requestConfig: {\r\n                method: 'POST'\r\n            },\r\n            externalCondition: 'nin',\r\n            settings: {\r\n                edit: {\r\n                    imports: {\r\n                        'onChangeRecord': '${ $.editorProvider }:changed'\r\n                    }\r\n                },\r\n                filter: {\r\n                    exports: {\r\n                        'requestConfig': '${ $.externalProvider }:requestConfig'\r\n                    }\r\n                }\r\n            },\r\n            imports: {\r\n                onSelectedChange: '${ $.selectionsProvider }:selected',\r\n                'update_url': '${ $.externalProvider }:update_url',\r\n                'indexField': '${ $.selectionsProvider }:indexField'\r\n            },\r\n            exports: {\r\n                externalFiltersModifier: '${ $.externalProvider }:params.filters_modifier'\r\n            },\r\n            listens: {\r\n                externalValue: 'updateExternalFiltersModifier updateSelections',\r\n                indexField: 'initialUpdateListing'\r\n            },\r\n            modules: {\r\n                selections: '${ $.selectionsProvider }',\r\n                externalListing: '${ $.externalListingName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this, 'updateValue', 'updateExternalValueByEditableData');\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var defaults = this.constructor.defaults;\r\n\r\n            if (config.behaviourType === 'edit') {\r\n                defaults.editableData = {};\r\n                _.map(defaults.settings.edit.imports, function (value, key) {\r\n                    this.imports[key] = value;\r\n                }, defaults);\r\n            }\r\n\r\n            if (config.externalFilterMode === true) {\r\n                _.map(defaults.settings.filter.exports, function (value, key) {\r\n                    this.exports[key] = value;\r\n                }, defaults);\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'externalValue'\r\n                ]);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroyInserted: function () {\r\n            if (this.isRendered && this.externalListing()) {\r\n                this.externalListing().source.storage().clearRequests();\r\n                this.externalListing().delegate('destroy');\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Store data from edited record\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        onChangeRecord: function (record) {\r\n            this.updateEditableData(record);\r\n\r\n            if (!this.dataLinks.imports) {\r\n                return;\r\n            }\r\n\r\n            this.updateExternalValueByEditableData();\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue every time row is selected,\r\n         * if it is configured by 'dataLinks.imports'\r\n         * Also suppress dataLinks so import/export of selections will not activate each other in circle\r\n         *\r\n         */\r\n        onSelectedChange: function () {\r\n            if (!this.dataLinks.imports ||\r\n                this.suppressDataLinks ||\r\n                _.isBoolean(this.initialExportDone) && !this.initialExportDone\r\n            ) {\r\n                this.suppressDataLinks = false;\r\n\r\n                return;\r\n            }\r\n\r\n            this.suppressDataLinks = true;\r\n            this.updateExternalValue();\r\n        },\r\n\r\n        /**\r\n         * Stores data from editor in editableData\r\n         * @param {Object} record\r\n         *\r\n         */\r\n        updateEditableData: function (record) {\r\n            var id = _.keys(record[0])[0];\r\n\r\n            this.editableData[id] = record[0][id];\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue by data from editor (already stored in editableData)\r\n         *\r\n         */\r\n        updateExternalValueByEditableData: function () {\r\n            var updatedExtValue;\r\n\r\n            if (!(this.behaviourType === 'edit') || _.isEmpty(this.editableData) || _.isEmpty(this.externalValue())) {\r\n                return;\r\n            }\r\n\r\n            updatedExtValue = this.externalValue();\r\n            updatedExtValue.map(function (item) {\r\n                _.extend(item, this.editableData[item[this.indexField]]);\r\n            }, this);\r\n            this.setExternalValue(updatedExtValue);\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue, from selectionsProvider data (if it is enough)\r\n         * or ajax request to server\r\n         *\r\n         * @returns {Object} result - deferred that will be resolved when value is updated\r\n         */\r\n        updateExternalValue: function () {\r\n            var result = $.Deferred(),\r\n                provider = this.selections(),\r\n                selections,\r\n                totalSelected,\r\n                itemsType,\r\n                rows;\r\n\r\n            if (!provider) {\r\n                return result;\r\n            }\r\n\r\n            selections = provider && provider.getSelections();\r\n            totalSelected = provider.totalSelected();\r\n            itemsType = selections && selections.excludeMode ? 'excluded' : 'selected';\r\n            rows = provider && provider.rows();\r\n\r\n            if (this.canUpdateFromClientData(totalSelected, selections.selected, rows)) {\r\n                this.updateFromClientData(selections.selected, rows);\r\n                this.updateExternalValueByEditableData();\r\n                result.resolve();\r\n            } else {\r\n                this.updateFromServerData(selections, itemsType).done(function () {\r\n                    this.updateExternalValueByEditableData();\r\n                    result.resolve();\r\n                }.bind(this));\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Check if the selected rows data can be taken from selectionsProvider data\r\n         * (which only stores data of the current page rows)\r\n         *  + from already saved data\r\n         *\r\n         * @param {Boolean} totalSelected - total rows selected (include rows that were filtered out)\r\n         * @param {Array} selected - ids of selected rows\r\n         * @param {Object} rows\r\n         */\r\n        canUpdateFromClientData: function (totalSelected, selected, rows) {\r\n            var alreadySavedSelectionsIds = _.pluck(this.externalValue(), this.indexField),\r\n                rowsOnCurrentPageIds = _.pluck(rows, this.indexField);\r\n\r\n            return totalSelected === selected.length &&\r\n                _.intersection(_.union(alreadySavedSelectionsIds, rowsOnCurrentPageIds), selected).length ===\r\n                selected.length;\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue, from selectionsProvider data\r\n         * (which only stores data of the current page rows)\r\n         *  + from already saved data\r\n         *  so we can avoid request to server\r\n         *\r\n         * @param {Array} selected - ids of selected rows\r\n         * @param {Object} rows\r\n         */\r\n        updateFromClientData: function (selected, rows) {\r\n            var value,\r\n                rowIds,\r\n                valueIds;\r\n\r\n            if (!selected || !selected.length) {\r\n                this.setExternalValue([]);\r\n\r\n                return;\r\n            }\r\n\r\n            value = this.externalValue();\r\n            rowIds = _.pluck(rows, this.indexField);\r\n            valueIds = _.pluck(value, this.indexField);\r\n\r\n            value = _.map(selected, function (item) {\r\n                if (_.contains(rowIds, item)) {\r\n                    return _.find(rows, function (row) {\r\n                        return row[this.indexField] === item;\r\n                    }, this);\r\n                } else if (_.contains(valueIds, item)) {\r\n                    return _.find(value, function (row) {\r\n                        return row[this.indexField] === item;\r\n                    }, this);\r\n                }\r\n            }, this);\r\n\r\n            this.setExternalValue(value);\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue, from ajax request to grab selected rows data\r\n         *\r\n         * @param {Object} selections\r\n         * @param {String} itemsType\r\n         *\r\n         * @returns {Object} request - deferred that will be resolved when ajax is done\r\n         */\r\n        updateFromServerData: function (selections, itemsType) {\r\n            var filterType = selections && selections.excludeMode ? 'nin' : 'in',\r\n                selectionsData = {},\r\n                request;\r\n\r\n            _.extend(selectionsData, this.params || {}, selections.params);\r\n\r\n            if (selections[itemsType] && selections[itemsType].length) {\r\n                selectionsData.filters = {};\r\n                selectionsData['filters_modifier'] = {};\r\n                selectionsData['filters_modifier'][this.indexField] = {\r\n                    'condition_type': filterType,\r\n                    value: selections[itemsType]\r\n                };\r\n            }\r\n\r\n            selectionsData.paging = {\r\n                notLimits: 1\r\n            };\r\n\r\n            request = this.requestData(selectionsData, {\r\n                method: this.requestConfig.method\r\n            });\r\n            request\r\n                .done(function (data) {\r\n                    this.setExternalValue(data.items || data);\r\n                    this.loading(false);\r\n                }.bind(this))\r\n                .fail(this.onError);\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Set listing rows data to the externalValue,\r\n         * or if externalData is configured with the names of particular columns,\r\n         * filter rows data to have only these columns, and then set to the externalValue\r\n         *\r\n         * @param {Object} newValue - rows data\r\n         *\r\n         */\r\n        setExternalValue: function (newValue) {\r\n            var keys = this.externalData,\r\n                value = this.externalValue(),\r\n                selectedIds = _.pluck(newValue, this.indexField);\r\n\r\n            if (_.isArray(keys) && !_.isEmpty(keys)) {\r\n                newValue = _.map(newValue, function (item) {\r\n                    return _.pick(item, keys);\r\n                }, this);\r\n            } else if (keys && _.isString(keys) && !_.isEmpty(newValue)) {\r\n                newValue = newValue[0][keys];\r\n            }\r\n\r\n            if (this.externalFilterMode) {\r\n                newValue = _.union(newValue, _.filter(value,\r\n                    function (item) {\r\n                        return !_.contains(selectedIds, item[this.indexField]);\r\n                    }, this));\r\n            }\r\n\r\n            this.set('externalValue', newValue);\r\n        },\r\n\r\n        /**\r\n         * Updates external filter (if externalFilterMode is on)\r\n         * every time, when value is updated,\r\n         * so grid is re-filtered to exclude or include selected rows only\r\n         *\r\n         * @param {Object} items\r\n         */\r\n        updateExternalFiltersModifier: function (items) {\r\n            var provider,\r\n                filter = {};\r\n\r\n            if (!this.externalFilterMode) {\r\n                return;\r\n            }\r\n\r\n            provider = this.selections();\r\n\r\n            if (!provider) {\r\n                this.needInitialListingUpdate = true;\r\n\r\n                return;\r\n            }\r\n\r\n            filter[this.indexField] = {\r\n                'condition_type': this.externalCondition,\r\n                value: _.pluck(items, this.indexField)\r\n            };\r\n            this.set('externalFiltersModifier', filter);\r\n        },\r\n\r\n        /**\r\n         * Updates grid selections\r\n         * every time, when extenalValue is updated,\r\n         * so grid is re-selected according to externalValue updated\r\n         * Also suppress dataLinks so import/export of selections will not activate each other in circle\r\n         *\r\n         * @param {Object} items\r\n         */\r\n        updateSelections: function (items) {\r\n            var provider,\r\n                ids;\r\n\r\n            if (!this.dataLinks.exports || this.suppressDataLinks) {\r\n                this.suppressDataLinks = false;\r\n                this.initialExportDone = true;\r\n\r\n                return;\r\n            }\r\n\r\n            provider = this.selections();\r\n\r\n            if (!provider) {\r\n                this.needInitialListingUpdate = true;\r\n\r\n                return;\r\n            }\r\n\r\n            this.suppressDataLinks = true;\r\n            provider.deselectAll();\r\n\r\n            if (_.isString(items)) {\r\n                provider.selected([items] || []);\r\n            } else {\r\n                ids = _.pluck(items || [], this.indexField)\r\n                    .map(function (item) {\r\n                        return item.toString();\r\n                    });\r\n\r\n                provider.selected(ids || []);\r\n            }\r\n            this.initialExportDone = true;\r\n        },\r\n\r\n        /**\r\n         * initial update of the listing\r\n         * with rows that must be checked/filtered\r\n         * by the indexes\r\n         */\r\n        initialUpdateListing: function () {\r\n            var items = this.externalValue();\r\n\r\n            if (this.needInitialListingUpdate && items) {\r\n                this.updateExternalFiltersModifier(items);\r\n                this.updateSelections(items);\r\n                this.needInitialListingUpdate = false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload source\r\n         */\r\n        reload: function () {\r\n            this.externalSource().set('params.t', new Date().getTime());\r\n        },\r\n\r\n        /**\r\n         * Updates value from external value\r\n         *\r\n         */\r\n        updateValue: function () {\r\n            this.set('value', this.externalValue());\r\n        },\r\n\r\n        /**\r\n         * Updates external value, then updates value from external value\r\n         *\r\n         */\r\n        save: function () {\r\n            this.updateExternalValue().done(\r\n                function () {\r\n                    if (!this.realTimeLink) {\r\n                        this.updateValue();\r\n                    }\r\n                }.bind(this)\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/insert.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiElement',\r\n    'jquery',\r\n    'mage/translate',\r\n    'mageUtils',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/view/utils/bindings',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (Element, $, $t, utils, _, alert) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            content: '',\r\n            template: 'ui/form/insert',\r\n            showSpinner: true,\r\n            loading: false,\r\n            autoRender: true,\r\n            visible: true,\r\n            contentSelector: '${$.name}',\r\n            externalData: [],\r\n            params: {\r\n                namespace: '${ $.ns }'\r\n            },\r\n            renderSettings: {\r\n                url: '${ $.render_url }',\r\n                dataType: 'html'\r\n            },\r\n            updateSettings: {\r\n                url: '${ $.update_url }',\r\n                dataType: 'json'\r\n            },\r\n            imports: {},\r\n            exports: {},\r\n            listens: {},\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope}'\r\n            },\r\n            modules: {\r\n                externalSource: '${ $.externalProvider }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this, 'onRender', 'onUpdate');\r\n\r\n            if (this.autoRender) {\r\n                this.render();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'visible',\r\n                    'content',\r\n                    'value',\r\n                    'loading'\r\n                ]);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            this.initDataLink(config)._super();\r\n            this.contentSelector = this.contentSelector.replace(/\\./g, '_');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sync data with external provider.\r\n         *\r\n         * @param {Object} config\r\n         * @returns {Object}\r\n         */\r\n        initDataLink: function (config) {\r\n            var key, value;\r\n\r\n            if (config.dataLinks) {\r\n                _.each(config.externalData, function (val) {\r\n                    value = val;\r\n                    key = 'externalValue.' + val.replace('data.', '');\r\n\r\n                    if (config.dataLinks.imports) {\r\n                        this.imports[key] = '${ $.externalProvider }:' + value;\r\n                    }\r\n\r\n                    if (config.dataLinks.exports) {\r\n                        this.exports[key] = '${ $.externalProvider }:' + value;\r\n                    }\r\n                    this.links[key] = '${ $.externalProvider }:' + value;\r\n                }, this.constructor.defaults);\r\n            }\r\n\r\n            if (config.realTimeLink) {\r\n                this.constructor.defaults.links.externalValue = 'value';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Request for render content.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        render: function (params) {\r\n            var self = this,\r\n                request;\r\n\r\n            if (this.isRendered) {\r\n                return this;\r\n            }\r\n\r\n            self.previousParams = params || {};\r\n\r\n            $.async({\r\n                component: this.name,\r\n                ctx: '.' + this.contentSelector\r\n            }, function (el) {\r\n                self.contentEl = $(el);\r\n                self.startRender = true;\r\n                params = _.extend({}, self.params, params || {});\r\n                request = self.requestData(params, self.renderSettings);\r\n                request\r\n                    .done(self.onRender)\r\n                    .fail(self.onError);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            this.destroyInserted()\r\n                ._super();\r\n        },\r\n\r\n        /**\r\n         * Destroy inserted components.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        destroyInserted: function () {\r\n            if (this.isRendered) {\r\n                this.isRendered = false;\r\n                this.content('');\r\n\r\n                if (this.externalSource()) {\r\n                    this.externalSource().destroy();\r\n                }\r\n                this.initExternalLinks();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize links on external components.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initExternalLinks: function () {\r\n            var imports = this.filterExternalLinks(this.imports, this.ns),\r\n                exports = this.filterExternalLinks(this.exports, this.ns),\r\n                links = this.filterExternalLinks(this.links, this.ns);\r\n\r\n            this.setLinks(links, 'imports')\r\n                .setLinks(links, 'exports');\r\n\r\n            _.each({\r\n                exports: exports,\r\n                imports: imports\r\n            }, this.setLinks, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Filter external links.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String }ns\r\n         * @returns {Object}\r\n         */\r\n        filterExternalLinks: function (data, ns) {\r\n            var links  = {};\r\n\r\n            _.each(data, function (value, key) {\r\n                if (value.split('.')[0] === ns) {\r\n                    links[key] = value;\r\n                }\r\n            });\r\n\r\n            return links;\r\n        },\r\n\r\n        /**\r\n         * Request with configurable params and settings.\r\n         *\r\n         * @param {Object} params\r\n         * @param {Object} ajaxSettings\r\n         * @returns {Object}\r\n         */\r\n        requestData: function (params, ajaxSettings) {\r\n            var query = utils.copy(params);\r\n\r\n            ajaxSettings = _.extend({\r\n                url: this['update_url'],\r\n                method: 'GET',\r\n                data: query,\r\n                dataType: 'json'\r\n            }, ajaxSettings);\r\n\r\n            this.loading(true);\r\n\r\n            return $.ajax(ajaxSettings);\r\n        },\r\n\r\n        /**\r\n         * Callback that render content.\r\n         *\r\n         * @param {*} data\r\n         */\r\n        onRender: function (data) {\r\n            var resp;\r\n\r\n            this.loading(false);\r\n\r\n            try {\r\n                resp = JSON.parse(data);\r\n\r\n                if (resp.ajaxExpired) {\r\n                    window.location.href = resp.ajaxRedirect;\r\n                }\r\n            } catch (e) {\r\n                this.set('content', data);\r\n                this.isRendered = true;\r\n                this.startRender = false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Error callback.\r\n         *\r\n         * @param {Object} xhr\r\n         */\r\n        onError: function (xhr) {\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            alert({\r\n                content: $t('Something went wrong.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Getter for external data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getExternalData: function () {\r\n            var data = {};\r\n\r\n            _.each(this.externalData, function (path) {\r\n                utils.nested(data, path.replace('data.', ''), this.externalSource().get(path));\r\n            }, this);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Request for update data.\r\n         *\r\n         * @returns {*|Object}\r\n         */\r\n        updateData: function (params) {\r\n            var request;\r\n\r\n            params = _.extend(params || {}, this.params);\r\n\r\n            if (!this.startRender && !this.isRendered) {\r\n                return this.render(params);\r\n            }\r\n\r\n            request = this.requestData(params, this.updateSettings);\r\n            request\r\n                .done(this.onUpdate)\r\n                .fail(this.onError);\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Set data to external provider, clear changes.\r\n         *\r\n         * @param {*} data\r\n         */\r\n        onUpdate: function (data) {\r\n            this.externalSource().set('data', data);\r\n            this.externalSource().trigger('data.overload');\r\n            this.loading(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/tab.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiCollection'\r\n], function (Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            uniqueProp:     'active',\r\n            active:         false,\r\n            wasActivated:   false\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .setUnique();\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('active wasActivated');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets active property to true, then invokes pushParams method.\r\n         */\r\n        activate: function () {\r\n            this.active(true);\r\n            this.wasActivated(true);\r\n\r\n            this.setUnique();\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/tab_group.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/collapsible'\r\n], function (_, Collapsible) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:data.validate': 'onValidate'\r\n            },\r\n            collapsible: false,\r\n            opened: true\r\n        },\r\n\r\n        /**\r\n         * Invokes initElement method of parent class, calls 'initActivation' method\r\n         * passing element to it.\r\n         * @param {Object} elem\r\n         * @returns {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            this._super()\r\n                .initActivation(elem);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Activates element if one is first or if one has 'active' propert\r\n         * set to true.\r\n         *\r\n         * @param  {Object} elem\r\n         * @returns {Object} - reference to instance\r\n         */\r\n        initActivation: function (elem) {\r\n            var elems   = this.elems(),\r\n                isFirst = !elems.indexOf(elem);\r\n\r\n            if (isFirst || elem.active()) {\r\n                elem.activate();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delegates 'validate' method on element, then reads 'invalid' property\r\n         * of params storage, and if defined, activates element, sets\r\n         * 'allValid' property of instance to false and sets invalid's\r\n         * 'focused' property to true.\r\n         *\r\n         * @param {Object} elem\r\n         */\r\n        validate: function (elem) {\r\n            var result  = elem.delegate('validate'),\r\n                invalid;\r\n\r\n            invalid = _.find(result, function (item) {\r\n                return typeof item !== 'undefined' && !item.valid;\r\n            });\r\n\r\n            if (invalid) {\r\n                elem.activate();\r\n                invalid.target.focused(true);\r\n            }\r\n\r\n            return invalid;\r\n        },\r\n\r\n        /**\r\n         * Sets 'allValid' property of instance to true, then calls 'validate' method\r\n         * of instance for each element.\r\n         */\r\n        onValidate: function () {\r\n            this.elems.sortBy(function (elem) {\r\n                return !elem.active();\r\n            }).some(this.validate, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/collection/item.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    '../tab'\r\n], function (_, utils, Tab) {\r\n    'use strict';\r\n\r\n    var previewConfig = {\r\n        separator: ' ',\r\n        prefix: ''\r\n    };\r\n\r\n    /**\r\n     * Parses incoming data and returns result merged with default preview config\r\n     *\r\n     * @param  {Object|String} data\r\n     * @return {Object}\r\n     */\r\n    function parsePreview(data) {\r\n        if (typeof data == 'string') {\r\n            data = {\r\n                items: data\r\n            };\r\n        }\r\n\r\n        data.items = utils.stringToArray(data.items);\r\n\r\n        return _.defaults(data, previewConfig);\r\n    }\r\n\r\n    return Tab.extend({\r\n        defaults: {\r\n            label: '',\r\n            uniqueNs: 'activeCollectionItem',\r\n            previewTpl: 'ui/form/components/collection/preview'\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initializes of parent class\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'buildPreview', 'hasPreview');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls initProperties of parent class, initializes properties\r\n         * of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.displayed = [];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class, initializes observable\r\n         * properties of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe({\r\n                    noPreview: true,\r\n                    indexed: {}\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being called when child element has been initialized,\r\n         *     calls initElement of parent class, binds to element's update event,\r\n         *     calls insertToArea and insertToIndexed methods passing element to it\r\n         *\r\n         * @param  {Object} elem\r\n         */\r\n        initElement: function (elem) {\r\n            this._super()\r\n                .insertToIndexed(elem);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds element to observable indexed object of instance\r\n         *\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        insertToIndexed: function (elem) {\r\n            var indexed = this.indexed();\r\n\r\n            indexed[elem.index] = elem;\r\n\r\n            this.indexed(indexed);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys current instance along with all of its' children.\r\n         * Overrides base method to clear data when this method is called.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            this._clearData();\r\n        },\r\n\r\n        /**\r\n         * Clears all data associated with component.\r\n         * @private\r\n         *\r\n         * @returns {Item} Chainable.\r\n         */\r\n        _clearData: function () {\r\n            this.source.remove(this.dataScope);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming previews array via parsePreview function.\r\n         *\r\n         * @param  {Array} previews\r\n         * @return {Array} - formatted previews\r\n         */\r\n        formatPreviews: function (previews) {\r\n            return previews.map(parsePreview);\r\n        },\r\n\r\n        /**\r\n         * Creates string view of previews\r\n         *\r\n         * @param  {Object} data\r\n         * @return {Strict} - formatted preview string\r\n         */\r\n        buildPreview: function (data) {\r\n            var preview = this.getPreview(data.items),\r\n                prefix = data.prefix;\r\n\r\n            return prefix + preview.join(data.separator);\r\n        },\r\n\r\n        /**\r\n         * Defines if instance has preview for incoming data\r\n         *\r\n         * @param  {Object}  data\r\n         * @return {Boolean}\r\n         */\r\n        hasPreview: function (data) {\r\n            return !!this.getPreview(data.items).length;\r\n        },\r\n\r\n        /**\r\n         * Creates an array of previews for elements specified in incoming\r\n         * items array, calls updatePreview afterwards.\r\n         *\r\n         * @param  {Array} items - An array of element's indexes.\r\n         * @returns {Array} An array of previews.\r\n         */\r\n        getPreview: function (items) {\r\n            var elems = this.indexed(),\r\n                displayed = this.displayed,\r\n                preview;\r\n\r\n            items = items.map(function (index) {\r\n                var elem = elems[index];\r\n\r\n                preview = elem && elem.visible() ? elem.getPreview() : '';\r\n\r\n                preview = Array.isArray(preview) ?\r\n                    _.compact(preview).join(', ') :\r\n                    preview;\r\n\r\n                utils.toggle(displayed, index, !!preview);\r\n\r\n                return preview;\r\n            });\r\n\r\n            this.noPreview(!displayed.length);\r\n\r\n            return _.compact(items);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/abstract.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiElement',\r\n    'Magento_Ui/js/lib/validation/validator'\r\n], function (_, utils, layout, Element, validator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            visible: true,\r\n            preview: '',\r\n            focused: false,\r\n            required: false,\r\n            disabled: false,\r\n            valueChangedByUser: false,\r\n            elementTmpl: 'ui/form/element/input',\r\n            tooltipTpl: 'ui/form/element/helper/tooltip',\r\n            fallbackResetTpl: 'ui/form/element/helper/fallback-reset',\r\n            'input_type': 'input',\r\n            placeholder: false,\r\n            description: '',\r\n            labelVisible: true,\r\n            label: '',\r\n            error: '',\r\n            warn: '',\r\n            notice: '',\r\n            customScope: '',\r\n            default: '',\r\n            isDifferedFromDefault: false,\r\n            showFallbackReset: false,\r\n            additionalClasses: {},\r\n            isUseDefault: '',\r\n            serviceDisabled: false,\r\n            valueUpdate: false, // ko binding valueUpdate\r\n\r\n            switcherConfig: {\r\n                component: 'Magento_Ui/js/form/switcher',\r\n                name: '${ $.name }_switcher',\r\n                target: '${ $.name }',\r\n                property: 'value'\r\n            },\r\n            listens: {\r\n                visible: 'setPreview',\r\n                value: 'setDifferedFromDefault',\r\n                '${ $.provider }:data.reset': 'reset',\r\n                '${ $.provider }:data.overload': 'overload',\r\n                '${ $.provider }:${ $.customScope ? $.customScope + \".\" : \"\"}data.validate': 'validate',\r\n                'isUseDefault': 'toggleUseDefault'\r\n            },\r\n            ignoreTmpls: {\r\n                value: true\r\n            },\r\n\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'reset');\r\n\r\n            this._super()\r\n                .setInitialValue()\r\n                ._setClasses()\r\n                .initSwitcher();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if component has error.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        checkInvalid: function () {\r\n            return this.error() && this.error().length ? this : null;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            var rules = this.validation = this.validation || {};\r\n\r\n            this._super();\r\n\r\n            this.observe('error disabled focused preview visible value warn notice isDifferedFromDefault')\r\n                .observe('isUseDefault serviceDisabled')\r\n                .observe({\r\n                    'required': !!rules['required-entry']\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            var uid = utils.uniqueid(),\r\n                name,\r\n                valueUpdate,\r\n                scope;\r\n\r\n            this._super();\r\n\r\n            scope = this.dataScope.split('.');\r\n            name = scope.length > 1 ? scope.slice(1) : scope;\r\n\r\n            valueUpdate = this.showFallbackReset ? 'afterkeydown' : this.valueUpdate;\r\n\r\n            _.extend(this, {\r\n                uid: uid,\r\n                noticeId: 'notice-' + uid,\r\n                errorId: 'error-' + uid,\r\n                inputName: utils.serializeName(name.join('.')),\r\n                valueUpdate: valueUpdate\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes switcher element instance.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initSwitcher: function () {\r\n            if (this.switcherConfig.enabled) {\r\n                layout([this.switcherConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets initial value of the element and subscribes to it's changes.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            this.initialValue = this.getInitialValue();\r\n\r\n            if (this.value.peek() !== this.initialValue) {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.on('value', this.onUpdate.bind(this));\r\n            this.isUseDefault(this.disabled());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses;\r\n\r\n            if (_.isString(additional)) {\r\n                this.additionalClasses = {};\r\n\r\n                if (additional.trim().length) {\r\n                    additional = additional.trim().split(' ');\r\n\r\n                    additional.forEach(function (name) {\r\n                        if (name.length) {\r\n                            this.additionalClasses[name] = true;\r\n                        }\r\n                    }, this);\r\n                }\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                _required: this.required,\r\n                _error: this.error,\r\n                _warn: this.warn,\r\n                _disabled: this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets initial value of element\r\n         *\r\n         * @returns {*} Elements' value.\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.value(), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                if (v !== null && v !== undefined) {\r\n                    value = v;\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        },\r\n\r\n        /**\r\n         * Sets 'value' as 'hidden' property's value, triggers 'toggle' event,\r\n         * sets instance's hidden identifier in params storage based on\r\n         * 'value'.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setVisible: function (isVisible) {\r\n            this.visible(isVisible);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Show element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        show: function () {\r\n            this.visible(true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hide element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.visible(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        disable: function () {\r\n            this.disabled(true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        enable: function () {\r\n            this.disabled(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {(String|Object)} rule\r\n         * @param {(Object|Boolean)} [options]\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setValidation: function (rule, options) {\r\n            var rules = utils.copy(this.validation),\r\n                changed;\r\n\r\n            if (_.isObject(rule)) {\r\n                _.extend(this.validation, rule);\r\n            } else {\r\n                this.validation[rule] = options;\r\n            }\r\n\r\n            changed = !utils.compare(rules, this.validation).equal;\r\n\r\n            if (changed) {\r\n                this.required(!!rules['required-entry']);\r\n                this.validate();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns unwrapped preview observable.\r\n         *\r\n         * @returns {String} Value of the preview observable.\r\n         */\r\n        getPreview: function () {\r\n            return this.value();\r\n        },\r\n\r\n        /**\r\n         * Checks if element has addons\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasAddons: function () {\r\n            return this.addbefore || this.addafter;\r\n        },\r\n\r\n        /**\r\n         * Checks if element has service setting\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasService: function () {\r\n            return this.service && this.service.template;\r\n        },\r\n\r\n        /**\r\n         * Defines if value has changed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var notEqual = this.value() !== this.initialValue;\r\n\r\n            return !this.visible() ? false : notEqual;\r\n        },\r\n\r\n        /**\r\n         * Checks if 'value' is not empty.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !utils.isEmpty(this.value());\r\n        },\r\n\r\n        /**\r\n         * Sets value observable to initialValue property.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.value(this.initialValue);\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets current state as initial.\r\n         */\r\n        overload: function () {\r\n            this.setInitialValue();\r\n            this.bubble('update', this.hasChanged());\r\n        },\r\n\r\n        /**\r\n         * Clears 'value' property.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value('');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts values like 'null' or 'undefined' to an empty string.\r\n         *\r\n         * @param {*} value - Value to be processed.\r\n         * @returns {*}\r\n         */\r\n        normalizeData: function (value) {\r\n            return utils.isEmpty(value) ? '' : value;\r\n        },\r\n\r\n        /**\r\n         * Validates itself by it's validation rules using validator object.\r\n         * If validation of a rule did not pass, writes it's message to\r\n         * 'error' observable property.\r\n         *\r\n         * @returns {Object} Validate information.\r\n         */\r\n        validate: function () {\r\n            var value = this.value(),\r\n                result = validator(this.validation, value, this.validationParams),\r\n                message = !this.disabled() && this.visible() ? result.message : '',\r\n                isValid = this.disabled() || !this.visible() || result.passed;\r\n\r\n            this.error(message);\r\n            this.error.valueHasMutated();\r\n            this.bubble('error', message);\r\n\r\n            //TODO: Implement proper result propagation for form\r\n            if (this.source && !isValid) {\r\n                this.source.set('params.invalid', true);\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                target: this\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         */\r\n        onUpdate: function () {\r\n            this.bubble('update', this.hasChanged());\r\n\r\n            this.validate();\r\n        },\r\n\r\n        /**\r\n         * Restore value to default\r\n         */\r\n        restoreToDefault: function () {\r\n            this.value(this.default);\r\n            this.focused(true);\r\n        },\r\n\r\n        /**\r\n         * Update whether value differs from default value\r\n         */\r\n        setDifferedFromDefault: function () {\r\n            var value = typeof this.value() != 'undefined' && this.value() !== null ? this.value() : '',\r\n                defaultValue = typeof this.default != 'undefined' && this.default !== null ? this.default : '';\r\n\r\n            this.isDifferedFromDefault(value !== defaultValue);\r\n        },\r\n\r\n        /**\r\n         * @param {Boolean} state\r\n         */\r\n        toggleUseDefault: function (state) {\r\n            this.disabled(state);\r\n\r\n            if (this.source && this.hasService()) {\r\n                this.source.set('data.use_default.' + this.index, Number(state));\r\n            }\r\n        },\r\n\r\n        /**\r\n         *  Callback when value is changed by user\r\n         */\r\n        userChanges: function () {\r\n            this.valueChangedByUser = true;\r\n        },\r\n\r\n        /**\r\n         * Returns correct id for 'aria-describedby' accessibility attribute\r\n         *\r\n         * @returns {Boolean|String}\r\n         */\r\n        getDescriptionId: function () {\r\n            var id = false;\r\n\r\n            if (this.error()) {\r\n                id = this.errorId;\r\n            } else if (this.notice()) {\r\n                id = this.noticeId;\r\n            }\r\n\r\n            return id;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/boolean.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            checked: false,\r\n            links: {\r\n                checked: 'value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {*|void|Element}\r\n         */\r\n        initObservable: function () {\r\n            return this._super()\r\n                    .observe('checked');\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to boolean.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        normalizeData: function () {\r\n            return !!+this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls 'onUpdate' method of parent, if value is defined and instance's\r\n         *     'unique' property set to true, calls 'setUnique' method\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        onUpdate: function () {\r\n            if (this.hasUnique) {\r\n                this.setUnique();\r\n            }\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/checkbox-set.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './abstract'\r\n], function (_, utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            template: 'ui/form/element/checkbox-set',\r\n            multiple: false,\r\n            multipleScopeValue: null\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.value = this.normalizeData(this.value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initLinks: function () {\r\n            var scope = this.source.get(this.dataScope);\r\n\r\n            this.multipleScopeValue = this.multiple && _.isArray(scope) ? utils.copy(scope) : undefined;\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            this.value(utils.copy(this.initialValue));\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            var value = this.multiple ? [] : '';\r\n\r\n            this.value(value);\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        normalizeData: function (value) {\r\n            if (!this.multiple) {\r\n                return this._super();\r\n            }\r\n\r\n            return _.isArray(value) ? utils.copy(value) : [];\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.initialValue = utils.copy(this.initialValue);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.multipleScopeValue, this.default, this.value.peek(), []],\r\n                value;\r\n\r\n            if (!this.multiple) {\r\n                return this._super();\r\n            }\r\n\r\n            values.some(function (v) {\r\n                return _.isArray(v) && (value = utils.copy(v));\r\n            });\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * Returns labels which matches current value.\r\n         *\r\n         * @returns {String|Array}\r\n         */\r\n        getPreview: function () {\r\n            var option;\r\n\r\n            if (!this.multiple) {\r\n                option = this.getOption(this.value());\r\n\r\n                return option ? option.label : '';\r\n            }\r\n\r\n            return this.value.map(function (value) {\r\n                return this.getOption(value).label;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Returns option object associated with provided value.\r\n         *\r\n         * @param {String} value\r\n         * @returns {Object}\r\n         */\r\n        getOption: function (value) {\r\n            return _.findWhere(this.options, {\r\n                value: value\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return this.multiple ?\r\n                !utils.equalArrays(value, initial) :\r\n                this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/color-picker-palette.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * @api\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return [\r\n        [\r\n            'rgb(0,0,0)', 'rgb(52,52,52)', 'rgb(83,83,83)', 'rgb(135,135,135)', 'rgb(193,193,193)',\r\n            'rgb(234,234,234)', 'rgb(240,240,240)', 'rgb(255,255,255)'\r\n        ],\r\n        [\r\n            'rgb(252,0,9)', 'rgb(253,135,10)', 'rgb(255,255,13)', 'rgb(35,255,9)', 'rgb(33,255,255)',\r\n            'rgb(0,0,254)', 'rgb(132,0,254)', 'rgb(251,0,255)'\r\n        ],\r\n        [\r\n            'rgb(240,192,194)', 'rgb(251,223,194)', 'rgb(255,241,193)', 'rgb(210,230,201)',\r\n            'rgb(199,217,220)', 'rgb(197,219,240)', 'rgb(208,200,227)', 'rgb(229,199,212)'\r\n        ],\r\n        [\r\n            'rgb(228,133,135)', 'rgb(246,193,139)', 'rgb(254,225,136)', 'rgb(168,208,152)',\r\n            'rgb(146,184,190)', 'rgb(143,184,227)', 'rgb(165,148,204)', 'rgb(202,147,175)'\r\n        ],\r\n        [\r\n            'rgb(214,78,83)', 'rgb(243,163,88)', 'rgb(254,211,83)', 'rgb(130,187,106)',\r\n            'rgb(99,149,159)', 'rgb(93,150,211)', 'rgb(123,100,182)', 'rgb(180,100,142)'\r\n        ],\r\n        [\r\n            'rgb(190,0,5)', 'rgb(222,126,44)', 'rgb(236,183,39)', 'rgb(89,155,61)', 'rgb(55,110,123)',\r\n            'rgb(49,112,185)', 'rgb(83,55,150)', 'rgb(147,55,101)'\r\n        ],\r\n        [\r\n            'rgb(133,0,3)', 'rgb(163,74,10)', 'rgb(177,127,7)', 'rgb(45,101,23)', 'rgb(18,62,74)',\r\n            'rgb(14,62,129)', 'rgb(40,15,97)', 'rgb(95,16,55)'\r\n        ],\r\n        [\r\n            'rgb(81,0,1)', 'rgb(100,48,7)', 'rgb(107,78,3)', 'rgb(31,63,16)',\r\n            'rgb(13,39,46)', 'rgb(10,40,79)', 'rgb(24,12,59)', 'rgb(59,10,36)'\r\n        ]\r\n    ];\r\n});\r\n","Magento_Ui/js/form/element/color-picker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Ui/js/form/element/color-picker-palette'\r\n], function ($t, Abstract, palette) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        defaults: {\r\n            colorPickerConfig: {\r\n                chooseText: $t('Apply'),\r\n                cancelText: $t('Cancel'),\r\n                maxSelectionSize: 8,\r\n                clickoutFiresChange: true,\r\n                allowEmpty: true,\r\n                localStorageKey: 'magento.spectrum',\r\n                palette: palette\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.colorPickerConfig.value = this.value;\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/country.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select'\r\n], function (_, registry, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            imports: {\r\n                update: '${ $.parentName }.website_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters 'initialOptions' property by 'field' and 'value' passed,\r\n         * calls 'setOptions' passing the result to it\r\n         *\r\n         * @param {*} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var result, defaultCountry, defaultValue;\r\n\r\n            if (!field) { //validate field, if we are on update\r\n                field = this.filterBy.field;\r\n            }\r\n\r\n            this._super(value, field);\r\n            result = _.filter(this.initialOptions, function (item) {\r\n\r\n                if (item[field]) {\r\n                    return ~item[field].indexOf(value);\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            this.setOptions(result);\r\n            this.reset();\r\n\r\n            if (!this.value()) {\r\n                defaultCountry = _.filter(result, function (item) {\r\n                    return item['is_default'] && _.contains(item['is_default'], value);\r\n                });\r\n\r\n                if (defaultCountry.length) {\r\n                    defaultValue = defaultCountry.shift();\r\n                    this.value(defaultValue.value);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n","Magento_Ui/js/form/element/date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'moment',\r\n    'mageUtils',\r\n    './abstract',\r\n    'moment-timezone-with-data'\r\n], function (moment, utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            options: {},\r\n\r\n            storeTimeZone: 'UTC',\r\n\r\n            validationParams: {\r\n                dateFormat: '${ $.outputDateFormat }'\r\n            },\r\n\r\n            /**\r\n             * Format of date that comes from the\r\n             * server (ICU Date Format).\r\n             *\r\n             * Used only in date picker mode\r\n             * (this.options.showsTime == false).\r\n             *\r\n             * @type {String}\r\n             */\r\n            inputDateFormat: 'y-MM-dd',\r\n\r\n            /**\r\n             * Format of date that should be sent to the\r\n             * server (ICU Date Format).\r\n             *\r\n             * Used only in date picker mode\r\n             * (this.options.showsTime == false).\r\n             *\r\n             * @type {String}\r\n             */\r\n            outputDateFormat: 'MM/dd/y',\r\n\r\n            /**\r\n             * Date/time format that is used to display date in\r\n             * the input field.\r\n             *\r\n             * @type {String}\r\n             */\r\n            pickerDateTimeFormat: '',\r\n\r\n            pickerDefaultDateFormat: 'MM/dd/y', // ICU Date Format\r\n            pickerDefaultTimeFormat: 'h:mm a', // ICU Time Format\r\n\r\n            elementTmpl: 'ui/form/element/date',\r\n\r\n            /**\r\n             * Format needed by moment timezone for conversion\r\n             */\r\n            timezoneFormat: 'YYYY-MM-DD HH:mm',\r\n\r\n            listens: {\r\n                'value': 'onValueChange',\r\n                'shiftedValue': 'onShiftedValueChange'\r\n            },\r\n\r\n            /**\r\n             * Date/time value shifted to corresponding timezone\r\n             * according to this.storeTimeZone property. This value\r\n             * will be sent to the server.\r\n             *\r\n             * @type {String}\r\n             */\r\n            shiftedValue: ''\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            if (!this.options.dateFormat) {\r\n                this.options.dateFormat = this.pickerDefaultDateFormat;\r\n            }\r\n\r\n            if (!this.options.timeFormat) {\r\n                this.options.timeFormat = this.pickerDefaultTimeFormat;\r\n            }\r\n\r\n            this.prepareDateTimeFormats();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this._super().observe(['shiftedValue']);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getPreview: function () {\r\n            return this.shiftedValue();\r\n        },\r\n\r\n        /**\r\n         * Prepares and sets date/time value that will be displayed\r\n         * in the input field.\r\n         *\r\n         * @param {String} value\r\n         */\r\n        onValueChange: function (value) {\r\n            var shiftedValue;\r\n\r\n            if (value) {\r\n                if (this.options.showsTime) {\r\n                    shiftedValue = moment.tz(value, 'UTC').tz(this.storeTimeZone);\r\n                } else {\r\n                    shiftedValue = moment(value, this.outputDateFormat);\r\n                }\r\n\r\n                if (!shiftedValue.isValid()) {\r\n                    shiftedValue = moment(value, this.inputDateFormat);\r\n                }\r\n                shiftedValue = shiftedValue.format(this.pickerDateTimeFormat);\r\n            } else {\r\n                shiftedValue = '';\r\n            }\r\n\r\n            if (shiftedValue !== this.shiftedValue()) {\r\n                this.shiftedValue(shiftedValue);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepares and sets date/time value that will be sent\r\n         * to the server.\r\n         *\r\n         * @param {String} shiftedValue\r\n         */\r\n        onShiftedValueChange: function (shiftedValue) {\r\n            var value,\r\n                formattedValue,\r\n                momentValue;\r\n\r\n            if (shiftedValue) {\r\n                momentValue = moment(shiftedValue, this.pickerDateTimeFormat);\r\n\r\n                if (this.options.showsTime) {\r\n                    formattedValue = moment(momentValue).format(this.timezoneFormat);\r\n                    value = moment.tz(formattedValue, this.storeTimeZone).tz('UTC').toISOString();\r\n                } else {\r\n                    value = momentValue.format(this.outputDateFormat);\r\n                }\r\n            } else {\r\n                value = '';\r\n            }\r\n\r\n            if (value !== this.value()) {\r\n                this.value(value);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepares and converts all date/time formats to be compatible\r\n         * with moment.js library.\r\n         */\r\n        prepareDateTimeFormats: function () {\r\n            this.pickerDateTimeFormat = this.options.dateFormat;\r\n\r\n            if (this.options.showsTime) {\r\n                this.pickerDateTimeFormat += ' ' + this.options.timeFormat;\r\n            }\r\n\r\n            this.pickerDateTimeFormat = utils.convertToMomentFormat(this.pickerDateTimeFormat);\r\n\r\n            if (this.options.dateFormat) {\r\n                this.outputDateFormat = this.options.dateFormat;\r\n            }\r\n\r\n            this.inputDateFormat = utils.convertToMomentFormat(this.inputDateFormat);\r\n            this.outputDateFormat = utils.convertToMomentFormat(this.outputDateFormat);\r\n\r\n            this.validationParams.dateFormat = this.outputDateFormat;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/file-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n/* global Base64 */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'mage/backend/notification',\r\n    'mage/translate',\r\n    'jquery/file-uploader',\r\n    'mage/adminhtml/tools'\r\n], function ($, _, utils, uiAlert, validator, Element, notification, $t) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            value: [],\r\n            aggregatedErrors: [],\r\n            maxFileSize: false,\r\n            isMultipleFiles: false,\r\n            placeholderType: 'document', // 'image', 'video'\r\n            allowedExtensions: false,\r\n            previewTmpl: 'ui/form/element/uploader/preview',\r\n            dropZone: '[data-role=drop-zone]',\r\n            isLoading: false,\r\n            uploaderConfig: {\r\n                dataType: 'json',\r\n                sequentialUploads: true,\r\n                formData: {\r\n                    'form_key': window.FORM_KEY\r\n                }\r\n            },\r\n            tracks: {\r\n                isLoading: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes file uploader plugin on provided input element.\r\n         *\r\n         * @param {HTMLInputElement} fileInput\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        initUploader: function (fileInput) {\r\n            this.$fileInput = fileInput;\r\n\r\n            _.extend(this.uploaderConfig, {\r\n                dropZone:   $(fileInput).closest(this.dropZone),\r\n                change:     this.onFilesChoosed.bind(this),\r\n                drop:       this.onFilesChoosed.bind(this),\r\n                add:        this.onBeforeFileUpload.bind(this),\r\n                done:       this.onFileUploaded.bind(this),\r\n                start:      this.onLoadingStart.bind(this),\r\n                stop:       this.onLoadingStop.bind(this)\r\n            });\r\n\r\n            $(fileInput).fileupload(this.uploaderConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines initial value of the instance.\r\n         *\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            var value = this.getInitialValue();\r\n\r\n            value = value.map(this.processFile, this);\r\n\r\n            this.initialValue = value.slice();\r\n\r\n            this.value(value);\r\n            this.on('value', this.onUpdate.bind(this));\r\n            this.isUseDefault(this.disabled());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Empties files list.\r\n         *\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if files list contains any items.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !!this.value().length;\r\n        },\r\n\r\n        /**\r\n         * Resets files list to its' initial value.\r\n         *\r\n         * @returns {FileUploader}\r\n         */\r\n        reset: function () {\r\n            var value = this.initialValue.slice();\r\n\r\n            this.value(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds provided file to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        addFile: function (file) {\r\n            file = this.processFile(file);\r\n\r\n            this.isMultipleFiles ?\r\n                this.value.push(file) :\r\n                this.value([file]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves from the list file which matches\r\n         * search criteria implemented in itertor function.\r\n         *\r\n         * @param {Function} fn - Function that will be invoked\r\n         *      for each file in the list.\r\n         * @returns {Object}\r\n         */\r\n        getFile: function (fn) {\r\n            return _.find(this.value(), fn);\r\n        },\r\n\r\n        /**\r\n         * Removes provided file from thes files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        removeFile: function (file) {\r\n            this.value.remove(file);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * May perform modifications on the provided\r\n         * file object before adding it to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {Object} Modified file object.\r\n         */\r\n        processFile: function (file) {\r\n            file.previewType = this.getFilePreviewType(file);\r\n\r\n            if (!file.id && file.name) {\r\n                file.id = Base64.mageEncode(file.name);\r\n            }\r\n\r\n            this.observe.call(file, true, [\r\n                'previewWidth',\r\n                'previewHeight'\r\n            ]);\r\n\r\n            return file;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming bytes value to a readable format.\r\n         *\r\n         * @param {Number} bytes\r\n         * @returns {String}\r\n         */\r\n        formatSize: function (bytes) {\r\n            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'],\r\n                i;\r\n\r\n            if (bytes === 0) {\r\n                return '0 Byte';\r\n            }\r\n\r\n            i = window.parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n\r\n            return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n        },\r\n\r\n        /**\r\n         * Returns path to the files' preview image.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {String}\r\n         */\r\n        getFilePreview: function (file) {\r\n            return file.url;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the file's preview template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPreviewTmpl: function () {\r\n            return this.previewTmpl;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided file is allowed to be uploaded.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {Object} Validation result.\r\n         */\r\n        isFileAllowed: function (file) {\r\n            var result;\r\n\r\n            _.every([\r\n                this.isExtensionAllowed(file),\r\n                this.isSizeExceeded(file)\r\n            ], function (value) {\r\n                result = value;\r\n\r\n                return value.passed;\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Checks if extension of provided file is allowed.\r\n         *\r\n         * @param {Object} file - File to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isExtensionAllowed: function (file) {\r\n            return validator('validate-file-type', file.name, this.allowedExtensions);\r\n        },\r\n\r\n        /**\r\n         * Get simplified file type.\r\n         *\r\n         * @param {Object} file - File to be checked.\r\n         * @returns {String}\r\n         */\r\n        getFilePreviewType: function (file) {\r\n            var type;\r\n\r\n            if (!file.type) {\r\n                return 'document';\r\n            }\r\n\r\n            type = file.type.split('/')[0];\r\n\r\n            return type !== 'image' && type !== 'video' ? 'document' : type;\r\n        },\r\n\r\n        /**\r\n         * Checks if size of provided file exceeds\r\n         * defined in configuration size limits.\r\n         *\r\n         * @param {Object} file - File to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isSizeExceeded: function (file) {\r\n            return validator('validate-max-size', file.size, this.maxFileSize);\r\n        },\r\n\r\n        /**\r\n         * Displays provided error message.\r\n         *\r\n         * @param {String} msg\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        notifyError: function (msg) {\r\n            var data = {\r\n                content: msg\r\n            };\r\n\r\n            if (this.isMultipleFiles) {\r\n                data.modalClass = '_image-box';\r\n            }\r\n\r\n            uiAlert(data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Performs data type conversions.\r\n         *\r\n         * @param {*} value\r\n         * @returns {Array}\r\n         */\r\n        normalizeData: function (value) {\r\n            return utils.isEmpty(value) ? [] : value;\r\n        },\r\n\r\n        /**\r\n         * Checks if files list is different\r\n         * from its' initial value.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return !utils.equalArrays(value, initial);\r\n        },\r\n\r\n        /**\r\n         * Handler which is invoked when files are choosed for upload.\r\n         * May be used for implementation of additional validation rules,\r\n         * e.g. total files and a total size rules.\r\n         *\r\n         * @param {Event} e - Event object.\r\n         * @param {Object} data - File data that will be uploaded.\r\n         */\r\n        onFilesChoosed: function (e, data) {\r\n            // no option exists in fileuploader for restricting upload chains to single files; this enforces that policy\r\n            if (!this.isMultipleFiles) {\r\n                data.files.splice(1);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler which is invoked prior to the start of a file upload.\r\n         *\r\n         * @param {Event} e - Event object.\r\n         * @param {Object} data - File data that will be uploaded.\r\n         */\r\n        onBeforeFileUpload: function (e, data) {\r\n            var file     = data.files[0],\r\n                allowed  = this.isFileAllowed(file),\r\n                target   = $(e.target);\r\n\r\n            if (this.disabled()) {\r\n                this.notifyError($t('The file upload field is disabled.'));\r\n\r\n                return;\r\n            }\r\n\r\n            if (allowed.passed) {\r\n                target.on('fileuploadsend', function (event, postData) {\r\n                    postData.data.append('param_name', this.paramName);\r\n                }.bind(data));\r\n\r\n                target.fileupload('process', data).done(function () {\r\n                    data.submit();\r\n                });\r\n            } else {\r\n                this.aggregateError(file.name, allowed.message);\r\n\r\n                // if all files in upload chain are invalid, stop callback is never called; this resolves promise\r\n                if (this.aggregatedErrors.length === data.originalFiles.length) {\r\n                    this.uploaderConfig.stop();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add error message associated with filename for display when upload chain is complete\r\n         *\r\n         * @param {String} filename\r\n         * @param {String} message\r\n         */\r\n        aggregateError: function (filename, message) {\r\n            this.aggregatedErrors.push({\r\n                filename: filename,\r\n                message: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Handler of the file upload complete event.\r\n         *\r\n         * @param {Event} e\r\n         * @param {Object} data\r\n         */\r\n        onFileUploaded: function (e, data) {\r\n            var uploadedFilename = data.files[0].name,\r\n                file    = data.result,\r\n                error   = file.error;\r\n\r\n            error ?\r\n                this.aggregateError(uploadedFilename, error) :\r\n                this.addFile(file);\r\n        },\r\n\r\n        /**\r\n         * Load start event handler.\r\n         */\r\n        onLoadingStart: function () {\r\n            this.isLoading = true;\r\n        },\r\n\r\n        /**\r\n         * Load stop event handler.\r\n         */\r\n        onLoadingStop: function () {\r\n            var aggregatedErrorMessages = [];\r\n\r\n            this.isLoading = false;\r\n\r\n            if (!this.aggregatedErrors.length) {\r\n                return;\r\n            }\r\n\r\n            if (!this.isMultipleFiles) { // only single file upload occurred; use first file's error message\r\n                aggregatedErrorMessages.push(this.aggregatedErrors[0].message);\r\n            } else { // construct message from all aggregatedErrors\r\n                _.each(this.aggregatedErrors, function (error) {\r\n                    notification().add({\r\n                        error: true,\r\n                        message: '%s' + error.message, // %s to be used as placeholder for html injection\r\n\r\n                        /**\r\n                         * Adds constructed error notification to aggregatedErrorMessages\r\n                         *\r\n                         * @param {String} constructedMessage\r\n                         */\r\n                        insertMethod: function (constructedMessage) {\r\n                            var escapedFileName = $('<div>').text(error.filename).html(),\r\n                                errorMsgBodyHtml = '<strong>%s</strong> %s.<br>'\r\n                                    .replace('%s', escapedFileName)\r\n                                    .replace('%s', $t('was not uploaded'));\r\n\r\n                            // html is escaped in message body for notification widget; prepend unescaped html here\r\n                            constructedMessage = constructedMessage.replace('%s', errorMsgBodyHtml);\r\n\r\n                            aggregatedErrorMessages.push(constructedMessage);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            this.notifyError(aggregatedErrorMessages.join(''));\r\n\r\n            // clear out aggregatedErrors array for this completed upload chain\r\n            this.aggregatedErrors = [];\r\n        },\r\n\r\n        /**\r\n         * Handler function which is supposed to be invoked when\r\n         * file input element has been rendered.\r\n         *\r\n         * @param {HTMLInputElement} fileInput\r\n         */\r\n        onElementRender: function (fileInput) {\r\n            this.initUploader(fileInput);\r\n        },\r\n\r\n        /**\r\n         * Handler of the preview image load event.\r\n         *\r\n         * @param {Object} file - File associated with an image.\r\n         * @param {Event} e\r\n         */\r\n        onPreviewLoad: function (file, e) {\r\n            var img = e.currentTarget;\r\n\r\n            file.previewWidth = img.naturalWidth;\r\n            file.previewHeight = img.naturalHeight;\r\n        },\r\n\r\n        /**\r\n         * Restore value to default\r\n         */\r\n        restoreToDefault: function () {\r\n            var defaultValue = utils.copy(this.default);\r\n\r\n            defaultValue.map(this.processFile, this);\r\n            this.value(defaultValue);\r\n        },\r\n\r\n        /**\r\n         * Update whether value differs from default value\r\n         */\r\n        setDifferedFromDefault: function () {\r\n            var value = utils.copy(this.value());\r\n\r\n            this.isDifferedFromDefault(!_.isEqual(value, this.default));\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/image-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Base64 */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'Magento_Ui/js/form/element/file-uploader',\r\n    'mage/adminhtml/browser'\r\n], function ($, _, utils, uiAlert, validator, Element, browser) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        /**\r\n         * {@inheritDoc}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            // Listen for file deletions from the media browser\r\n            $(window).on('fileDeleted.mediabrowser', this.onDeleteFile.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Assign uid for media gallery\r\n         *\r\n         * @return {ImageUploader} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            var mediaGalleryUid = utils.uniqueid();\r\n\r\n            this._super();\r\n\r\n            _.extend(this, {\r\n                mediaGalleryUid: mediaGalleryUid\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add file event callback triggered from media gallery\r\n         *\r\n         * @param {ImageUploader} imageUploader - UI Class\r\n         * @param {Event} e\r\n         */\r\n        addFileFromMediaGallery: function (imageUploader, e) {\r\n            var $buttonEl = $(e.target),\r\n                fileSize = $buttonEl.data('size'),\r\n                fileMimeType = $buttonEl.data('mime-type'),\r\n                filePathname = $buttonEl.val(),\r\n                fileBasename = filePathname.split('/').pop();\r\n\r\n            this.addFile({\r\n                type: fileMimeType,\r\n                name: fileBasename,\r\n                size: fileSize,\r\n                url: filePathname\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Open the media browser dialog\r\n         *\r\n         * @param {ImageUploader} imageUploader - UI Class\r\n         * @param {Event} e\r\n         */\r\n        openMediaBrowserDialog: function (imageUploader, e) {\r\n            var $buttonEl = $(e.target),\r\n                openDialogUrl = this.mediaGallery.openDialogUrl +\r\n                'target_element_id/' + $buttonEl.attr('id') +\r\n                '/store/' + this.mediaGallery.storeId +\r\n                '/type/image/?isAjax=true';\r\n\r\n            if (this.mediaGallery.initialOpenSubpath) {\r\n                openDialogUrl += '&current_tree_path=' + Base64.idEncode(this.mediaGallery.initialOpenSubpath);\r\n            }\r\n\r\n            browser.openDialog(\r\n                openDialogUrl,\r\n                null,\r\n                null,\r\n                this.mediaGallery.openDialogTitle,\r\n                {\r\n                    targetElementId: $buttonEl.attr('id')\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.event} e\r\n         * @param {Object} data\r\n         * @returns {Object} Chainables\r\n         */\r\n        onDeleteFile: function (e, data) {\r\n            var fileId = this.getFileId(),\r\n                deletedFileIds = data.ids;\r\n\r\n            if (fileId && $.inArray(fileId, deletedFileIds) > -1) {\r\n                this.clear();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritDoc}\r\n         */\r\n        clear: function () {\r\n            this.value([]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets the ID of the file used if set\r\n         *\r\n         * @return {String|Null} ID\r\n         */\r\n        getFileId: function () {\r\n            return this.hasData() ? this.value()[0].id : null;\r\n        },\r\n\r\n        /**\r\n         * Trigger native browser file upload UI via clicking on 'Upload' button\r\n         *\r\n         * @param {ImageUploader} imageUploader - UI Class\r\n         * @param {Event} e\r\n         */\r\n        triggerImageUpload: function (imageUploader, e) {\r\n            $(e.target).closest('.file-uploader').find('input[type=\"file\"]').click();\r\n        },\r\n\r\n        /**\r\n         * Get list of file extensions allowed in comma delimited format\r\n         *\r\n         * @return {String}\r\n         */\r\n        getAllowedFileExtensionsInCommaDelimitedFormat: function () {\r\n            var allowedExtensions = this.allowedExtensions.toUpperCase().split(' ');\r\n\r\n            // if jpg and jpeg in allowed extensions, remove jpeg from list\r\n            if (allowedExtensions.indexOf('JPG') !== -1 && allowedExtensions.indexOf('JPEG') !== -1) {\r\n                allowedExtensions.splice(allowedExtensions.indexOf('JPEG'), 1);\r\n            }\r\n\r\n            return allowedExtensions.join(', ');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/media.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mageUtils',\r\n    './abstract'\r\n], function (utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            links: {\r\n                value: ''\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes file component.\r\n         *\r\n         * @returns {Media} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initFormId();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines form ID with which file input will be associated.\r\n         *\r\n         * @returns {Media} Chainable.\r\n         */\r\n        initFormId: function () {\r\n            var namespace;\r\n\r\n            if (this.formId) {\r\n                return this;\r\n            }\r\n\r\n            namespace   = this.name.split('.');\r\n            this.formId = namespace[0];\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/multiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './select'\r\n], function (_, utils, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            size: 5,\r\n            elementTmpl: 'ui/form/element/multiselect',\r\n            listens: {\r\n                value: 'setDifferedFromDefault setPrepareToSendData'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.initialValue = utils.copy(this.initialValue);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        normalizeData: function (value) {\r\n            if (utils.isEmpty(value)) {\r\n                value = [];\r\n            }\r\n\r\n            return _.isString(value) ? value.split(',') : value;\r\n        },\r\n\r\n        /**\r\n         * Sets the prepared data to dataSource\r\n         * by path, where key is component link to dataSource with\r\n         * suffix \"-prepared-for-send\"\r\n         *\r\n         * @param {Array} data - current component value\r\n         */\r\n        setPrepareToSendData: function (data) {\r\n            if (_.isUndefined(data) || !data.length) {\r\n                data = '';\r\n            }\r\n\r\n            this.source.set(this.dataScope + '-prepared-for-send', data);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [\r\n                    this.normalizeData(this.source.get(this.dataScope)),\r\n                    this.normalizeData(this.default)\r\n                ],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                return _.isArray(v) && (value = utils.copy(v)) && !_.isEmpty(v);\r\n            });\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return !utils.equalArrays(value, initial);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            this.value(utils.copy(this.initialValue));\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            this.value([]);\r\n            this.error(false);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/post-code.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            imports: {\r\n                countryOptions: '${ $.parentName }.country_id:indexedOptions',\r\n                update: '${ $.parentName }.country_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            /**\r\n             * equalityComparer function\r\n             *\r\n             * @returns boolean.\r\n             */\r\n            this.value.equalityComparer = function (oldValue, newValue) {\r\n                return !oldValue && !newValue || oldValue === newValue;\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Method called every time country selector's value gets changed.\r\n         * Updates all validations and requirements for certain country.\r\n         * @param {String} value - Selected country ID.\r\n         */\r\n        update: function (value) {\r\n            var isZipCodeOptional,\r\n                option;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            option = _.isObject(this.countryOptions) && this.countryOptions[value];\r\n\r\n            if (!option) {\r\n                return;\r\n            }\r\n\r\n            isZipCodeOptional = !!option['is_zipcode_optional'];\r\n\r\n            if (isZipCodeOptional) {\r\n                this.error(false);\r\n            }\r\n\r\n            this.validation['required-entry'] = !isZipCodeOptional;\r\n            this.required(!isZipCodeOptional);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/region.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select',\r\n    'Magento_Checkout/js/model/default-post-code-resolver'\r\n], function (_, registry, Select, defaultPostCodeResolver) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            skipValidation: false,\r\n            imports: {\r\n                countryOptions: '${ $.parentName }.country_id:indexedOptions',\r\n                update: '${ $.parentName }.country_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method called every time country selector's value gets changed.\r\n         * Updates all validations and requirements for certain country.\r\n         * @param {String} value - Selected country ID.\r\n         */\r\n        update: function (value) {\r\n            var isRegionRequired,\r\n                option;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            option = _.isObject(this.countryOptions) && this.countryOptions[value];\r\n\r\n            if (!option) {\r\n                return;\r\n            }\r\n\r\n            defaultPostCodeResolver.setUseDefaultPostCode(!option['is_zipcode_optional']);\r\n\r\n            if (option['is_region_visible'] === false) {\r\n                // Hide select and corresponding text input field if region must not be shown for selected country.\r\n                this.setVisible(false);\r\n\r\n                if (this.customEntry) { // eslint-disable-line max-depth\r\n                    this.toggleInput(false);\r\n                }\r\n            }\r\n\r\n            isRegionRequired = !this.skipValidation && !!option['is_region_required'];\r\n\r\n            if (!isRegionRequired) {\r\n                this.error(false);\r\n            }\r\n\r\n            this.required(isRegionRequired);\r\n            this.validation['required-entry'] = isRegionRequired;\r\n\r\n            registry.get(this.customName, function (input) {\r\n                input.required(isRegionRequired);\r\n                input.validation['required-entry'] = isRegionRequired;\r\n                input.validation['validate-not-number-first'] = !this.options().length;\r\n            }.bind(this));\r\n        }\r\n    });\r\n});\r\n\r\n","Magento_Ui/js/form/element/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './abstract',\r\n    'uiLayout'\r\n], function (_, utils, registry, Abstract, layout) {\r\n    'use strict';\r\n\r\n    var inputNode = {\r\n        parent: '${ $.$data.parentName }',\r\n        component: 'Magento_Ui/js/form/element/abstract',\r\n        template: '${ $.$data.template }',\r\n        provider: '${ $.$data.provider }',\r\n        name: '${ $.$data.index }_input',\r\n        dataScope: '${ $.$data.customEntry }',\r\n        customScope: '${ $.$data.customScope }',\r\n        sortOrder: {\r\n            after: '${ $.$data.name }'\r\n        },\r\n        displayArea: 'body',\r\n        label: '${ $.$data.label }'\r\n    };\r\n\r\n    /**\r\n     * Parses incoming options, considers options with undefined value property\r\n     *     as caption\r\n     *\r\n     * @param  {Array} nodes\r\n     * @return {Object}\r\n     */\r\n    function parseOptions(nodes, captionValue) {\r\n        var caption,\r\n            value;\r\n\r\n        nodes = _.map(nodes, function (node) {\r\n            value = node.value;\r\n\r\n            if (value === null || value === captionValue) {\r\n                if (_.isUndefined(caption)) {\r\n                    caption = node.label;\r\n                }\r\n            } else {\r\n                return node;\r\n            }\r\n        });\r\n\r\n        return {\r\n            options: _.compact(nodes),\r\n            caption: _.isString(caption) ? caption : false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Recursively loops over data to find non-undefined, non-array value\r\n     *\r\n     * @param  {Array} data\r\n     * @return {*} - first non-undefined value in array\r\n     */\r\n    function findFirst(data) {\r\n        var value;\r\n\r\n        data.some(function (node) {\r\n            value = node.value;\r\n\r\n            if (Array.isArray(value)) {\r\n                value = findFirst(value);\r\n            }\r\n\r\n            return !_.isUndefined(value);\r\n        });\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Recursively set to object item like value and item.value like key.\r\n     *\r\n     * @param {Array} data\r\n     * @param {Object} result\r\n     * @returns {Object}\r\n     */\r\n    function indexOptions(data, result) {\r\n        var value;\r\n\r\n        result = result || {};\r\n\r\n        data.forEach(function (item) {\r\n            value = item.value;\r\n\r\n            if (Array.isArray(value)) {\r\n                indexOptions(value, result);\r\n            } else {\r\n                result[value] = item;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            customName: '${ $.parentName }.${ $.index }_input',\r\n            elementTmpl: 'ui/form/element/select',\r\n            caption: '',\r\n            options: []\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults, extends config with formatted values\r\n         *     and options, and invokes initialize method of AbstractElement class.\r\n         *     If instance's 'customEntry' property is set to true, calls 'initInput'\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.customEntry) {\r\n                registry.get(this.name, this.initInput.bind(this));\r\n            }\r\n\r\n            if (this.filterBy) {\r\n                this.initFilter();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            this.initialOptions = this.options;\r\n\r\n            this.observe('options caption')\r\n                .setOptions(this.options());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set link for filter.\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        initFilter: function () {\r\n            var filter = this.filterBy;\r\n\r\n            this.filter(this.default, filter.field);\r\n            this.setLinks({\r\n                filter: filter.target\r\n            }, 'imports');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates input from template, renders it via renderer.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initInput: function () {\r\n            layout([utils.template(inputNode, this)]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Matches specified value with existing options\r\n         * or, if value is not specified, returns value of the first option.\r\n         *\r\n         * @returns {*}\r\n         */\r\n        normalizeData: function () {\r\n            var value = this._super(),\r\n                option;\r\n\r\n            if (value !== '') {\r\n                option = this.getOption(value);\r\n\r\n                return option && option.value;\r\n            }\r\n\r\n            if (!this.caption()) {\r\n                return findFirst(this.options);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters 'initialOptions' property by 'field' and 'value' passed,\r\n         * calls 'setOptions' passing the result to it\r\n         *\r\n         * @param {*} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var source = this.initialOptions,\r\n                result;\r\n\r\n            field = field || this.filterBy.field;\r\n\r\n            result = _.filter(source, function (item) {\r\n                return item[field] === value || item.value === '';\r\n            });\r\n\r\n            this.setOptions(result);\r\n        },\r\n\r\n        /**\r\n         * Change visibility for input.\r\n         *\r\n         * @param {Boolean} isVisible\r\n         */\r\n        toggleInput: function (isVisible) {\r\n            registry.get(this.customName, function (input) {\r\n                input.setVisible(isVisible);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Sets 'data' to 'options' observable array, if instance has\r\n         * 'customEntry' property set to true, calls 'setHidden' method\r\n         *  passing !options.length as a parameter\r\n         *\r\n         * @param {Array} data\r\n         * @returns {Object} Chainable\r\n         */\r\n        setOptions: function (data) {\r\n            var captionValue = this.captionValue || '',\r\n                result = parseOptions(data, captionValue),\r\n                isVisible;\r\n\r\n            this.indexedOptions = indexOptions(result.options);\r\n\r\n            this.options(result.options);\r\n\r\n            if (!this.caption()) {\r\n                this.caption(result.caption);\r\n            }\r\n\r\n            if (this.customEntry) {\r\n                isVisible = !!result.options.length;\r\n\r\n                this.setVisible(isVisible);\r\n                this.toggleInput(!isVisible);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes preview for option by it's value, and sets the result\r\n         * to 'preview' observable\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        getPreview: function () {\r\n            var value = this.value(),\r\n                option = this.indexedOptions[value],\r\n                preview = option ? option.label : '';\r\n\r\n            this.preview(preview);\r\n\r\n            return preview;\r\n        },\r\n\r\n        /**\r\n         * Get option from indexedOptions list.\r\n         *\r\n         * @param {Number} value\r\n         * @returns {Object} Chainable\r\n         */\r\n        getOption: function (value) {\r\n            return this.indexedOptions[value];\r\n        },\r\n\r\n        /**\r\n         * Select first available option\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            var value = this.caption() ? '' : findFirst(this.options);\r\n\r\n            this.value(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            if (_.isUndefined(this.value()) && !this.default) {\r\n                this.clear();\r\n            }\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox-toggle-notice.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (SingleCheckbox) {\r\n    'use strict';\r\n\r\n    return SingleCheckbox.extend({\r\n        defaults: {\r\n            notices: [],\r\n            tracks: {\r\n                notice: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Choose notice on initialization\r\n         *\r\n         * @returns {*|void|Element}\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .chooseNotice();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Choose notice function\r\n         *\r\n         * @returns void\r\n         */\r\n        chooseNotice: function () {\r\n            var checkedNoticeNumber = Number(this.checked());\r\n\r\n            this.notice = this.notices[checkedNoticeNumber];\r\n        },\r\n\r\n        /**\r\n         * Choose notice on update\r\n         *\r\n         * @returns void\r\n         */\r\n        onUpdate: function () {\r\n            this._super();\r\n            this.chooseNotice();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox-use-config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            isUseDefault: false,\r\n            isUseConfig: false,\r\n            listens: {\r\n                'isUseConfig': 'toggleElement',\r\n                'isUseDefault': 'toggleElement'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n\r\n            return this\r\n                ._super()\r\n                .observe('isUseConfig');\r\n        },\r\n\r\n        /**\r\n         * Toggle element\r\n         */\r\n        toggleElement: function () {\r\n            this.disabled(this.isUseDefault() || this.isUseConfig());\r\n\r\n            if (this.source) {\r\n                this.source.set('data.use_default.' + this.index, Number(this.isUseDefault()));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'underscore',\r\n    'mage/translate'\r\n], function (AbstractField, _, $t) {\r\n    'use strict';\r\n\r\n    return AbstractField.extend({\r\n        defaults: {\r\n            template: 'ui/form/components/single/field',\r\n            checked: false,\r\n            initialChecked: false,\r\n            multiple: false,\r\n            prefer: 'checkbox', // 'radio' | 'checkbox' | 'toggle'\r\n            valueMap: {},\r\n\r\n            templates: {\r\n                radio: 'ui/form/components/single/radio',\r\n                checkbox: 'ui/form/components/single/checkbox',\r\n                toggle: 'ui/form/components/single/switcher'\r\n            },\r\n\r\n            listens: {\r\n                'checked': 'onCheckedChanged',\r\n                'value': 'onExtendedValueChanged'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function (config) {\r\n            this._super();\r\n\r\n            if (!config.elementTmpl) {\r\n                if (!this.prefer && !this.multiple) {\r\n                    this.elementTmpl = this.templates.radio;\r\n                } else if (this.prefer === 'radio') {\r\n                    this.elementTmpl = this.templates.radio;\r\n                } else if (this.prefer === 'checkbox') {\r\n                    this.elementTmpl = this.templates.checkbox;\r\n                } else if (this.prefer === 'toggle') {\r\n                    this.elementTmpl = this.templates.toggle;\r\n                } else {\r\n                    this.elementTmpl = this.templates.checkbox;\r\n                }\r\n            }\r\n\r\n            if (this.prefer === 'toggle' && _.isEmpty(this.toggleLabels)) {\r\n                this.toggleLabels = {\r\n                    'on': $t('Yes'),\r\n                    'off': $t('No')\r\n                };\r\n            }\r\n\r\n            if (typeof this.default === 'undefined' || this.default === null) {\r\n                this.default = '';\r\n            }\r\n\r\n            if (typeof this.value === 'undefined' || this.value === null) {\r\n                this.value = _.isEmpty(this.valueMap) || this.default !== '' ? this.default : this.valueMap.false;\r\n                this.initialValue = this.value;\r\n            } else {\r\n                this.initialValue = this.value;\r\n            }\r\n\r\n            if (this.multiple && !_.isArray(this.value)) {\r\n                this.value = []; // needed for correct observable assignment\r\n            }\r\n\r\n            this.initialChecked = this.checked;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe('checked');\r\n        },\r\n\r\n        /**\r\n         * Get true/false key from valueMap by value.\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean|undefined}\r\n         */\r\n        getReverseValueMap: function getReverseValueMap(value) {\r\n            var bool = false;\r\n\r\n            _.some(this.valueMap, function (iValue, iBool) {\r\n                if (iValue === value) {\r\n                    bool = iBool === 'true';\r\n\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return bool;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            if (_.isEmpty(this.valueMap)) {\r\n                this.on('value', this.onUpdate.bind(this));\r\n            } else {\r\n                this._super();\r\n                this.checked(this.getReverseValueMap(this.value()));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handle dataScope changes for checkbox / radio button.\r\n         *\r\n         * @param {*} newExportedValue\r\n         */\r\n        onExtendedValueChanged: function (newExportedValue) {\r\n            var isMappedUsed = !_.isEmpty(this.valueMap),\r\n                oldChecked = this.checked.peek(),\r\n                oldValue = this.initialValue,\r\n                newChecked;\r\n\r\n            if (this.multiple) {\r\n                newChecked = newExportedValue.indexOf(oldValue) !== -1;\r\n            } else if (isMappedUsed) {\r\n                newChecked = this.getReverseValueMap(newExportedValue);\r\n            } else if (typeof newExportedValue === 'boolean') {\r\n                newChecked = newExportedValue;\r\n            } else {\r\n                newChecked = newExportedValue === oldValue;\r\n            }\r\n\r\n            if (newChecked !== oldChecked) {\r\n                this.checked(newChecked);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle checked state changes for checkbox / radio button.\r\n         *\r\n         * @param {Boolean} newChecked\r\n         */\r\n        onCheckedChanged: function (newChecked) {\r\n            var isMappedUsed = !_.isEmpty(this.valueMap),\r\n                oldValue = this.initialValue,\r\n                newValue;\r\n\r\n            if (isMappedUsed) {\r\n                newValue = this.valueMap[newChecked];\r\n            } else {\r\n                newValue = oldValue;\r\n            }\r\n\r\n            if (!this.multiple && newChecked) {\r\n                this.value(newValue);\r\n            } else if (!this.multiple && !newChecked) {\r\n                if (typeof newValue === 'boolean') {\r\n                    this.value(newChecked);\r\n                } else if (newValue === this.value.peek()) {\r\n                    this.value('');\r\n                }\r\n\r\n                if (isMappedUsed) {\r\n                    this.value(newValue);\r\n                }\r\n            } else if (this.multiple && newChecked && this.value.indexOf(newValue) === -1) {\r\n                this.value.push(newValue);\r\n            } else if (this.multiple && !newChecked && this.value.indexOf(newValue) !== -1) {\r\n                this.value.splice(this.value.indexOf(newValue), 1);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            if (this.hasUnique) {\r\n                this.setUnique();\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            if (this.multiple && this.initialChecked) {\r\n                this.value.push(this.initialValue);\r\n            } else if (this.multiple && !this.initialChecked) {\r\n                this.value.splice(this.value.indexOf(this.initialValue), 1);\r\n            } else {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            if (this.multiple) {\r\n                this.value([]);\r\n            } else {\r\n                this.value('');\r\n            }\r\n\r\n            this.error(false);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/text.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiElement',\r\n    'mageUtils'\r\n], function (Element, utils) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            visible: true,\r\n            label: '',\r\n            error: '',\r\n            uid: utils.uniqueid(),\r\n            disabled: false,\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Has service\r\n         *\r\n         * @returns {Boolean} false.\r\n         */\r\n        hasService: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Has addons\r\n         *\r\n         * @returns {Boolean} false.\r\n         */\r\n        hasAddons: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('disabled visible value');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/textarea.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            cols: 15,\r\n            rows: 2,\r\n            elementTmpl: 'ui/form/element/textarea'\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/ui-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './abstract',\r\n    'Magento_Ui/js/lib/key-codes',\r\n    'mage/translate',\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (_, Abstract, keyCodes, $t, ko, $) {\r\n    'use strict';\r\n\r\n    var isTouchDevice = typeof document.ontouchstart !== 'undefined';\r\n\r\n    /**\r\n     * Processing options list\r\n     *\r\n     * @param {Array} array - Property array\r\n     * @param {String} separator - Level separator\r\n     * @param {Array} created - list to add new options\r\n     *\r\n     * @return {Array} Plain options list\r\n     */\r\n    function flattenCollection(array, separator, created) {\r\n        var i = 0,\r\n            length,\r\n            childCollection;\r\n\r\n        array = _.compact(array);\r\n        length = array.length;\r\n        created = created || [];\r\n\r\n        for (i; i < length; i++) {\r\n            created.push(array[i]);\r\n\r\n            if (array[i].hasOwnProperty(separator)) {\r\n                childCollection = array[i][separator];\r\n                delete array[i][separator];\r\n                flattenCollection.call(this, childCollection, separator, created);\r\n            }\r\n        }\r\n\r\n        return created;\r\n    }\r\n\r\n    /**\r\n     * Set levels to options list\r\n     *\r\n     * @param {Array} array - Property array\r\n     * @param {String} separator - Level separator\r\n     * @param {Number} level - Starting level\r\n     * @param {String} path - path to root\r\n     *\r\n     * @returns {Array} Array with levels\r\n     */\r\n    function setProperty(array, separator, level, path) {\r\n        var i = 0,\r\n            length,\r\n            nextLevel,\r\n            nextPath;\r\n\r\n        array = _.compact(array);\r\n        length = array.length;\r\n        level = level || 0;\r\n        path = path || '';\r\n\r\n        for (i; i < length; i++) {\r\n            if (array[i]) {\r\n                _.extend(array[i], {\r\n                    level: level,\r\n                    path: path\r\n                });\r\n            }\r\n\r\n            if (array[i].hasOwnProperty(separator)) {\r\n                nextLevel = level + 1;\r\n                nextPath = path ? path + '.' + array[i].label : array[i].label;\r\n                setProperty.call(this, array[i][separator], separator, nextLevel, nextPath);\r\n            }\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Preprocessing options list\r\n     *\r\n     * @param {Array} nodes - Options list\r\n     *\r\n     * @return {Object} Object with property - options(options list)\r\n     *      and cache options with plain and tree list\r\n     */\r\n    function parseOptions(nodes) {\r\n        var caption,\r\n            value,\r\n            cacheNodes,\r\n            copyNodes;\r\n\r\n        nodes = setProperty(nodes, 'optgroup');\r\n        copyNodes = JSON.parse(JSON.stringify(nodes));\r\n        cacheNodes = flattenCollection(copyNodes, 'optgroup');\r\n\r\n        nodes = _.map(nodes, function (node) {\r\n            value = node.value;\r\n\r\n            if (value == null || value === '') {\r\n                if (_.isUndefined(caption)) {\r\n                    caption = node.label;\r\n                }\r\n            } else {\r\n                return node;\r\n            }\r\n        });\r\n\r\n        return {\r\n            options: _.compact(nodes),\r\n            cacheOptions: {\r\n                plain: _.compact(cacheNodes),\r\n                tree: _.compact(nodes)\r\n            }\r\n        };\r\n    }\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            options: [],\r\n            total: 0,\r\n            listVisible: false,\r\n            value: [],\r\n            filterOptions: false,\r\n            chipsEnabled: true,\r\n            itemsQuantity: '',\r\n            filterInputValue: '',\r\n            filterOptionsFocus: false,\r\n            multiselectFocus: false,\r\n            multiple: true,\r\n            selectType: 'tree',\r\n            lastSelectable: false,\r\n            showFilteredQuantity: true,\r\n            showCheckbox: true,\r\n            levelsVisibility: true,\r\n            openLevelsAction: true,\r\n            showOpenLevelsActionIcon: true,\r\n            optgroupLabels: false,\r\n            closeBtn: true,\r\n            showPath: true,\r\n            labelsDecoration: false,\r\n            disableLabel: false,\r\n            filterRateLimit: 500,\r\n            filterRateLimitMethod: 'notifyAtFixedRate',\r\n            closeBtnLabel: $t('Done'),\r\n            optgroupTmpl: 'ui/grid/filters/elements/ui-select-optgroup',\r\n            quantityPlaceholder: $t('options'),\r\n            hoverClass: '_hover',\r\n            rootListSelector: 'ul.admin__action-multiselect-menu-inner._root',\r\n            visibleOptionSelector: 'li.admin__action-multiselect-menu-inner-item:visible',\r\n            actionTargetSelector: '.action-menu-item',\r\n            selectedPlaceholders: {\r\n                defaultPlaceholder: $t('Select...'),\r\n                lotPlaceholders: $t('Selected')\r\n            },\r\n            separator: 'optgroup',\r\n            searchOptions: false,\r\n            loading: false,\r\n            searchUrl: false,\r\n            lastSearchKey: '',\r\n            lastSearchPage: 1,\r\n            filterPlaceholder: '',\r\n            emptyOptionsHtml: '',\r\n            cachedSearchResults: {},\r\n            pageLimit: 50,\r\n            deviation: 30,\r\n            validationLoading: false,\r\n            isRemoveSelectedIcon: false,\r\n            debounce: 300,\r\n            missingValuePlaceholder: $t('Entity with ID: %s doesn\\'t exist'),\r\n            isDisplayMissingValuePlaceholder: false,\r\n            currentSearchKey: '',\r\n            listens: {\r\n                listVisible: 'cleanHoveredElement',\r\n                filterInputValue: 'filterOptionsList',\r\n                options: 'checkOptionsList'\r\n            },\r\n            presets: {\r\n                single: {\r\n                    showCheckbox: false,\r\n                    chipsEnabled: false,\r\n                    closeBtn: false\r\n                },\r\n                optgroup: {\r\n                    showCheckbox: false,\r\n                    lastSelectable: true,\r\n                    optgroupLabels: true,\r\n                    openLevelsAction: false,\r\n                    labelsDecoration: true,\r\n                    showOpenLevelsActionIcon: false\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes UISelect component.\r\n         *\r\n         * @returns {UISelect} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            $.async(\r\n                this.rootListSelector,\r\n                this,\r\n                this.onRootListRender.bind(this)\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         * Set defaults according to mode and levels configuration\r\n         *\r\n         * @param  {Object} config\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function (config) {\r\n            var result = parseOptions(config.options),\r\n                defaults = this.constructor.defaults,\r\n                multiple = _.isBoolean(config.multiple) ? config.multiple : defaults.multiple,\r\n                type = config.selectType || defaults.selectType,\r\n                showOpenLevelsActionIcon = _.isBoolean(config.showOpenLevelsActionIcon) ?\r\n                    config.showOpenLevelsActionIcon :\r\n                    defaults.showOpenLevelsActionIcon,\r\n                openLevelsAction = _.isBoolean(config.openLevelsAction) ?\r\n                    config.openLevelsAction :\r\n                    defaults.openLevelsAction;\r\n\r\n            multiple = !multiple ? 'single' : false;\r\n            config.showOpenLevelsActionIcon = showOpenLevelsActionIcon && openLevelsAction;\r\n            _.extend(config, result, defaults.presets[multiple], defaults.presets[type]);\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check child optgroup\r\n         */\r\n        hasChildList: function () {\r\n            return _.find(this.options(), function (option) {\r\n                return !!option[this.separator];\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Check tree mode\r\n         */\r\n        isTree: function () {\r\n            return this.hasChildList() && this.selectType !== 'optgroup';\r\n        },\r\n\r\n        /**\r\n         * Add option to lastOptions array\r\n         *\r\n         * @param {Object} data\r\n         * @returns {Boolean}\r\n         */\r\n        addLastElement: function (data) {\r\n            if (!data.hasOwnProperty(this.separator)) {\r\n                !this.cacheOptions.lastOptions ? this.cacheOptions.lastOptions = [] : false;\r\n\r\n                if (!_.findWhere(\r\n                    this.cacheOptions.lastOptions,\r\n                        {\r\n                            value: data.value\r\n                        }\r\n                    )\r\n                ) {\r\n                    this.cacheOptions.lastOptions.push(data);\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return empty options html\r\n         */\r\n        getEmptyOptionsUnsanitizedHtml: function () {\r\n            return this.emptyOptionsHtml;\r\n        },\r\n\r\n        /**\r\n         * Check options length and set to cache\r\n         * if some options is added\r\n         *\r\n         * @param {Array} options - ui select options\r\n         */\r\n        checkOptionsList: function (options) {\r\n            if (options.length > this.cacheOptions.plain.length) {\r\n                this.cacheOptions.plain = options;\r\n                this.setCaption();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check label decoration\r\n         */\r\n        isLabelDecoration: function (data) {\r\n            return data.hasOwnProperty(this.separator) && this.labelsDecoration;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.observe([\r\n                'listVisible',\r\n                'placeholder',\r\n                'multiselectFocus',\r\n                'options',\r\n                'itemsQuantity',\r\n                'filterInputValue',\r\n                'filterOptionsFocus',\r\n                'loading',\r\n                'validationLoading',\r\n                'isDisplayMissingValuePlaceholder'\r\n            ]);\r\n\r\n            this.filterInputValue.extend({\r\n                rateLimit: {\r\n                    timeout: this.filterRateLimit,\r\n                    method: this.filterRateLimitMethod\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * object with key - keyname and value - handler function for this key\r\n         *\r\n         * @returns {Object} Object with handlers function name.\r\n         */\r\n        keyDownHandlers: function () {\r\n            return {\r\n                enterKey: this.enterKeyHandler,\r\n                escapeKey: this.escapeKeyHandler,\r\n                spaceKey: this.enterKeyHandler,\r\n                pageUpKey: this.pageUpKeyHandler,\r\n                pageDownKey: this.pageDownKeyHandler\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Processing level visibility for levels\r\n         *\r\n         * @param {Object} data - element data\r\n         *\r\n         * @returns {Boolean} level visibility.\r\n         */\r\n        showLevels: function (data) {\r\n            var curLevel = ++data.level,\r\n                isVisible;\r\n\r\n            if (data.visible) {\r\n                isVisible = data.visible();\r\n            } else {\r\n                isVisible = !!data.hasOwnProperty(this.separator) &&\r\n                    _.isBoolean(this.levelsVisibility) &&\r\n                    this.levelsVisibility ||\r\n                    data.hasOwnProperty(this.separator) && parseInt(this.levelsVisibility, 10) >= curLevel;\r\n\r\n                data.visible = ko.observable(isVisible);\r\n                data.isVisited = isVisible;\r\n            }\r\n\r\n            return isVisible;\r\n        },\r\n\r\n        /**\r\n         * Processing level visibility for levels\r\n         *\r\n         * @param {Object} data - element data\r\n         *\r\n         * @returns {Boolean} level visibility.\r\n         */\r\n        getLevelVisibility: function (data) {\r\n            if (data.visible) {\r\n                return data.visible();\r\n            }\r\n\r\n            return this.showLevels(data);\r\n        },\r\n\r\n        /**\r\n         * Set option to options array.\r\n         *\r\n         * @param {Object} option\r\n         * @param {Array} options\r\n         */\r\n        setOption: function (option, options) {\r\n            var copyOptionsTree;\r\n\r\n            options = options || this.cacheOptions.tree;\r\n\r\n            _.each(options, function (opt) {\r\n                if (opt.value == option.parent) { //eslint-disable-line eqeqeq\r\n                    delete  option.parent;\r\n                    opt[this.separator] ? opt[this.separator].push(option) : opt[this.separator] = [option];\r\n                    copyOptionsTree = JSON.parse(JSON.stringify(this.cacheOptions.tree));\r\n                    this.cacheOptions.plain = flattenCollection(copyOptionsTree, this.separator);\r\n                    this.options(this.cacheOptions.tree);\r\n                } else if (opt[this.separator]) {\r\n                    this.setOption(option, opt[this.separator]);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Handler outerClick event. Closed options list\r\n         */\r\n        outerClick: function () {\r\n            this.listVisible() ? this.listVisible(false) : false;\r\n\r\n            if (isTouchDevice) {\r\n                this.multiselectFocus(false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler keydown event to filter options input\r\n         *\r\n         * @returns {Boolean} Returned true for emersion events\r\n         */\r\n        filterOptionsKeydown: function (data, event) {\r\n            var key = keyCodes[event.keyCode];\r\n\r\n            !this.isTabKey(event) ? event.stopPropagation() : false;\r\n\r\n            if (key === 'pageDownKey' || key === 'pageUpKey') {\r\n                event.preventDefault();\r\n                this.filterOptionsFocus(false);\r\n                this.cacheUiSelect.focus();\r\n            }\r\n\r\n            this.keydownSwitcher(data, event);\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Filtered options list by value from filter options list\r\n         */\r\n        filterOptionsList: function () {\r\n            var value = this.filterInputValue().trim().toLowerCase(),\r\n                array = [];\r\n\r\n            if (this.searchOptions) {\r\n                return this.loadOptions(value);\r\n            }\r\n\r\n            this.cleanHoveredElement();\r\n\r\n            if (!value) {\r\n                this.renderPath = false;\r\n                this.options(this.cacheOptions.tree);\r\n                this._setItemsQuantity(false);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.showPath ? this.renderPath = true : false;\r\n\r\n            if (this.filterInputValue()) {\r\n\r\n                array = this.selectType === 'optgroup' ?\r\n                    this._getFilteredArray(this.cacheOptions.lastOptions, value) :\r\n                    this._getFilteredArray(this.cacheOptions.plain, value);\r\n\r\n                if (!value.length) {\r\n                    this.options(this.cacheOptions.plain);\r\n                    this._setItemsQuantity(this.cacheOptions.plain.length);\r\n                } else {\r\n                    this.options(array);\r\n                    this._setItemsQuantity(array.length);\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            this.options(this.cacheOptions.plain);\r\n        },\r\n\r\n        /**\r\n         * Filtered options list by value from filter options list\r\n         *\r\n         * @param {Array} list - option list\r\n         * @param {String} value\r\n         *\r\n         * @returns {Array} filters result\r\n         */\r\n        _getFilteredArray: function (list, value) {\r\n            var i = 0,\r\n                array = [],\r\n                curOption;\r\n\r\n            for (i; i < list.length; i++) {\r\n                curOption = list[i].label.toLowerCase();\r\n\r\n                if (curOption.indexOf(value) > -1) {\r\n                    array.push(list[i]); /*eslint max-depth: [2, 4]*/\r\n                }\r\n            }\r\n\r\n            return array;\r\n        },\r\n\r\n        /**\r\n         * Get path to current option\r\n         *\r\n         * @param {Object} data - option data\r\n         * @returns {String} path\r\n         */\r\n        getPath: function (data) {\r\n            var pathParts,\r\n                createdPath = '';\r\n\r\n            if (this.renderPath) {\r\n                pathParts = data.path.split('.');\r\n                _.each(pathParts, function (curData) {\r\n                    createdPath = createdPath ? createdPath + ' / ' + curData : curData;\r\n                });\r\n\r\n                return createdPath;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set filtered items quantity\r\n         *\r\n         * @param {Object} data - option data\r\n         */\r\n        _setItemsQuantity: function (data) {\r\n            if (this.showFilteredQuantity) {\r\n                data || parseInt(data, 10) === 0 ?\r\n                    this.itemsQuantity(this.getItemsPlaceholder(data)) :\r\n                    this.itemsQuantity('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Return formatted items placeholder.\r\n         *\r\n         * @param {Object} data - option data\r\n         * @returns {String}\r\n         */\r\n        getItemsPlaceholder: function (data) {\r\n            return data + ' ' + this.quantityPlaceholder;\r\n        },\r\n\r\n        /**\r\n         * Remove element from selected array\r\n         */\r\n        removeSelected: function (value, data, event) {\r\n            event ? event.stopPropagation() : false;\r\n            this.value.remove(value);\r\n        },\r\n\r\n        /**\r\n         * Checked key name\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isTabKey: function (event) {\r\n            return keyCodes[event.keyCode] === 'tabKey';\r\n        },\r\n\r\n        /**\r\n         * Clean hoveredElement variable\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        cleanHoveredElement: function () {\r\n            if (this.hoveredElement) {\r\n                $(this.hoveredElement)\r\n                    .children(this.actionTargetSelector)\r\n                    .removeClass(this.hoverClass);\r\n\r\n                this.hoveredElement = null;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check selected option\r\n         *\r\n         * @param {String} value - option value\r\n         * @return {Boolean}\r\n         */\r\n        isSelected: function (value) {\r\n            return this.multiple ? _.contains(this.value(), value) : this.value() === value;\r\n        },\r\n\r\n        /**\r\n         * Check selected option\r\n         *\r\n         * @param {Object} option - option value\r\n         * @return {Boolean}\r\n         */\r\n        isSelectedValue: function (option) {\r\n            if (_.isUndefined(option)) {\r\n                return false;\r\n            }\r\n\r\n            return this.isSelected(option.value);\r\n        },\r\n\r\n        /**\r\n         * Check optgroup label\r\n         *\r\n         * @param {Object} data - element data\r\n         * @return {Boolean}\r\n         */\r\n        isOptgroupLabels: function (data) {\r\n            return data.hasOwnProperty(this.separator) && this.optgroupLabels;\r\n        },\r\n\r\n        /**\r\n         * Check hovered option\r\n         *\r\n         * @param {Object} data - element data\r\n         * @return {Boolean}\r\n         */\r\n        isHovered: function (data) {\r\n            var element = this.hoveredElement,\r\n                elementData;\r\n\r\n            if (!element) {\r\n                return false;\r\n            }\r\n\r\n            elementData = ko.dataFor(this.hoveredElement);\r\n\r\n            if (_.isUndefined(elementData)) {\r\n                return false;\r\n            }\r\n\r\n            return data.value === elementData.value;\r\n        },\r\n\r\n        /**\r\n         * Toggle list visibility\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        toggleListVisible: function () {\r\n            this.listVisible(!this.listVisible());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get selected element labels\r\n         *\r\n         * @returns {Array} array labels\r\n         */\r\n        getSelected: function () {\r\n            var selected = this.value();\r\n\r\n            return this.cacheOptions.plain.filter(function (opt) {\r\n                return _.isArray(selected) ?\r\n                    _.contains(selected, opt.value) :\r\n                selected == opt.value;//eslint-disable-line eqeqeq\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Toggle activity list element\r\n         *\r\n         * @param {Object} data - selected option data\r\n         * @returns {Object} Chainable\r\n         */\r\n        toggleOptionSelected: function (data) {\r\n            var isSelected = this.isSelected(data.value);\r\n\r\n            if (this.lastSelectable && data.hasOwnProperty(this.separator)) {\r\n                return this;\r\n            }\r\n\r\n            if (!this.multiple) {\r\n                if (!isSelected) {\r\n                    this.value(data.value);\r\n                }\r\n                this.listVisible(false);\r\n            } else {\r\n                if (!isSelected) { /*eslint no-lonely-if: 0*/\r\n                    this.value.push(data.value);\r\n                } else {\r\n                    this.value(_.without(this.value(), data.value));\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Change visibility to child level\r\n         *\r\n         * @param {Object} data - element data\r\n         */\r\n        openChildLevel: function (data) {\r\n            var contextElement = data,\r\n                isVisible;\r\n\r\n            if (\r\n                this.openLevelsAction &&\r\n                data.hasOwnProperty(this.separator) && _.isBoolean(this.levelsVisibility) ||\r\n                this.openLevelsAction &&\r\n                data.hasOwnProperty(this.separator) && parseInt(this.levelsVisibility, 10) <= data.level\r\n            ) {\r\n                isVisible = !contextElement.visible();\r\n\r\n                if (isVisible && !contextElement.isVisited) {\r\n                    contextElement.isVisited = true;\r\n                }\r\n\r\n                contextElement.visible(isVisible);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check selected elements\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            if (!this.value()) {\r\n                this.value([]);\r\n            }\r\n\r\n            return this.value() ? !!this.value().length : false;\r\n        },\r\n\r\n        /**\r\n         * Handles hover on list items.\r\n         *\r\n         * @param {Object} event - mousemove event\r\n         */\r\n        onDelegatedMouseMouve: function (event) {\r\n            var target = $(event.currentTarget).closest(this.visibleOptionSelector)[0];\r\n\r\n            if (this.isCursorPositionChange(event) || this.hoveredElement === target) {\r\n                return;\r\n            }\r\n\r\n            this._hoverTo(target);\r\n            this.setCursorPosition(event);\r\n        },\r\n\r\n        /**\r\n         * Get option index\r\n         *\r\n         * @param {Object} data - object with data about this element\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getOptionIndex: function (data) {\r\n            var index;\r\n\r\n            _.each(this.cacheOptions.plain, function (opt, id) {\r\n                if (data.value === opt.value) {\r\n                    index = id;\r\n                }\r\n            });\r\n\r\n            return index;\r\n        },\r\n\r\n        /**\r\n         * Set X and Y cursor position\r\n         *\r\n         * @param {Object} event - mousemove event\r\n         */\r\n        setCursorPosition: function (event) {\r\n            this.cursorPosition = {\r\n                x: event.pageX,\r\n                y: event.pageY\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Check previous and current cursor position\r\n         *\r\n         * @param {Object} event - mousemove event\r\n         * @returns {Boolean}\r\n         */\r\n        isCursorPositionChange: function (event) {\r\n            return this.cursorPosition &&\r\n                this.cursorPosition.x === event.pageX &&\r\n                this.cursorPosition.y === event.pageY;\r\n        },\r\n\r\n        /**\r\n         * Set true to observable variable multiselectFocus\r\n         * @param {Object} ctx\r\n         * @param {Object} event - focus event\r\n         */\r\n        onFocusIn: function (ctx, event) {\r\n            !this.cacheUiSelect ? this.cacheUiSelect = event.target : false;\r\n            this.multiselectFocus(true);\r\n        },\r\n\r\n        /**\r\n         * Set false to observable variable multiselectFocus\r\n         * and close list\r\n         */\r\n        onFocusOut: function () {\r\n            this.multiselectFocus(false);\r\n        },\r\n\r\n        /**\r\n         * Handler enter key, if select list is closed - open select,\r\n         * if select list is open toggle selected current option\r\n         */\r\n        enterKeyHandler: function () {\r\n\r\n            if (this.filterOptionsFocus()) {\r\n                return false;\r\n            }\r\n\r\n            if (this.listVisible()) {\r\n                if (this.hoveredElement) {\r\n                    this.toggleOptionSelected(ko.dataFor(this.hoveredElement));\r\n                }\r\n            } else {\r\n                this.setListVisible(true);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler escape key, if select list is open - closes it,\r\n         */\r\n        escapeKeyHandler: function () {\r\n            this.listVisible() ? this.setListVisible(false) : false;\r\n        },\r\n\r\n        /**\r\n         * Handler pageDown key, selected next option in list, if current option is last\r\n         * selected first option in list\r\n         */\r\n        pageDownKeyHandler: function () {\r\n            this._setHoverToElement(1);\r\n        },\r\n\r\n        /**\r\n         * Get jQuery element by option data\r\n         *\r\n         * @param {Object} data - option data\r\n         *\r\n         * @returns {Object} jQuery element\r\n         */\r\n        _getElemByData: function (data) {\r\n            var i = 0,\r\n                list = $(this.cacheUiSelect).find('li'),\r\n                length = this.options().length,\r\n                result;\r\n\r\n            for (i; i < length; i++) {\r\n                if (this.options()[i].value === data.value) {\r\n                    result = $(list[i]);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Set hover to visible element\r\n         *\r\n         * @param {Number} direction - iterator\r\n         */\r\n        _setHoverToElement: function (direction) {\r\n            var element;\r\n\r\n            if (direction ===  1) {\r\n                element = this._getNextElement();\r\n            } else if (direction === -1) {\r\n                element = this._getPreviousElement();\r\n            }\r\n\r\n            if (element) {\r\n                this._hoverTo(element);\r\n                this._scrollTo(element);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Find current hovered element\r\n         * and change scroll position\r\n         *\r\n         * @param {Number} element - element index\r\n         */\r\n        _scrollTo: function (element) {\r\n            var curEl = $(element).children(this.actionTargetSelector),\r\n                wrapper = $(this.rootList),\r\n                curElPos = {},\r\n                wrapperPos = {};\r\n\r\n            curElPos.start = curEl.offset().top;\r\n            curElPos.end = curElPos.start + curEl.outerHeight();\r\n\r\n            wrapperPos.start = wrapper.offset().top;\r\n            wrapperPos.end = wrapperPos.start + wrapper.height();\r\n\r\n            if (curElPos.start < wrapperPos.start) {\r\n                wrapper.scrollTop(wrapper.scrollTop() - (wrapperPos.start - curElPos.start));\r\n            } else if (curElPos.end > wrapperPos.end) {\r\n                wrapper.scrollTop(wrapper.scrollTop() + curElPos.end - wrapperPos.end);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler pageUp key, selected previous option in list, if current option is first -\r\n         * selected last option in list\r\n         */\r\n        pageUpKeyHandler: function () {\r\n            this._setHoverToElement(-1);\r\n        },\r\n\r\n        /**\r\n         * Switcher to parse keydown event and delegate event to needful method\r\n         *\r\n         * @param {Object} data - element data\r\n         * @param {Object} event - keydown event\r\n         * @returns {Boolean} if handler for this event doesn't found return true\r\n         */\r\n        keydownSwitcher: function (data, event) {\r\n            var keyName = keyCodes[event.keyCode];\r\n\r\n            if (this.isTabKey(event)) {\r\n                if (!this.filterOptionsFocus() && this.listVisible() && this.filterOptions) {\r\n                    this.cacheUiSelect.blur();\r\n                    this.filterOptionsFocus(true);\r\n                    this.cleanHoveredElement();\r\n\r\n                    return false;\r\n                }\r\n                this.listVisible(false);\r\n\r\n                return true;\r\n            }\r\n\r\n            if (this.keyDownHandlers().hasOwnProperty(keyName)) {\r\n                this.keyDownHandlers()[keyName].apply(this, arguments);\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set caption\r\n         */\r\n        setCaption: function () {\r\n            var length, caption = '';\r\n\r\n            if (!_.isArray(this.value()) && this.value()) {\r\n                length = 1;\r\n            } else if (this.value()) {\r\n                length = this.value().length;\r\n            } else {\r\n                this.value([]);\r\n                length = 0;\r\n            }\r\n            this.warn(caption);\r\n\r\n            //check if option was removed\r\n            if (this.isDisplayMissingValuePlaceholder && length && !this.getSelected().length) {\r\n                caption = this.missingValuePlaceholder.replace('%s', this.value());\r\n                this.placeholder(caption);\r\n                this.warn(caption);\r\n\r\n                return this.placeholder();\r\n            }\r\n\r\n            if (length > 1) {\r\n                this.placeholder(length + ' ' + this.selectedPlaceholders.lotPlaceholders);\r\n            } else if (length && this.getSelected().length) {\r\n                this.placeholder(this.getSelected()[0].label);\r\n            } else {\r\n                this.placeholder(this.selectedPlaceholders.defaultPlaceholder);\r\n            }\r\n\r\n            return this.placeholder();\r\n        },\r\n\r\n        /**\r\n         * Set list status, open or close\r\n         *\r\n         * @param {Boolean} value - variable for set list visible status\r\n         */\r\n        setListVisible: function (value) {\r\n            this.listVisible(value);\r\n        },\r\n\r\n        /**\r\n         * Processes preview for option by it's value, and sets the result\r\n         * to 'preview' observable\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPreview: function () {\r\n            var selected = this.getSelected();\r\n\r\n            return selected.map(function (option) {\r\n                return option.label;\r\n            }).join(', ');\r\n        },\r\n\r\n        /**\r\n         * Defines previous option element to\r\n         * the one that is currently hovered.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        _getPreviousElement: function () {\r\n            var currentElement = this.hoveredElement,\r\n                lastElement    = this._getLastIn(this.rootList),\r\n                previousElement;\r\n\r\n            if (!currentElement) {\r\n                return lastElement;\r\n            }\r\n\r\n            previousElement = $(currentElement).prev()[0];\r\n\r\n            return this._getLastIn(previousElement) ||\r\n                previousElement ||\r\n                this._getFirstParentOf(currentElement) ||\r\n                lastElement;\r\n        },\r\n\r\n        /**\r\n         * Defines next option element to\r\n         * the one that is currently hovered.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        _getNextElement: function () {\r\n            var currentElement = this.hoveredElement,\r\n                firstElement   = this._getFirstIn(this.rootList);\r\n\r\n            if (!currentElement) {\r\n                return firstElement;\r\n            }\r\n\r\n            return this._getFirstIn(currentElement) ||\r\n                $(currentElement).next()[0] ||\r\n                this._getParentsOf(currentElement).next()[0] ||\r\n                firstElement;\r\n        },\r\n\r\n        /**\r\n         * Returns first option element in provided scope.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {Element}\r\n         */\r\n        _getFirstIn: function (scope) {\r\n            return $(scope).find(this.visibleOptionSelector)[0];\r\n        },\r\n\r\n        /**\r\n         * Returns last descendant option element in provided scope.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {Element}\r\n         */\r\n        _getLastIn: function (scope) {\r\n            return $(scope).find(this.visibleOptionSelector).last()[0];\r\n        },\r\n\r\n        /**\r\n         * Returns a collection of parent option elements.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {jQueryCollection}\r\n         */\r\n        _getParentsOf: function (scope) {\r\n            return $(scope).parents(this.visibleOptionSelector);\r\n        },\r\n\r\n        /**\r\n         * Returns first parent option element.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {Element}\r\n         */\r\n        _getFirstParentOf: function (scope) {\r\n            return this._getParentsOf(scope)[0];\r\n        },\r\n\r\n        /**\r\n         * Sets hover class to provided option element.\r\n         *\r\n         * @param {Element} element\r\n         */\r\n        _hoverTo: function (element) {\r\n            if (this.hoveredElement) {\r\n                $(this.hoveredElement)\r\n                    .children(this.actionTargetSelector)\r\n                    .removeClass(this.hoverClass);\r\n            }\r\n\r\n            $(element)\r\n                .children(this.actionTargetSelector)\r\n                .addClass(this.hoverClass);\r\n\r\n            this.hoveredElement = element;\r\n        },\r\n\r\n        /**\r\n         * Callback which fires when root list element is rendered.\r\n         *\r\n         * @param {Element} element\r\n         */\r\n        onRootListRender: function (element) {\r\n            var targetSelector = 'li > ' + this.actionTargetSelector;\r\n\r\n            this.rootList = element;\r\n\r\n            $(this.rootList).on(\r\n                'mousemove',\r\n                targetSelector,\r\n                this.onDelegatedMouseMouve.bind(this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Returns options from cache or send request\r\n         *\r\n         * @param {String} searchKey\r\n         */\r\n        loadOptions: function (searchKey) {\r\n            var currentPage = searchKey === this.lastSearchKey ? this.lastSearchPage + 1 : 1,\r\n                cachedSearchResult;\r\n\r\n            this.renderPath = !!this.showPath;\r\n\r\n            if (this.isSearchKeyCached(searchKey)) {\r\n                cachedSearchResult = this.getCachedSearchResults(searchKey);\r\n                this.cacheOptions.plain = cachedSearchResult.options;\r\n                this.options(cachedSearchResult.options);\r\n                this.afterLoadOptions(searchKey, cachedSearchResult.lastPage, cachedSearchResult.total);\r\n\r\n                return;\r\n            }\r\n\r\n            if (currentPage === 1) {\r\n                this.options([]);\r\n            }\r\n            this.processRequest(searchKey, currentPage);\r\n        },\r\n\r\n        /**\r\n         * Load more options on scroll down\r\n         * @param {Object} data\r\n         * @param {Event} event\r\n         */\r\n        onScrollDown: function (data, event) {\r\n            var clientHight = event.target.scrollTop + event.target.clientHeight,\r\n                scrollHeight = event.target.scrollHeight;\r\n\r\n            if (!this.searchOptions) {\r\n                return;\r\n            }\r\n\r\n            if (clientHight > scrollHeight - this.deviation && !this.isSearchKeyCached(data.filterInputValue())) {\r\n                this.loadOptions(data.filterInputValue());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns cached search result by search key\r\n         *\r\n         * @param {String} searchKey\r\n         * @return {Object}\r\n         */\r\n        getCachedSearchResults: function (searchKey) {\r\n            if (this.cachedSearchResults.hasOwnProperty(searchKey)) {\r\n                return this.cachedSearchResults[searchKey];\r\n            }\r\n\r\n            return {\r\n                options: [],\r\n                lastPage: 1,\r\n                total: 0\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Cache loaded data\r\n         *\r\n         * @param {String} searchKey\r\n         * @param {Array} optionsArray\r\n         * @param {Number} page\r\n         * @param {Number} total\r\n         */\r\n        setCachedSearchResults: function (searchKey, optionsArray, page, total) {\r\n            var cachedData = {};\r\n\r\n            cachedData.options = optionsArray;\r\n            cachedData.lastPage = page;\r\n            cachedData.total = total;\r\n            this.cachedSearchResults[searchKey] = cachedData;\r\n        },\r\n\r\n        /**\r\n         * Check if search key cached\r\n         *\r\n         * @param {String} searchKey\r\n         * @return {Boolean}\r\n         */\r\n        isSearchKeyCached: function (searchKey) {\r\n            var totalCached = this.cachedSearchResults.hasOwnProperty(searchKey) ?\r\n                this.deviation * this.cachedSearchResults[searchKey].lastPage :\r\n                0;\r\n\r\n            return totalCached > 0 && totalCached >= this.cachedSearchResults[searchKey].total;\r\n        },\r\n\r\n        /**\r\n         * Submit request to load data\r\n         *\r\n         * @param {String} searchKey\r\n         * @param {Number} page\r\n         */\r\n        processRequest: function (searchKey, page) {\r\n            this.loading(true);\r\n            this.currentSearchKey = searchKey;\r\n            $.ajax({\r\n                url: this.searchUrl,\r\n                type: 'get',\r\n                dataType: 'json',\r\n                context: this,\r\n                data: {\r\n                    searchKey: searchKey,\r\n                    page: page,\r\n                    limit: this.pageLimit\r\n                },\r\n                success: $.proxy(this.success, this),\r\n                error: $.proxy(this.error, this),\r\n                beforeSend: $.proxy(this.beforeSend, this),\r\n                complete: $.proxy(this.complete, this, searchKey, page)\r\n            });\r\n        },\r\n\r\n        /** @param {Object} response */\r\n        success: function (response) {\r\n            var existingOptions = this.options();\r\n\r\n            _.each(response.options, function (opt) {\r\n                existingOptions.push(opt);\r\n            });\r\n\r\n            this.total = response.total;\r\n            this.cacheOptions.plain = existingOptions;\r\n            this.options(existingOptions);\r\n        },\r\n\r\n        /** add actions before ajax request */\r\n        beforeSend: function () {\r\n\r\n        },\r\n\r\n        /** set empty array if error occurs */\r\n        error: function () {\r\n            this.options([]);\r\n        },\r\n\r\n        /** cache options and stop loading*/\r\n        complete: function (searchKey, page) {\r\n            this.setCachedSearchResults(searchKey, this.options(), page, this.total);\r\n            this.afterLoadOptions(searchKey, page, this.total);\r\n        },\r\n\r\n        /**\r\n         * Stop loading and update data after options were updated\r\n         *\r\n         * @param {String} searchKey\r\n         * @param {Number} page\r\n         * @param {Number} total\r\n         */\r\n        afterLoadOptions: function (searchKey, page, total) {\r\n            this.lastSearchKey = searchKey;\r\n            this.lastSearchPage = page;\r\n            this._setItemsQuantity(total);\r\n            this.loading(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/url-input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, layout, $t, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            linkedElement: {},\r\n            settingTemplate: 'ui/form/element/urlInput/setting',\r\n            typeSelectorTemplate: 'ui/form/element/urlInput/typeSelector',\r\n            options: [],\r\n            linkedElementInstances: {},\r\n            //checkbox\r\n            isDisplayAdditionalSettings: true,\r\n            settingValue: false,\r\n            settingLabel: $t('Open in new tab'),\r\n            tracks: {\r\n                linkedElement: true\r\n            },\r\n            baseLinkSetting: {\r\n                namePrefix: '${$.name}.',\r\n                dataScopePrefix: '${$.dataScope}.',\r\n                provider: '${$.provider}'\r\n            },\r\n            urlTypes: {},\r\n            listens: {\r\n                settingValue: 'checked',\r\n                disabled: 'hideLinkedElement',\r\n                linkType: 'createChildUrlInputComponent'\r\n            },\r\n            links: {\r\n                linkType: '${$.provider}:${$.dataScope}.type',\r\n                settingValue: '${$.provider}:${$.dataScope}.setting'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var processedLinkTypes = {},\r\n                baseLinkType = this.constructor.defaults.baseLinkSetting;\r\n\r\n            _.each(config.urlTypes, function (linkSettingsArray, linkName) {\r\n                //add link name by link type\r\n                linkSettingsArray.name = baseLinkType.namePrefix + linkName;\r\n                linkSettingsArray.dataScope = baseLinkType.dataScopePrefix + linkName;\r\n                linkSettingsArray.type = linkName;\r\n                linkSettingsArray.disabled = config.disabled;\r\n                linkSettingsArray.visible = config.visible;\r\n                processedLinkTypes[linkName] = {};\r\n                _.extend(processedLinkTypes[linkName], baseLinkType, linkSettingsArray);\r\n            });\r\n            _.extend(this.constructor.defaults.urlTypes, processedLinkTypes);\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('componentTemplate options value linkType settingValue checked isDisplayAdditionalSettings')\r\n                .setOptions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set options to select based on link types configuration\r\n         *\r\n         * @return {Object}\r\n         */\r\n        setOptions: function () {\r\n            var result = [];\r\n\r\n            _.each(this.urlTypes, function (option, key) {\r\n                result.push({\r\n                    value: key,\r\n                    label: option.label,\r\n                    sortOrder: option.sortOrder || 0\r\n                });\r\n            });\r\n\r\n            //sort options by sortOrder\r\n            result.sort(function (a, b) {\r\n                return a.sortOrder > b.sortOrder ? 1 : -1;\r\n            });\r\n\r\n            this.options(result);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setPreview: function (visible) {\r\n            this.linkedElement().visible(visible);\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @param {Boolean} disabled\r\n         */\r\n        hideLinkedElement: function (disabled) {\r\n            this.linkedElement().disabled(disabled);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            _.each(this.linkedElementInstances, function (value) {\r\n                value().destroy();\r\n            });\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Create child component by value\r\n         *\r\n         * @param {String} value\r\n         * @return void\r\n         */\r\n        createChildUrlInputComponent: function (value) {\r\n            var elementConfig;\r\n\r\n            if (!_.isEmpty(value) && _.isUndefined(this.linkedElementInstances[value])) {\r\n                elementConfig = this.urlTypes[value];\r\n                layout([elementConfig]);\r\n                this.linkedElementInstances[value] = this.requestModule(elementConfig.name);\r\n            }\r\n            this.linkedElement = this.linkedElementInstances[value];\r\n\r\n        },\r\n\r\n        /**\r\n         * Returns linked element to display related field in template\r\n         * @return String\r\n         */\r\n        getLinkedElementName: function () {\r\n            return this.linkedElement;\r\n        },\r\n\r\n        /**\r\n         * Add ability to choose check box by clicking on label\r\n         */\r\n        checkboxClick: function () {\r\n            if (!this.disabled()) {\r\n                this.settingValue(!this.settingValue());\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/website.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select'\r\n], function (_, registry, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            customerId: null,\r\n            isGlobalScope: 0\r\n        },\r\n\r\n        /**\r\n         * Website component constructor.\r\n         * @returns {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.customerId || this.isGlobalScope) {\r\n                this.disable(true);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/wysiwyg.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'wysiwygAdapter',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'ko',\r\n    './abstract',\r\n    'mage/adminhtml/events',\r\n    'Magento_Variable/variables'\r\n], function (wysiwyg, $, _, ko, Abstract, varienGlobalEvents) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        currentWysiwyg: undefined,\r\n        defaults: {\r\n            elementSelector: 'textarea',\r\n            suffixRegExpPattern: '${ $.wysiwygUniqueSuffix }',\r\n            $wysiwygEditorButton: '',\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            template: 'ui/form/field',\r\n            elementTmpl: 'ui/form/element/wysiwyg',\r\n            content:        '',\r\n            showSpinner:    false,\r\n            loading:        false,\r\n            listens: {\r\n                disabled: 'setDisabled'\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initNodeListener();\r\n\r\n            $.async({\r\n                component: this,\r\n                selector: 'button'\r\n            }, function (element) {\r\n                this.$wysiwygEditorButton = this.$wysiwygEditorButton ?\r\n                    this.$wysiwygEditorButton.add($(element)) : $(element);\r\n            }.bind(this));\r\n\r\n            // disable editor completely after initialization is field is disabled\r\n            varienGlobalEvents.attachEventHandler('wysiwygEditorInitialized', function () {\r\n                if (!_.isUndefined(window.tinyMceEditors)) {\r\n                    this.currentWysiwyg = window.tinyMceEditors[this.wysiwygId];\r\n                }\r\n\r\n                if (this.disabled()) {\r\n                    this.setDisabled(true);\r\n                }\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var pattern = config.suffixRegExpPattern || this.constructor.defaults.suffixRegExpPattern;\r\n\r\n            pattern = pattern.replace(/\\$/g, '\\\\$&');\r\n            config.content = config.content.replace(new RegExp(pattern, 'g'), this.getUniqueSuffix(config));\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Build unique id based on name, underscore separated.\r\n         *\r\n         * @param {Object} config\r\n         */\r\n        getUniqueSuffix: function (config) {\r\n            return config.name.replace(/(\\.|-)/g, '_');\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            wysiwyg.removeEvents(this.wysiwygId);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('value');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {} Chainable.\r\n         */\r\n        initNodeListener: function () {\r\n            $.async({\r\n                component: this,\r\n                selector: this.elementSelector\r\n            }, this.setElementNode.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setElementNode: function (node) {\r\n            $(node).bindings({\r\n                value: this.value\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set disabled property to wysiwyg component\r\n         *\r\n         * @param {Boolean} disabled\r\n         */\r\n        setDisabled: function (disabled) {\r\n            if (this.$wysiwygEditorButton && disabled) {\r\n                this.$wysiwygEditorButton.prop('disabled', 'disabled');\r\n            } else if (this.$wysiwygEditorButton) {\r\n                this.$wysiwygEditorButton.removeProp('disabled');\r\n            }\r\n\r\n            /* eslint-disable no-undef */\r\n            if (!_.isUndefined(this.currentWysiwyg) && this.currentWysiwyg.activeEditor()) {\r\n                this.currentWysiwyg.setEnabledStatus(!disabled);\r\n                this.currentWysiwyg.getPluginButtons().prop('disabled', disabled);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/data-storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            cacheRequests: true,\r\n            cachedRequestDelay: 50,\r\n            indexField: 'entity_id',\r\n            requestConfig: {\r\n                url: '${ $.updateUrl }',\r\n                method: 'GET',\r\n                dataType: 'json'\r\n            },\r\n            dataScope: '',\r\n            data: {}\r\n        },\r\n\r\n        /**\r\n         * Initializes dataStorage configuration.\r\n         *\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            var scope;\r\n\r\n            this._super();\r\n\r\n            scope = this.dataScope;\r\n\r\n            if (typeof scope === 'string') {\r\n                this.dataScope = scope ? [scope] : [];\r\n            }\r\n\r\n            this._requests = [];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts data which matches specified set of identifiers.\r\n         *\r\n         * @param {Array} ids - Records identifiers.\r\n         * @returns {Array|Boolean}\r\n         */\r\n        getByIds: function (ids) {\r\n            var result = [],\r\n                hasData;\r\n\r\n            hasData = ids.every(function (id) {\r\n                var item = this.data[id];\r\n\r\n                return item ? result.push(item) : false;\r\n            }, this);\r\n\r\n            return hasData ? result : false;\r\n        },\r\n\r\n        /**\r\n         * Extracts identifiers of provided records.\r\n         * If no records were provided then full list of\r\n         * current data id's will be returned.\r\n         *\r\n         * @param {Object|Array} [data=this.data]\r\n         * @returns {Array}\r\n         */\r\n        getIds: function (data) {\r\n            data = data || this.data;\r\n\r\n            return _.pluck(data, this.indexField);\r\n        },\r\n\r\n        /**\r\n         * Extracts data which matches specified parameters.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @param {Object} [options={}]\r\n         * @returns {jQueryPromise}\r\n         */\r\n        getData: function (params, options) {\r\n            var cachedRequest;\r\n\r\n            if (this.hasScopeChanged(params)) {\r\n                this.clearRequests();\r\n            } else {\r\n                cachedRequest = this.getRequest(params);\r\n            }\r\n\r\n            options = options || {};\r\n\r\n            return !options.refresh && cachedRequest ?\r\n                this.getRequestData(cachedRequest) :\r\n                this.requestData(params);\r\n        },\r\n\r\n        /**\r\n         * Tells whether one of the parameters defined in the \"dataScope\" has\r\n         * changed since the last request.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {Boolean}\r\n         */\r\n        hasScopeChanged: function (params) {\r\n            var lastRequest = _.last(this._requests),\r\n                keys,\r\n                diff;\r\n\r\n            if (!lastRequest) {\r\n                return false;\r\n            }\r\n\r\n            diff = utils.compare(lastRequest.params, params);\r\n\r\n            keys = _.pluck(diff.changes, 'path');\r\n            keys = keys.concat(Object.keys(diff.containers));\r\n\r\n            return _.intersection(this.dataScope, keys).length > 0;\r\n        },\r\n\r\n        /**\r\n         * Extends records of current data object\r\n         * with the provided records collection.\r\n         *\r\n         * @param {Array} data - An array of records.\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        updateData: function (data) {\r\n            var records = _.indexBy(data || [], this.indexField);\r\n\r\n            _.extend(this.data, records);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sends request to the server with provided parameters.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        requestData: function (params) {\r\n            var query = utils.copy(params),\r\n                handler = this.onRequestComplete.bind(this, query),\r\n                request;\r\n\r\n            this.requestConfig.data = query;\r\n            request = $.ajax(this.requestConfig).done(handler);\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Returns request's instance which\r\n         * contains provided parameters.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {Object} Instance of request.\r\n         */\r\n        getRequest: function (params) {\r\n            return _.find(this._requests, function (request) {\r\n                return _.isEqual(params, request.params);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Forms data object associated with provided request.\r\n         *\r\n         * @param {Object} request - Request object.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        getRequestData: function (request) {\r\n            var defer = $.Deferred(),\r\n                resolve = defer.resolve.bind(defer),\r\n                delay = this.cachedRequestDelay,\r\n                result;\r\n\r\n            result = {\r\n                items: this.getByIds(request.ids),\r\n                totalRecords: request.totalRecords,\r\n                errorMessage: request.errorMessage\r\n            };\r\n\r\n            delay ?\r\n                _.delay(resolve, delay, result) :\r\n                resolve(result);\r\n\r\n            return defer.promise();\r\n        },\r\n\r\n        /**\r\n         * Caches requests object with provided parameters\r\n         * and data object associated with it.\r\n         *\r\n         * @param {Object} data - Data associated with request.\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        cacheRequest: function (data, params) {\r\n            var cached = this.getRequest(params);\r\n\r\n            if (cached) {\r\n                this.removeRequest(cached);\r\n            }\r\n\r\n            this._requests.push({\r\n                ids: this.getIds(data.items),\r\n                params: params,\r\n                totalRecords: data.totalRecords,\r\n                errorMessage: data.errorMessage\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears all cached requests.\r\n         *\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        clearRequests: function () {\r\n            this._requests.splice(0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes provided request object from cached requests list.\r\n         *\r\n         * @param {Object} request - Request object.\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        removeRequest: function (request) {\r\n            var requests = this._requests,\r\n                index = requests.indexOf(request);\r\n\r\n            if (~index) {\r\n                requests.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if request with a specified parameters was cached.\r\n         *\r\n         * @param {Object} params - Parameters of the request.\r\n         * @returns {Boolean}\r\n         */\r\n        wasRequested: function (params) {\r\n            return !!this.getRequest(params);\r\n        },\r\n\r\n        /**\r\n         * Handles successful data request.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @param {Object} data - Response data.\r\n         */\r\n        onRequestComplete: function (params, data) {\r\n            this.updateData(data.items);\r\n\r\n            if (this.cacheRequests) {\r\n                this.cacheRequest(data, params);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/dnd.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (ko, $, _, registry, Class) {\r\n    'use strict';\r\n\r\n    var isTouchDevice = typeof document.ontouchstart !== 'undefined',\r\n        transformProp;\r\n\r\n    /**\r\n     * Defines supported css 'transform' property.\r\n     *\r\n     * @returns {String|Undefined}\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.body.style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform != 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] != 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Returns first touch data if it's available.\r\n     *\r\n     * @param {(MouseEvent|TouchEvent)} e - Event object.\r\n     * @returns {Object}\r\n     */\r\n    function getTouch(e) {\r\n        return e.touches ? e.touches[0] : e;\r\n    }\r\n\r\n    /**\r\n     * Moves specified DOM element to the x and y coordinates.\r\n     *\r\n     * @param {HTMLElement} elem - Element to be relocated.\r\n     * @param {Number} x - X coordinate.\r\n     * @param {Number} y - Y coordinate.\r\n     */\r\n    function locate(elem, x, y) {\r\n        var value = 'translate(' + x + 'px,' + y + 'px)';\r\n\r\n        elem.style[transformProp] = value;\r\n    }\r\n\r\n    /*eslint-disable no-extra-parens*/\r\n    /**\r\n     * Checks if specified coordinate is inside of the provided area.\r\n     *\r\n     * @param {Number} x - X coordinate.\r\n     * @param {Number} y - Y coordinate.\r\n     * @param {Object} area - Object which represents area.\r\n     * @returns {Boolean}\r\n     */\r\n    function isInside(x, y, area) {\r\n        return (\r\n            area &&\r\n            x >= area.left && x <= area.right &&\r\n            y >= area.top && y <= area.bottom\r\n        );\r\n    }\r\n\r\n    /*eslint-enable no-extra-parens*/\r\n\r\n    /**\r\n     * Calculates distance between two points.\r\n     *\r\n     * @param {Number} x1 - X coordinate of a first point.\r\n     * @param {Number} y1 - Y coordinate of a first point.\r\n     * @param {Number} x2 - X coordinate of a second point.\r\n     * @param {Number} y2 - Y coordinate of a second point.\r\n     * @returns {Number} Distance between points.\r\n     */\r\n    function distance(x1, y1, x2, y2) {\r\n        var dx = x2 - x1,\r\n            dy = y2 - y1;\r\n\r\n        dx *= dx;\r\n        dy *= dy;\r\n\r\n        return Math.sqrt(dx + dy);\r\n    }\r\n\r\n    /**\r\n     * Returns viewModel associated with a provided DOM element.\r\n     *\r\n     * @param {HTMLElement} elem\r\n     * @returns {Object|Array}\r\n     */\r\n    function getModel(elem) {\r\n        return ko.dataFor(elem);\r\n    }\r\n\r\n    /**\r\n     * Checks whether cols are identical\r\n     *\r\n     * @param {HTMLElement} c1\r\n     * @param {HTMLElement} c2\r\n     * @returns {Boolean}\r\n     */\r\n    function compareCols(c1, c2) {\r\n        return c1.cellIndex === c2.cellIndex;\r\n    }\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rootSelector: '${ $.columnsProvider }:.admin__data-grid-wrap',\r\n            tableSelector: '${ $.rootSelector } -> table.data-grid',\r\n            mainTableSelector: '[data-role=\"grid\"]',\r\n            columnSelector: '${ $.tableSelector } thead tr th',\r\n            noSelectClass: '_no-select',\r\n            hiddenClass: '_hidden',\r\n            fixedX: false,\r\n            fixedY: true,\r\n            minDistance: 2,\r\n            columns: []\r\n        },\r\n\r\n        /**\r\n         * Initializes Dnd component.\r\n         *\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'initTable',\r\n                'initColumn',\r\n                'removeColumn',\r\n                'onMouseMove',\r\n                'onMouseUp',\r\n                'onMouseDown'\r\n            );\r\n\r\n            this.$body = $('body');\r\n\r\n            this._super()\r\n                .initListeners();\r\n\r\n            $.async(this.tableSelector, this.initTable);\r\n            $.async(this.columnSelector, this.initColumn);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Binds necessary events listeners.\r\n         *\r\n         * @returns {Dnd} Chainbale.\r\n         */\r\n        initListeners: function () {\r\n            if (isTouchDevice) {\r\n                $(document).on({\r\n                    touchmove: this.onMouseMove,\r\n                    touchend: this.onMouseUp,\r\n                    touchleave: this.onMouseUp\r\n                });\r\n            } else {\r\n                $(document).on({\r\n                    mousemove: this.onMouseMove,\r\n                    mouseup: this.onMouseUp\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines specified table element as a main container.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        initTable: function (table) {\r\n            this.table =  $(table).is(this.mainTableSelector) ?  table : this.table;\r\n\r\n            $(table).addClass('data-grid-draggable');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets specified column as a draggable element.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} column - Columns header element.\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        initColumn: function (column) {\r\n            var model = getModel(column),\r\n                eventName;\r\n\r\n            if (!model || !model.draggable) {\r\n                return this;\r\n            }\r\n\r\n            if (!ko.es5.isTracked(model, 'dragover')) {\r\n                model.track('dragover');\r\n            }\r\n\r\n            this.columns.push(column);\r\n\r\n            $(column).bindings({\r\n                css: {\r\n                    '_dragover-left': ko.computed(function () {\r\n                        return model.dragover === 'right';\r\n                    }),\r\n                    '_dragover-right': ko.computed(function () {\r\n                        return model.dragover === 'left';\r\n                    })\r\n                }\r\n            });\r\n\r\n            eventName = isTouchDevice ?\r\n                'touchstart' :\r\n                'mousedown';\r\n\r\n            $(column).on(eventName, this.onMouseDown);\r\n            $.async.remove(column, this.removeColumn);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified column element from the columns array.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} column - Columns header element.\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        removeColumn: function (column) {\r\n            var columns = this.columns,\r\n                index = columns.indexOf(column);\r\n\r\n            if (~index) {\r\n                columns.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns index of column.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} elem\r\n         * @returns {Number}\r\n         */\r\n        _getColumnIndex: function (elem) {\r\n            return _.toArray(elem.parentNode.cells).indexOf(elem);\r\n        },\r\n\r\n        /**\r\n         * Calculates coordinates of draggable elements.\r\n         *\r\n         * @returns {Dnd} Chainbale.\r\n         */\r\n        _cacheCoords: function () {\r\n            var container   = this.table.getBoundingClientRect(),\r\n                bodyRect    = document.body.getBoundingClientRect(),\r\n                grabbed     = this.grabbed,\r\n                dragElem    = grabbed.elem,\r\n                cells       = _.toArray(dragElem.parentNode.cells),\r\n                rect;\r\n\r\n            this.coords = this.columns.map(function (column) {\r\n                var data,\r\n                    colIndex = _.findIndex(cells, function (cell) {\r\n                        return compareCols(cell, column);\r\n                    });\r\n\r\n                rect = column.getBoundingClientRect();\r\n\r\n                data = {\r\n                    index: colIndex,\r\n                    target: column,\r\n                    orig: rect,\r\n                    left: rect.left - bodyRect.left,\r\n                    right: rect.right - bodyRect.left,\r\n                    top: rect.top - bodyRect.top,\r\n                    bottom: container.bottom - bodyRect.top\r\n                };\r\n\r\n                if (column === dragElem) {\r\n                    this.dragArea = data;\r\n\r\n                    grabbed.shiftX = rect.left - grabbed.x;\r\n                    grabbed.shiftY = rect.top - grabbed.y;\r\n                }\r\n\r\n                return data;\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates clone of a target table with only specified column visible.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} elem - Dragging column.\r\n         * @returns {Dnd} Chainbale.\r\n         */\r\n        _cloneTable: function (elem) {\r\n            var clone       = this.table.cloneNode(true),\r\n                columnIndex = this._getColumnIndex(elem),\r\n                headRow     = clone.tHead.firstElementChild,\r\n                headCells   = _.toArray(headRow.cells),\r\n                tableBody   = clone.tBodies[0],\r\n                bodyRows    = _.toArray(tableBody.children),\r\n                origTrs     = this.table.tBodies[0].children;\r\n\r\n            clone.style.width = elem.offsetWidth + 'px';\r\n\r\n            headCells.forEach(function (th, index) {\r\n                if (index !== columnIndex) {\r\n                    headRow.removeChild(th);\r\n                }\r\n            });\r\n\r\n            headRow.cells[0].style.height = elem.offsetHeight + 'px';\r\n\r\n            bodyRows.forEach(function (row, rowIndex) {\r\n                var cells = row.cells,\r\n                    cell;\r\n\r\n                if (cells.length !== headCells.length) {\r\n                    tableBody.removeChild(row);\r\n\r\n                    return;\r\n                }\r\n\r\n                cell = row.cells[columnIndex].cloneNode(true);\r\n\r\n                while (row.firstElementChild) {\r\n                    row.removeChild(row.firstElementChild);\r\n                }\r\n\r\n                cell.style.height = origTrs[rowIndex].cells[columnIndex].offsetHeight + 'px';\r\n\r\n                row.appendChild(cell);\r\n            });\r\n\r\n            this.dragTable = clone;\r\n\r\n            $(clone)\r\n                .addClass('_dragging-copy')\r\n                .appendTo('body');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Matches provided coordinates to available areas.\r\n         *\r\n         * @param {Number} x - X coordinate of a mouse pointer.\r\n         * @param {Number} y - Y coordinate of a mouse pointer.\r\n         * @returns {Object|Undefined} Matched area.\r\n         */\r\n        _getDropArea: function (x, y) {\r\n            return _.find(this.coords, function (area) {\r\n                return isInside(x, y, area);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates state of hovered areas.\r\n         *\r\n         * @param {Number} x - X coordinate of a mouse pointer.\r\n         * @param {Number} y - Y coordinate of a mouse pointer.\r\n         */\r\n        _updateAreas: function (x, y) {\r\n            var leavedArea = this.dropArea,\r\n                area = this.dropArea = this._getDropArea(x, y);\r\n\r\n            if (leavedArea) {\r\n                this.dragleave(leavedArea);\r\n            }\r\n\r\n            if (area && !compareCols(area.target, this.dragArea.target)) {\r\n                this.dragenter(area);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Grab action handler.\r\n         *\r\n         * @param {Number} x - X coordinate of a grabbed point.\r\n         * @param {Number} y - Y coordinate of a grabbed point.\r\n         * @param {HTMLElement} elem - Grabbed element.\r\n         */\r\n        grab: function (x, y, elem) {\r\n            this.initDrag = true;\r\n\r\n            this.grabbed = {\r\n                x: x,\r\n                y: y,\r\n                elem: elem\r\n            };\r\n\r\n            this.$body.addClass(this.noSelectClass);\r\n        },\r\n\r\n        /**\r\n         * Dragstart action handler.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} elem - Element which is dragging.\r\n         */\r\n        dragstart: function (elem) {\r\n            this.initDrag = false;\r\n            this.dropArea = false;\r\n            this.dragging = true;\r\n\r\n            getModel(elem).dragging(true);\r\n\r\n            this._cacheCoords()\r\n                ._cloneTable(elem);\r\n        },\r\n\r\n        /**\r\n         * Drag action handler. Locates draggable\r\n         * grid at a specified coordinates.\r\n         *\r\n         * @param {Number} x - X coordinate.\r\n         * @param {Number} y - Y coordinate.\r\n         */\r\n        drag: function (x, y) {\r\n            var grabbed  = this.grabbed,\r\n                dragArea = this.dragArea,\r\n                posX     = x + grabbed.shiftX,\r\n                posY     = y + grabbed.shiftY;\r\n\r\n            if (this.fixedX) {\r\n                x    = dragArea.left;\r\n                posX = dragArea.orig.left;\r\n            }\r\n\r\n            if (this.fixedY) {\r\n                y    = dragArea.top;\r\n                posY = dragArea.orig.top;\r\n            }\r\n\r\n            locate(this.dragTable, posX, posY);\r\n\r\n            if (!isInside(x, y, this.dropArea)) {\r\n                this._updateAreas(x, y);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Dragenter action handler.\r\n         *\r\n         * @param {Object} dropArea\r\n         */\r\n        dragenter: function (dropArea) {\r\n            var direction = this.dragArea.index < dropArea.index ?\r\n                'left' :\r\n                'right';\r\n\r\n            getModel(dropArea.target).dragover = direction;\r\n        },\r\n\r\n        /**\r\n         * Dragleave action handler.\r\n         *\r\n         * @param {Object} dropArea\r\n         */\r\n        dragleave: function (dropArea) {\r\n            getModel(dropArea.target).dragover = false;\r\n        },\r\n\r\n        /**\r\n         * Dragend action handler.\r\n         *\r\n         * @param {Object} dragArea\r\n         */\r\n        dragend: function (dragArea) {\r\n            var dropArea = this.dropArea,\r\n                dragElem = dragArea.target;\r\n\r\n            this.dragging = false;\r\n\r\n            document.body.removeChild(this.dragTable);\r\n\r\n            getModel(dragElem).dragging(false);\r\n\r\n            if (dropArea && !compareCols(dropArea.target, dragElem)) {\r\n                this.drop(dropArea, dragArea);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Drop action handler.\r\n         *\r\n         * @param {Object} dropArea\r\n         * @param {Object} dragArea\r\n         */\r\n        drop: function (dropArea, dragArea) {\r\n            var dropModel = getModel(dropArea.target),\r\n                dragModel = getModel(dragArea.target);\r\n\r\n            getModel(this.table).insertChild(dragModel, dropModel);\r\n            dropModel.dragover = false;\r\n        },\r\n\r\n        /**\r\n         * Documents' 'mousemove' event handler.\r\n         *\r\n         * @param {(MouseEvent|TouchEvent)} e - Event object.\r\n         */\r\n        onMouseMove: function (e) {\r\n            var grab    = this.grabbed,\r\n                touch   = getTouch(e),\r\n                x       = touch.pageX,\r\n                y       = touch.pageY;\r\n\r\n            if (this.initDrag || this.dragging) {\r\n                e.preventDefault();\r\n            }\r\n\r\n            if (this.initDrag && distance(x, y, grab.x, grab.y) >= this.minDistance) {\r\n                this.dragstart(grab.elem);\r\n            }\r\n\r\n            if (this.dragging) {\r\n                this.drag(x, y);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Documents' 'mouseup' event handler.\r\n         */\r\n        onMouseUp: function () {\r\n            if (this.initDrag || this.dragging) {\r\n                this.initDrag = false;\r\n                this.$body.removeClass(this.noSelectClass);\r\n            }\r\n\r\n            if (this.dragging) {\r\n                this.dragend(this.dragArea);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Columns' 'mousedown' event handler.\r\n         *\r\n         * @param {(MouseEvent|TouchEvent)} e - Event object.\r\n         */\r\n        onMouseDown: function (e) {\r\n            var touch = getTouch(e);\r\n\r\n            this.grab(touch.pageX, touch.pageY, e.currentTarget);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/export.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiElement'\r\n], function ($, _, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/exportButton',\r\n            selectProvider: 'ns = ${ $.ns }, index = ids',\r\n            checked: '',\r\n            additionalParams: [],\r\n            modules: {\r\n                selections: '${ $.selectProvider }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super()\r\n                .initChecked();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            _.each(this.additionalParams, function (value, key) {\r\n                key = 'additionalParams.' + key;\r\n                this.imports[key] = value;\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('checked');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks first option if checked not defined.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initChecked: function () {\r\n            if (!this.checked()) {\r\n                this.checked(\r\n                    this.options[0].value\r\n                );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Compose params object that will be added to request.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getParams: function () {\r\n            var selections = this.selections(),\r\n                data = selections ? selections.getSelections() : null,\r\n                itemsType,\r\n                result = {};\r\n\r\n            if (data) {\r\n                itemsType = data.excludeMode ? 'excluded' : 'selected';\r\n                result.filters = data.params.filters;\r\n                result.search = data.params.search;\r\n                result.namespace = data.params.namespace;\r\n                result[itemsType] = data[itemsType];\r\n                _.each(this.additionalParams, function (param, key) {\r\n                    result[key] = param;\r\n                });\r\n\r\n                if (!result[itemsType].length) {\r\n                    result[itemsType] = false;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Find checked option.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getActiveOption: function () {\r\n            return _.findWhere(this.options, {\r\n                value: this.checked()\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Build option url.\r\n         *\r\n         * @param {Object} option\r\n         * @returns {String}\r\n         */\r\n        buildOptionUrl: function (option) {\r\n            var params = this.getParams();\r\n\r\n            if (!params) {\r\n                return 'javascript:void(0);';\r\n            }\r\n\r\n            return option.url + '?' + $.param(params);\r\n            //TODO: MAGETWO-40250\r\n        },\r\n\r\n        /**\r\n         * Redirect to built option url.\r\n         */\r\n        applyOption: function () {\r\n            var option = this.getActiveOption(),\r\n                url = this.buildOptionUrl(option);\r\n\r\n            location.href = url;\r\n\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'rjsResolver',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (ko, _, loader, resolver, layout, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/listing',\r\n            listTemplate: 'ui/list/listing',\r\n            stickyTmpl: 'ui/grid/sticky/listing',\r\n            viewSwitcherTmpl: 'ui/grid/view-switcher',\r\n            positions: false,\r\n            displayMode: 'grid',\r\n            displayModes: {\r\n                grid: {\r\n                    value: 'grid',\r\n                    label: 'Grid',\r\n                    template: '${ $.template }'\r\n                },\r\n                list: {\r\n                    value: 'list',\r\n                    label: 'List',\r\n                    template: '${ $.listTemplate }'\r\n                }\r\n            },\r\n            dndConfig: {\r\n                name: '${ $.name }_dnd',\r\n                component: 'Magento_Ui/js/grid/dnd',\r\n                columnsProvider: '${ $.name }',\r\n                enabled: true\r\n            },\r\n            editorConfig: {\r\n                name: '${ $.name }_editor',\r\n                component: 'Magento_Ui/js/grid/editing/editor',\r\n                columnsProvider: '${ $.name }',\r\n                dataProvider: '${ $.provider }',\r\n                enabled: false\r\n            },\r\n            resizeConfig: {\r\n                name: '${ $.name }_resize',\r\n                columnsProvider: '${ $.name }',\r\n                component: 'Magento_Ui/js/grid/resize',\r\n                enabled: false\r\n            },\r\n            imports: {\r\n                rows: '${ $.provider }:data.items'\r\n            },\r\n            listens: {\r\n                elems: 'updatePositions updateVisible',\r\n                '${ $.provider }:reload': 'onBeforeReload',\r\n                '${ $.provider }:reloaded': 'onDataReloaded'\r\n            },\r\n            modules: {\r\n                dnd: '${ $.dndConfig.name }',\r\n                resize: '${ $.resizeConfig.name }'\r\n            },\r\n            tracks: {\r\n                displayMode: true\r\n            },\r\n            statefull: {\r\n                displayMode: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes Listing component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'updateVisible');\r\n\r\n            this._super()\r\n                .initDnd()\r\n                .initEditor()\r\n                .initResize();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    rows: [],\r\n                    visibleColumns: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates drag&drop widget instance.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initDnd: function () {\r\n            if (this.dndConfig.enabled) {\r\n                layout([this.dndConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes resize component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initResize: function () {\r\n            if (this.resizeConfig.enabled) {\r\n                layout([this.resizeConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates inline editing component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initEditor: function () {\r\n            if (this.editorConfig.enabled) {\r\n                layout([this.editorConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to current component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initElement: function (element) {\r\n            var currentCount = this.elems().length,\r\n                totalCount = this.initChildCount;\r\n\r\n            if (totalCount === currentCount) {\r\n                this.initPositions();\r\n            }\r\n\r\n            element.on('visible', this.updateVisible);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Defines initial order of child elements.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initPositions: function () {\r\n            this.on('positions', this.applyPositions.bind(this));\r\n\r\n            this.setStatefull('positions');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates current state of child positions.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        updatePositions: function () {\r\n            var positions = {};\r\n\r\n            this.elems.each(function (elem, index) {\r\n                positions[elem.index] = index;\r\n            });\r\n\r\n            this.set('positions', positions);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resorts child elements array according to provided positions.\r\n         *\r\n         * @param {Object} positions - Object where key represents child\r\n         *      index and value is its' position.\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        applyPositions: function (positions) {\r\n            var sorting;\r\n\r\n            sorting = this.elems.map(function (elem) {\r\n                return {\r\n                    elem: elem,\r\n                    position: positions[elem.index]\r\n                };\r\n            });\r\n\r\n            this.insertChild(sorting);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns reference to 'visibleColumns' array.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getVisible: function () {\r\n            var observable = ko.getObservable(this, 'visibleColumns');\r\n\r\n            return observable || this.visibleColumns;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the template\r\n         * defined for a current display mode.\r\n         *\r\n         * @returns {String} Path to the template.\r\n         */\r\n        getTemplate: function () {\r\n            var mode = this.displayModes[this.displayMode];\r\n\r\n            return mode.template;\r\n        },\r\n\r\n        /**\r\n         * Returns an array of available display modes.\r\n         *\r\n         * @returns {Array<Object>}\r\n         */\r\n        getDisplayModes: function () {\r\n            var modes = this.displayModes;\r\n\r\n            return _.values(modes);\r\n        },\r\n\r\n        /**\r\n         * Sets display mode to provided value.\r\n         *\r\n         * @param {String} index\r\n         * @returns {Listing} Chainable\r\n         */\r\n        setDisplayMode: function (index) {\r\n            this.displayMode = index;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns total number of displayed columns in grid.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countVisible: function () {\r\n            return this.visibleColumns.length;\r\n        },\r\n\r\n        /**\r\n         * Updates array of visible columns.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        updateVisible: function () {\r\n            this.visibleColumns = this.elems.filter('visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if grid has data.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !!this.rows && !!this.rows.length;\r\n        },\r\n\r\n        /**\r\n         * Hides loader.\r\n         */\r\n        hideLoader: function () {\r\n            loader.get(this.name).hide();\r\n        },\r\n\r\n        /**\r\n         * Shows loader.\r\n         */\r\n        showLoader: function () {\r\n            loader.get(this.name).show();\r\n        },\r\n\r\n        /**\r\n         * Handler of the data providers' 'reload' event.\r\n         */\r\n        onBeforeReload: function () {\r\n            this.showLoader();\r\n        },\r\n\r\n        /**\r\n         * Handler of the data providers' 'reloaded' event.\r\n         */\r\n        onDataReloaded: function () {\r\n            resolver(this.hideLoader, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/masonry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/listing',\r\n    'Magento_Ui/js/lib/view/utils/raf',\r\n    'jquery',\r\n    'ko',\r\n    'underscore'\r\n], function (Listing, raf, $, ko, _) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            template: 'ui/grid/masonry',\r\n            imports: {\r\n                rows: '${ $.provider }:data.items',\r\n                errorMessage: '${ $.provider }:data.errorMessage'\r\n            },\r\n            listens: {\r\n                rows: 'initComponent'\r\n            },\r\n\r\n            /**\r\n             * Images container id\r\n             * @param string\r\n             */\r\n            containerId: null,\r\n\r\n            /**\r\n             * Minimum aspect ratio for each image\r\n             * @param int\r\n             */\r\n            minRatio: null,\r\n\r\n            /**\r\n             * Container width\r\n             * @param int\r\n             */\r\n            containerWidth: window.innerWidth,\r\n\r\n            /**\r\n             * Margin between images\r\n             * @param int\r\n             */\r\n            imageMargin: 20,\r\n\r\n            /**\r\n             * Maximum image height value\r\n             * @param int\r\n             */\r\n            maxImageHeight: 240,\r\n\r\n            /**\r\n             * The value is minimum image width to height ratio when container width is less than the key\r\n             * @param {Object}\r\n             */\r\n            containerWidthToMinRatio: {\r\n                640: 3,\r\n                1280: 5,\r\n                1920: 8\r\n            },\r\n\r\n            /**\r\n             * Default minimal image width to height ratio.\r\n             * Applied when container width is greater than max width in the containerWidthToMinRatio matrix.\r\n             * @param int\r\n             */\r\n            defaultMinRatio: 10,\r\n\r\n            /**\r\n             * Layout update FPS during window resizing\r\n             */\r\n            refreshFPS: 60\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'rows',\r\n                    'errorMessage'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init component handler\r\n         * @param {Object} rows\r\n         * @return {Object}\r\n         */\r\n        initComponent: function (rows) {\r\n            if (!rows.length) {\r\n                return;\r\n            }\r\n            this.imageMargin = parseInt(this.imageMargin, 10);\r\n            this.container = $('[data-id=\"' + this.containerId + '\"]')[0];\r\n\r\n            this.setLayoutStyles();\r\n            this.setEventListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set event listener to track resize event\r\n         */\r\n        setEventListener: function () {\r\n            window.addEventListener('resize', function () {\r\n                this.updateStyles();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Updates styles for component.\r\n         */\r\n        updateStyles: function () {\r\n            raf(function () {\r\n                this.containerWidth = window.innerWidth;\r\n                this.setLayoutStyles();\r\n            }.bind(this), this.refreshFPS);\r\n        },\r\n\r\n        /**\r\n         * Set layout styles inside the container\r\n         */\r\n        setLayoutStyles: function () {\r\n            var containerWidth = parseInt(this.container.clientWidth, 10),\r\n                rowImages = [],\r\n                ratio = 0,\r\n                rowHeight = 0,\r\n                calcHeight = 0,\r\n                isLastRow = false,\r\n                rowNumber = 1;\r\n\r\n            this.setMinRatio();\r\n\r\n            this.rows().forEach(function (image, index) {\r\n                ratio += parseFloat((image.width / image.height).toFixed(2));\r\n                rowImages.push(image);\r\n\r\n                if (ratio < this.minRatio && index + 1 !== this.rows().length) {\r\n                    // Row has more space for images and the image is not the last one - proceed to the next iteration\r\n                    return;\r\n                }\r\n\r\n                ratio = Math.max(ratio, this.minRatio);\r\n                calcHeight = (containerWidth - this.imageMargin * rowImages.length) / ratio;\r\n                rowHeight = calcHeight < this.maxImageHeight ? calcHeight : this.maxImageHeight;\r\n                isLastRow = index + 1 === this.rows().length;\r\n\r\n                this.assignImagesToRow(rowImages, rowNumber, rowHeight, isLastRow);\r\n\r\n                rowImages = [];\r\n                ratio = 0;\r\n                rowNumber++;\r\n\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Apply styles, css classes and add properties for images in the row\r\n         *\r\n         * @param {Object[]} images\r\n         * @param {Number} rowNumber\r\n         * @param {Number} rowHeight\r\n         * @param {Boolean} isLastRow\r\n         */\r\n        assignImagesToRow: function (images, rowNumber, rowHeight, isLastRow) {\r\n            var imageWidth;\r\n\r\n            images.forEach(function (img) {\r\n                imageWidth = rowHeight * (img.width / img.height).toFixed(2);\r\n                this.setImageStyles(img, imageWidth, rowHeight);\r\n                this.setImageClass(img, {\r\n                    bottom: isLastRow\r\n                });\r\n                img.rowNumber = rowNumber;\r\n            }.bind(this));\r\n\r\n            images[0].firstInRow = true;\r\n            images[images.length - 1].lastInRow = true;\r\n        },\r\n\r\n        /**\r\n         * Wait for container to initialize\r\n         */\r\n        waitForContainer: function (callback) {\r\n            if (typeof this.container === 'undefined') {\r\n                setTimeout(function () {\r\n                    this.waitForContainer(callback);\r\n                }.bind(this), 500);\r\n            } else {\r\n                setTimeout(callback, 0);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set layout styles when container element is loaded.\r\n         */\r\n        setLayoutStylesWhenLoaded: function () {\r\n            this.waitForContainer(function () {\r\n                this.setLayoutStyles();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Set styles for every image in layout\r\n         *\r\n         * @param {Object} img\r\n         * @param {Number} width\r\n         * @param {Number} height\r\n         */\r\n        setImageStyles: function (img, width, height) {\r\n            if (!img.styles) {\r\n                img.styles = ko.observable();\r\n            }\r\n            img.styles({\r\n                width: parseInt(width, 10) + 'px',\r\n                height: parseInt(height, 10) + 'px'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set css classes to and an image\r\n         *\r\n         * @param {Object} image\r\n         * @param {Object} classes\r\n         */\r\n        setImageClass: function (image, classes) {\r\n            if (!image.css) {\r\n                image.css = ko.observable(classes);\r\n            }\r\n            image.css(classes);\r\n        },\r\n\r\n        /**\r\n         * Set min ratio for images in layout\r\n         */\r\n        setMinRatio: function () {\r\n            var minRatio = _.find(\r\n                this.containerWidthToMinRatio,\r\n\r\n                /**\r\n                 * Find the minimal ratio for container width in the matrix\r\n                 *\r\n                 * @param {Number} ratio\r\n                 * @param {Number} width\r\n                 * @returns {Boolean}\r\n                 */\r\n                function (ratio, width) {\r\n                    return this.containerWidth <= width;\r\n                },\r\n                this\r\n            );\r\n\r\n            this.minRatio = minRatio ? minRatio : this.defaultMinRatio;\r\n        },\r\n\r\n        /**\r\n         * Checks if grid has data.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !!this.rows() && !!this.rows().length;\r\n        },\r\n\r\n        /**\r\n         * Returns error message returned by the data provider\r\n         *\r\n         * @returns {String|null}\r\n         */\r\n        getErrorMessageUnsanitizedHtml: function () {\r\n            return this.errorMessage();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/massactions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate'\r\n], function (_, registry, utils, Collapsible, confirm, alert, $t) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            template: 'ui/grid/actions',\r\n            stickyTmpl: 'ui/grid/sticky/actions',\r\n            selectProvider: 'ns = ${ $.ns }, index = ids',\r\n            actions: [],\r\n            noItemsMsg: $t('You haven\\'t selected any items!'),\r\n            modules: {\r\n                selections: '${ $.selectProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('actions');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        applyAction: function (actionIndex) {\r\n            var data = this.getSelections(),\r\n                action,\r\n                callback;\r\n\r\n            if (!data.total) {\r\n                alert({\r\n                    content: this.noItemsMsg\r\n                });\r\n\r\n                return this;\r\n            }\r\n\r\n            action   = this.getAction(actionIndex);\r\n            callback = this._getCallback(action, data);\r\n\r\n            action.confirm ?\r\n                this._confirm(action, callback) :\r\n                callback();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves selections data from the selections provider.\r\n         *\r\n         * @returns {Object|Undefined}\r\n         */\r\n        getSelections: function () {\r\n            var provider = this.selections(),\r\n                selections = provider && provider.getSelections();\r\n\r\n            return selections;\r\n        },\r\n\r\n        /**\r\n         * Retrieves action object associated with a specified index.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @returns {Object} Action object.\r\n         */\r\n        getAction: function (actionIndex) {\r\n            return _.findWhere(this.actions(), {\r\n                type: actionIndex\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Adds new action. If action with a specified identifier\r\n         * already exists, than the original one will be overrided.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        addAction: function (action) {\r\n            var actions = this.actions(),\r\n                index = _.findIndex(actions, {\r\n                    type: action.type\r\n                });\r\n\r\n            ~index ?\r\n                actions[index] = action :\r\n                actions.push(action);\r\n\r\n            this.actions(actions);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on its' data. If action doesn't spicify\r\n         * a callback function than the default one will be used.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Actions' object.\r\n         * @param {Object} selections - Selections data.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallback: function (action, selections) {\r\n            var callback = action.callback,\r\n                args     = [action, selections];\r\n\r\n            if (utils.isObject(callback)) {\r\n                args.unshift(callback.target);\r\n\r\n                callback = registry.async(callback.provider);\r\n            } else if (typeof callback != 'function') {\r\n                callback = this.defaultCallback.bind(this);\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(null, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Sends selections data\r\n         * via POST request.\r\n         *\r\n         * @param {Object} action - Action data.\r\n         * @param {Object} data - Selections data.\r\n         */\r\n        defaultCallback: function (action, data) {\r\n            var itemsType = data.excludeMode ? 'excluded' : 'selected',\r\n                selections = {};\r\n\r\n            selections[itemsType] = data[itemsType];\r\n\r\n            if (!selections[itemsType].length) {\r\n                selections[itemsType] = false;\r\n            }\r\n\r\n            _.extend(selections, data.params || {});\r\n\r\n            utils.submit({\r\n                url: action.url,\r\n                data: selections\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Shows actions' confirmation window.\r\n         *\r\n         * @param {Object} action - Actions' data.\r\n         * @param {Function} callback - Callback that will be\r\n         *      invoked if action is confirmed.\r\n         */\r\n        _confirm: function (action, callback) {\r\n            var confirmData = action.confirm,\r\n                data = this.getSelections(),\r\n                total = data.total ? data.total : 0,\r\n                confirmMessage = confirmData.message + ' (' + total + ' record' + (total > 1 ? 's' : '') + ')';\r\n\r\n            confirm({\r\n                title: confirmData.title,\r\n                content: confirmMessage,\r\n                actions: {\r\n                    confirm: callback\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'rjsResolver',\r\n    'uiLayout',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate',\r\n    'uiElement'\r\n], function ($, _, utils, resolver, layout, alert, $t, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            firstLoad: true,\r\n            lastError: false,\r\n            storageConfig: {\r\n                component: 'Magento_Ui/js/grid/data-storage',\r\n                provider: '${ $.storageConfig.name }',\r\n                name: '${ $.name }_storage',\r\n                updateUrl: '${ $.update_url }'\r\n            },\r\n            listens: {\r\n                params: 'onParamsChange',\r\n                requestConfig: 'updateRequestConfig'\r\n            },\r\n            ignoreTmpls: {\r\n                data: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes provider component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initialize: function () {\r\n            utils.limit(this, 'onParamsChange', 5);\r\n            _.bindAll(this, 'onReload');\r\n\r\n            this._super()\r\n                .initStorage()\r\n                .clearData();\r\n\r\n            // Load data when there will\r\n            // be no more pending assets.\r\n            resolver(this.reload, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes storage component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initStorage: function () {\r\n            layout([this.storageConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears provider's data properties.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        clearData: function () {\r\n            this.setData({\r\n                items: [],\r\n                totalRecords: 0\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides current data with a provided one.\r\n         *\r\n         * @param {Object} data - New data object.\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        setData: function (data) {\r\n            data = this.processData(data);\r\n\r\n            this.set('data', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes data before applying it.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {Object}\r\n         */\r\n        processData: function (data) {\r\n            var items = data.items;\r\n\r\n            _.each(items, function (record, index) {\r\n                record._rowIndex = index;\r\n            });\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Reloads data with current parameters.\r\n         *\r\n         * @returns {Promise} Reload promise object.\r\n         */\r\n        reload: function (options) {\r\n            var request = this.storage().getData(this.params, options);\r\n\r\n            this.trigger('reload');\r\n\r\n            request\r\n                .done(this.onReload)\r\n                .fail(this.onError.bind(this));\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of 'params' object.\r\n         */\r\n        onParamsChange: function () {\r\n            // It's necessary to make a reload only\r\n            // after the initial loading has been made.\r\n            if (!this.firstLoad) {\r\n                this.reload();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles reload error.\r\n         */\r\n        onError: function (xhr) {\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            this.set('lastError', true);\r\n\r\n            this.firstLoad = false;\r\n\r\n            alert({\r\n                content: $t('Something went wrong.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Handles successful data reload.\r\n         *\r\n         * @param {Object} data - Retrieved data object.\r\n         */\r\n        onReload: function (data) {\r\n            this.firstLoad = false;\r\n\r\n            this.set('lastError', false);\r\n\r\n            this.setData(data)\r\n                .trigger('reloaded');\r\n        },\r\n\r\n        /**\r\n         * Updates storage's request configuration\r\n         *\r\n         * @param {Object} requestConfig\r\n         */\r\n        updateRequestConfig: function (requestConfig) {\r\n            if (this.storage()) {\r\n                _.extend(this.storage().requestConfig, requestConfig);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/resize.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/lib/knockout/extender/bound-nodes',\r\n    'uiElement'\r\n], function ($, ko, _, utils, registry, boundedNodes, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            rootSelector: '${ $.columnsProvider }:.admin__data-grid-wrap',\r\n            tableSelector: '${ $.rootSelector } -> table.data-grid',\r\n            mainTableSelector: '[data-role=\"grid\"]',\r\n            columnSelector: '${ $.tableSelector } thead tr th',\r\n            fieldSelector: '${ $.tableSelector } tbody tr td',\r\n\r\n            imports: {\r\n                storageColumnsData: '${ $.storageConfig.path }.storageColumnsData'\r\n            },\r\n            storageColumnsData: {},\r\n            columnsElements: {},\r\n            tableWidth: 0,\r\n            sumColumnsWidth: 0,\r\n            showLines: 4,\r\n            resizableElementClass: 'shadow-div',\r\n            resizingColumnClass: '_resizing',\r\n            fixedLayoutClass: '_layout-fixed',\r\n            inResizeClass: '_in-resize',\r\n            visibleClass: '_resize-visible',\r\n            cellContentElement: 'div.data-grid-cell-content',\r\n            minColumnWidth: 40,\r\n            layoutFixedPolyfillIterator: 0,\r\n            windowResize: false,\r\n            resizable: false,\r\n            resizeConfig: {\r\n                maxRowsHeight: [],\r\n                curResizeElem: {},\r\n                depResizeElem: {},\r\n                previousWidth: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize application -\r\n         * binding functions context,\r\n         * set handlers for table elements\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'initTable',\r\n                'initColumn',\r\n                'mousedownHandler',\r\n                'mousemoveHandler',\r\n                'mouseupHandler',\r\n                'refreshLastColumn',\r\n                'refreshMaxRowHeight',\r\n                'preprocessingWidth',\r\n                '_eventProxy',\r\n                'checkAfterResize'\r\n            );\r\n\r\n            this._super();\r\n            this.observe(['maxRowsHeight']);\r\n            this.maxRowsHeight([]);\r\n\r\n            $.async(this.tableSelector, this.initTable);\r\n            $.async(this.columnSelector, this.initColumn);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set table element and adds handler to mousedown on headers\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        initTable: function (table) {\r\n            if ($(table).is(this.mainTableSelector)) {\r\n                this.table = table;\r\n                this.tableWidth = $(table).outerWidth();\r\n                $(window).resize(this.checkAfterResize);\r\n            }\r\n\r\n            //TODO - Must be deleted when Firefox fixed problem with table-layout: fixed\r\n            //ticket to Firefox: https://bugs.webkit.org/show_bug.cgi?id=90068\r\n            if (navigator.userAgent.search(/Firefox/) > -1) {\r\n                this._layoutFixedPolyfill();\r\n            }\r\n\r\n            $(table).addClass(this.fixedLayoutClass);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Window resize handler,\r\n         * check changes on table width and\r\n         * set new width to variable\r\n         * after window resize start preprocessingWidth method\r\n         */\r\n        checkAfterResize: function () {\r\n            var tableWidth,\r\n                self = this;\r\n\r\n            setTimeout(function () {\r\n                tableWidth = $(self.table).outerWidth();\r\n\r\n                if (self.tableWidth !== tableWidth) {\r\n                    self.tableWidth = tableWidth;\r\n                } else {\r\n                    self.preprocessingWidth();\r\n                }\r\n            }, 300);\r\n        },\r\n\r\n        /**\r\n         * Check conditions to set minimal width\r\n         */\r\n        checkSumColumnsWidth: function () {\r\n            var table = $(this.table),\r\n                elems = table.find('th:not([style*=\"width: auto\"]):visible'),\r\n                elemsWidthMin = table.find('th[style*=\"width: ' + (this.minColumnWidth - 1) + 'px\"]:visible'),\r\n                elemsWidthAuto = table.find('th[style*=\"width: auto\"]:visible'),\r\n                model;\r\n\r\n            this.sumColumnsWidth = 0;\r\n            _.each(elems, function (elem) {\r\n                model = ko.dataFor(elem);\r\n                model.width && model.width !== 'auto' ? this.sumColumnsWidth += model.width : false;\r\n            }, this);\r\n\r\n            if (\r\n                    this.sumColumnsWidth + elemsWidthAuto.length *\r\n                    this.minColumnWidth + elemsWidthMin.length *\r\n                    this.minColumnWidth > this.tableWidth\r\n            ) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set minimal width to element with \"auto\" width\r\n         */\r\n        setWidthToColumnsWidthAuto: function () {\r\n            var elemsWidthAuto = $(this.table).find('th[style*=\"width: auto\"]:visible');\r\n\r\n            _.each(elemsWidthAuto, function (elem) {\r\n                $(elem).outerWidth(this.minColumnWidth - 1);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Check conditions to set auto width\r\n         */\r\n        hasMinimal: function () {\r\n            var table = $(this.table),\r\n                elemsWidthMin = table.find('th[style*=\"width: ' + (this.minColumnWidth - 1) + 'px\"]:visible'),\r\n                elemsWidthAuto = table.find('th[style*=\"width: auto\"]:visible');\r\n\r\n            if (\r\n                    elemsWidthAuto && this.sumColumnsWidth + elemsWidthAuto.length *\r\n                    this.minColumnWidth + elemsWidthMin.length * this.minColumnWidth + 5 < this.tableWidth\r\n            ) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set \"auto\" width to element with minimal width\r\n         */\r\n        setAuto: function () {\r\n            var elemsWidthAuto = $(this.table).find('th[style*=\"width: ' + (this.minColumnWidth - 1) + 'px\"]:visible');\r\n\r\n            _.each(elemsWidthAuto, function (elem) {\r\n                $(elem).outerWidth('auto');\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Check columns width and preprocessing\r\n         */\r\n        preprocessingWidth: function () {\r\n            if (this.checkSumColumnsWidth()) {\r\n                this.setWidthToColumnsWidthAuto();\r\n            } else if (this.hasMinimal()) {\r\n                this.setAuto();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init columns elements,\r\n         * set width to current column element,\r\n         * add resizable element to columns header,\r\n         * check and add no-resize class to last column,\r\n         * stop parents events,\r\n         * add handler to visibility column\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         */\r\n        initColumn: function (column) {\r\n            var model = ko.dataFor(column),\r\n                ctxIndex = this.getCtxIndex(ko.contextFor(column));\r\n\r\n            model.width = this.getDefaultWidth(column);\r\n\r\n            if (!this.hasColumn(model, ctxIndex, false)) {\r\n                this.columnsElements[model.index] = this.columnsElements[model.index] || {};\r\n                this.columnsElements[model.index][ctxIndex] = column;\r\n                this.initResizableElement(column);\r\n                this.setStopPropagationHandler(column);\r\n                $(column).outerWidth(model.width);\r\n            }\r\n\r\n            this.refreshLastColumn(column);\r\n            this.preprocessingWidth();\r\n\r\n            model.on('visible', this.refreshLastColumn.bind(this, column));\r\n            model.on('visible', this.preprocessingWidth.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Hack for mozilla firefox\r\n         */\r\n        _layoutFixedPolyfill: function () {\r\n            var self = this;\r\n\r\n            setTimeout(function () {\r\n                if (self.layoutFixedPolyfillIterator < 20) {\r\n                    $(window).resize();\r\n                    self.layoutFixedPolyfillIterator++;\r\n                    self._layoutFixedPolyfill();\r\n                } else {\r\n                    return false;\r\n                }\r\n            }, 500);\r\n        },\r\n\r\n        /**\r\n         * Check element is resizable or not\r\n         * and append resizable element to DOM\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         * @returns {Boolean}\r\n         */\r\n        initResizableElement: function (column) {\r\n            var model = ko.dataFor(column),\r\n                templateDragElement = '<div class=\"' + this.resizableElementClass + '\"></div>';\r\n\r\n            if (_.isUndefined(model.resizeEnabled) || model.resizeEnabled) {\r\n                $(column).append(templateDragElement);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check event target and if need stop parents event,\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         * @returns {Boolean}\r\n         */\r\n        setStopPropagationHandler: function (column) {\r\n            var events,\r\n                click,\r\n                mousedown;\r\n\r\n            $(column).on('click', this._eventProxy);\r\n            $(column).on('mousedown', this._eventProxy);\r\n\r\n            events = $._data(column, 'events');\r\n\r\n            click = events.click;\r\n            mousedown = events.mousedown;\r\n            click.unshift(click.pop());\r\n            mousedown.unshift(mousedown.pop());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check event target and stop event if need\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        _eventProxy: function (event) {\r\n            if ($(event.target).is('.' + this.resizableElementClass)) {\r\n\r\n                if (event.type === 'click') {\r\n                    event.stopImmediatePropagation();\r\n                } else if (event.type === 'mousedown') {\r\n                    this.mousedownHandler(event);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check visible columns and set disable class to resizable elements,\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         */\r\n        refreshLastColumn: function (column) {\r\n            var i = 0,\r\n                columns = $(column).parent().children().not(':hidden'),\r\n                length = columns.length;\r\n\r\n            $('.' + this.visibleClass).removeClass(this.visibleClass);\r\n\r\n            $(column).parent().children().not(':hidden').last().addClass(this.visibleClass);\r\n\r\n            for (i; i < length; i++) {\r\n\r\n                if (!columns.eq(i).find('.' + this.resizableElementClass).length && i) {\r\n                    columns.eq(i - 1).addClass(this.visibleClass);\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Refresh max height to row elements,\r\n         *\r\n         * @param {Object} elem - (td)\r\n         */\r\n        refreshMaxRowHeight: function (elem) {\r\n            var rowsH = this.maxRowsHeight(),\r\n                curEL = $(elem).find('div'),\r\n                height,\r\n                obj = this.hasRow($(elem).parent()[0], true);\r\n\r\n            curEL.css('white-space', 'nowrap');\r\n            height = curEL.height() * this.showLines;\r\n            curEL.css('white-space', 'normal');\r\n\r\n            if (obj) {\r\n                if (obj.maxHeight < height) {\r\n                    rowsH[_.indexOf(rowsH, obj)].maxHeight = height;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else {\r\n                rowsH.push({\r\n                    elem: $(elem).parent()[0],\r\n                    maxHeight: height\r\n                });\r\n            }\r\n\r\n            $(elem).parent().children().find(this.cellContentElement).css('max-height', height + 'px');\r\n            this.maxRowsHeight(rowsH);\r\n        },\r\n\r\n        /**\r\n         * Set resize class to elements when resizable\r\n         */\r\n        _setResizeClass: function () {\r\n            var rowElements = $(this.table).find('tr');\r\n\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.curResizeElem.ctx.$index() + ')')\r\n                .addClass(this.resizingColumnClass);\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.depResizeElem.ctx.$index() + ')')\r\n                .addClass(this.resizingColumnClass);\r\n        },\r\n\r\n        /**\r\n         * Remove resize class to elements when resizable\r\n         */\r\n        _removeResizeClass: function () {\r\n            var rowElements = $(this.table).find('tr');\r\n\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.curResizeElem.ctx.$index() + ')')\r\n                .removeClass(this.resizingColumnClass);\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.depResizeElem.ctx.$index() + ')')\r\n                .removeClass(this.resizingColumnClass);\r\n        },\r\n\r\n        /**\r\n         * Check conditions to resize\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        _canResize: function (column) {\r\n            if (\r\n                $(column).hasClass(this.visibleClass) ||\r\n                !$(this.resizeConfig.depResizeElem.elems[0]).find('.' + this.resizableElementClass).length\r\n            ) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Mouse down event handler,\r\n         * find current and dep column to resize\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        mousedownHandler: function (event) {\r\n            var target = event.target,\r\n                column = $(target).parent()[0],\r\n                cfg = this.resizeConfig,\r\n                body = $('body');\r\n\r\n            event.stopImmediatePropagation();\r\n            cfg.curResizeElem.model = ko.dataFor(column);\r\n            cfg.curResizeElem.ctx = ko.contextFor(column);\r\n            cfg.curResizeElem.elems = this.hasColumn(cfg.curResizeElem.model, false, true);\r\n            cfg.curResizeElem.position = event.pageX;\r\n            cfg.depResizeElem.elems = this.getNextElements(cfg.curResizeElem.elems[0]);\r\n            cfg.depResizeElem.model = ko.dataFor(cfg.depResizeElem.elems[0]);\r\n            cfg.depResizeElem.ctx = ko.contextFor(cfg.depResizeElem.elems[0]);\r\n\r\n            this._setResizeClass();\r\n\r\n            if (!this._canResize(column)) {\r\n                return false;\r\n            }\r\n\r\n            event.stopPropagation();\r\n            this.resizable = true;\r\n            cfg.curResizeElem.model.width = $(cfg.curResizeElem.elems[0]).outerWidth();\r\n            cfg.depResizeElem.model.width = $(cfg.depResizeElem.elems[0]).outerWidth();\r\n            body.addClass(this.inResizeClass);\r\n            body.bind('mousemove', this.mousemoveHandler);\r\n            $(window).bind('mouseup', this.mouseupHandler);\r\n        },\r\n\r\n        /**\r\n         * Mouse move event handler,\r\n         * change columns width\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        mousemoveHandler: function (event) {\r\n            var cfg = this.resizeConfig,\r\n                width = event.pageX - cfg.curResizeElem.position,\r\n                self = this;\r\n\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n\r\n            if (\r\n                this.resizable &&\r\n                this.minColumnWidth < cfg.curResizeElem.model.width + width &&\r\n                this.minColumnWidth < cfg.depResizeElem.model.width - width &&\r\n                cfg.previousWidth !== width\r\n            ) {\r\n                cfg.curResizeElem.model.width += width;\r\n                cfg.depResizeElem.model.width -= width;\r\n\r\n                cfg.curResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(cfg.curResizeElem.model.width);\r\n                });\r\n                cfg.depResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(cfg.depResizeElem.model.width);\r\n                });\r\n\r\n                cfg.previousWidth = width;\r\n                cfg.curResizeElem.position = event.pageX;\r\n            } else if (width <= -(cfg.curResizeElem.model.width - this.minColumnWidth)) {\r\n\r\n                cfg.curResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(self.minColumnWidth);\r\n                });\r\n                cfg.depResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(\r\n                    cfg.depResizeElem.model.width +\r\n                    cfg.curResizeElem.model.width -\r\n                    self.minColumnWidth);\r\n                });\r\n\r\n            } else if (width >= cfg.depResizeElem.model.width - this.minColumnWidth) {\r\n\r\n                cfg.depResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(self.minColumnWidth);\r\n                });\r\n                cfg.curResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(\r\n                        cfg.curResizeElem.model.width +\r\n                        cfg.depResizeElem.model.width -\r\n                        self.minColumnWidth\r\n                    );\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Mouse up event handler,\r\n         * change columns width\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        mouseupHandler: function (event) {\r\n            var cfg = this.resizeConfig,\r\n                body = $('body');\r\n\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n\r\n            this._removeResizeClass();\r\n            this.storageColumnsData[cfg.curResizeElem.model.index] = cfg.curResizeElem.model.width;\r\n            this.storageColumnsData[cfg.depResizeElem.model.index] = cfg.depResizeElem.model.width;\r\n            this.resizable = false;\r\n\r\n            this.store('storageColumnsData');\r\n\r\n            body.removeClass(this.inResizeClass);\r\n            body.unbind('mousemove', this.mousemoveHandler);\r\n            $(window).unbind('mouseup', this.mouseupHandler);\r\n        },\r\n\r\n        /**\r\n         * Find dependency element\r\n         *\r\n         * @param {Object} element - current element\r\n         * @returns {Object} next element data\r\n         */\r\n        getNextElements: function (element) {\r\n            var nextElem = $(element).next()[0],\r\n                nextElemModel = ko.dataFor(nextElem),\r\n                nextElemData = this.hasColumn(nextElemModel, false, true);\r\n\r\n            if (nextElemData) {\r\n                if (nextElemModel.visible) {\r\n                    return nextElemData;\r\n                }\r\n\r\n                return this.getNextElements(nextElem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get default width\r\n         *\r\n         * @param {Object} column - (th) element\r\n         * @return {String} width for current column\r\n         */\r\n        getDefaultWidth: function (column) {\r\n            var model = ko.dataFor(column);\r\n\r\n            if (this.storageColumnsData[model.index]) {\r\n                return this.storageColumnsData[model.index];\r\n            }\r\n\r\n            if (model.resizeDefaultWidth) {\r\n                return parseInt(model.resizeDefaultWidth, 10);\r\n            }\r\n\r\n            return 'auto';\r\n        },\r\n\r\n        /**\r\n         * Check column is render or not\r\n         *\r\n         * @param {Object} model - cur column model\r\n         * @param {String|Boolean} ctxIndex - index of context, or false, if want to get cols from all ctx\r\n         * @param {Boolean} returned - need return column object or not\r\n         * @return {Boolean} if returned param is false, returned boolean value, else return current object data\r\n         */\r\n        hasColumn: function (model, ctxIndex, returned) {\r\n            var colElem = this.columnsElements[model.index] || {},\r\n                getFromAllCtx = ctxIndex === false;\r\n\r\n            if (colElem && (getFromAllCtx || colElem.hasOwnProperty(ctxIndex))) {\r\n\r\n                if (returned) {\r\n                    return getFromAllCtx ?\r\n                        _.values(colElem) :\r\n                        colElem[ctxIndex];\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check row is render or not\r\n         *\r\n         * @param {Object} elem - cur column element\r\n         * @param {Boolean} returned - need return column object or not\r\n         * @return {Boolean|Object} if returned param is false, returned boolean value, else return current object data\r\n         */\r\n        hasRow: function (elem, returned) {\r\n            var i = 0,\r\n                el = this.maxRowsHeight(),\r\n                length = el.length;\r\n\r\n            for (i; i < length; i++) {\r\n                if (this.maxRowsHeight()[i].elem === elem) {\r\n                    if (returned) {//eslint-disable-line max-depth\r\n                        return this.maxRowsHeight()[i];\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Generate index that will identify context\r\n         *\r\n         * @param {Object} ctx\r\n         * @return {String}\r\n         */\r\n        getCtxIndex: function (ctx) {\r\n            return ctx ? ctx.$parents.reduce(function (pv, cv) {\r\n                return (pv.index || pv) + (cv || {}).index;\r\n            }) : ctx;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/sortBy.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiElement'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/sortBy',\r\n            options: [],\r\n            applied: {},\r\n            sorting: 'asc',\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            selectedOption: '',\r\n            isVisible: true,\r\n            listens: {\r\n                'selectedOption': 'applyChanges'\r\n            },\r\n            statefull: {\r\n                selectedOption: true,\r\n                applied: true\r\n            },\r\n            exports: {\r\n                applied: '${ $.provider }:params.sorting'\r\n            },\r\n            imports: {\r\n                preparedOptions: '${ $.columnsProvider }:elems'\r\n            },\r\n            modules: {\r\n                columns: '${ $.columnsProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'applied',\r\n                    'selectedOption',\r\n                    'isVisible'\r\n                ]);\r\n        },\r\n\r\n        /**\r\n         * Prepared sort order options\r\n         */\r\n        preparedOptions: function (columns) {\r\n            if (columns && columns.length > 0) {\r\n                columns.map(function (column) {\r\n                    if (column.sortable === true) {\r\n                        this.options.push({\r\n                            value: column.index,\r\n                            label: column.label\r\n                        });\r\n                        this.isVisible(true);\r\n                    } else {\r\n                        this.isVisible(false);\r\n                    }\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Apply changes\r\n         */\r\n        applyChanges: function () {\r\n            this.applied({\r\n                field: this.selectedOption(),\r\n                direction: this.sorting\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/toolbar.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'Magento_Ui/js/lib/view/utils/raf',\r\n    'rjsResolver',\r\n    'uiCollection'\r\n], function (_, $, raf, resolver, Collection) {\r\n    'use strict';\r\n\r\n    var transformProp;\r\n\r\n    /**\r\n     * Defines supported css 'transform' property.\r\n     *\r\n     * @returns {String|Undefined}\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.documentElement.style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform != 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] != 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Moves specified DOM element to the x and y coordinates.\r\n     *\r\n     * @param {HTMLElement} elem - Element to be relocated.\r\n     * @param {Number} x - X coordinate.\r\n     * @param {Number} y - Y coordinate.\r\n     */\r\n    function locate(elem, x, y) {\r\n        var value = 'translate(' + x + 'px,' + y + 'px)';\r\n\r\n        elem.style[transformProp] = value;\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/toolbar',\r\n            stickyTmpl: 'ui/grid/sticky/sticky',\r\n            tableSelector: 'table',\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            refreshFPS: 15,\r\n            sticky: false,\r\n            visible: false,\r\n            _resized: true,\r\n            _scrolled: true,\r\n            _tableScrolled: true,\r\n            _requiredNodes: {\r\n                '$stickyToolbar': true,\r\n                '$stickyTable': true,\r\n                '$table': true,\r\n                '$sticky': true\r\n            },\r\n            stickyClass: {\r\n                'sticky-header': true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes sticky toolbar component.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.sticky) {\r\n                this.waitDOMElements()\r\n                    .then(this.run.bind(this));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Establishes DOM elements wait process.\r\n         *\r\n         * @returns {jQueryPromise} Promise which will be resolved\r\n         *      when all of the required DOM elements are defined.\r\n         */\r\n        waitDOMElements: function () {\r\n            var _domPromise = $.Deferred();\r\n\r\n            _.bindAll(this, 'setStickyTable', 'setTableNode');\r\n\r\n            $.async({\r\n                ctx: ':not([data-role=\"sticky-el-root\"])',\r\n                component: this.columnsProvider,\r\n                selector: this.tableSelector\r\n            }, this.setTableNode);\r\n\r\n            $.async({\r\n                ctx: '[data-role=\"sticky-el-root\"]',\r\n                component: this.columnsProvider,\r\n                selector: this.tableSelector\r\n            }, this.setStickyTable);\r\n\r\n            this._domPromise = _domPromise;\r\n\r\n            return _domPromise.promise();\r\n        },\r\n\r\n        /**\r\n         * Defines left caption element.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setLeftCap: function (node) {\r\n            this.$leftCap = node;\r\n        },\r\n\r\n        /**\r\n         * Defines right caption element.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setRightCap: function (node) {\r\n            this.$rightCap = node;\r\n        },\r\n\r\n        /**\r\n         * Defines original table element.\r\n         *\r\n         * @param {HTMLTableElement} node\r\n         */\r\n        setTableNode: function (node) {\r\n            this.$cols = node.tHead.children[0].cells;\r\n            this.$tableContainer = node.parentNode;\r\n\r\n            this.setNode('$table', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky table element.\r\n         *\r\n         * @param {HTMLTableElement} node\r\n         */\r\n        setStickyTable: function (node) {\r\n            this.$stickyCols = node.tHead.children[0].cells;\r\n\r\n            this.setNode('$stickyTable', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky toolbar node.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setStickyToolbarNode: function (node) {\r\n            this.setNode('$stickyToolbar', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky element container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setStickyNode: function (node) {\r\n            this.setNode('$sticky', node);\r\n        },\r\n\r\n        /**\r\n         * Defines toolbar element container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setToolbarNode: function (node) {\r\n            this.$toolbar = node;\r\n        },\r\n\r\n        /**\r\n         * Sets provided node as a value of 'key' property and\r\n         * performs check for required DOM elements.\r\n         *\r\n         * @param {String} key - Properties key.\r\n         * @param {HTMLElement} node - DOM element.\r\n         */\r\n        setNode: function (key, node) {\r\n            var nodes = this._requiredNodes,\r\n                promise = this._domPromise,\r\n                defined;\r\n\r\n            this[key] = node;\r\n\r\n            defined = _.every(nodes, function (enabled, name) {\r\n                return enabled ? this[name] : true;\r\n            }, this);\r\n\r\n            if (defined) {\r\n                resolver(promise.resolve, promise);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Starts refresh process of the sticky element\r\n         * and assigns DOM elements events handlers.\r\n         */\r\n        run: function () {\r\n            _.bindAll(\r\n                this,\r\n                'refresh',\r\n                '_onWindowResize',\r\n                '_onWindowScroll',\r\n                '_onTableScroll'\r\n            );\r\n\r\n            $(window).on({\r\n                scroll: this._onWindowScroll,\r\n                resize: this._onWindowResize\r\n            });\r\n\r\n            $(this.$tableContainer).on('scroll', this._onTableScroll);\r\n\r\n            this.refresh();\r\n            this.checkTableWidth();\r\n        },\r\n\r\n        /**\r\n         * Refreshes state of the sticky element and\r\n         * invokes DOM elements events handlers\r\n         * if corresponding event has been triggered.\r\n         */\r\n        refresh: function () {\r\n            if (!raf(this.refresh, this.refreshFPS)) {\r\n                return;\r\n            }\r\n\r\n            if (this._scrolled) {\r\n                this.onWindowScroll();\r\n            }\r\n\r\n            if (this._tableScrolled) {\r\n                this.onTableScroll();\r\n            }\r\n\r\n            if (this._resized) {\r\n                this.onWindowResize();\r\n            }\r\n\r\n            if (this.visible) {\r\n                this.checkTableWidth();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shows sticky toolbar.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        show: function () {\r\n            this.visible = true;\r\n            //Check admin grid button has addedr not\r\n            if ($('.page-main-actions').length === 0) {\r\n                this.$sticky.style.top = 0;\r\n            }\r\n            this.$sticky.style.display = '';\r\n            this.$toolbar.style.visibility = 'hidden';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides sticky toolbar.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.visible = false;\r\n\r\n            this.$sticky.style.display = 'none';\r\n            this.$toolbar.style.visibility = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if sticky toolbar covers original elements.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCovered: function () {\r\n            var stickyTop = this._stickyTableTop + this._wScrollTop;\r\n\r\n            return stickyTop > this._tableTop;\r\n        },\r\n\r\n        /**\r\n         * Updates offset of the sticky table element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateStickyTableOffset: function () {\r\n            var style,\r\n                top;\r\n\r\n            if (this.visible) {\r\n                top = this.$stickyTable.getBoundingClientRect().top;\r\n            } else {\r\n                style = this.$sticky.style;\r\n\r\n                style.visibility = 'hidden';\r\n                style.display = '';\r\n\r\n                top = this.$stickyTable.getBoundingClientRect().top;\r\n\r\n                style.display = 'none';\r\n                style.visibility = '';\r\n            }\r\n\r\n            this._stickyTableTop = top;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates offset of the original table element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableOffset: function () {\r\n            var box = this.$table.getBoundingClientRect(),\r\n                top = box.top + this._wScrollTop;\r\n\r\n            if (this._tableTop !== top) {\r\n                this._tableTop = top;\r\n\r\n                this.onTableTopChange(top);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if width of the table or it's columns has changed.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        checkTableWidth: function () {\r\n            var cols        = this.$cols,\r\n                total       = cols.length,\r\n                rightBorder = cols[total - 2].offsetLeft,\r\n                tableWidth  = this.$table.offsetWidth;\r\n\r\n            if (this._tableWidth !== tableWidth) {\r\n                this._tableWidth = tableWidth;\r\n\r\n                this.onTableWidthChange(tableWidth);\r\n            }\r\n\r\n            if (this._rightBorder !== rightBorder) {\r\n                this._rightBorder = rightBorder;\r\n\r\n                this.onColumnsWidthChange();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the sticky table.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableWidth: function () {\r\n            this.$stickyTable.style.width = this._tableWidth + 'px';\r\n\r\n            if (this._tableWidth < this._toolbarWidth) {\r\n                this.checkToolbarSize();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the sticky columns.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateColumnsWidth: function () {\r\n            var cols        = this.$cols,\r\n                index       = cols.length,\r\n                stickyCols  = this.$stickyCols;\r\n\r\n            while (index--) {\r\n                stickyCols[index].width = cols[index].offsetWidth;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Upadates size of the sticky toolbar element\r\n         * and invokes corresponding 'change' event handlers.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        checkToolbarSize: function () {\r\n            var width = this.$tableContainer.offsetWidth;\r\n\r\n            if (this._toolbarWidth !== width) {\r\n                this._toolbarWidth = width;\r\n\r\n                this.onToolbarWidthChange(width);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles sticky toolbar visibility if it's necessary.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateVisibility: function () {\r\n            if (this.visible !== this.isCovered()) {\r\n                this.visible ? this.hide() : this.show();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the left cover area.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateLeftCap: function () {\r\n            locate(this.$leftCap, -this._wScrollLeft, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the right cover area.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateRightCap: function () {\r\n            var left = this._toolbarWidth - this._wScrollLeft;\r\n\r\n            locate(this.$rightCap, left, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the sticky table.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableScroll: function () {\r\n            var container = this.$tableContainer,\r\n                left = container.scrollLeft + this._wScrollLeft;\r\n\r\n            locate(this.$stickyTable, -left, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the toolbar element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateToolbarWidth: function () {\r\n            this.$stickyToolbar.style.width = this._toolbarWidth + 'px';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the toolbar element's width.\r\n         */\r\n        onToolbarWidthChange: function () {\r\n            this.updateToolbarWidth()\r\n                .updateRightCap();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the table top position.\r\n         */\r\n        onTableTopChange: function () {\r\n            this.updateStickyTableOffset();\r\n        },\r\n\r\n        /**\r\n         * Handles change of the table width.\r\n         */\r\n        onTableWidthChange: function () {\r\n            this.updateTableWidth();\r\n        },\r\n\r\n        /**\r\n         * Handles change of the table columns width.\r\n         */\r\n        onColumnsWidthChange: function () {\r\n            this.updateColumnsWidth();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the window's size.\r\n         */\r\n        onWindowResize: function () {\r\n            this.checkToolbarSize();\r\n\r\n            this._resized = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the original table scroll position.\r\n         */\r\n        onTableScroll: function () {\r\n            this.updateTableScroll();\r\n\r\n            this._tableScrolled = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of window's scroll position.\r\n         */\r\n        onWindowScroll: function () {\r\n            var scrollTop = window.pageYOffset,\r\n                scrollLeft = window.pageXOffset;\r\n\r\n            if (this._wScrollTop !== scrollTop) {\r\n                this._wScrollTop = scrollTop;\r\n\r\n                this.onWindowScrollTop(scrollTop);\r\n            }\r\n\r\n            if (this._wScrollLeft !== scrollLeft) {\r\n                this._wScrollLeft = scrollLeft;\r\n\r\n                this.onWindowScrollLeft(scrollLeft);\r\n            }\r\n\r\n            this._scrolled = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of windows' top scroll position.\r\n         */\r\n        onWindowScrollTop: function () {\r\n            this.updateTableOffset()\r\n                .updateVisibility();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of windows' left scroll position.\r\n         */\r\n        onWindowScrollLeft: function () {\r\n            this.updateRightCap()\r\n                .updateLeftCap()\r\n                .updateTableScroll();\r\n        },\r\n\r\n        /**\r\n         * Original window 'scroll' event handler.\r\n         * Sets 'scrolled' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onWindowScroll: function () {\r\n            this._scrolled = true;\r\n        },\r\n\r\n        /**\r\n         * Original window 'resize' event handler.\r\n         * Sets 'resized' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onWindowResize: function () {\r\n            this._resized = true;\r\n        },\r\n\r\n        /**\r\n         * Original table 'scroll' event handler.\r\n         * Sets '_tableScrolled' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onTableScroll: function () {\r\n            this._tableScrolled = true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/tree-massactions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/massactions'\r\n], function (ko, _, Massactions) {\r\n    'use strict';\r\n\r\n    return Massactions.extend({\r\n        defaults: {\r\n            template: 'ui/grid/tree-massactions',\r\n            submenuTemplate: 'ui/grid/submenu',\r\n            listens: {\r\n                opened: 'hideSubmenus'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .recursiveObserveActions(this.actions());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recursive initializes observable actions.\r\n         *\r\n         * @param {Array} actions - Action objects.\r\n         * @param {String} [prefix] - An optional string that will be prepended\r\n         *      to the \"type\" field of all child actions.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        recursiveObserveActions: function (actions, prefix) {\r\n            _.each(actions, function (action) {\r\n                if (prefix) {\r\n                    action.type = prefix + '.' + action.type;\r\n                }\r\n\r\n                if (action.actions) {\r\n                    action.visible = ko.observable(false);\r\n                    action.parent = actions;\r\n                    this.recursiveObserveActions(action.actions, action.type);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        applyAction: function (actionIndex) {\r\n            var action = this.getAction(actionIndex),\r\n                visibility;\r\n\r\n            if (action.visible) {\r\n                visibility = action.visible();\r\n\r\n                this.hideSubmenus(action.parent);\r\n                action.visible(!visibility);\r\n\r\n                return this;\r\n            }\r\n\r\n            return this._super(actionIndex);\r\n        },\r\n\r\n        /**\r\n         * Retrieves action object associated with a specified index.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Array} actions - Action objects.\r\n         * @returns {Object} Action object.\r\n         */\r\n        getAction: function (actionIndex, actions) {\r\n            var currentActions = actions || this.actions(),\r\n                result = false;\r\n\r\n            _.find(currentActions, function (action) {\r\n                if (action.type === actionIndex) {\r\n                    result = action;\r\n\r\n                    return true;\r\n                }\r\n\r\n                if (action.actions) {\r\n                    result = this.getAction(actionIndex, action.actions);\r\n\r\n                    return result;\r\n                }\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Recursive hide all sub folders in given array.\r\n         *\r\n         * @param {Array} actions - Action objects.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        hideSubmenus: function (actions) {\r\n            var currentActions = actions || this.actions();\r\n\r\n            _.each(currentActions, function (action) {\r\n                if (action.visible && action.visible()) {\r\n                    action.visible(false);\r\n                }\r\n\r\n                if (action.actions) {\r\n                    this.hideSubmenus(action.actions);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/url-filter-applier.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'underscore',\r\n    'jquery'\r\n], function (Component, _, $) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            listingNamespace: null,\r\n            bookmarkProvider: 'componentType = bookmark, ns = ${ $.listingNamespace }',\r\n            filterProvider: 'componentType = filters, ns = ${ $.listingNamespace }',\r\n            filterKey: 'filters',\r\n            searchString: location.search,\r\n            modules: {\r\n                bookmarks: '${ $.bookmarkProvider }',\r\n                filterComponent: '${ $.filterProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init component\r\n         *\r\n         * @return {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Apply filter\r\n         */\r\n        apply: function () {\r\n            var urlFilter = this.getFilterParam(this.searchString),\r\n                applied,\r\n                filters;\r\n\r\n            if (_.isUndefined(this.filterComponent())) {\r\n                setTimeout(function () {\r\n                    this.apply();\r\n                }.bind(this), 100);\r\n\r\n                return;\r\n            }\r\n\r\n            if (!_.isUndefined(this.bookmarks())) {\r\n                if (!_.size(this.bookmarks().getViewData(this.bookmarks().defaultIndex))) {\r\n                    setTimeout(function () {\r\n                        this.apply();\r\n                    }.bind(this), 500);\r\n\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (Object.keys(urlFilter).length) {\r\n                applied = this.filterComponent().get('applied');\r\n                filters = $.extend({}, applied, urlFilter);\r\n                this.filterComponent().set('applied', filters);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get filter param from url\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getFilterParam: function (url) {\r\n            var searchString = decodeURI(url),\r\n                itemArray;\r\n\r\n            return _.chain(searchString.slice(1).split('&'))\r\n                .map(function (item) {\r\n\r\n                    if (item && item.search(this.filterKey) !== -1) {\r\n                        itemArray = item.split('=');\r\n\r\n                        if (itemArray[1].search('\\\\[') === 0) {\r\n                            itemArray[1] = itemArray[1].replace(/[\\[\\]]/g, '').split(',');\r\n                        }\r\n\r\n                        itemArray[0] = itemArray[0].replace(this.filterKey, '')\r\n                                .replace(/[\\[\\]]/g, '');\r\n\r\n                        return itemArray;\r\n                    }\r\n                }.bind(this))\r\n                .compact()\r\n                .object()\r\n                .value();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/actions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './column',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/dataPost'\r\n], function (_, utils, registry, Column, confirm, dataPost) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/actions',\r\n            sortable: false,\r\n            draggable: false,\r\n            actions: [],\r\n            rows: [],\r\n            rowsProvider: '${ $.parentName }',\r\n            fieldClass: {\r\n                'data-grid-actions-cell': true\r\n            },\r\n            templates: {\r\n                actions: {}\r\n            },\r\n            imports: {\r\n                rows: '${ $.rowsProvider }:rows'\r\n            },\r\n            listens: {\r\n                rows: 'updateActions'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('actions');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns specific action of a specified row\r\n         * or all action objects associated with it.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @param {String} [actionIndex] - Action identifier.\r\n         * @returns {Array|Object}\r\n         */\r\n        getAction: function (rowIndex, actionIndex) {\r\n            var rowActions = this.actions[rowIndex];\r\n\r\n            return rowActions && actionIndex ?\r\n                rowActions[actionIndex] :\r\n                rowActions;\r\n        },\r\n\r\n        /**\r\n         * Returns visible actions for a specified row.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Array} Visible actions.\r\n         */\r\n        getVisibleActions: function (rowIndex) {\r\n            var rowActions = this.getAction(rowIndex);\r\n\r\n            return _.filter(rowActions, this.isActionVisible, this);\r\n        },\r\n\r\n        /**\r\n         * Adds new action. If an action with the specified identifier\r\n         * already exists, then the original will be overridden.\r\n         *\r\n         * @param {String} index - Actions' identifier.\r\n         * @param {Object} action - Actions' data.\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        addAction: function (index, action) {\r\n            var actionTmpls = this.templates.actions;\r\n\r\n            actionTmpls[index] = action;\r\n\r\n            this.updateActions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recreates actions for each row.\r\n         *\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        updateActions: function () {\r\n            this.actions = this.rows.map(this._formatActions, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes actions, setting additional information to them and\r\n         * evaluating their properties as string templates.\r\n         *\r\n         * @private\r\n         * @param {Object} row - Row object.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Array}\r\n         */\r\n        _formatActions: function (row, rowIndex) {\r\n            var rowActions      = row[this.index] || {},\r\n                recordId        = row[this.indexField],\r\n                customActions   = this.templates.actions;\r\n\r\n            /**\r\n             * Actions iterator.\r\n             */\r\n            function iterate(action, index) {\r\n                action = utils.extend({\r\n                    index: index,\r\n                    rowIndex: rowIndex,\r\n                    recordId: recordId\r\n                }, action);\r\n\r\n                return utils.template(action, row, true);\r\n            }\r\n\r\n            rowActions      = _.mapObject(rowActions, iterate);\r\n            customActions   = _.map(customActions, iterate);\r\n\r\n            customActions.forEach(function (action) {\r\n                rowActions[action.index] = action;\r\n            });\r\n\r\n            return rowActions;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        applyAction: function (actionIndex, rowIndex) {\r\n            var action = this.getAction(rowIndex, actionIndex),\r\n                callback = this._getCallback(action);\r\n\r\n            action.confirm ?\r\n                this._confirm(action, callback) :\r\n                callback();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates handler for the provided action if it's required.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Function|Undefined}\r\n         */\r\n        getActionHandler: function (action) {\r\n            var index = action.index,\r\n                rowIndex = action.rowIndex;\r\n\r\n            if (this.isHandlerRequired(index, rowIndex)) {\r\n                return this.applyAction.bind(this, index, rowIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns target of action if it's been set.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {String}\r\n         */\r\n        getTarget: function (action) {\r\n            if (action.target) {\r\n                return action.target;\r\n            }\r\n\r\n            return '_self';\r\n        },\r\n\r\n        /**\r\n         * Checks if specified action requires a handler function.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Boolean}\r\n         */\r\n        isHandlerRequired: function (actionIndex, rowIndex) {\r\n            var action = this.getAction(rowIndex, actionIndex);\r\n\r\n            return _.isObject(action.callback) || action.confirm || !action.href;\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on it's data. If the action doesn't specify\r\n         * a callback function than the default one will be used.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Action's object.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallback: function (action) {\r\n            var args = [action.index, action.recordId, action],\r\n                callback = action.callback;\r\n\r\n            if (utils.isObject(callback)) {\r\n                args.unshift(callback.target);\r\n\r\n                callback = registry.async(callback.provider);\r\n            } else if (_.isArray(callback)) {\r\n                return this._getCallbacks(action);\r\n            } else if (!_.isFunction(callback)) {\r\n                callback = this.defaultCallback.bind(this);\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(callback, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Creates action callback for multiple actions.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Action's object.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallbacks: function (action) {\r\n            var callback = action.callback,\r\n                callbacks = [],\r\n                tmpCallback;\r\n\r\n            _.each(callback, function (cb) {\r\n                tmpCallback = {\r\n                    action: registry.async(cb.provider),\r\n                    args: _.compact([cb.target, cb.params])\r\n                };\r\n                callbacks.push(tmpCallback);\r\n            });\r\n\r\n            return function () {\r\n                _.each(callbacks, function (cb) {\r\n                    cb.action.apply(cb.action, cb.args);\r\n                });\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Redirects to\r\n         * the specified in action's data url.\r\n         *\r\n         * @param {String} actionIndex - Action's identifier.\r\n         * @param {(Number|String)} recordId - Id of the record associated\r\n         *      with a specified action.\r\n         * @param {Object} action - Action's data.\r\n         */\r\n        defaultCallback: function (actionIndex, recordId, action) {\r\n            if (action.post) {\r\n                dataPost().postData({\r\n                    action: action.href,\r\n                    data: {}\r\n                });\r\n            } else {\r\n                window.location.href = action.href;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shows actions' confirmation window.\r\n         *\r\n         * @param {Object} action - Action's data.\r\n         * @param {Function} callback - Callback that will be\r\n         *      invoked if action is confirmed.\r\n         */\r\n        _confirm: function (action, callback) {\r\n            var confirmData = action.confirm;\r\n\r\n            confirm({\r\n                title: confirmData.title,\r\n                content: confirmData.message,\r\n                actions: {\r\n                    confirm: callback\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if row has only one visible action.\r\n         *\r\n         * @param {Number} rowIndex - Row index.\r\n         * @returns {Boolean}\r\n         */\r\n        isSingle: function (rowIndex) {\r\n            return this.getVisibleActions(rowIndex).length === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if row has more than one visible action.\r\n         *\r\n         * @param {Number} rowIndex - Row index.\r\n         * @returns {Boolean}\r\n         */\r\n        isMultiple: function (rowIndex) {\r\n            return this.getVisibleActions(rowIndex).length > 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if action should be displayed.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionVisible: function (action) {\r\n            return action.hidden !== true;\r\n        },\r\n\r\n        /**\r\n         * Overrides base method, because this component\r\n         * can't have global field action.\r\n         *\r\n         * @returns {Boolean} False.\r\n         */\r\n        hasFieldAction: function () {\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/column.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiElement'\r\n], function (_, registry, utils, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            bodyTmpl: 'ui/grid/cells/text',\r\n            disableAction: false,\r\n            controlVisibility: true,\r\n            sortable: true,\r\n            sorting: false,\r\n            visible: true,\r\n            draggable: true,\r\n            fieldClass: {},\r\n            ignoreTmpls: {\r\n                fieldAction: true\r\n            },\r\n            statefull: {\r\n                visible: true,\r\n                sorting: true\r\n            },\r\n            imports: {\r\n                exportSorting: 'sorting'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:params.sorting.field': 'onSortChange'\r\n            },\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes column component.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initFieldClass();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'visible',\r\n                    'sorting',\r\n                    'disableAction'\r\n                ])\r\n                .observe([\r\n                    'dragging'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends list of field classes.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initFieldClass: function () {\r\n            _.extend(this.fieldClass, {\r\n                _dragging: this.dragging\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified stored state of a column or one of its' properties.\r\n         *\r\n         * @param {String} state - Defines what state should be used: saved or default.\r\n         * @param {String} [property] - Defines what columns' property should be applied.\r\n         *      If not specified, then all columns stored properties will be used.\r\n         * @returns {Column} Chainable.\r\n         */\r\n        applyState: function (state, property) {\r\n            var namespace = this.storageConfig.root;\r\n\r\n            if (property) {\r\n                namespace += '.' + property;\r\n            }\r\n\r\n            this.storage('applyStateOf', state, namespace);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets columns' sorting. If column is currently sorted,\r\n         * than its' direction will be toggled.\r\n         *\r\n         * @param {*} [enable=true] - If false, than sorting will\r\n         *      be removed from a column.\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sort: function (enable) {\r\n            if (!this.sortable) {\r\n                return this;\r\n            }\r\n\r\n            enable !== false ?\r\n                this.toggleSorting() :\r\n                this.sorting = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets descending columns' sorting.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sortDescending: function () {\r\n            if (this.sortable) {\r\n                this.sorting = 'desc';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets ascending columns' sorting.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sortAscending: function () {\r\n            if (this.sortable) {\r\n                this.sorting = 'asc';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles sorting direction.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        toggleSorting: function () {\r\n            this.sorting === 'asc' ?\r\n                this.sortDescending() :\r\n                this.sortAscending();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if column is sorted.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isSorted: function () {\r\n            return !!this.sorting;\r\n        },\r\n\r\n        /**\r\n         * Exports sorting data to the dataProvider if\r\n         * sorting of a column is enabled.\r\n         */\r\n        exportSorting: function () {\r\n            if (!this.sorting) {\r\n                return;\r\n            }\r\n\r\n            this.source('set', 'params.sorting', {\r\n                field: this.index,\r\n                direction: this.sorting\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if column has an assigned action that will\r\n         * be performed when clicking on one of its' fields.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasFieldAction: function () {\r\n            return !!this.fieldAction || !!this.fieldActions;\r\n        },\r\n\r\n        /**\r\n         * Applies action described in a 'fieldAction' property\r\n         * or actions described in 'fieldActions' property.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row which initiates action.\r\n         * @returns {Column} Chainable.\r\n         *\r\n         * @example Example of fieldAction definition, which is equivalent to\r\n         *      referencing to external component named 'listing.multiselect'\r\n         *      and calling its' method 'toggleSelect' with params [rowIndex, true] =>\r\n         *\r\n         *      {\r\n         *          provider: 'listing.multiselect',\r\n         *          target: 'toggleSelect',\r\n         *          params: ['${ $.$data.rowIndex }', true]\r\n         *      }\r\n         */\r\n        applyFieldAction: function (rowIndex) {\r\n            if (!this.hasFieldAction() || this.disableAction) {\r\n                return this;\r\n            }\r\n\r\n            if (this.fieldActions) {\r\n                this.fieldActions.forEach(this.applySingleAction.bind(this, rowIndex), this);\r\n            } else {\r\n                this.applySingleAction(rowIndex);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies single action\r\n         *\r\n         * @param {Number} rowIndex - Index of a row which initiates action.\r\n         * @param {Object} action - Action (fieldAction) to be applied\r\n         *\r\n         */\r\n        applySingleAction: function (rowIndex, action) {\r\n            var callback;\r\n\r\n            action = action || this.fieldAction;\r\n            action = utils.template(action, {\r\n                column: this,\r\n                rowIndex: rowIndex\r\n            }, true);\r\n\r\n            callback = this._getFieldCallback(action);\r\n\r\n            if (_.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns field action handler if it was specified.\r\n         *\r\n         * @param {Object} record - Record object with which action is associated.\r\n         * @returns {Function|Undefined}\r\n         */\r\n        getFieldHandler: function (record) {\r\n            if (this.hasFieldAction()) {\r\n                return this.applyFieldAction.bind(this, record._rowIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on its' data.\r\n         *\r\n         * @param {Object} action - Actions' object.\r\n         * @returns {Function|Boolean} Callback function or false\r\n         *      value if it was impossible create a callback.\r\n         */\r\n        _getFieldCallback: function (action) {\r\n            var args     = action.params || [],\r\n                callback = action.target;\r\n\r\n            if (action.provider && action.target) {\r\n                args.unshift(action.target);\r\n\r\n                callback = registry.async(action.provider);\r\n            }\r\n\r\n            if (!_.isFunction(callback)) {\r\n                return false;\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(callback, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Ment to preprocess data associated with a current columns' field.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (record) {\r\n            return record[this.index];\r\n        },\r\n\r\n        /**\r\n         * Returns list of classes that should be applied to a field.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getFieldClass: function () {\r\n            return this.fieldClass;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' header template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getHeader: function () {\r\n            return this.headerTmpl;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Listener of the providers' sorting state changes.\r\n         *\r\n         * @param {Srting} field - Field by which current sorting is performed.\r\n         */\r\n        onSortChange: function (field) {\r\n            if (field !== this.index) {\r\n                this.sort(false);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mageUtils',\r\n    'moment',\r\n    './column',\r\n    'underscore',\r\n    'moment-timezone-with-data'\r\n], function (utils, moment, Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            dateFormat: 'MMM d, YYYY h:mm:ss A',\r\n            calendarConfig: []\r\n        },\r\n\r\n        /**\r\n         * Overrides base method to normalize date format\r\n         *\r\n         * @returns {DateColumn} Chainable\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.dateFormat = utils.normalizeDate(this.dateFormat ? this.dateFormat : this.options.dateFormat);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming date based on the 'dateFormat' property.\r\n         *\r\n         * @returns {String} Formatted date.\r\n         */\r\n        getLabel: function (value, format) {\r\n            var date;\r\n\r\n            if (this.storeLocale !== undefined) {\r\n                moment.locale(this.storeLocale, utils.extend({}, this.calendarConfig));\r\n            }\r\n\r\n            date = moment.utc(this._super());\r\n\r\n            if (!_.isUndefined(this.timezone)) {\r\n                date = date.tz(this.timezone);\r\n            }\r\n\r\n            date = date.isValid() && value[this.index] ?\r\n                date.format(format || this.dateFormat) :\r\n                '';\r\n\r\n            return date;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/expandable.js":"/**\r\n * Copyright \u00a9 2016 Magento. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    './column',\r\n    'underscore'\r\n], function (Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/expandable',\r\n            tooltipTmpl: 'ui/grid/cells/expandable/content',\r\n            visibeItemsLimit: 5,\r\n            tooltipTitle: ''\r\n        },\r\n\r\n        /**\r\n         * Gets label from full options array.\r\n         *\r\n         * @param {Object} record - Record object.\r\n         * @returns {String}\r\n         */\r\n        getFullLabel: function (record) {\r\n            return this.getLabelsArray(record).join(', ');\r\n        },\r\n\r\n        /**\r\n         * Gets label from options array limited by 'visibeItemsLimit'.\r\n         *\r\n         * @param {Object} record - Record object.\r\n         * @returns {String}\r\n         */\r\n        getShortLabel: function (record) {\r\n            return this.getLabelsArray(record).slice(0, this.visibeItemsLimit).join(', ');\r\n        },\r\n\r\n        /**\r\n         * Extracts array of labels associated with provided values and sort it alphabetically.\r\n         *\r\n         * @param {Object} record - Record object.\r\n         * @returns {Array}\r\n         */\r\n        getLabelsArray: function (record) {\r\n            var values = this.getLabel(record),\r\n                options = this.options || [],\r\n                labels = [];\r\n\r\n            if (_.isString(values)) {\r\n                values = values.split(',');\r\n            }\r\n\r\n            if (!Array.isArray(values)) {\r\n                values = [values];\r\n            }\r\n\r\n            values = values.map(function (value) {\r\n                return value + '';\r\n            });\r\n\r\n            options = this.flatOptions(options);\r\n\r\n            options.forEach(function (item) {\r\n                if (_.contains(values, item.value + '')) {\r\n                    labels.push(item.label);\r\n                }\r\n            });\r\n\r\n            return labels.sort(\r\n                function (labelFirst, labelSecond) {\r\n                    return labelFirst.toLowerCase().localeCompare(labelSecond.toLowerCase());\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Transformation tree options structure to liner array.\r\n         *\r\n         * @param {Array} options\r\n         * @returns {Array}\r\n         */\r\n        flatOptions: function (options) {\r\n            var self = this;\r\n\r\n            return options.reduce(function (opts, option) {\r\n                if (_.isArray(option.value)) {\r\n                    opts = opts.concat(self.flatOptions(option.value));\r\n                } else {\r\n                    opts.push(option);\r\n                }\r\n\r\n                return opts;\r\n            }, []);\r\n        },\r\n\r\n        /**\r\n         * Checks if amount of options is more than limit value.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Boolean}\r\n         */\r\n        isExpandable: function (record) {\r\n            return this.getLabel(record).length > this.visibeItemsLimit;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/image-preview.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/* eslint-disable no-undef */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Ui/js/lib/key-codes'\r\n], function ($, Column, keyCodes) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/columns/image-preview',\r\n            previewImageSelector: '[data-image-preview]',\r\n            visibleRecord: null,\r\n            height: 0,\r\n            displayedRecord: {},\r\n            lastOpenedImage: false,\r\n            fields: {\r\n                previewUrl: 'preview_url',\r\n                title: 'title'\r\n            },\r\n            modules: {\r\n                masonry: '${ $.parentName }',\r\n                thumbnailComponent: '${ $.parentName }.thumbnail_url'\r\n            },\r\n            statefull: {\r\n                sorting: true,\r\n                lastOpenedImage: true\r\n            },\r\n            listens: {\r\n                '${ $.provider }:params.filters': 'hide',\r\n                '${ $.provider }:params.search': 'hide',\r\n                '${ $.provider }:params.paging': 'hide',\r\n                '${ $.provider }:data.items': 'updateDisplayedRecord'\r\n            },\r\n            exports: {\r\n                height: '${ $.parentName }.thumbnail_url:previewHeight'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize image preview component\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            $(document).on('keydown', this.handleKeyDown.bind(this));\r\n\r\n            this.lastOpenedImage.subscribe(function (newValue) {\r\n\r\n                if (newValue === false && _.isNull(this.visibleRecord())) {\r\n                    return;\r\n                }\r\n\r\n                if (newValue === this.visibleRecord()) {\r\n                    return;\r\n                }\r\n\r\n                if (newValue === false) {\r\n                    this.hide();\r\n\r\n                    return;\r\n                }\r\n\r\n                this.show(this.masonry().rows()[newValue]);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'visibleRecord',\r\n                    'height',\r\n                    'displayedRecord',\r\n                    'lastOpenedImage'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Next image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        next: function (record) {\r\n            var recordToShow;\r\n\r\n            if (record._rowIndex + 1 === this.masonry().rows().length) {\r\n                return;\r\n            }\r\n\r\n            recordToShow = this.getRecord(record._rowIndex + 1);\r\n            recordToShow.rowNumber = record.lastInRow ? record.rowNumber + 1 : record.rowNumber;\r\n            this.show(recordToShow);\r\n        },\r\n\r\n        /**\r\n         * Previous image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        prev: function (record) {\r\n            var recordToShow;\r\n\r\n            if (record._rowIndex === 0) {\r\n                return;\r\n            }\r\n            recordToShow = this.getRecord(record._rowIndex - 1);\r\n\r\n            recordToShow.rowNumber = record.firstInRow ? record.rowNumber - 1 : record.rowNumber;\r\n            this.show(recordToShow);\r\n        },\r\n\r\n        /**\r\n         * Get record\r\n         *\r\n         * @param {Integer} recordIndex\r\n         *\r\n         * @return {Object}\r\n         */\r\n        getRecord: function (recordIndex) {\r\n            return this.masonry().rows()[recordIndex];\r\n        },\r\n\r\n        /**\r\n         * Set selected row id\r\n         *\r\n         * @param {Number} rowId\r\n         * @private\r\n         */\r\n        _selectRow: function (rowId) {\r\n            this.thumbnailComponent().previewRowId(rowId);\r\n        },\r\n\r\n        /**\r\n         * Show image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        show: function (record) {\r\n            if (record._rowIndex === this.visibleRecord()) {\r\n                this.hide();\r\n\r\n                return;\r\n            }\r\n\r\n            this.hide();\r\n            this.displayedRecord(record);\r\n            this._selectRow(record.rowNumber || null);\r\n            this.visibleRecord(record._rowIndex);\r\n\r\n            this.lastOpenedImage(record._rowIndex);\r\n            this.updateImageData();\r\n        },\r\n\r\n        /**\r\n         * Update image data when image preview is opened\r\n         */\r\n        updateImageData: function () {\r\n            var img = $(this.previewImageSelector + ' img');\r\n\r\n            if (!img.get(0)) {\r\n                setTimeout(function () {\r\n                    this.updateImageData();\r\n                }.bind(this), 100);\r\n            } else if (img.get(0).complete) {\r\n                this.updateHeight();\r\n                this.scrollToPreview();\r\n            } else {\r\n                img.load(function () {\r\n                    this.updateHeight();\r\n                    this.scrollToPreview();\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update preview displayed record data from the new items data if the preview is expanded\r\n         *\r\n         * @param {Array} items\r\n         */\r\n        updateDisplayedRecord: function (items) {\r\n            if (!_.isNull(this.visibleRecord())) {\r\n                this.displayedRecord(items[this.visibleRecord()]);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update image preview section height\r\n         */\r\n        updateHeight: function () {\r\n            this.height($(this.previewImageSelector).height() + 'px');\r\n        },\r\n\r\n        /**\r\n         * Close image preview\r\n         */\r\n        hide: function () {\r\n            this.lastOpenedImage(false);\r\n            this.visibleRecord(null);\r\n            this.height(0);\r\n            this._selectRow(null);\r\n        },\r\n\r\n        /**\r\n         * Returns visibility for given record.\r\n         *\r\n         * @param {Object} record\r\n         * @return {*|bool}\r\n         */\r\n        isVisible: function (record) {\r\n            if (this.lastOpenedImage() === record._rowIndex &&\r\n                this.visibleRecord() === null\r\n            ) {\r\n                this.show(record);\r\n            }\r\n\r\n            return this.visibleRecord() === record._rowIndex || false;\r\n        },\r\n\r\n        /**\r\n         * Returns preview image url for a given record.\r\n         *\r\n         * @param {Object} record\r\n         * @return {String}\r\n         */\r\n        getUrl: function (record) {\r\n            return record[this.fields.previewUrl];\r\n        },\r\n\r\n        /**\r\n         * Returns image title for a given record.\r\n         *\r\n         * @param {Object} record\r\n         * @return {String}\r\n         */\r\n        getTitle: function (record) {\r\n            return record[this.fields.title];\r\n        },\r\n\r\n        /**\r\n         * Get styles for preview\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getStyles: function () {\r\n            return {\r\n                'margin-top': '-' + this.height()\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Scroll to preview window\r\n         */\r\n        scrollToPreview: function () {\r\n            $(this.previewImageSelector).get(0).scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'center',\r\n                inline: 'nearest'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Handle keyboard navigation for image preview\r\n         *\r\n         * @param {Object} e\r\n         */\r\n        handleKeyDown: function (e) {\r\n            var key = keyCodes[e.keyCode];\r\n\r\n            if (this.visibleRecord() !== null && document.activeElement.tagName !== 'INPUT') {\r\n                if (key === 'pageLeftKey') {\r\n                    this.prev(this.displayedRecord());\r\n                } else if (key === 'pageRightKey') {\r\n                    this.next(this.displayedRecord());\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/image.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/columns/image',\r\n            modules: {\r\n                masonry: '${ $.parentName }',\r\n                previewComponent: '${ $.parentName }.preview'\r\n            },\r\n            previewRowId: null,\r\n            previewHeight: 0,\r\n            fields: {\r\n                id: 'id',\r\n                url: 'url'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'previewRowId',\r\n                    'previewHeight'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates styles when image loaded.\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        updateStyles: function (record) {\r\n            !record.lastInRow || this.masonry().updateStyles();\r\n        },\r\n\r\n        /**\r\n         * Returns url to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getUrl: function (record) {\r\n            return record[this.fields.url];\r\n        },\r\n\r\n        /**\r\n         * Returns id to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Number}\r\n         */\r\n        getId: function (record) {\r\n            return record[this.fields.id];\r\n        },\r\n\r\n        /**\r\n         * Returns container styles to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Object}\r\n         */\r\n        getStyles: function (record) {\r\n            var styles = record.styles();\r\n\r\n            styles['margin-bottom'] = this.previewRowId() === record.rowNumber ? this.previewHeight : 0;\r\n            record.styles(styles);\r\n\r\n            return record.styles;\r\n        },\r\n\r\n        /**\r\n         * Returns class list to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Object}\r\n         */\r\n        getClasses: function (record) {\r\n            return record.css || {};\r\n        },\r\n\r\n        /**\r\n         * Get is active record\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        getIsActive: function (record) {\r\n            return this.previewComponent().visibleRecord() === record._rowIndex || false;\r\n        },\r\n\r\n        /**\r\n         * Expand image preview\r\n         */\r\n        expandPreview: function (record) {\r\n            this.previewComponent().show(record);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/link.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './column',\r\n    'mageUtils'\r\n], function (Column, utils) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            link: 'link',\r\n            bodyTmpl: 'ui/grid/cells/link'\r\n        },\r\n\r\n        /**\r\n         * Returns link to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getLink: function (record) {\r\n            return utils.nested(record, this.link);\r\n        },\r\n\r\n        /**\r\n         * Check if link parameter exist in record.\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Boolean}\r\n         */\r\n        isLink: function (record) {\r\n            return !!utils.nested(record, this.link);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/multiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    './column'\r\n], function (_, $t, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/multiselect',\r\n            bodyTmpl: 'ui/grid/cells/multiselect',\r\n            controlVisibility: false,\r\n            sortable: false,\r\n            draggable: false,\r\n            menuVisible: false,\r\n            excludeMode: false,\r\n            allSelected: false,\r\n            indetermine: false,\r\n            preserveSelectionsOnFilter: false,\r\n            disabled: [],\r\n            selected: [],\r\n            excluded: [],\r\n            fieldClass: {\r\n                'data-grid-checkbox-cell': true\r\n            },\r\n            actions: [{\r\n                value: 'selectAll',\r\n                label: $t('Select All')\r\n            }, {\r\n                value: 'deselectAll',\r\n                label: $t('Deselect All')\r\n            }, {\r\n                value: 'selectPage',\r\n                label: $t('Select All on This Page')\r\n            }, {\r\n                value: 'deselectPage',\r\n                label: $t('Deselect All on This Page')\r\n            }],\r\n\r\n            imports: {\r\n                totalRecords: '${ $.provider }:data.totalRecords',\r\n                rows: '${ $.provider }:data.items'\r\n            },\r\n\r\n            listens: {\r\n                '${ $.provider }:params.filters': 'onFilter',\r\n                selected: 'onSelectedChange',\r\n                rows: 'onRowsChange'\r\n            },\r\n\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'disabled',\r\n                    'selected',\r\n                    'excluded',\r\n                    'excludeMode',\r\n                    'totalSelected',\r\n                    'allSelected',\r\n                    'indetermine',\r\n                    'totalRecords',\r\n                    'rows'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        select: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselect: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles selection of a specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        toggleSelect: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, !this.isSelected(id, isIndex));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified record is selected.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return this.selected.contains(id);\r\n        },\r\n\r\n        /**\r\n         * Selects/deselects specified record base on a 'select' parameter value.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @param {Boolean} select - Whether to select/deselect record.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        _setSelection: function (id, isIndex, select) {\r\n            var selected = this.selected;\r\n\r\n            id = this.getId(id, isIndex);\r\n\r\n            if (!select && this.isSelected(id)) {\r\n                selected.remove(id);\r\n            } else if (select) {\r\n                selected.push(id);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects all records, even those that\r\n         * are not visible on the page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        selectAll: function () {\r\n            this.excludeMode(true);\r\n\r\n            this.clearExcluded()\r\n                .selectPage();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects all records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselectAll: function () {\r\n            this.excludeMode(false);\r\n\r\n            this.clearExcluded();\r\n            this.selected.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects or deselects all records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        toggleSelectAll: function () {\r\n            this.allSelected() ?\r\n                this.deselectAll() :\r\n                this.selectAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects all records on the current page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        selectPage: function () {\r\n            var selected = _.union(this.selected(), this.getIds());\r\n\r\n            selected = _.difference(selected, this.disabled());\r\n\r\n            this.selected(selected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects all records on the current page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselectPage: function () {\r\n            var pageIds = this.getIds();\r\n\r\n            this.selected.remove(function (value) {\r\n                return !!~pageIds.indexOf(value);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n        * Selects or deselects all records on the current page.\r\n        *\r\n        * @returns {Multiselect} Chainable.\r\n        */\r\n        togglePage: function () {\r\n            return this.isPageSelected() ? this.deselectPage() : this.selectPage();\r\n        },\r\n\r\n        /**\r\n         * Clears the array of not selected records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        clearExcluded: function () {\r\n            this.excluded.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieve all id's from available records.\r\n         *\r\n         * @param {Boolean} [exclude] - Whether to exclude not selected ids' from result.\r\n         * @returns {Array} An array of ids'.\r\n         */\r\n        getIds: function (exclude) {\r\n            var items = this.rows(),\r\n                ids = _.pluck(items, this.indexField);\r\n\r\n            return exclude ?\r\n                _.difference(ids, this.excluded()) :\r\n                ids;\r\n        },\r\n\r\n        /**\r\n         * Returns identifier of a record.\r\n         *\r\n         * @param {*} id - Id of a record or its' index in a rows array.\r\n         * @param {Boolean} [isIndex=false] - Flag that specifies with what\r\n         *      kind of identifier we are dealing with.\r\n         * @returns {*}\r\n         */\r\n        getId: function (id, isIndex) {\r\n            var record = this.rows()[id];\r\n\r\n            if (isIndex && record) {\r\n                id = record[this.indexField];\r\n            }\r\n\r\n            return id;\r\n        },\r\n\r\n        /**\r\n         * Recalculates list of the excluded records.\r\n         * Changes value of `excluded`.\r\n         *\r\n         * @param {Array} selected - List of the currently selected records.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        updateExcluded: function (selected) {\r\n            var excluded = this.excluded(),\r\n                fromPage = _.difference(this.getIds(), selected);\r\n\r\n            excluded = _.union(excluded, fromPage);\r\n            excluded = _.difference(excluded, selected);\r\n\r\n            this.excluded(excluded);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates number of selected records and\r\n         * updates 'totalSelected' property.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        countSelected: function () {\r\n            var total = this.totalRecords(),\r\n                excluded = this.excluded().length,\r\n                selected = this.selected().length;\r\n\r\n            if (this.excludeMode()) {\r\n                selected = total - excluded;\r\n            }\r\n\r\n            this.totalSelected(selected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns selected items on a current page.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPageSelections: function () {\r\n            var ids = this.getIds();\r\n\r\n            return this.selected.filter(function (id) {\r\n                return _.contains(ids, id);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns selections data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getSelections: function () {\r\n            return {\r\n                excluded: this.excluded(),\r\n                selected: this.selected(),\r\n                total: this.totalSelected(),\r\n                excludeMode: this.excludeMode(),\r\n                params: this.getFiltering()\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Extracts filtering data from data provider.\r\n         *\r\n         * @returns {Object} Current filters state.\r\n         */\r\n        getFiltering: function () {\r\n            var source = this.source(),\r\n                keys = ['filters', 'search', 'namespace'];\r\n\r\n            if (!source) {\r\n                return {};\r\n            }\r\n\r\n            return _.pick(source.get('params'), keys);\r\n        },\r\n\r\n        /**\r\n         * Defines if provided select/deselect actions is relevant.\r\n         * E.g. there is no need in a 'select page' action if only one\r\n         * page is available.\r\n         *\r\n         * @param {String} actionId - Id of the action to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionRelevant: function (actionId) {\r\n            var pageIds         = this.getIds().length,\r\n                multiplePages   = pageIds < this.totalRecords(),\r\n                relevant        = true;\r\n\r\n            switch (actionId) {\r\n                case 'selectPage':\r\n                    relevant = multiplePages && !this.isPageSelected(true);\r\n                    break;\r\n\r\n                case 'deselectPage':\r\n                    relevant =  multiplePages && this.isPageSelected();\r\n                    break;\r\n\r\n                case 'selectAll':\r\n                    relevant = !this.allSelected();\r\n                    break;\r\n\r\n                case 'deselectAll':\r\n                    relevant = this.totalSelected() > 0;\r\n            }\r\n\r\n            return relevant;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page has selected records.\r\n         *\r\n         * @param {Boolean} [all=false] - If set to 'true' checks that every\r\n         *      record on the page is selected. Otherwise checks that\r\n         *      page has some selected records.\r\n         * @returns {Boolean}\r\n         */\r\n        isPageSelected: function (all) {\r\n            var pageIds = this.getIds(),\r\n                selected = this.selected(),\r\n                excluded = this.excluded(),\r\n                iterator = all ? 'every' : 'some';\r\n\r\n            if (this.allSelected()) {\r\n                return true;\r\n            }\r\n\r\n            if (this.excludeMode()) {\r\n                return pageIds[iterator](function (id) {\r\n                    return !~excluded.indexOf(id);\r\n                });\r\n            }\r\n\r\n            return pageIds[iterator](function (id) {\r\n                return !!~selected.indexOf(id);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates values of the 'allSelected'\r\n         * and 'indetermine' properties.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var selected        = this.selected().length,\r\n                excluded        = this.excluded().length,\r\n                totalSelected   = this.totalSelected(),\r\n                totalRecords    = this.totalRecords(),\r\n                allSelected     = totalRecords && totalSelected === totalRecords;\r\n\r\n            if (this.excludeMode()) {\r\n                if (excluded === totalRecords && !this.preserveSelectionsOnFilter) {\r\n                    this.deselectAll();\r\n                }\r\n            } else if (totalRecords && selected === totalRecords && !this.preserveSelectionsOnFilter) {\r\n                this.selectAll();\r\n            }\r\n\r\n            this.allSelected(allSelected);\r\n            this.indetermine(totalSelected && !allSelected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides base method, because this component\r\n         * can't have global field action.\r\n         *\r\n         * @returns {Boolean} False.\r\n         */\r\n        hasFieldAction: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Callback method to handle changes of selected items.\r\n         *\r\n         * @param {Array} selected - An array of currently selected items.\r\n         */\r\n        onSelectedChange: function (selected) {\r\n            this.updateExcluded(selected)\r\n                .countSelected()\r\n                .updateState();\r\n        },\r\n\r\n        /**\r\n         * Is invoked when rows has changed. Recalculates selected items\r\n         * based on \"selectMode\" property.\r\n         */\r\n        onRowsChange: function () {\r\n            var newSelections;\r\n\r\n            if (this.excludeMode()) {\r\n                newSelections = _.union(this.getIds(true), this.selected());\r\n\r\n                this.selected(newSelections);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is invoked when filtration is applied or removed\r\n         */\r\n        onFilter: function () {\r\n            if (!this.preserveSelectionsOnFilter) {\r\n                this.deselectAll();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/onoff.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    './multiselect',\r\n    'uiRegistry'\r\n], function (_, $t, Column, registry) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/onoff',\r\n            bodyTmpl: 'ui/grid/cells/onoff',\r\n            fieldClass: {\r\n                'admin__scope-old': true,\r\n                'data-grid-onoff-cell': true,\r\n                'data-grid-checkbox-cell': false\r\n            },\r\n            imports: {\r\n                selectedData: '${ $.provider }:data.selectedData'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:reloaded': 'setDefaultSelections'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Number} id\r\n         * @returns {*}\r\n         */\r\n        getLabel: function (id) {\r\n            return this.selected.indexOf(id) !== -1 ? $t('On') : $t('Off');\r\n        },\r\n\r\n        /**\r\n         * Sets the ids for preselected elements\r\n         * @returns void\r\n         */\r\n        setDefaultSelections: function () {\r\n            var positionCacheValid = registry.get('position_cache_valid'),\r\n                selectedFromCache = registry.get('selected_cache'),\r\n                key,\r\n                i;\r\n\r\n            if (positionCacheValid && this.selected().length === 0) {\r\n                // Check selected data\r\n                selectedFromCache = JSON.parse(selectedFromCache);\r\n\r\n                for (i = 0; i < selectedFromCache.length; i++) {\r\n                    this.selected.push(selectedFromCache[i]);\r\n                }\r\n\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n\r\n                return;\r\n            }\r\n\r\n            if (positionCacheValid && this.selected().length > 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.selectedData.length === 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify([]));\r\n\r\n                return;\r\n            }\r\n\r\n            // Check selected data\r\n            for (key in this.selectedData) {\r\n                if (this.selectedData.hasOwnProperty(key) && this.selected().indexOf(key) === -1) {\r\n                    this.selected.push(key);\r\n                }\r\n            }\r\n            // Uncheck unselected data\r\n            for (i = 0; i < this.selected().length; i++) {\r\n                key = this.selected()[i];\r\n                this.selectedData.hasOwnProperty(key) || this.selected.splice(this.selected().indexOf(key), 1);\r\n                this.selectedData.hasOwnProperty(key) || i--;\r\n            }\r\n            registry.set('position_cache_valid', true);\r\n            registry.set('selected_cache', JSON.stringify(this.selected()));\r\n        },\r\n\r\n        /**\r\n         * Show/hide action in the massaction menu\r\n         * @param {Number} actionId\r\n         * @returns {Boolean}\r\n         */\r\n        isActionRelevant: function (actionId) {\r\n            var relevant = true;\r\n\r\n            switch (actionId) {\r\n                case 'selectPage':\r\n                    relevant = !this.isPageSelected(true);\r\n                    break;\r\n\r\n                case 'deselectPage':\r\n                    relevant =  this.isPageSelected();\r\n                    break;\r\n            }\r\n\r\n            return relevant;\r\n        },\r\n\r\n        /**\r\n         * Updates values of the 'allSelected'\r\n         * and 'indetermine' properties.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var positionCacheValid = registry.get('position_cache_valid'),\r\n                totalRecords    = this.totalRecords(),\r\n                selected        = this.selected().length,\r\n                excluded        = this.excluded().length,\r\n                totalSelected   = this.totalSelected(),\r\n                allSelected;\r\n\r\n            if (positionCacheValid && this.selected().length > 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n            }\r\n\r\n            // When filters are enabled then totalRecords is unknown\r\n            if (this.getFiltering()) {\r\n                if (this.getFiltering().search !== '') {\r\n                    totalRecords = -1;\r\n                }\r\n            }\r\n\r\n            allSelected = totalRecords && totalSelected === totalRecords;\r\n\r\n            if (this.excludeMode()) {\r\n                if (excluded === totalRecords) {\r\n                    this.deselectAll();\r\n                }\r\n            } else if (totalRecords && selected === totalRecords) {\r\n                this.selectAll();\r\n            }\r\n\r\n            this.allSelected(allSelected);\r\n            this.indetermine(totalSelected && !allSelected);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/overlay.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/columns/overlay'\r\n        },\r\n\r\n        /**\r\n         * If overlay should be visible\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isVisible: function (row) {\r\n            return !!row[this.index];\r\n        },\r\n\r\n        /**\r\n         * Get overlay label\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (row) {\r\n            return row[this.index];\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './column'\r\n], function (_, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        /**\r\n         * Retrieves label associated with a provided value.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function () {\r\n            var options = this.options || [],\r\n                values = this._super(),\r\n                label = [];\r\n\r\n            if (_.isString(values)) {\r\n                values = values.split(',');\r\n            }\r\n\r\n            if (!_.isArray(values)) {\r\n                values = [values];\r\n            }\r\n\r\n            values = values.map(function (value) {\r\n                return value + '';\r\n            });\r\n\r\n            options = this.flatOptions(options);\r\n\r\n            options.forEach(function (item) {\r\n                if (_.contains(values, item.value + '')) {\r\n                    label.push(item.label);\r\n                }\r\n            });\r\n\r\n            return label.join(', ');\r\n        },\r\n\r\n        /**\r\n         * Transformation tree options structure to liner array.\r\n         *\r\n         * @param {Array} options\r\n         * @returns {Array}\r\n         */\r\n        flatOptions: function (options) {\r\n            var self = this;\r\n\r\n            if (!_.isArray(options)) {\r\n                options = _.values(options);\r\n            }\r\n\r\n            return options.reduce(function (opts, option) {\r\n                if (_.isArray(option.value)) {\r\n                    opts = opts.concat(self.flatOptions(option.value));\r\n                } else {\r\n                    opts.push(option);\r\n                }\r\n\r\n                return opts;\r\n            }, []);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/thumbnail.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './column',\r\n    'jquery',\r\n    'mage/template',\r\n    'text!Magento_Ui/templates/grid/cells/thumbnail/preview.html',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function (Column, $, mageTemplate, thumbnailPreviewTemplate, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/thumbnail',\r\n            fieldClass: {\r\n                'data-grid-thumbnail-cell': true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get image source data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getSrc: function (row) {\r\n            return row[this.index + '_src'];\r\n        },\r\n\r\n        /**\r\n         * Get original image source data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getOrigSrc: function (row) {\r\n            return row[this.index + '_orig_src'];\r\n        },\r\n\r\n        /**\r\n         * Get link data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getLink: function (row) {\r\n            return row[this.index + '_link'];\r\n        },\r\n\r\n        /**\r\n         * Get alternative text data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getAlt: function (row) {\r\n            return _.escape(row[this.index + '_alt']);\r\n        },\r\n\r\n        /**\r\n         * Check if preview available.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isPreviewAvailable: function () {\r\n            return this['has_preview'] || false;\r\n        },\r\n\r\n        /**\r\n         * Build preview.\r\n         *\r\n         * @param {Object} row\r\n         */\r\n        preview: function (row) {\r\n            var modalHtml = mageTemplate(\r\n                    thumbnailPreviewTemplate,\r\n                    {\r\n                        src: this.getOrigSrc(row), alt: this.getAlt(row), link: this.getLink(row),\r\n                        linkText: $.mage.__('Go to Details Page')\r\n                    }\r\n                ),\r\n                previewPopup = $('<div/>').html(modalHtml);\r\n\r\n            previewPopup.modal({\r\n                title: this.getAlt(row),\r\n                innerScroll: true,\r\n                modalClass: '_image-box',\r\n                buttons: []\r\n            }).trigger('openModal');\r\n        },\r\n\r\n        /**\r\n         * Get field handler per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Function}\r\n         */\r\n        getFieldHandler: function (row) {\r\n            if (this.isPreviewAvailable()) {\r\n                return this.preview.bind(this, row);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/columns.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/translate',\r\n    'uiCollection'\r\n], function (_, utils, $t, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/controls/columns',\r\n            minVisible: 1,\r\n            maxVisible: 30,\r\n            viewportSize: 18,\r\n            displayArea: 'dataGridActions',\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            imports: {\r\n                addColumns: '${ $.columnsProvider }:elems'\r\n            },\r\n            templates: {\r\n                headerMsg: $t('${ $.visible } out of ${ $.total } visible')\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Resets columns visibility to theirs default state.\r\n         *\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.elems.each('applyState', 'default', 'visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies last saved state of columns visibility.\r\n         *\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.elems.each('applyState', '', 'visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds columns whose visibility can be controlled to the component.\r\n         *\r\n         * @param {Array} columns - Elements array that will be added to component.\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        addColumns: function (columns) {\r\n            columns = _.where(columns, {\r\n                controlVisibility: true\r\n            });\r\n\r\n            this.insertChild(columns);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines whether child elements array length\r\n         * is greater than the 'viewportSize' property.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasOverflow: function () {\r\n            return this.elems().length > this.viewportSize;\r\n        },\r\n\r\n        /**\r\n         * Helper, checks\r\n         *  - if less than one item choosen\r\n         *  - if more then viewportMaxSize choosen\r\n         *\r\n         * @param {Object} elem\r\n         * @returns {Boolean}\r\n         */\r\n        isDisabled: function (elem) {\r\n            var visible = this.countVisible();\r\n\r\n            return elem.visible ?\r\n                    visible === this.minVisible :\r\n                    visible === this.maxVisible;\r\n        },\r\n\r\n        /**\r\n         * Counts number of visible columns.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countVisible: function () {\r\n            return this.elems.filter('visible').length;\r\n        },\r\n\r\n        /**\r\n         * Compile header message from headerMessage setting.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getHeaderMessage: function () {\r\n            return utils.template(this.templates.headerMsg, {\r\n                visible: this.countVisible(),\r\n                total: this.elems().length\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/bookmarks/bookmarks.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/translate',\r\n    'rjsResolver',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (_, utils, $t, resolver, layout, Collection) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes 'current' namespace from a 'path' string.\r\n     *\r\n     * @param {String} path\r\n     * @returns {String} Path without namespace.\r\n     */\r\n    function removeStateNs(path) {\r\n        path = typeof path == 'string' ? path.split('.') : [];\r\n\r\n        if (path[0] === 'current') {\r\n            path.shift();\r\n        }\r\n\r\n        return path.join('.');\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/controls/bookmarks/bookmarks',\r\n            viewTmpl: 'ui/grid/controls/bookmarks/view',\r\n            newViewLabel: $t('New View'),\r\n            defaultIndex: 'default',\r\n            activeIndex: 'default',\r\n            viewsArray: [],\r\n            storageConfig: {\r\n                provider: '${ $.storageConfig.name }',\r\n                name: '${ $.name }_storage',\r\n                component: 'Magento_Ui/js/grid/controls/bookmarks/storage'\r\n            },\r\n            views: {\r\n                default: {\r\n                    label: $t('Default View'),\r\n                    index: 'default',\r\n                    editable: false\r\n                }\r\n            },\r\n            tracks: {\r\n                editing: true,\r\n                viewsArray: true,\r\n                activeView: true,\r\n                hasChanges: true,\r\n                customLabel: true,\r\n                customVisible: true\r\n            },\r\n            listens: {\r\n                activeIndex: 'onActiveIndexChange',\r\n                activeView: 'checkState',\r\n                current: 'onStateChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes bookmarks component.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initialize: function () {\r\n            utils.limit(this, 'checkState', 5);\r\n            utils.limit(this, 'saveState', 2000);\r\n\r\n            this._super()\r\n                .restore()\r\n                .initStorage()\r\n                .initViews();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates custom storage instance.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initStorage: function () {\r\n            layout([this.storageConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines default data if it wasn't gathered previously.\r\n         *\r\n         * @private\r\n         * @returns {Bookmarks} Chainbale.\r\n         */\r\n        initDefaultView: function () {\r\n            var data = this.getViewData(this.defaultIndex);\r\n\r\n            if (!_.size(data)) {\r\n                this.setViewData(this.defaultIndex, this.current)\r\n                    .saveView(this.defaultIndex);\r\n            }\r\n\r\n            this.defaultDefined = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instances of a previously saved views.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initViews: function () {\r\n            _.each(this.views, function (config) {\r\n                this.addView(config);\r\n            }, this);\r\n\r\n            this.activeView = this.getActiveView();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates complete configuration for a view.\r\n         *\r\n         * @param {Object} [config] - Additional configuration object.\r\n         * @returns {Object}\r\n         */\r\n        buildView: function (config) {\r\n            var view = {\r\n                label: this.newViewLabel,\r\n                index: '_' + Date.now(),\r\n                editable: true\r\n            };\r\n\r\n            utils.extend(view, config || {});\r\n\r\n            view.data   = view.data || utils.copy(this.current);\r\n            view.value  = view.label;\r\n\r\n            this.observe.call(view, true, 'label value');\r\n\r\n            return view;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a view with a provided configuration.\r\n         *\r\n         * @param {Object} [config] - View configuration.\r\n         * @param {Boolean} [saveView=false] - Whether to save created view automatically or not.\r\n         * @param {Boolean} [applyView=false] - Whether to apply created view automatically or not.\r\n         * @returns {View} Created view.\r\n         */\r\n        addView: function (config, saveView, applyView) {\r\n            var view    = this.buildView(config),\r\n                index   = view.index;\r\n\r\n            this.views[index] = view;\r\n\r\n            if (saveView) {\r\n                this.saveView(index);\r\n            }\r\n\r\n            if (applyView) {\r\n                this.applyView(index);\r\n            }\r\n\r\n            this.updateArray();\r\n\r\n            return view;\r\n        },\r\n\r\n        /**\r\n         * Removes specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be removed.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        removeView: function (index) {\r\n            var viewPath = this.getViewPath(index);\r\n\r\n            if (this.isViewActive(index)) {\r\n                this.applyView(this.defaultIndex);\r\n            }\r\n\r\n            this.endEdit(index)\r\n                .remove(viewPath)\r\n                .removeStored(viewPath)\r\n                .updateArray();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves data of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be saved.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        saveView: function (index) {\r\n            var viewPath = this.getViewPath(index);\r\n\r\n            this.updateViewLabel(index)\r\n                .endEdit(index)\r\n                .store(viewPath)\r\n                .checkState();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets specified view as active\r\n         * and applies its' state.\r\n         *\r\n         * @param {String} index - Index of a view to be applied.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyView: function (index) {\r\n            this.applyStateOf(index)\r\n                .set('activeIndex', index);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates data of a specified view if it's\r\n         * currently active and saves its' data.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateAndSave: function (index) {\r\n            if (this.isViewActive(index)) {\r\n                this.updateActiveView(index);\r\n            }\r\n\r\n            this.saveView(index);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be retrieved.\r\n         * @returns {View}\r\n         */\r\n        getView: function (index) {\r\n            return this.views[index];\r\n        },\r\n\r\n        /**\r\n         * Returns instance of an active view.\r\n         *\r\n         * @returns {View}\r\n         */\r\n        getActiveView: function () {\r\n            return this.views[this.activeIndex];\r\n        },\r\n\r\n        /**\r\n         * Checks if specified view is active.\r\n         *\r\n         * @param {String} index - Index of a view to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isViewActive: function (index) {\r\n            return this.activeView === this.getView(index);\r\n        },\r\n\r\n        /**\r\n         * Sets current state as a data of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateActiveView: function () {\r\n            this.setViewData(this.activeIndex, this.current);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Replaces label a view with a provided one.\r\n         * If new label is not specified, then views'\r\n         * 'value' property will be taken.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @param {String} [label=view.value] - New labels' value.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateViewLabel: function (index, label) {\r\n            var view    = this.getView(index),\r\n                current = view.label;\r\n\r\n            label = (label || view.value).trim() || current;\r\n            label = this.uniqueLabel(label, current);\r\n\r\n            view.label = view.value = label;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves data of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view whose data should be retrieved.\r\n         * @param {String} [property] - If not specified then whole views' data will be retrieved.\r\n         * @returns {Object} Views' data.\r\n         */\r\n        getViewData: function (index, property) {\r\n            var view = this.getView(index),\r\n                data = view.data;\r\n\r\n            if (property) {\r\n                data = utils.nested(data, property);\r\n            }\r\n\r\n            return utils.copy(data);\r\n        },\r\n\r\n        /**\r\n         * Sets data to the specified view.\r\n         *\r\n         * @param {String} index - Index of a view whose data will be replaced.\r\n         * @param {Object} data - New view data.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        setViewData: function (index, data) {\r\n            var path = this.getViewPath(index) + '.data';\r\n\r\n            this.set(path, utils.copy(data));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        editView: function (index) {\r\n            this.editing = index;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Ends editing of specified view\r\n         * and restores its' label.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        endEdit: function (index) {\r\n            var view;\r\n\r\n            if (!this.isEditing(index)) {\r\n                return this;\r\n            }\r\n\r\n            index   = index || this.editing;\r\n            view    = this.getView(index);\r\n\r\n            view.value = view.label;\r\n\r\n            this.editing = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified view is in editing state.\r\n         *\r\n         * @param {String} index - Index of a view to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEditing: function (index) {\r\n            return this.editing === index;\r\n        },\r\n\r\n        /**\r\n         * Generates label unique among present views, based\r\n         * on the incoming label pattern.\r\n         *\r\n         * @param {String} [label=this.newViewLabel] - Label pattern.\r\n         * @param {String} [exclude]\r\n         * @returns {String}\r\n         */\r\n        uniqueLabel: function (label, exclude) {\r\n            var labels      = _.pluck(this.views, 'label'),\r\n                hasParenth  = _.last(label) === ')',\r\n                index       = 2,\r\n                result,\r\n                suffix;\r\n\r\n            labels = _.without(labels, exclude);\r\n            result = label = label || this.newViewLabel;\r\n\r\n            for (index = 2; _.contains(labels, result); index++) {\r\n                suffix = '(' + index + ')';\r\n\r\n                if (!hasParenth) {\r\n                    suffix = ' ' + suffix;\r\n                }\r\n\r\n                result = label + suffix;\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Applies state of a specified view, without\r\n         * making it active.\r\n         *\r\n         * @param {String} [state=this.activeIndex]\r\n         * @param {String} [property]\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyStateOf: function (state, property) {\r\n            var index    = state || this.activeIndex,\r\n                dataPath = removeStateNs(property),\r\n                viewData = this.getViewData(index, dataPath);\r\n\r\n            dataPath = dataPath ?\r\n                'current.' + dataPath :\r\n                'current';\r\n\r\n            this.set(dataPath, viewData);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves current state.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        saveState: function () {\r\n            this.store('current');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies state of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        resetState: function () {\r\n            this.applyStateOf(this.activeIndex);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if current state is different\r\n         * from the state of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        checkState: function () {\r\n            var viewData = this.getViewData(this.activeIndex),\r\n                diff     = utils.compare(viewData, this.current);\r\n\r\n            this.hasChanges = !diff.equal;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the view instance,\r\n         * based on a provided index.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {String}\r\n         */\r\n        getViewPath: function (index) {\r\n            return 'views.' + index;\r\n        },\r\n\r\n        /**\r\n         * Updates the array of views.\r\n         *\r\n         * @returns {Bookmarks} Chainable\r\n         */\r\n        updateArray: function () {\r\n            this.viewsArray = _.values(this.views);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Shows custom view field and creates unique label for it.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        showCustom: function () {\r\n            this.customLabel    = this.uniqueLabel();\r\n            this.customVisible  = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides custom view field.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        hideCustom: function () {\r\n            this.customVisible = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if custom view field is visible.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomVisible: function () {\r\n            return this.customVisible;\r\n        },\r\n\r\n        /**\r\n         * Creates new view instance with a label specified\r\n         * in a custom view field.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyCustom: function () {\r\n            var label = this.customLabel.trim();\r\n\r\n            this.hideCustom()\r\n                .addView({\r\n                    label: this.uniqueLabel(label)\r\n                }, true, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the activeIndex property.\r\n         */\r\n        onActiveIndexChange: function () {\r\n            this.activeView = this.getActiveView();\r\n\r\n            this.store('activeIndex');\r\n        },\r\n\r\n        /**\r\n         * Listener of the activeIndex property.\r\n         */\r\n        onStateChange: function () {\r\n            this.checkState();\r\n            this.saveState();\r\n\r\n            if (!this.defaultDefined) {\r\n                resolver(this.initDefaultView, this);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/bookmarks/storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mageUtils',\r\n    'Magento_Ui/js/lib/core/storage/local',\r\n    'uiClass'\r\n], function ($, utils, storage, Class) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes ns prefix for path.\r\n     *\r\n     * @param {String} ns\r\n     * @param {String} path\r\n     * @returns {String}\r\n     */\r\n    function removeNs(ns, path) {\r\n        return path.replace(ns + '.', '');\r\n    }\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                data: {\r\n                    namespace: '${ $.namespace }'\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delegates call to the localStorage adapter.\r\n         */\r\n        get: function () {\r\n            return {};\r\n        },\r\n\r\n        /**\r\n         * Sends request to store specified data.\r\n         *\r\n         * @param {String} path - Path by which data should be stored.\r\n         * @param {*} value - Value to be sent.\r\n         */\r\n        set: function (path, value) {\r\n            var property = removeNs(this.namespace, path),\r\n                data = {},\r\n                config;\r\n\r\n            utils.nested(data, property, value);\r\n\r\n            config = utils.extend({\r\n                url: this.saveUrl,\r\n                data: {\r\n                    data: JSON.stringify(data)\r\n                }\r\n            }, this.ajaxSettings);\r\n\r\n            $.ajax(config);\r\n        },\r\n\r\n        /**\r\n         * Sends request to remove specified data.\r\n         *\r\n         * @param {String} path - Path to the property to be removed.\r\n         */\r\n        remove: function (path) {\r\n            var property = removeNs(this.namespace, path),\r\n                config;\r\n\r\n            config = utils.extend({\r\n                url: this.deleteUrl,\r\n                data: {\r\n                    data: property\r\n                }\r\n            }, this.ajaxSettings);\r\n\r\n            $.ajax(config);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/button/split.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        $(element).on('click.splitDefault', '.action-default', function () {\r\n            $(this).siblings('.dropdown-menu').find('.item-default').trigger('click');\r\n        });\r\n    };\r\n});\r\n","Magento_Ui/js/grid/editing/bulk.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './record'\r\n], function (_, utils, Record) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes empty properties from the provided object.\r\n     *\r\n     * @param {Object} data - Object to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function removeEmpty(data) {\r\n        data = utils.flatten(data);\r\n        data = _.omit(data, utils.isEmpty);\r\n\r\n        return utils.unflatten(data);\r\n    }\r\n\r\n    return Record.extend({\r\n        defaults: {\r\n            template: 'ui/grid/editing/bulk',\r\n            active: false,\r\n            templates: {\r\n                fields: {\r\n                    select: {\r\n                        caption: ' '\r\n                    }\r\n                }\r\n            },\r\n            imports: {\r\n                active: '${ $.editorProvider }:isMultiEditing'\r\n            },\r\n            listens: {\r\n                data: 'updateState',\r\n                active: 'updateState'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    hasData: false\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends original method to disable possible\r\n         * 'required-entry' validation rule.\r\n         *\r\n         * @returns {Object} Columns' field definition.\r\n         */\r\n        buildField: function () {\r\n            var field = this._super(),\r\n                rules = field.validation;\r\n\r\n            if (rules) {\r\n                delete rules['required-entry'];\r\n            }\r\n\r\n            return field;\r\n        },\r\n\r\n        /**\r\n         * Applies current data to all active records.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        apply: function () {\r\n            if (this.isValid()) {\r\n                this.applyData()\r\n                    .clear();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets available data to all active records.\r\n         *\r\n         * @param {Object} [data] -  If not specified, then current fields data will be used.\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        applyData: function (data) {\r\n            data = data || this.getData();\r\n\r\n            this.editor('setData', data, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns data of all non-empty fields.\r\n         *\r\n         * @returns {Object} Fields data without empty values.\r\n         */\r\n        getData: function () {\r\n            return removeEmpty(this._super());\r\n        },\r\n\r\n        /**\r\n         * Updates own 'hasData' property and defines\r\n         * whether regular rows editing can be resumed.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var fields  = _.keys(this.getData()),\r\n                hasData = !!fields.length;\r\n\r\n            this.hasData = hasData;\r\n\r\n            if (!this.active()) {\r\n                fields = [];\r\n            }\r\n\r\n            this.editor('disableFields', fields);\r\n            this.editor('canSave', !fields.length);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/client.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            validateBeforeSave: true,\r\n            requestConfig: {\r\n                dataType: 'json',\r\n                type: 'POST'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes client instance.\r\n         *\r\n         * @returns {Client} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onSuccess', 'onError');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Sends XMLHttpRequest with a provided configuration.\r\n         *\r\n         * @param {Object} config - Configuration of request.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        send: function (config) {\r\n            var deffer  = $.Deferred();\r\n\r\n            config = utils.extend({}, this.requestConfig, config);\r\n\r\n            $.ajax(config)\r\n                .done(_.partial(this.onSuccess, deffer))\r\n                .fail(_.partial(this.onError, deffer));\r\n\r\n            return deffer.promise();\r\n        },\r\n\r\n        /**\r\n         * Proxy save method which might invoke\r\n         * data validation prior to its' saving.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        save: function (data) {\r\n            var save = this._save.bind(this, data);\r\n\r\n            return this.validateBeforeSave ?\r\n                this.validate(data).pipe(save) :\r\n                save();\r\n        },\r\n\r\n        /**\r\n         * Sends request to validate provided data.\r\n         *\r\n         * @param {Object} data - Data to be validated.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        validate: function (data) {\r\n            return this.send({\r\n                url: this.validateUrl,\r\n                data: data\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Sends request to save provided data.\r\n         *\r\n         * @private\r\n         * @param {Object} data - Data to be validated.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        _save: function (data) {\r\n            return this.send({\r\n                url: this.saveUrl,\r\n                data: data\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates error object with a provided message.\r\n         *\r\n         * @param {String} msg - Errors' message.\r\n         * @returns {Object}\r\n         */\r\n        createError: function (msg) {\r\n            return {\r\n                type: 'error',\r\n                message: msg\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Handles ajax error callback.\r\n         *\r\n         * @param {jQueryPromise} promise - Promise to be rejected.\r\n         * @param {jQueryXHR} xhr - See 'jquery' ajax error callback.\r\n         * @param {String} status - See 'jquery' ajax error callback.\r\n         * @param {(String|Object)} err - See 'jquery' ajax error callback.\r\n         */\r\n        onError: function (promise, xhr, status, err) {\r\n            var msg;\r\n\r\n            msg = xhr.status !== 200 ?\r\n                xhr.status + ' (' + xhr.statusText + ')' :\r\n                err;\r\n\r\n            promise.reject(this.createError(msg));\r\n        },\r\n\r\n        /**\r\n         * Handles ajax success callback.\r\n         *\r\n         * @param {jQueryPromise} promise - Promise to be resolved.\r\n         * @param {*} data - See 'jquery' ajax success callback.\r\n         */\r\n        onSuccess: function (promise, data) {\r\n            var errors;\r\n\r\n            if (data.error) {\r\n                errors = _.map(data.messages, this.createError, this);\r\n\r\n                promise.reject(errors);\r\n            } else {\r\n                promise.resolve(data);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/editor-view.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (ko, $, _, registry, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rootSelector: '${ $.columnsProvider }:.admin__data-grid-wrap',\r\n            tableSelector: '${ $.rootSelector } -> table',\r\n            rowSelector: '${ $.tableSelector } tbody tr.data-row',\r\n            headerButtonsTmpl:\r\n                '<!-- ko template: headerButtonsTmpl --><!-- /ko -->',\r\n            bulkTmpl:\r\n                '<!-- ko scope: bulk -->' +\r\n                    '<!-- ko template: getTemplate() --><!-- /ko -->' +\r\n                '<!-- /ko -->',\r\n            rowTmpl:\r\n                '<!-- ko with: _editor -->' +\r\n                    '<!-- ko if: isActive($row()._rowIndex, true) -->' +\r\n                        '<!-- ko with: getRecord($row()._rowIndex, true) -->' +\r\n                            '<!-- ko template: rowTmpl --><!-- /ko -->' +\r\n                        '<!-- /ko -->' +\r\n                        '<!-- ko if: isSingleEditing && singleEditingButtons -->' +\r\n                            '<!-- ko template: rowButtonsTmpl --><!-- /ko -->' +\r\n                        '<!-- /ko -->' +\r\n                    '<!-- /ko -->' +\r\n               '<!-- /ko -->'\r\n        },\r\n\r\n        /**\r\n         * Initializes view component.\r\n         *\r\n         * @returns {View} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'initRoot',\r\n                'initTable',\r\n                'initRow',\r\n                'rowBindings',\r\n                'tableBindings'\r\n            );\r\n\r\n            this._super();\r\n\r\n            this.model = registry.get(this.model);\r\n\r\n            $.async(this.rootSelector, this.initRoot);\r\n            $.async(this.tableSelector, this.initTable);\r\n            $.async(this.rowSelector, this.initRow);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes columns root container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         * @returns {View} Chainable.\r\n         */\r\n        initRoot: function (node) {\r\n            $(this.headerButtonsTmpl)\r\n                .insertBefore(node)\r\n                .applyBindings(this.model);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes table element.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {View} Chainable.\r\n         */\r\n        initTable: function (table) {\r\n            $(table).bindings(this.tableBindings);\r\n\r\n            this.initBulk(table);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes bulk editor element\r\n         * for the provided table.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {View} Chainable.\r\n         */\r\n        initBulk: function (table) {\r\n            var tableBody = $('tbody', table)[0];\r\n\r\n            $(this.bulkTmpl)\r\n                .prependTo(tableBody)\r\n                .applyBindings(this.model);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes table row.\r\n         *\r\n         * @param {HTMLTableRowElement} row\r\n         * @returns {View} Chainable.\r\n         */\r\n        initRow: function (row) {\r\n            var $editingRow;\r\n\r\n            $(row).extendCtx({\r\n                    _editor: this.model\r\n                }).bindings(this.rowBindings);\r\n\r\n            $editingRow = $(this.rowTmpl)\r\n                .insertBefore(row)\r\n                .applyBindings(row);\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(row, this.removeEditingRow.bind(this, $editingRow));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns row bindings.\r\n         *\r\n         * @param {Object} ctx - Current context of a row.\r\n         * @returns {Object}\r\n         */\r\n        rowBindings: function (ctx) {\r\n            var model = this.model;\r\n\r\n            return {\r\n                visible: ko.computed(function () {\r\n                    var record = ctx.$row(),\r\n                        index = record && record._rowIndex;\r\n\r\n                    return !model.isActive(index, true);\r\n                })\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Returns table bindings.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        tableBindings: function () {\r\n            var model = this.model;\r\n\r\n            return {\r\n                css: {\r\n                    '_in-edit': ko.computed(function () {\r\n                        return model.hasActive() && !model.permanentlyActive;\r\n                    })\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Removes specified array of nodes.\r\n         *\r\n         * @param {ArrayLike} row\r\n         */\r\n        removeEditingRow: function (row) {\r\n            _.toArray(row).forEach(ko.removeNode);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/editor.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'uiCollection'\r\n], function (_, utils, layout, $t, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            rowButtonsTmpl: 'ui/grid/editing/row-buttons',\r\n            headerButtonsTmpl: 'ui/grid/editing/header-buttons',\r\n            successMsg: $t('You have successfully saved your edits.'),\r\n            errorsCount: 0,\r\n            bulkEnabled: true,\r\n            multiEditingButtons: true,\r\n            singleEditingButtons: true,\r\n            isMultiEditing: false,\r\n            isSingleEditing: false,\r\n            permanentlyActive: false,\r\n            rowsData: [],\r\n            fields: {},\r\n\r\n            templates: {\r\n                record: {\r\n                    parent: '${ $.$data.editor.name }',\r\n                    name: '${ $.$data.recordId }',\r\n                    component: 'Magento_Ui/js/grid/editing/record',\r\n                    columnsProvider: '${ $.$data.editor.columnsProvider }',\r\n                    editorProvider: '${ $.$data.editor.name }',\r\n                    preserveFields: {\r\n                        '${ $.$data.editor.indexField }': true\r\n                    }\r\n                }\r\n            },\r\n            bulkConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/bulk',\r\n                name: '${ $.name }_bulk',\r\n                editorProvider: '${ $.name }',\r\n                columnsProvider: '${ $.columnsProvider }'\r\n            },\r\n            clientConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/client',\r\n                name: '${ $.name }_client'\r\n            },\r\n            viewConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/editor-view',\r\n                name: '${ $.name }_view',\r\n                model: '${ $.name }',\r\n                columnsProvider: '${ $.columnsProvider }'\r\n            },\r\n            imports: {\r\n                rowsData: '${ $.dataProvider }:data.items'\r\n            },\r\n            listens: {\r\n                '${ $.dataProvider }:reloaded': 'cancel',\r\n                '${ $.selectProvider }:selected': 'onSelectionsChange'\r\n            },\r\n            modules: {\r\n                source: '${ $.dataProvider }',\r\n                client: '${ $.clientConfig.name }',\r\n                columns: '${ $.columnsProvider }',\r\n                bulk: '${ $.bulkConfig.name }',\r\n                selections: '${ $.selectProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes editor component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'updateState', 'countErrors', 'onDataSaved', 'onSaveError');\r\n\r\n            this._super()\r\n                .initBulk()\r\n                .initClient()\r\n                .initView();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'errorsCount',\r\n                    'isMultiEditing',\r\n                    'isSingleEditing',\r\n                    'isSingleColumnEditing',\r\n                    'changed'\r\n                ])\r\n                .observe({\r\n                    canSave: true,\r\n                    activeRecords: [],\r\n                    messages: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes bulk editing component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initBulk: function () {\r\n            if (this.bulkEnabled) {\r\n                layout([this.bulkConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes editors' view component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initView: function () {\r\n            layout([this.viewConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes client component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initClient: function () {\r\n            layout([this.clientConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a new record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initRecord: function (id, isIndex) {\r\n            var record = this.buildRecord(id, isIndex);\r\n\r\n            layout([record]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds listeners on a new record.\r\n         *\r\n         * @param {Record} record\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initElement: function (record) {\r\n            record.on({\r\n                'active': this.updateState,\r\n                'errorsCount': this.countErrors\r\n            });\r\n\r\n            this.updateState();\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Creates configuration for a new record associated with a row data.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Object} Record configuration.\r\n         */\r\n        buildRecord: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex),\r\n                recordTmpl = this.templates.record,\r\n                record;\r\n\r\n            if (this.getRecord(recordId)) {\r\n                return this;\r\n            }\r\n\r\n            record = utils.template(recordTmpl, {\r\n                editor: this,\r\n                recordId: id\r\n            });\r\n\r\n            record.recordId = id;\r\n            record.data     = this.getRowData(id);\r\n\r\n            return record;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of a specified record. If records'\r\n         * instance doesn't exist, than it will be created.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        edit: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex),\r\n                record   = this.getRecord(recordId);\r\n\r\n            record ?\r\n                record.active(true) :\r\n                this.initRecord(recordId);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Drops list of selections while activating only the specified record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        startEdit: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex);\r\n\r\n            this.selections()\r\n                .deselectAll()\r\n                .select(recordId);\r\n\r\n            return this.edit(recordId);\r\n        },\r\n\r\n        /**\r\n         * Hides records and resets theirs data.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.reset()\r\n                .hide()\r\n                .clearMessages()\r\n                .bulk('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.activeRecords.each('active', false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets active records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.elems.each(function (record) {\r\n                this.resetRecord(record.recordId);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates and saves data of active records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        save: function () {\r\n            var data;\r\n\r\n            if (!this.isValid()) {\r\n                return this;\r\n            }\r\n\r\n            data = {\r\n                items: this.getData()\r\n            };\r\n\r\n            this.clearMessages()\r\n                .columns('showLoader');\r\n\r\n            this.client()\r\n                .save(data)\r\n                .done(this.onDataSaved)\r\n                .fail(this.onSaveError);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates all active records.\r\n         *\r\n         * @returns {Array} An array of records and theirs validation results.\r\n         */\r\n        validate: function () {\r\n            return this.activeRecords.map(function (record) {\r\n                return {\r\n                    target: record,\r\n                    valid: record.isValid()\r\n                };\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if all active records are valid.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function () {\r\n            return _.every(this.validate(), 'valid');\r\n        },\r\n\r\n        /**\r\n         * Returns active records data, indexed by a theirs ids.\r\n         *\r\n         * @returns {Object} Collection of records data.\r\n         */\r\n        getData: function () {\r\n            var data = this.activeRecords.map(function (record) {\r\n                var elemKey,\r\n                    recordData = record.getData();\r\n\r\n                for (elemKey in recordData) {\r\n                    if (_.isUndefined(recordData[elemKey])) {\r\n                        recordData[elemKey] = null;\r\n                    }\r\n                }\r\n\r\n                return recordData;\r\n            });\r\n\r\n            return _.indexBy(data, this.indexField);\r\n        },\r\n\r\n        /**\r\n         * Sets provided data to all active records.\r\n         *\r\n         * @param {Object} data - See 'setData' method of a 'Record'.\r\n         * @param {Boolean} partial - See 'setData' method of a 'Record'.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            this.activeRecords.each('setData', data, partial);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets specific records' data\r\n         * to the data present in associated row.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        resetRecord: function (id, isIndex) {\r\n            var record  = this.getRecord(id, isIndex),\r\n                data    = this.getRowData(id, isIndex);\r\n\r\n            if (record && data) {\r\n                record.setData(data);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a specified record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Record}\r\n         */\r\n        getRecord: function (id, isIndex) {\r\n            return this.elems.findWhere({\r\n                recordId: this.getId(id, isIndex)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates record name based on a provided id.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {String}\r\n         */\r\n        formRecordName: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return this.name + '.' + id;\r\n        },\r\n\r\n        /**\r\n         * Disables editing of specified fields.\r\n         *\r\n         * @param {Array} fields - An array of fields indexes to be disabled.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        disableFields: function (fields) {\r\n            var columns = this.columns().elems(),\r\n                data    = utils.copy(this.fields);\r\n\r\n            columns.forEach(function (column) {\r\n                var index = column.index,\r\n                    field = data[index] = data[index] || {};\r\n\r\n                field.disabled = _.contains(fields, index);\r\n            });\r\n\r\n            this.set('fields', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts index of a row into the record id.\r\n         *\r\n         * @param {(Number|String)} id - Records' identifier or its' index in the rows array.\r\n         * @param {Boolean} [isIndex=false] - Flag that indicates if first\r\n         *      parameter is an index or identifier.\r\n         * @returns {String} Records' id.\r\n         */\r\n        getId: function (id, isIndex) {\r\n            var rowsData = this.rowsData,\r\n                record;\r\n\r\n            if (isIndex === true) {\r\n                record  = rowsData[id];\r\n                id      = record ? record[this.indexField] : false;\r\n            }\r\n\r\n            return id;\r\n        },\r\n\r\n        /**\r\n         * Returns data of a specified row.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Object}\r\n         */\r\n        getRowData: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return _.find(this.rowsData, function (row) {\r\n                return row[this.indexField] === id;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Checks if specified record is active.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See'getId' method.\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function (id, isIndex) {\r\n            var record = this.getRecord(id, isIndex);\r\n\r\n            return _.contains(this.activeRecords(), record);\r\n        },\r\n\r\n        /**\r\n         * Checks if editor has active records.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasActive: function () {\r\n            return !!this.activeRecords().length || this.permanentlyActive;\r\n        },\r\n\r\n        /**\r\n         * Counts number of active records.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countActive: function () {\r\n            return this.activeRecords().length;\r\n        },\r\n\r\n        /**\r\n         * Counts number of invalid fields across all active records.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countErrors: function () {\r\n            var errorsCount = 0;\r\n\r\n            this.activeRecords.each(function (record) {\r\n                errorsCount += record.errorsCount;\r\n            });\r\n\r\n            this.errorsCount = errorsCount;\r\n\r\n            return errorsCount;\r\n        },\r\n\r\n        /**\r\n         * Translatable error message text.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        countErrorsMessage: function () {\r\n            return $t('There are {placeholder} messages requires your attention.')\r\n                .replace('{placeholder}', this.countErrors());\r\n        },\r\n\r\n        /**\r\n         * Checks if editor has any errors.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasErrors: function () {\r\n            return !!this.countErrors();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the records 'active' property.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var active      = this.elems.filter('active'),\r\n                activeCount = active.length,\r\n                columns     = this.columns().elems;\r\n\r\n            columns.each('disableAction', !!activeCount);\r\n\r\n            this.isMultiEditing = activeCount > 1;\r\n            this.isSingleEditing = activeCount === 1;\r\n\r\n            this.activeRecords(active);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns list of selections from a current page.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getSelections: function () {\r\n            return this.selections().getPageSelections();\r\n        },\r\n\r\n        /**\r\n         * Starts editing of selected records. If record\r\n         * is not in the selections list, then it will get hidden.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        editSelected: function () {\r\n            var selections = this.getSelections();\r\n\r\n            this.elems.each(function (record) {\r\n                if (!_.contains(selections, record.recordId)) {\r\n                    record.active(false);\r\n                }\r\n            });\r\n\r\n            selections.forEach(function (id) {\r\n                this.edit(id);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if there is any additional messages.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasMessages: function () {\r\n            return this.messages().length;\r\n        },\r\n\r\n        /**\r\n         * Adds new additional message or a set of messages.\r\n         *\r\n         * @param {(Object|Array)} message - Messages to be added.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        addMessage: function (message) {\r\n            var messages = this.messages();\r\n\r\n            Array.isArray(message) ?\r\n                messages.push.apply(messages, message) :\r\n                messages.push(message);\r\n\r\n            this.messages(messages);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes all additional messages.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        clearMessages: function () {\r\n            this.messages.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the selections data changes.\r\n         */\r\n        onSelectionsChange: function () {\r\n            if (this.hasActive()) {\r\n                this.editSelected();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles successful save request.\r\n         */\r\n        onDataSaved: function () {\r\n            var msg = {\r\n                type: 'success',\r\n                message: this.successMsg\r\n            };\r\n\r\n            this.addMessage(msg)\r\n                .source('reload', {\r\n                    refresh: true\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Handles failed save request.\r\n         *\r\n         * @param {(Array|Object)} errors - List of errors or a single error object.\r\n         */\r\n        onSaveError: function (errors) {\r\n            this.addMessage(errors)\r\n                .columns('hideLoader');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/record.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (_, utils, layout, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            active: true,\r\n            hasChanges: false,\r\n            fields: [],\r\n            errorsCount: 0,\r\n            fieldTmpl: 'ui/grid/editing/field',\r\n            rowTmpl: 'ui/grid/editing/row',\r\n            templates: {\r\n                fields: {\r\n                    base: {\r\n                        parent: '${ $.$data.record.name }',\r\n                        name: '${ $.$data.column.index }',\r\n                        provider: '${ $.$data.record.name }',\r\n                        dataScope: 'data.${ $.$data.column.index }',\r\n                        imports: {\r\n                            disabled: '${ $.$data.record.parentName }:fields.${ $.$data.column.index }.disabled'\r\n                        },\r\n                        isEditor: true\r\n                    },\r\n                    text: {\r\n                        component: 'Magento_Ui/js/form/element/abstract',\r\n                        template: 'ui/form/element/input'\r\n                    },\r\n                    date: {\r\n                        component: 'Magento_Ui/js/form/element/date',\r\n                        template: 'ui/form/element/date',\r\n                        dateFormat: 'MMM d, y h:mm:ss a'\r\n                    },\r\n                    select: {\r\n                        component: 'Magento_Ui/js/form/element/select',\r\n                        template: 'ui/form/element/select',\r\n                        options: '${ JSON.stringify($.$data.column.options) }'\r\n                    }\r\n                }\r\n            },\r\n            ignoreTmpls: {\r\n                data: true\r\n            },\r\n            listens: {\r\n                elems: 'updateFields',\r\n                data: 'updateState'\r\n            },\r\n            imports: {\r\n                onColumnsUpdate: '${ $.columnsProvider }:elems'\r\n            },\r\n            modules: {\r\n                columns: '${ $.columnsProvider }',\r\n                editor: '${ $.editorProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes record component.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'countErrors');\r\n            utils.limit(this, 'updateState', 10);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('errorsCount hasChanges')\r\n                .observe('active fields');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds listeners on a field.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initElement: function (field) {\r\n            field.on('error', this.countErrors);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Creates new instance of a field.\r\n         *\r\n         * @param {Column} column - Column instance which contains field definition.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initField: function (column) {\r\n            var field = this.buildField(column);\r\n\r\n            layout([field]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Builds fields' configuration described in a provided column.\r\n         *\r\n         * @param {Column} column - Column instance which contains field definition.\r\n         * @returns {Object} Complete fields' configuration.\r\n         */\r\n        buildField: function (column) {\r\n            var fields = this.templates.fields,\r\n                field  = column.editor;\r\n\r\n            if (_.isObject(field) && field.editorType) {\r\n                field = utils.extend({}, fields[field.editorType], field);\r\n            } else if (_.isString(field)) {\r\n                field = fields[field];\r\n            }\r\n\r\n            field = utils.extend({}, fields.base, field);\r\n\r\n            return utils.template(field, {\r\n                record: this,\r\n                column: column\r\n            }, true, true);\r\n        },\r\n\r\n        /**\r\n         * Creates fields for the specified columns.\r\n         *\r\n         * @param {Array} columns - An array of column instances.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        createFields: function (columns) {\r\n            columns.forEach(function (column) {\r\n                if (column.editor && !this.hasChild(column.index)) {\r\n                    this.initField(column);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a column found by provided index.\r\n         *\r\n         * @param {String} index - Index of a column (e.g. 'title').\r\n         * @returns {Column}\r\n         */\r\n        getColumn: function (index) {\r\n            return this.columns().getChild(index);\r\n        },\r\n\r\n        /**\r\n         * Returns records' current data object.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            return this.filterData(this.data);\r\n        },\r\n\r\n        /**\r\n         * Returns saved records' data. Data will be processed\r\n         * with a 'filterData' and 'normalizeData' methods.\r\n         *\r\n         * @returns {Object} Saved records' data.\r\n         */\r\n        getSavedData: function () {\r\n            var editor      = this.editor(),\r\n                savedData   = editor.getRowData(this.index);\r\n\r\n            savedData = this.filterData(savedData);\r\n\r\n            return this.normalizeData(savedData);\r\n        },\r\n\r\n        /**\r\n         * Replaces current records' data with the provided one.\r\n         *\r\n         * @param {Object} data - New records data.\r\n         * @param {Boolean} [partial=false] - Flag that defines whether\r\n         *      to completely replace current data or to extend it.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            var currentData = partial ? this.data : {};\r\n\r\n            data = this.normalizeData(data);\r\n            data = utils.extend({}, currentData, data);\r\n\r\n            this.set('data', data)\r\n                .updateState();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Filters provided object extracting from it values\r\n         * that can be matched with an existing fields.\r\n         *\r\n         * @param {Object} data - Object to be processed.\r\n         * @returns {Object}\r\n         */\r\n        filterData: function (data) {\r\n            var fields = _.pluck(this.elems(), 'index');\r\n\r\n            _.each(this.preserveFields, function (enabled, field) {\r\n                if (enabled && !_.contains(fields, field)) {\r\n                    fields.push(field);\r\n                }\r\n            });\r\n\r\n            return _.pick(data, fields);\r\n        },\r\n\r\n        /**\r\n         * Parses values of a provided object with\r\n         * a 'normalizeData' method of a corresponding field.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {Object}\r\n         */\r\n        normalizeData: function (data) {\r\n            var index;\r\n\r\n            this.elems.each(function (elem) {\r\n                index = elem.index;\r\n\r\n                if (data.hasOwnProperty(index)) {\r\n                    data[index] = elem.normalizeData(data[index]);\r\n                }\r\n            });\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Clears values of all fields.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.elems.each('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates all of the available fields.\r\n         *\r\n         * @returns {Array} An array with validation results.\r\n         */\r\n        validate: function () {\r\n            return this.elems.map('validate');\r\n        },\r\n\r\n        /**\r\n         * Checks if all fields are valid.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function () {\r\n            return _.every(this.validate(), 'valid');\r\n        },\r\n\r\n        /**\r\n         * Counts total errors amount across all fields.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countErrors: function () {\r\n            var errorsCount = this.elems.filter('error').length;\r\n\r\n            this.errorsCount = errorsCount;\r\n\r\n            return errorsCount;\r\n        },\r\n\r\n        /**\r\n         * Returns difference between current data and its'\r\n         * initial state, retrieved from the records collection.\r\n         *\r\n         * @returns {Object} Object with changes descriptions.\r\n         */\r\n        checkChanges: function () {\r\n            var savedData   = this.getSavedData(),\r\n                data        = this.normalizeData(this.getData());\r\n\r\n            return utils.compare(savedData, data);\r\n        },\r\n\r\n        /**\r\n         * Updates 'fields' array filling it with available editors\r\n         * or with column instances if associated field is not present.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        updateFields: function () {\r\n            var fields;\r\n\r\n            fields = this.columns().elems.map(function (column) {\r\n                return this.getChild(column.index) || column;\r\n            }, this);\r\n\r\n            this.fields(fields);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates state of a 'hasChanges' property.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var diff = this.checkChanges(),\r\n                changed = {};\r\n\r\n            this.hasChanges = !diff.equal;\r\n            changed[this.index] = this.data;\r\n            this.editor().set('changed', [changed]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided column is an actions column.\r\n         *\r\n         * @param {Column} column - Column to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionsColumn: function (column) {\r\n            return column.dataType === 'actions';\r\n        },\r\n\r\n        /**\r\n         * Listener of columns provider child array changes.\r\n         *\r\n         * @param {Array} columns - Modified child elements array.\r\n         */\r\n        onColumnsUpdate: function (columns) {\r\n            this.createFields(columns)\r\n                .updateFields();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/chips.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiCollection'\r\n], function (_, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/chips',\r\n            componentType: 'filtersChips'\r\n        },\r\n\r\n        /**\r\n         * Defines if some of components' children has available previews.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasPreviews: function () {\r\n            return this.elems().some(function (elem) {\r\n                return !!elem.previews.length;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Calls clear method on all of its' children.\r\n         *\r\n         * @returns {Chips} Chainable.\r\n         */\r\n        clear: function () {\r\n            _.invoke(this.elems(), 'clear');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/filters.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiCollection',\r\n    'mage/translate',\r\n    'jquery'\r\n], function (_, utils, layout, Collection, $t, $) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Extracts and formats preview of an element.\r\n     *\r\n     * @param {Object} elem - Element whose preview should be extracted.\r\n     * @returns {Object} Formatted data.\r\n     */\r\n    function extractPreview(elem) {\r\n        return {\r\n            label: elem.label,\r\n            preview: elem.getPreview(),\r\n            elem: elem\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes empty properties from the provided object.\r\n     *\r\n     * @param {Object} data - Object to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function removeEmpty(data) {\r\n        var result = utils.mapRecursive(data, utils.removeEmptyValues.bind(utils));\r\n\r\n        return utils.mapRecursive(result, function (value) {\r\n            return _.isString(value) ? value.trim() : value;\r\n        });\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/filters',\r\n            stickyTmpl: 'ui/grid/sticky/filters',\r\n            _processed: [],\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            bookmarksProvider: 'ns = ${ $.ns }, componentType = bookmark',\r\n            applied: {\r\n                placeholder: true\r\n            },\r\n            filters: {\r\n                placeholder: true\r\n            },\r\n            templates: {\r\n                filters: {\r\n                    base: {\r\n                        parent: '${ $.$data.filters.name }',\r\n                        name: '${ $.$data.column.index }',\r\n                        provider: '${ $.$data.filters.name }',\r\n                        dataScope: '${ $.$data.column.index }',\r\n                        label: '${ $.$data.column.label }',\r\n                        imports: {\r\n                            visible: '${ $.$data.column.name }:visible'\r\n                        }\r\n                    },\r\n                    text: {\r\n                        component: 'Magento_Ui/js/form/element/abstract',\r\n                        template: 'ui/grid/filters/field'\r\n                    },\r\n                    select: {\r\n                        component: 'Magento_Ui/js/form/element/select',\r\n                        template: 'ui/grid/filters/field',\r\n                        options: '${ JSON.stringify($.$data.column.options) }',\r\n                        caption: ' '\r\n                    },\r\n                    dateRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'date'\r\n                    },\r\n                    datetimeRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'datetime'\r\n                    },\r\n                    textRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'text'\r\n                    }\r\n                }\r\n            },\r\n            chipsConfig: {\r\n                name: '${ $.name }_chips',\r\n                provider: '${ $.chipsConfig.name }',\r\n                component: 'Magento_Ui/js/grid/filters/chips'\r\n            },\r\n            listens: {\r\n                active: 'updatePreviews',\r\n                applied: 'cancel updateActive'\r\n            },\r\n            statefull: {\r\n                applied: true\r\n            },\r\n            exports: {\r\n                applied: '${ $.provider }:params.filters'\r\n            },\r\n            imports: {\r\n                onColumnsUpdate: '${ $.columnsProvider }:elems',\r\n                onBackendError: '${ $.provider }:lastError',\r\n                bookmarksActiveIndex: '${ $.bookmarksProvider }:activeIndex'\r\n            },\r\n            modules: {\r\n                columns: '${ $.columnsProvider }',\r\n                chips: '${ $.chipsConfig.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes filters component.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'updateActive');\r\n\r\n            this._super()\r\n                .initChips()\r\n                .cancel();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    active: [],\r\n                    previews: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes chips component.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initChips: function () {\r\n            layout([this.chipsConfig]);\r\n\r\n            this.chips('insertChild', this.name);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to filters collection.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.on('elems', this.updateActive);\r\n\r\n            this.updateActive();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears filters data.\r\n         *\r\n         * @param {Object} [filter] - If provided, then only specified\r\n         *      filter will be cleared. Otherwise, clears all data.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        clear: function (filter) {\r\n            filter ?\r\n                filter.clear() :\r\n                _.invoke(this.active, 'clear');\r\n\r\n            this.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets filters data to the applied state.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        apply: function () {\r\n            this.set('applied', removeEmpty(this.filters));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets filters to the last applied state.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.set('filters', utils.copy(this.applied));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets provided data to filter components (without applying it).\r\n         *\r\n         * @param {Object} data - Filters data.\r\n         * @param {Boolean} [partial=false] - Flag that defines whether\r\n         *      to completely replace current filters data or to extend it.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            var filters = partial ? this.filters : {};\r\n\r\n            data = utils.extend({}, filters, data);\r\n\r\n            this.set('filters', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a filter associated with the provided column.\r\n         *\r\n         * @param {Column} column - Column component for which to create a filter.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        addFilter: function (column) {\r\n            var index       = column.index,\r\n                processed   = this._processed,\r\n                filter;\r\n\r\n            if (!column.filter || _.contains(processed, index)) {\r\n                return this;\r\n            }\r\n\r\n            filter = this.buildFilter(column);\r\n\r\n            processed.push(index);\r\n\r\n            layout([filter]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates filter component configuration associated with the provided column.\r\n         *\r\n         * @param {Column} column - Column component with a basic filter declaration.\r\n         * @returns {Object} Filters' configuration.\r\n         */\r\n        buildFilter: function (column) {\r\n            var filters = this.templates.filters,\r\n                filter  = column.filter,\r\n                type    = filters[filter.filterType];\r\n\r\n            if (_.isObject(filter) && type) {\r\n                filter = utils.extend({}, type, filter);\r\n            } else if (_.isString(filter)) {\r\n                filter = filters[filter];\r\n            }\r\n\r\n            filter = utils.extend({}, filters.base, filter);\r\n            //Accepting labels as is.\r\n            filter.__disableTmpl = {\r\n                label: 1,\r\n                options: 1\r\n            };\r\n\r\n            filter = utils.template(filter, {\r\n                filters: this,\r\n                column: column\r\n            }, true, true);\r\n\r\n            filter.__disableTmpl = {\r\n                label: true\r\n            };\r\n\r\n            return filter;\r\n        },\r\n\r\n        /**\r\n         * Returns an array of range filters.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getRanges: function () {\r\n            return this.elems.filter(function (filter) {\r\n                return filter.isRange;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns an array of non-range filters.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPlain: function () {\r\n            return this.elems.filter(function (filter) {\r\n                return !filter.isRange;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Tells wether specified filter should be visible.\r\n         *\r\n         * @param {Object} filter\r\n         * @returns {Boolean}\r\n         */\r\n        isFilterVisible: function (filter) {\r\n            return filter.visible() || this.isFilterActive(filter);\r\n        },\r\n\r\n        /**\r\n         * Checks if specified filter is active.\r\n         *\r\n         * @param {Object} filter\r\n         * @returns {Boolean}\r\n         */\r\n        isFilterActive: function (filter) {\r\n            return _.contains(this.active, filter);\r\n        },\r\n\r\n        /**\r\n         * Checks if collection has visible filters.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasVisible: function () {\r\n            return this.elems.some(this.isFilterVisible, this);\r\n        },\r\n\r\n        /**\r\n         * Finds filters with a not empty data\r\n         * and sets them to the 'active' filters array.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        updateActive: function () {\r\n            var applied = _.keys(this.applied);\r\n\r\n            this.active = this.elems.filter(function (elem) {\r\n                return _.contains(applied, elem.index);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns number of applied filters.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countActive: function () {\r\n            return this.active.length;\r\n        },\r\n\r\n        /**\r\n         * Extract previews of a specified filters.\r\n         *\r\n         * @param {Array} filters - Filters to be processed.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        updatePreviews: function (filters) {\r\n            var previews = filters.map(extractPreview);\r\n\r\n            this.previews = _.compact(previews);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the columns provider children array changes.\r\n         *\r\n         * @param {Array} columns - Current columns list.\r\n         */\r\n        onColumnsUpdate: function (columns) {\r\n            columns.forEach(this.addFilter, this);\r\n        },\r\n\r\n        /**\r\n         * Provider ajax error listener.\r\n         *\r\n         * @param {bool} isError - Selected index of the filter.\r\n         */\r\n        onBackendError: function (isError) {\r\n            var defaultMessage = 'Something went wrong with processing the default view and we have restored the ' +\r\n                    'filter to its original state.',\r\n                customMessage  = 'Something went wrong with processing current custom view and filters have been ' +\r\n                    'reset to its original state. Please edit filters then click apply.';\r\n\r\n            if (isError) {\r\n                this.clear();\r\n\r\n                $('body').notification('clear')\r\n                    .notification('add', {\r\n                        error: true,\r\n                        message: $.mage.__(this.bookmarksActiveIndex !== 'default' ? customMessage : defaultMessage),\r\n\r\n                        /**\r\n                         * @param {String} message\r\n                         */\r\n                        insertMethod: function (message) {\r\n                            var $wrapper = $('<div/>').html(message);\r\n\r\n                            $('.page-main-actions').after($wrapper);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/range.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mageUtils',\r\n    'Magento_Ui/js/form/components/group',\r\n    'mage/translate'\r\n], function (_, layout, utils, Group, $t) {\r\n    'use strict';\r\n\r\n    return Group.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/elements/group',\r\n            isRange: true,\r\n            templates: {\r\n                base: {\r\n                    parent: '${ $.$data.group.name }',\r\n                    provider: '${ $.$data.group.provider }',\r\n                    template: 'ui/grid/filters/field'\r\n                },\r\n                date: {\r\n                    component: 'Magento_Ui/js/form/element/date',\r\n                    dateFormat: 'MM/dd/YYYY',\r\n                    shiftedValue: 'filter'\r\n                },\r\n                datetime: {\r\n                    component: 'Magento_Ui/js/form/element/date',\r\n                    dateFormat: 'MM/dd/YYYY',\r\n                    shiftedValue: 'filter',\r\n                    options: {\r\n                        showsTime: true\r\n                    }\r\n                },\r\n                text: {\r\n                    component: 'Magento_Ui/js/form/element/abstract'\r\n                },\r\n                ranges: {\r\n                    from: {\r\n                        label: $t('from'),\r\n                        dataScope: 'from'\r\n                    },\r\n                    to: {\r\n                        label: $t('to'),\r\n                        dataScope: 'to'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes range component.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instances of child components.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var children = this.buildChildren();\r\n\r\n            layout(children);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates configuration for the child components.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        buildChildren: function () {\r\n            var templates   = this.templates,\r\n                typeTmpl    = templates[this.rangeType],\r\n                tmpl        = utils.extend({}, templates.base, typeTmpl),\r\n                children    = {};\r\n\r\n            _.each(templates.ranges, function (range, key) {\r\n                children[key] = utils.extend({}, tmpl, range);\r\n            });\r\n\r\n            return utils.template(children, {\r\n                group: this\r\n            }, true, true);\r\n        },\r\n\r\n        /**\r\n         * Clears childrens data.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.elems.each('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if some children has data.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return this.elems.some('hasData');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/elements/ui-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select',\r\n    'jquery',\r\n    'underscore'\r\n], function (Select, $, _) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            bookmarkProvider: 'ns = ${ $.ns }, index = bookmarks',\r\n            filterChipsProvider: 'componentType = filters, ns = ${ $.ns }',\r\n            validationUrl: false,\r\n            loadedOption: [],\r\n            validationLoading: true,\r\n            imports: {\r\n                activeIndex: '${ $.bookmarkProvider }:activeIndex'\r\n            },\r\n            modules: {\r\n                filterChips: '${ $.filterChipsProvider }'\r\n            },\r\n            listens: {\r\n                activeIndex: 'validateInitialValue'\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Initializes UiSelect component.\r\n         *\r\n         * @returns {UiSelect} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.validateInitialValue();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate initial value actually exists\r\n         */\r\n        validateInitialValue: function () {\r\n            if (_.isEmpty(this.value())) {\r\n                this.validationLoading(false);\r\n\r\n                return;\r\n            }\r\n\r\n            $.ajax({\r\n                url: this.validationUrl,\r\n                type: 'GET',\r\n                dataType: 'json',\r\n                context: this,\r\n                data: {\r\n                    ids: this.value()\r\n                },\r\n\r\n                /** @param {Object} response */\r\n                success: function (response) {\r\n                    if (!_.isEmpty(response)) {\r\n                        this.options([]);\r\n                        this.success({\r\n                            options: response\r\n                        });\r\n                    }\r\n                    this.filterChips().updateActive();\r\n                },\r\n\r\n                /** set empty array if error occurs */\r\n                error: function () {\r\n                    this.options([]);\r\n                },\r\n\r\n                /** stop loader */\r\n                complete: function () {\r\n                    this.validationLoading(false);\r\n                    this.setCaption();\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/paging/paging.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiElement'\r\n], function (ko, _, utils, layout, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/paging/paging',\r\n            totalTmpl: 'ui/grid/paging-total',\r\n            totalRecords: 0,\r\n            pages: 1,\r\n            current: 1,\r\n            selectProvider: 'ns = ${ $.ns }, index = ids',\r\n\r\n            sizesConfig: {\r\n                component: 'Magento_Ui/js/grid/paging/sizes',\r\n                name: '${ $.name }_sizes',\r\n                storageConfig: {\r\n                    provider: '${ $.storageConfig.provider }',\r\n                    namespace: '${ $.storageConfig.namespace }'\r\n                }\r\n            },\r\n\r\n            imports: {\r\n                totalSelected: '${ $.selectProvider }:totalSelected',\r\n                totalRecords: '${ $.provider }:data.totalRecords',\r\n                filters: '${ $.provider }:params.filters'\r\n            },\r\n\r\n            exports: {\r\n                pageSize: '${ $.provider }:params.paging.pageSize',\r\n                current: '${ $.provider }:params.paging.current'\r\n            },\r\n\r\n            links: {\r\n                options: '${ $.sizesConfig.name }:options',\r\n                pageSize: '${ $.sizesConfig.name }:value'\r\n            },\r\n\r\n            statefull: {\r\n                pageSize: true,\r\n                current: true\r\n            },\r\n\r\n            listens: {\r\n                'pages': 'onPagesChange',\r\n                'pageSize': 'onPageSizeChange',\r\n                'totalRecords': 'updateCounter',\r\n                '${ $.provider }:params.filters': 'goFirst'\r\n            },\r\n\r\n            modules: {\r\n                sizes: '${ $.sizesConfig.name }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes paging component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSizes()\r\n                .updateCounter();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'totalSelected',\r\n                    'totalRecords',\r\n                    'pageSize',\r\n                    'pages',\r\n                    'current'\r\n                ]);\r\n\r\n            this._current = ko.pureComputed({\r\n                read: ko.getObservable(this, 'current'),\r\n\r\n                /**\r\n                 * Validates page change according to user's input.\r\n                 * Sets current observable to result of validation.\r\n                 * Calls reload method then.\r\n                 */\r\n                write: function (value) {\r\n                    this.setPage(value)\r\n                        ._current.notifySubscribers(this.current);\r\n                },\r\n\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initSizes: function () {\r\n            layout([this.sizesConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets first item index on current page.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getFirstItemIndex: function () {\r\n            return this.pageSize * (this.current - 1) + 1;\r\n        },\r\n\r\n        /**\r\n         * Gets last item index on current page.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getLastItemIndex: function () {\r\n            var lastItem = this.getFirstItemIndex() + this.pageSize - 1;\r\n\r\n            return this.totalRecords < lastItem ? this.totalRecords : lastItem;\r\n        },\r\n\r\n        /**\r\n         * Sets cursor to the provied value.\r\n         *\r\n         * @param {(Number|String)} value - New value of the cursor.\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        setPage: function (value) {\r\n            this.current = this.normalize(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Increments current page value.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        next: function () {\r\n            this.setPage(this.current + 1);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Decrements current page value.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        prev: function () {\r\n            this.setPage(this.current - 1);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Goes to the first page.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        goFirst: function () {\r\n            if (!_.isUndefined(this.filters)) {\r\n                this.current = 1;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Goes to the last page.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        goLast: function () {\r\n            this.current = this.pages;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page is the first one.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isFirst: function () {\r\n            return this.current === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page is the last one.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isLast: function () {\r\n            return this.current === this.pages;\r\n        },\r\n\r\n        /**\r\n         * Updates number of pages.\r\n         */\r\n        updateCounter: function () {\r\n            this.pages = Math.ceil(this.totalRecords / this.pageSize) || 1;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates new page cursor based on the\r\n         * previous and current page size values.\r\n         */\r\n        updateCursor: function () {\r\n            var cursor = this.current - 1,\r\n                size = this.pageSize,\r\n                oldSize = _.isUndefined(this.previousSize) ? this.pageSize : this.previousSize,\r\n                delta = cursor * (oldSize - size) / size;\r\n\r\n            delta = size > oldSize ?\r\n                Math.ceil(delta) :\r\n                Math.floor(delta);\r\n\r\n            cursor += delta + 1;\r\n\r\n            this.previousSize = size;\r\n\r\n            this.setPage(cursor);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to a number and puts\r\n         * it in range between 1 and total amount of pages.\r\n         *\r\n         * @param {(Number|String)} value - Value to be normalized.\r\n         * @returns {Number}\r\n         */\r\n        normalize: function (value) {\r\n            value = +value;\r\n\r\n            if (isNaN(value)) {\r\n                return 1;\r\n            }\r\n\r\n            return utils.inRange(Math.round(value), 1, this.pages);\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the page size.\r\n         */\r\n        onPageSizeChange: function () {\r\n            this.updateCounter()\r\n                .updateCursor();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the pages amount.\r\n         */\r\n        onPagesChange: function () {\r\n            this.updateCursor();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/paging/sizes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiElement'\r\n], function (ko, _, utils, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/paging/sizes',\r\n            minSize: 1,\r\n            maxSize: 999,\r\n            statefull: {\r\n                options: true,\r\n                value: true\r\n            },\r\n            listens: {\r\n                value: 'onValueChange',\r\n                options: 'onSizesChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .updateArray();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'value',\r\n                    'editing',\r\n                    'customVisible',\r\n                    'customValue'\r\n                ])\r\n                .track({\r\n                    optionsArray: []\r\n                });\r\n\r\n            this._value = ko.pureComputed({\r\n                read: ko.getObservable(this, 'value'),\r\n\r\n                /**\r\n                 * Validates input field prior to updating 'value' property.\r\n                 */\r\n                write: function (value) {\r\n                    value = this.normalize(value);\r\n\r\n                    this.value = value;\r\n                    this._value.notifySubscribers(value);\r\n                },\r\n\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of the specified size.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        edit: function (value) {\r\n            this.editing = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Discards changes made to the currently editable size.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardEditing: function () {\r\n            var value = this.editing;\r\n\r\n            if (value) {\r\n                this.updateSize(value, value);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Invokes 'discardEditing' and 'discardCustom' actions.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardAll: function () {\r\n            this.discardEditing()\r\n                .discardCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns value of the first size.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getFirst: function () {\r\n            return this.optionsArray[0].value;\r\n        },\r\n\r\n        /**\r\n         * Returns size which matches specified value.\r\n         *\r\n         * @param {Number} value - Value of the item.\r\n         * @returns {Object|Undefined}\r\n         */\r\n        getSize: function (value) {\r\n            return this.options[value];\r\n        },\r\n\r\n        /**\r\n         * Sets current size to the specified value.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        setSize: function (value) {\r\n            this.value = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a new value to sizes list.\r\n         *\r\n         * @param {Number} value - Value to be added.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        addSize: function (value) {\r\n            var size;\r\n\r\n            if (!this.hasSize(value)) {\r\n                size = this.createSize(value);\r\n\r\n                this.set('options.' + value, size);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes provided value from the sizes list.\r\n         *\r\n         * @param {Number} value - Value to be removed.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        removeSize: function (value) {\r\n            if (!this.hasSize(value)) {\r\n                return this;\r\n            }\r\n\r\n            this.remove('options.' + value);\r\n\r\n            if (this.isSelected(value)) {\r\n                this.setSize(this.getFirst());\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates existing value to the provided one. If new value\r\n         * is not specified, then sizes' '_value' property will be taken.\r\n         *\r\n         * @param {Number} value - Existing value that should be updated.\r\n         * @param {(Number|String)} [newValue=size._value] - New size value.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        updateSize: function (value, newValue) {\r\n            var size = this.getSize(value);\r\n\r\n            if (!size) {\r\n                return this;\r\n            }\r\n\r\n            newValue = newValue || size._value;\r\n\r\n            if (isNaN(+newValue)) {\r\n                this.discardEditing();\r\n\r\n                return this;\r\n            }\r\n\r\n            newValue = this.normalize(newValue);\r\n\r\n            this.remove('options.' + value)\r\n                .addSize(newValue);\r\n\r\n            if (this.isSelected(value)) {\r\n                this.setSize(newValue);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates new editable size instance with the provided value.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Object}\r\n         */\r\n        createSize: function (value) {\r\n            return {\r\n                value: value,\r\n                label: value,\r\n                _value: value,\r\n                editable: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value exists in the sizes list.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSize: function (value) {\r\n            return !!this.getSize(value);\r\n        },\r\n\r\n        /**\r\n         * Hides and clears custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardCustom: function () {\r\n            this.hideCustom()\r\n                .clearCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Shows custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        showCustom: function () {\r\n            this.customVisible = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        hideCustom: function () {\r\n            this.customVisible = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Empties value of the custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        clearCustom: function () {\r\n            this.customValue = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a new size specified in the custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        applyCustom: function () {\r\n            var value = this.customValue;\r\n\r\n            value = this.normalize(value);\r\n\r\n            this.addSize(value)\r\n                .setSize(value)\r\n                .discardCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if custom field is visible.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomVisible: function () {\r\n            return this.customVisible;\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to a number and puts\r\n         * it in range between 'minSize' and 'maxSize' properties.\r\n         *\r\n         * @param {(Number|String)} value - Value to be normalized.\r\n         * @returns {Number}\r\n         */\r\n        normalize: function (value) {\r\n            value = +value;\r\n\r\n            if (isNaN(value)) {\r\n                return this.getFirst();\r\n            }\r\n\r\n            return utils.inRange(Math.round(value), this.minSize, this.maxSize);\r\n        },\r\n\r\n        /**\r\n         * Updates the array of options.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        updateArray: function () {\r\n            var array = _.values(this.options);\r\n\r\n            this.optionsArray = _.sortBy(array, 'value');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is in editing state.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEditing: function (value) {\r\n            return this.editing === value;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is selected.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (value) {\r\n            return this.value === value;\r\n        },\r\n\r\n        /**\r\n         * Listener of the 'value' property changes.\r\n         */\r\n        onValueChange: function () {\r\n            this.discardAll()\r\n                .trigger('close');\r\n        },\r\n\r\n        /**\r\n         * Listener of the 'options' object changes.\r\n         */\r\n        onSizesChange: function () {\r\n            this.editing = false;\r\n\r\n            this.updateArray();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/search/search.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'mageUtils',\r\n    'uiElement',\r\n    'jquery'\r\n], function (_, layout, $t, utils, Element, $) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/search/search',\r\n            placeholder: 'Search by keyword',\r\n            label: $t('Keyword'),\r\n            value: '',\r\n            previews: [],\r\n            chipsProvider: 'componentType = filtersChips, ns = ${ $.ns }',\r\n            statefull: {\r\n                value: true\r\n            },\r\n            tracks: {\r\n                value: true,\r\n                previews: true,\r\n                inputValue: true,\r\n                focused: true\r\n            },\r\n            imports: {\r\n                inputValue: 'value',\r\n                updatePreview: 'value',\r\n                focused: false\r\n            },\r\n            exports: {\r\n                value: '${ $.provider }:params.search'\r\n            },\r\n            modules: {\r\n                chips: '${ $.chipsProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes search component.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        initialize: function () {\r\n            var urlParams = window.location.href.slice(window.location.href.search('[\\&\\?](search=)')).split('&'),\r\n                searchTerm = [];\r\n\r\n            this._super()\r\n                .initChips();\r\n\r\n            if (urlParams[0]) {\r\n                searchTerm = urlParams[0].split('=');\r\n\r\n                if (searchTerm[1]) {\r\n                    this.apply(decodeURIComponent(searchTerm[1]));\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes chips component.\r\n         *\r\n         * @returns {Search} Chainbale.\r\n         */\r\n        initChips: function () {\r\n            this.chips('insertChild', this, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears search.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Click To ScrollTop.\r\n         */\r\n        scrollTo: function ($data) {\r\n            $('html, body').animate({\r\n                scrollTop: 0\r\n            }, 'slow', function () {\r\n                $data.focused = false;\r\n                $data.focused = true;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Resets input value to the last applied state.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.inputValue = this.value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies search query.\r\n         *\r\n         * @param {String} [value=inputValue] - If not specified, then\r\n         *      value of the input field will be used.\r\n         * @returns {Search} Chainable.\r\n         */\r\n        apply: function (value) {\r\n            value = value || this.inputValue;\r\n\r\n            this.value = this.inputValue = value.trim();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates preview data.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        updatePreview: function () {\r\n            var preview = [];\r\n\r\n            if (this.value) {\r\n                preview.push({\r\n                    elem: this,\r\n                    label: this.label,\r\n                    preview: this.value\r\n                });\r\n            }\r\n\r\n            this.previews = preview;\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n"}
}});
